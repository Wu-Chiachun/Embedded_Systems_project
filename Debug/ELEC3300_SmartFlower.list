
ELEC3300_SmartFlower.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005b38  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000cc0  08005d20  08005d20  00015d20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080069e0  080069e0  000200a4  2**0
                  CONTENTS
  4 .ARM          00000000  080069e0  080069e0  000200a4  2**0
                  CONTENTS
  5 .preinit_array 00000000  080069e0  080069e0  000200a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080069e0  080069e0  000169e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080069e4  080069e4  000169e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a4  20000000  080069e8  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000144  200000a4  08006a8c  000200a4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001e8  08006a8c  000201e8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f4a8  00000000  00000000  000200cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a78  00000000  00000000  0002f575  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001008  00000000  00000000  00031ff0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000eb0  00000000  00000000  00032ff8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000419f  00000000  00000000  00033ea8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012c29  00000000  00000000  00038047  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a3745  00000000  00000000  0004ac70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ee3b5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004744  00000000  00000000  000ee408  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	200000a4 	.word	0x200000a4
 8000204:	00000000 	.word	0x00000000
 8000208:	08005d08 	.word	0x08005d08

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	200000a8 	.word	0x200000a8
 8000224:	08005d08 	.word	0x08005d08

08000228 <__aeabi_drsub>:
 8000228:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800022c:	e002      	b.n	8000234 <__adddf3>
 800022e:	bf00      	nop

08000230 <__aeabi_dsub>:
 8000230:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000234 <__adddf3>:
 8000234:	b530      	push	{r4, r5, lr}
 8000236:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800023a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800023e:	ea94 0f05 	teq	r4, r5
 8000242:	bf08      	it	eq
 8000244:	ea90 0f02 	teqeq	r0, r2
 8000248:	bf1f      	itttt	ne
 800024a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800024e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000252:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000256:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800025a:	f000 80e2 	beq.w	8000422 <__adddf3+0x1ee>
 800025e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000262:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000266:	bfb8      	it	lt
 8000268:	426d      	neglt	r5, r5
 800026a:	dd0c      	ble.n	8000286 <__adddf3+0x52>
 800026c:	442c      	add	r4, r5
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	ea82 0000 	eor.w	r0, r2, r0
 800027a:	ea83 0101 	eor.w	r1, r3, r1
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	2d36      	cmp	r5, #54	; 0x36
 8000288:	bf88      	it	hi
 800028a:	bd30      	pophi	{r4, r5, pc}
 800028c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000290:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000294:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000298:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800029c:	d002      	beq.n	80002a4 <__adddf3+0x70>
 800029e:	4240      	negs	r0, r0
 80002a0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002a4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002a8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002ac:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b0:	d002      	beq.n	80002b8 <__adddf3+0x84>
 80002b2:	4252      	negs	r2, r2
 80002b4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002b8:	ea94 0f05 	teq	r4, r5
 80002bc:	f000 80a7 	beq.w	800040e <__adddf3+0x1da>
 80002c0:	f1a4 0401 	sub.w	r4, r4, #1
 80002c4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002c8:	db0d      	blt.n	80002e6 <__adddf3+0xb2>
 80002ca:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ce:	fa22 f205 	lsr.w	r2, r2, r5
 80002d2:	1880      	adds	r0, r0, r2
 80002d4:	f141 0100 	adc.w	r1, r1, #0
 80002d8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002dc:	1880      	adds	r0, r0, r2
 80002de:	fa43 f305 	asr.w	r3, r3, r5
 80002e2:	4159      	adcs	r1, r3
 80002e4:	e00e      	b.n	8000304 <__adddf3+0xd0>
 80002e6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ea:	f10e 0e20 	add.w	lr, lr, #32
 80002ee:	2a01      	cmp	r2, #1
 80002f0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002f4:	bf28      	it	cs
 80002f6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002fa:	fa43 f305 	asr.w	r3, r3, r5
 80002fe:	18c0      	adds	r0, r0, r3
 8000300:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000304:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000308:	d507      	bpl.n	800031a <__adddf3+0xe6>
 800030a:	f04f 0e00 	mov.w	lr, #0
 800030e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000312:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000316:	eb6e 0101 	sbc.w	r1, lr, r1
 800031a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800031e:	d31b      	bcc.n	8000358 <__adddf3+0x124>
 8000320:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000324:	d30c      	bcc.n	8000340 <__adddf3+0x10c>
 8000326:	0849      	lsrs	r1, r1, #1
 8000328:	ea5f 0030 	movs.w	r0, r0, rrx
 800032c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000330:	f104 0401 	add.w	r4, r4, #1
 8000334:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000338:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800033c:	f080 809a 	bcs.w	8000474 <__adddf3+0x240>
 8000340:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000344:	bf08      	it	eq
 8000346:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800034a:	f150 0000 	adcs.w	r0, r0, #0
 800034e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000352:	ea41 0105 	orr.w	r1, r1, r5
 8000356:	bd30      	pop	{r4, r5, pc}
 8000358:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800035c:	4140      	adcs	r0, r0
 800035e:	eb41 0101 	adc.w	r1, r1, r1
 8000362:	3c01      	subs	r4, #1
 8000364:	bf28      	it	cs
 8000366:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800036a:	d2e9      	bcs.n	8000340 <__adddf3+0x10c>
 800036c:	f091 0f00 	teq	r1, #0
 8000370:	bf04      	itt	eq
 8000372:	4601      	moveq	r1, r0
 8000374:	2000      	moveq	r0, #0
 8000376:	fab1 f381 	clz	r3, r1
 800037a:	bf08      	it	eq
 800037c:	3320      	addeq	r3, #32
 800037e:	f1a3 030b 	sub.w	r3, r3, #11
 8000382:	f1b3 0220 	subs.w	r2, r3, #32
 8000386:	da0c      	bge.n	80003a2 <__adddf3+0x16e>
 8000388:	320c      	adds	r2, #12
 800038a:	dd08      	ble.n	800039e <__adddf3+0x16a>
 800038c:	f102 0c14 	add.w	ip, r2, #20
 8000390:	f1c2 020c 	rsb	r2, r2, #12
 8000394:	fa01 f00c 	lsl.w	r0, r1, ip
 8000398:	fa21 f102 	lsr.w	r1, r1, r2
 800039c:	e00c      	b.n	80003b8 <__adddf3+0x184>
 800039e:	f102 0214 	add.w	r2, r2, #20
 80003a2:	bfd8      	it	le
 80003a4:	f1c2 0c20 	rsble	ip, r2, #32
 80003a8:	fa01 f102 	lsl.w	r1, r1, r2
 80003ac:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b0:	bfdc      	itt	le
 80003b2:	ea41 010c 	orrle.w	r1, r1, ip
 80003b6:	4090      	lslle	r0, r2
 80003b8:	1ae4      	subs	r4, r4, r3
 80003ba:	bfa2      	ittt	ge
 80003bc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c0:	4329      	orrge	r1, r5
 80003c2:	bd30      	popge	{r4, r5, pc}
 80003c4:	ea6f 0404 	mvn.w	r4, r4
 80003c8:	3c1f      	subs	r4, #31
 80003ca:	da1c      	bge.n	8000406 <__adddf3+0x1d2>
 80003cc:	340c      	adds	r4, #12
 80003ce:	dc0e      	bgt.n	80003ee <__adddf3+0x1ba>
 80003d0:	f104 0414 	add.w	r4, r4, #20
 80003d4:	f1c4 0220 	rsb	r2, r4, #32
 80003d8:	fa20 f004 	lsr.w	r0, r0, r4
 80003dc:	fa01 f302 	lsl.w	r3, r1, r2
 80003e0:	ea40 0003 	orr.w	r0, r0, r3
 80003e4:	fa21 f304 	lsr.w	r3, r1, r4
 80003e8:	ea45 0103 	orr.w	r1, r5, r3
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f1c4 040c 	rsb	r4, r4, #12
 80003f2:	f1c4 0220 	rsb	r2, r4, #32
 80003f6:	fa20 f002 	lsr.w	r0, r0, r2
 80003fa:	fa01 f304 	lsl.w	r3, r1, r4
 80003fe:	ea40 0003 	orr.w	r0, r0, r3
 8000402:	4629      	mov	r1, r5
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	fa21 f004 	lsr.w	r0, r1, r4
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	f094 0f00 	teq	r4, #0
 8000412:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000416:	bf06      	itte	eq
 8000418:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800041c:	3401      	addeq	r4, #1
 800041e:	3d01      	subne	r5, #1
 8000420:	e74e      	b.n	80002c0 <__adddf3+0x8c>
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf18      	it	ne
 8000428:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800042c:	d029      	beq.n	8000482 <__adddf3+0x24e>
 800042e:	ea94 0f05 	teq	r4, r5
 8000432:	bf08      	it	eq
 8000434:	ea90 0f02 	teqeq	r0, r2
 8000438:	d005      	beq.n	8000446 <__adddf3+0x212>
 800043a:	ea54 0c00 	orrs.w	ip, r4, r0
 800043e:	bf04      	itt	eq
 8000440:	4619      	moveq	r1, r3
 8000442:	4610      	moveq	r0, r2
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	ea91 0f03 	teq	r1, r3
 800044a:	bf1e      	ittt	ne
 800044c:	2100      	movne	r1, #0
 800044e:	2000      	movne	r0, #0
 8000450:	bd30      	popne	{r4, r5, pc}
 8000452:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000456:	d105      	bne.n	8000464 <__adddf3+0x230>
 8000458:	0040      	lsls	r0, r0, #1
 800045a:	4149      	adcs	r1, r1
 800045c:	bf28      	it	cs
 800045e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000462:	bd30      	pop	{r4, r5, pc}
 8000464:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000468:	bf3c      	itt	cc
 800046a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800046e:	bd30      	popcc	{r4, r5, pc}
 8000470:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000474:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000478:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800047c:	f04f 0000 	mov.w	r0, #0
 8000480:	bd30      	pop	{r4, r5, pc}
 8000482:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000486:	bf1a      	itte	ne
 8000488:	4619      	movne	r1, r3
 800048a:	4610      	movne	r0, r2
 800048c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000490:	bf1c      	itt	ne
 8000492:	460b      	movne	r3, r1
 8000494:	4602      	movne	r2, r0
 8000496:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800049a:	bf06      	itte	eq
 800049c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a0:	ea91 0f03 	teqeq	r1, r3
 80004a4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004a8:	bd30      	pop	{r4, r5, pc}
 80004aa:	bf00      	nop

080004ac <__aeabi_ui2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c0:	f04f 0500 	mov.w	r5, #0
 80004c4:	f04f 0100 	mov.w	r1, #0
 80004c8:	e750      	b.n	800036c <__adddf3+0x138>
 80004ca:	bf00      	nop

080004cc <__aeabi_i2d>:
 80004cc:	f090 0f00 	teq	r0, #0
 80004d0:	bf04      	itt	eq
 80004d2:	2100      	moveq	r1, #0
 80004d4:	4770      	bxeq	lr
 80004d6:	b530      	push	{r4, r5, lr}
 80004d8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004dc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004e4:	bf48      	it	mi
 80004e6:	4240      	negmi	r0, r0
 80004e8:	f04f 0100 	mov.w	r1, #0
 80004ec:	e73e      	b.n	800036c <__adddf3+0x138>
 80004ee:	bf00      	nop

080004f0 <__aeabi_f2d>:
 80004f0:	0042      	lsls	r2, r0, #1
 80004f2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004f6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004fa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004fe:	bf1f      	itttt	ne
 8000500:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000504:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000508:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800050c:	4770      	bxne	lr
 800050e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000512:	bf08      	it	eq
 8000514:	4770      	bxeq	lr
 8000516:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800051a:	bf04      	itt	eq
 800051c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000520:	4770      	bxeq	lr
 8000522:	b530      	push	{r4, r5, lr}
 8000524:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800052c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000530:	e71c      	b.n	800036c <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_ul2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f04f 0500 	mov.w	r5, #0
 8000542:	e00a      	b.n	800055a <__aeabi_l2d+0x16>

08000544 <__aeabi_l2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000552:	d502      	bpl.n	800055a <__aeabi_l2d+0x16>
 8000554:	4240      	negs	r0, r0
 8000556:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800055a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800055e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000562:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000566:	f43f aed8 	beq.w	800031a <__adddf3+0xe6>
 800056a:	f04f 0203 	mov.w	r2, #3
 800056e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000572:	bf18      	it	ne
 8000574:	3203      	addne	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000582:	f1c2 0320 	rsb	r3, r2, #32
 8000586:	fa00 fc03 	lsl.w	ip, r0, r3
 800058a:	fa20 f002 	lsr.w	r0, r0, r2
 800058e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000592:	ea40 000e 	orr.w	r0, r0, lr
 8000596:	fa21 f102 	lsr.w	r1, r1, r2
 800059a:	4414      	add	r4, r2
 800059c:	e6bd      	b.n	800031a <__adddf3+0xe6>
 800059e:	bf00      	nop

080005a0 <__aeabi_dmul>:
 80005a0:	b570      	push	{r4, r5, r6, lr}
 80005a2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005a6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005aa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005ae:	bf1d      	ittte	ne
 80005b0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005b4:	ea94 0f0c 	teqne	r4, ip
 80005b8:	ea95 0f0c 	teqne	r5, ip
 80005bc:	f000 f8de 	bleq	800077c <__aeabi_dmul+0x1dc>
 80005c0:	442c      	add	r4, r5
 80005c2:	ea81 0603 	eor.w	r6, r1, r3
 80005c6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ca:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ce:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005d2:	bf18      	it	ne
 80005d4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005e0:	d038      	beq.n	8000654 <__aeabi_dmul+0xb4>
 80005e2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ee:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005f2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005f6:	f04f 0600 	mov.w	r6, #0
 80005fa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005fe:	f09c 0f00 	teq	ip, #0
 8000602:	bf18      	it	ne
 8000604:	f04e 0e01 	orrne.w	lr, lr, #1
 8000608:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800060c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000610:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000614:	d204      	bcs.n	8000620 <__aeabi_dmul+0x80>
 8000616:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800061a:	416d      	adcs	r5, r5
 800061c:	eb46 0606 	adc.w	r6, r6, r6
 8000620:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000624:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000628:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800062c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000630:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000634:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000638:	bf88      	it	hi
 800063a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800063e:	d81e      	bhi.n	800067e <__aeabi_dmul+0xde>
 8000640:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000644:	bf08      	it	eq
 8000646:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800064a:	f150 0000 	adcs.w	r0, r0, #0
 800064e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000652:	bd70      	pop	{r4, r5, r6, pc}
 8000654:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000658:	ea46 0101 	orr.w	r1, r6, r1
 800065c:	ea40 0002 	orr.w	r0, r0, r2
 8000660:	ea81 0103 	eor.w	r1, r1, r3
 8000664:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000668:	bfc2      	ittt	gt
 800066a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800066e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000672:	bd70      	popgt	{r4, r5, r6, pc}
 8000674:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000678:	f04f 0e00 	mov.w	lr, #0
 800067c:	3c01      	subs	r4, #1
 800067e:	f300 80ab 	bgt.w	80007d8 <__aeabi_dmul+0x238>
 8000682:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000686:	bfde      	ittt	le
 8000688:	2000      	movle	r0, #0
 800068a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800068e:	bd70      	pople	{r4, r5, r6, pc}
 8000690:	f1c4 0400 	rsb	r4, r4, #0
 8000694:	3c20      	subs	r4, #32
 8000696:	da35      	bge.n	8000704 <__aeabi_dmul+0x164>
 8000698:	340c      	adds	r4, #12
 800069a:	dc1b      	bgt.n	80006d4 <__aeabi_dmul+0x134>
 800069c:	f104 0414 	add.w	r4, r4, #20
 80006a0:	f1c4 0520 	rsb	r5, r4, #32
 80006a4:	fa00 f305 	lsl.w	r3, r0, r5
 80006a8:	fa20 f004 	lsr.w	r0, r0, r4
 80006ac:	fa01 f205 	lsl.w	r2, r1, r5
 80006b0:	ea40 0002 	orr.w	r0, r0, r2
 80006b4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006b8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006bc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c0:	fa21 f604 	lsr.w	r6, r1, r4
 80006c4:	eb42 0106 	adc.w	r1, r2, r6
 80006c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006cc:	bf08      	it	eq
 80006ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006d2:	bd70      	pop	{r4, r5, r6, pc}
 80006d4:	f1c4 040c 	rsb	r4, r4, #12
 80006d8:	f1c4 0520 	rsb	r5, r4, #32
 80006dc:	fa00 f304 	lsl.w	r3, r0, r4
 80006e0:	fa20 f005 	lsr.w	r0, r0, r5
 80006e4:	fa01 f204 	lsl.w	r2, r1, r4
 80006e8:	ea40 0002 	orr.w	r0, r0, r2
 80006ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006f4:	f141 0100 	adc.w	r1, r1, #0
 80006f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006fc:	bf08      	it	eq
 80006fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	f1c4 0520 	rsb	r5, r4, #32
 8000708:	fa00 f205 	lsl.w	r2, r0, r5
 800070c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000710:	fa20 f304 	lsr.w	r3, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea43 0302 	orr.w	r3, r3, r2
 800071c:	fa21 f004 	lsr.w	r0, r1, r4
 8000720:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000724:	fa21 f204 	lsr.w	r2, r1, r4
 8000728:	ea20 0002 	bic.w	r0, r0, r2
 800072c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f094 0f00 	teq	r4, #0
 8000740:	d10f      	bne.n	8000762 <__aeabi_dmul+0x1c2>
 8000742:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000746:	0040      	lsls	r0, r0, #1
 8000748:	eb41 0101 	adc.w	r1, r1, r1
 800074c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000750:	bf08      	it	eq
 8000752:	3c01      	subeq	r4, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1a6>
 8000756:	ea41 0106 	orr.w	r1, r1, r6
 800075a:	f095 0f00 	teq	r5, #0
 800075e:	bf18      	it	ne
 8000760:	4770      	bxne	lr
 8000762:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000766:	0052      	lsls	r2, r2, #1
 8000768:	eb43 0303 	adc.w	r3, r3, r3
 800076c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000770:	bf08      	it	eq
 8000772:	3d01      	subeq	r5, #1
 8000774:	d0f7      	beq.n	8000766 <__aeabi_dmul+0x1c6>
 8000776:	ea43 0306 	orr.w	r3, r3, r6
 800077a:	4770      	bx	lr
 800077c:	ea94 0f0c 	teq	r4, ip
 8000780:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000784:	bf18      	it	ne
 8000786:	ea95 0f0c 	teqne	r5, ip
 800078a:	d00c      	beq.n	80007a6 <__aeabi_dmul+0x206>
 800078c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000790:	bf18      	it	ne
 8000792:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000796:	d1d1      	bne.n	800073c <__aeabi_dmul+0x19c>
 8000798:	ea81 0103 	eor.w	r1, r1, r3
 800079c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a0:	f04f 0000 	mov.w	r0, #0
 80007a4:	bd70      	pop	{r4, r5, r6, pc}
 80007a6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007aa:	bf06      	itte	eq
 80007ac:	4610      	moveq	r0, r2
 80007ae:	4619      	moveq	r1, r3
 80007b0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007b4:	d019      	beq.n	80007ea <__aeabi_dmul+0x24a>
 80007b6:	ea94 0f0c 	teq	r4, ip
 80007ba:	d102      	bne.n	80007c2 <__aeabi_dmul+0x222>
 80007bc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c0:	d113      	bne.n	80007ea <__aeabi_dmul+0x24a>
 80007c2:	ea95 0f0c 	teq	r5, ip
 80007c6:	d105      	bne.n	80007d4 <__aeabi_dmul+0x234>
 80007c8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007cc:	bf1c      	itt	ne
 80007ce:	4610      	movne	r0, r2
 80007d0:	4619      	movne	r1, r3
 80007d2:	d10a      	bne.n	80007ea <__aeabi_dmul+0x24a>
 80007d4:	ea81 0103 	eor.w	r1, r1, r3
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007e4:	f04f 0000 	mov.w	r0, #0
 80007e8:	bd70      	pop	{r4, r5, r6, pc}
 80007ea:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ee:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007f2:	bd70      	pop	{r4, r5, r6, pc}

080007f4 <__aeabi_ddiv>:
 80007f4:	b570      	push	{r4, r5, r6, lr}
 80007f6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007fa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007fe:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000802:	bf1d      	ittte	ne
 8000804:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000808:	ea94 0f0c 	teqne	r4, ip
 800080c:	ea95 0f0c 	teqne	r5, ip
 8000810:	f000 f8a7 	bleq	8000962 <__aeabi_ddiv+0x16e>
 8000814:	eba4 0405 	sub.w	r4, r4, r5
 8000818:	ea81 0e03 	eor.w	lr, r1, r3
 800081c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000820:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000824:	f000 8088 	beq.w	8000938 <__aeabi_ddiv+0x144>
 8000828:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800082c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000830:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000834:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000838:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800083c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000840:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000844:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000848:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800084c:	429d      	cmp	r5, r3
 800084e:	bf08      	it	eq
 8000850:	4296      	cmpeq	r6, r2
 8000852:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000856:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800085a:	d202      	bcs.n	8000862 <__aeabi_ddiv+0x6e>
 800085c:	085b      	lsrs	r3, r3, #1
 800085e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000862:	1ab6      	subs	r6, r6, r2
 8000864:	eb65 0503 	sbc.w	r5, r5, r3
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000872:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 000c 	orrcs.w	r0, r0, ip
 8000888:	085b      	lsrs	r3, r3, #1
 800088a:	ea4f 0232 	mov.w	r2, r2, rrx
 800088e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000892:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000896:	bf22      	ittt	cs
 8000898:	1ab6      	subcs	r6, r6, r2
 800089a:	4675      	movcs	r5, lr
 800089c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a0:	085b      	lsrs	r3, r3, #1
 80008a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ae:	bf22      	ittt	cs
 80008b0:	1ab6      	subcs	r6, r6, r2
 80008b2:	4675      	movcs	r5, lr
 80008b4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008d4:	d018      	beq.n	8000908 <__aeabi_ddiv+0x114>
 80008d6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008da:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008de:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008e2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008e6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ea:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ee:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008f2:	d1c0      	bne.n	8000876 <__aeabi_ddiv+0x82>
 80008f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008f8:	d10b      	bne.n	8000912 <__aeabi_ddiv+0x11e>
 80008fa:	ea41 0100 	orr.w	r1, r1, r0
 80008fe:	f04f 0000 	mov.w	r0, #0
 8000902:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000906:	e7b6      	b.n	8000876 <__aeabi_ddiv+0x82>
 8000908:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800090c:	bf04      	itt	eq
 800090e:	4301      	orreq	r1, r0
 8000910:	2000      	moveq	r0, #0
 8000912:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000916:	bf88      	it	hi
 8000918:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800091c:	f63f aeaf 	bhi.w	800067e <__aeabi_dmul+0xde>
 8000920:	ebb5 0c03 	subs.w	ip, r5, r3
 8000924:	bf04      	itt	eq
 8000926:	ebb6 0c02 	subseq.w	ip, r6, r2
 800092a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800092e:	f150 0000 	adcs.w	r0, r0, #0
 8000932:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000936:	bd70      	pop	{r4, r5, r6, pc}
 8000938:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800093c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000940:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000944:	bfc2      	ittt	gt
 8000946:	ebd4 050c 	rsbsgt	r5, r4, ip
 800094a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800094e:	bd70      	popgt	{r4, r5, r6, pc}
 8000950:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000954:	f04f 0e00 	mov.w	lr, #0
 8000958:	3c01      	subs	r4, #1
 800095a:	e690      	b.n	800067e <__aeabi_dmul+0xde>
 800095c:	ea45 0e06 	orr.w	lr, r5, r6
 8000960:	e68d      	b.n	800067e <__aeabi_dmul+0xde>
 8000962:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000966:	ea94 0f0c 	teq	r4, ip
 800096a:	bf08      	it	eq
 800096c:	ea95 0f0c 	teqeq	r5, ip
 8000970:	f43f af3b 	beq.w	80007ea <__aeabi_dmul+0x24a>
 8000974:	ea94 0f0c 	teq	r4, ip
 8000978:	d10a      	bne.n	8000990 <__aeabi_ddiv+0x19c>
 800097a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800097e:	f47f af34 	bne.w	80007ea <__aeabi_dmul+0x24a>
 8000982:	ea95 0f0c 	teq	r5, ip
 8000986:	f47f af25 	bne.w	80007d4 <__aeabi_dmul+0x234>
 800098a:	4610      	mov	r0, r2
 800098c:	4619      	mov	r1, r3
 800098e:	e72c      	b.n	80007ea <__aeabi_dmul+0x24a>
 8000990:	ea95 0f0c 	teq	r5, ip
 8000994:	d106      	bne.n	80009a4 <__aeabi_ddiv+0x1b0>
 8000996:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800099a:	f43f aefd 	beq.w	8000798 <__aeabi_dmul+0x1f8>
 800099e:	4610      	mov	r0, r2
 80009a0:	4619      	mov	r1, r3
 80009a2:	e722      	b.n	80007ea <__aeabi_dmul+0x24a>
 80009a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009a8:	bf18      	it	ne
 80009aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009ae:	f47f aec5 	bne.w	800073c <__aeabi_dmul+0x19c>
 80009b2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009b6:	f47f af0d 	bne.w	80007d4 <__aeabi_dmul+0x234>
 80009ba:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009be:	f47f aeeb 	bne.w	8000798 <__aeabi_dmul+0x1f8>
 80009c2:	e712      	b.n	80007ea <__aeabi_dmul+0x24a>

080009c4 <__aeabi_d2iz>:
 80009c4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009c8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80009cc:	d215      	bcs.n	80009fa <__aeabi_d2iz+0x36>
 80009ce:	d511      	bpl.n	80009f4 <__aeabi_d2iz+0x30>
 80009d0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80009d4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009d8:	d912      	bls.n	8000a00 <__aeabi_d2iz+0x3c>
 80009da:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009de:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009e2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009e6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80009ea:	fa23 f002 	lsr.w	r0, r3, r2
 80009ee:	bf18      	it	ne
 80009f0:	4240      	negne	r0, r0
 80009f2:	4770      	bx	lr
 80009f4:	f04f 0000 	mov.w	r0, #0
 80009f8:	4770      	bx	lr
 80009fa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009fe:	d105      	bne.n	8000a0c <__aeabi_d2iz+0x48>
 8000a00:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a04:	bf08      	it	eq
 8000a06:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a0a:	4770      	bx	lr
 8000a0c:	f04f 0000 	mov.w	r0, #0
 8000a10:	4770      	bx	lr
 8000a12:	bf00      	nop

08000a14 <__aeabi_d2uiz>:
 8000a14:	004a      	lsls	r2, r1, #1
 8000a16:	d211      	bcs.n	8000a3c <__aeabi_d2uiz+0x28>
 8000a18:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a1c:	d211      	bcs.n	8000a42 <__aeabi_d2uiz+0x2e>
 8000a1e:	d50d      	bpl.n	8000a3c <__aeabi_d2uiz+0x28>
 8000a20:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a24:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a28:	d40e      	bmi.n	8000a48 <__aeabi_d2uiz+0x34>
 8000a2a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a2e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a32:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a36:	fa23 f002 	lsr.w	r0, r3, r2
 8000a3a:	4770      	bx	lr
 8000a3c:	f04f 0000 	mov.w	r0, #0
 8000a40:	4770      	bx	lr
 8000a42:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a46:	d102      	bne.n	8000a4e <__aeabi_d2uiz+0x3a>
 8000a48:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a4c:	4770      	bx	lr
 8000a4e:	f04f 0000 	mov.w	r0, #0
 8000a52:	4770      	bx	lr

08000a54 <Delay>:
void		LCD_FillColor           ( uint32_t ulAmout_Point, uint16_t usColor );
uint16_t	LCD_Read_PixelData      ( void );



void Delay ( __IO uint32_t nCount ){  for ( ; nCount != 0; nCount -- );}
 8000a54:	b480      	push	{r7}
 8000a56:	b083      	sub	sp, #12
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
 8000a5c:	e002      	b.n	8000a64 <Delay+0x10>
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	3b01      	subs	r3, #1
 8000a62:	607b      	str	r3, [r7, #4]
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d1f9      	bne.n	8000a5e <Delay+0xa>
 8000a6a:	bf00      	nop
 8000a6c:	bf00      	nop
 8000a6e:	370c      	adds	r7, #12
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bc80      	pop	{r7}
 8000a74:	4770      	bx	lr

08000a76 <LCD_INIT>:

void LCD_INIT ( void )
{
 8000a76:	b580      	push	{r7, lr}
 8000a78:	b082      	sub	sp, #8
 8000a7a:	af02      	add	r7, sp, #8
	LCD_BackLed_Control(ENABLE);      
 8000a7c:	2001      	movs	r0, #1
 8000a7e:	f000 f829 	bl	8000ad4 <LCD_BackLed_Control>
	LCD_Rst();
 8000a82:	f000 f80f 	bl	8000aa4 <LCD_Rst>
	LCD_REG_Config();
 8000a86:	f000 f85f 	bl	8000b48 <LCD_REG_Config>
	LCD_Clear (0, 0, 240, 320, BACKGROUND);
 8000a8a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000a8e:	9300      	str	r3, [sp, #0]
 8000a90:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000a94:	22f0      	movs	r2, #240	; 0xf0
 8000a96:	2100      	movs	r1, #0
 8000a98:	2000      	movs	r0, #0
 8000a9a:	f000 f9e6 	bl	8000e6a <LCD_Clear>
}
 8000a9e:	bf00      	nop
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bd80      	pop	{r7, pc}

08000aa4 <LCD_Rst>:



void LCD_Rst ( void )
{			
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RST_PORT,LCD_RST_PIN,GPIO_PIN_RESET);
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	2102      	movs	r1, #2
 8000aac:	4807      	ldr	r0, [pc, #28]	; (8000acc <LCD_Rst+0x28>)
 8000aae:	f003 f85a 	bl	8003b66 <HAL_GPIO_WritePin>
	Delay ( 0xAFFf<<2 ); 					   
 8000ab2:	4807      	ldr	r0, [pc, #28]	; (8000ad0 <LCD_Rst+0x2c>)
 8000ab4:	f7ff ffce 	bl	8000a54 <Delay>
	HAL_GPIO_WritePin(LCD_RST_PORT,LCD_RST_PIN,GPIO_PIN_SET);
 8000ab8:	2201      	movs	r2, #1
 8000aba:	2102      	movs	r1, #2
 8000abc:	4803      	ldr	r0, [pc, #12]	; (8000acc <LCD_Rst+0x28>)
 8000abe:	f003 f852 	bl	8003b66 <HAL_GPIO_WritePin>
	Delay ( 0xAFFf<<2 ); 	
 8000ac2:	4803      	ldr	r0, [pc, #12]	; (8000ad0 <LCD_Rst+0x2c>)
 8000ac4:	f7ff ffc6 	bl	8000a54 <Delay>
}
 8000ac8:	bf00      	nop
 8000aca:	bd80      	pop	{r7, pc}
 8000acc:	40011800 	.word	0x40011800
 8000ad0:	0002bffc 	.word	0x0002bffc

08000ad4 <LCD_BackLed_Control>:


void LCD_BackLed_Control ( FunctionalState enumState )
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b082      	sub	sp, #8
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	4603      	mov	r3, r0
 8000adc:	71fb      	strb	r3, [r7, #7]
	if ( enumState )
 8000ade:	79fb      	ldrb	r3, [r7, #7]
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d006      	beq.n	8000af2 <LCD_BackLed_Control+0x1e>
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_RESET);	
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000aea:	4807      	ldr	r0, [pc, #28]	; (8000b08 <LCD_BackLed_Control+0x34>)
 8000aec:	f003 f83b 	bl	8003b66 <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_SET);			
}
 8000af0:	e005      	b.n	8000afe <LCD_BackLed_Control+0x2a>
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_SET);			
 8000af2:	2201      	movs	r2, #1
 8000af4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000af8:	4803      	ldr	r0, [pc, #12]	; (8000b08 <LCD_BackLed_Control+0x34>)
 8000afa:	f003 f834 	bl	8003b66 <HAL_GPIO_WritePin>
}
 8000afe:	bf00      	nop
 8000b00:	3708      	adds	r7, #8
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	40011400 	.word	0x40011400

08000b0c <LCD_Write_Cmd>:




void LCD_Write_Cmd ( uint16_t usCmd )
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	b083      	sub	sp, #12
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	4603      	mov	r3, r0
 8000b14:	80fb      	strh	r3, [r7, #6]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 8000b16:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8000b1a:	88fb      	ldrh	r3, [r7, #6]
 8000b1c:	8013      	strh	r3, [r2, #0]
}
 8000b1e:	bf00      	nop
 8000b20:	370c      	adds	r7, #12
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bc80      	pop	{r7}
 8000b26:	4770      	bx	lr

08000b28 <LCD_Write_Data>:




void LCD_Write_Data ( uint16_t usData )
{
 8000b28:	b480      	push	{r7}
 8000b2a:	b083      	sub	sp, #12
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	4603      	mov	r3, r0
 8000b30:	80fb      	strh	r3, [r7, #6]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000b32:	4a04      	ldr	r2, [pc, #16]	; (8000b44 <LCD_Write_Data+0x1c>)
 8000b34:	88fb      	ldrh	r3, [r7, #6]
 8000b36:	8013      	strh	r3, [r2, #0]
}
 8000b38:	bf00      	nop
 8000b3a:	370c      	adds	r7, #12
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bc80      	pop	{r7}
 8000b40:	4770      	bx	lr
 8000b42:	bf00      	nop
 8000b44:	60020000 	.word	0x60020000

08000b48 <LCD_REG_Config>:
	return ( * ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) );	
}


void LCD_REG_Config ( void )
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	af00      	add	r7, sp, #0
	/*  Power control B (CFh)  */
	DEBUG_DELAY  ();
	LCD_Write_Cmd ( 0xCF  );
 8000b4c:	20cf      	movs	r0, #207	; 0xcf
 8000b4e:	f7ff ffdd 	bl	8000b0c <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00  );
 8000b52:	2000      	movs	r0, #0
 8000b54:	f7ff ffe8 	bl	8000b28 <LCD_Write_Data>
	LCD_Write_Data ( 0x81  );
 8000b58:	2081      	movs	r0, #129	; 0x81
 8000b5a:	f7ff ffe5 	bl	8000b28 <LCD_Write_Data>
	LCD_Write_Data ( 0x30  );
 8000b5e:	2030      	movs	r0, #48	; 0x30
 8000b60:	f7ff ffe2 	bl	8000b28 <LCD_Write_Data>
	
	/*  Power on sequence control (EDh) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xED );
 8000b64:	20ed      	movs	r0, #237	; 0xed
 8000b66:	f7ff ffd1 	bl	8000b0c <LCD_Write_Cmd>
	LCD_Write_Data ( 0x64 );
 8000b6a:	2064      	movs	r0, #100	; 0x64
 8000b6c:	f7ff ffdc 	bl	8000b28 <LCD_Write_Data>
	LCD_Write_Data ( 0x03 );
 8000b70:	2003      	movs	r0, #3
 8000b72:	f7ff ffd9 	bl	8000b28 <LCD_Write_Data>
	LCD_Write_Data ( 0x12 );
 8000b76:	2012      	movs	r0, #18
 8000b78:	f7ff ffd6 	bl	8000b28 <LCD_Write_Data>
	LCD_Write_Data ( 0x81 );
 8000b7c:	2081      	movs	r0, #129	; 0x81
 8000b7e:	f7ff ffd3 	bl	8000b28 <LCD_Write_Data>
	
	/*  Driver timing control A (E8h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xE8 );
 8000b82:	20e8      	movs	r0, #232	; 0xe8
 8000b84:	f7ff ffc2 	bl	8000b0c <LCD_Write_Cmd>
	LCD_Write_Data ( 0x85 );
 8000b88:	2085      	movs	r0, #133	; 0x85
 8000b8a:	f7ff ffcd 	bl	8000b28 <LCD_Write_Data>
	LCD_Write_Data ( 0x10 );
 8000b8e:	2010      	movs	r0, #16
 8000b90:	f7ff ffca 	bl	8000b28 <LCD_Write_Data>
	LCD_Write_Data ( 0x78 );
 8000b94:	2078      	movs	r0, #120	; 0x78
 8000b96:	f7ff ffc7 	bl	8000b28 <LCD_Write_Data>
	
	/*  Power control A (CBh) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xCB );
 8000b9a:	20cb      	movs	r0, #203	; 0xcb
 8000b9c:	f7ff ffb6 	bl	8000b0c <LCD_Write_Cmd>
	LCD_Write_Data ( 0x39 );
 8000ba0:	2039      	movs	r0, #57	; 0x39
 8000ba2:	f7ff ffc1 	bl	8000b28 <LCD_Write_Data>
	LCD_Write_Data ( 0x2C );
 8000ba6:	202c      	movs	r0, #44	; 0x2c
 8000ba8:	f7ff ffbe 	bl	8000b28 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8000bac:	2000      	movs	r0, #0
 8000bae:	f7ff ffbb 	bl	8000b28 <LCD_Write_Data>
	LCD_Write_Data ( 0x34 );
 8000bb2:	2034      	movs	r0, #52	; 0x34
 8000bb4:	f7ff ffb8 	bl	8000b28 <LCD_Write_Data>
	LCD_Write_Data ( 0x02 );
 8000bb8:	2002      	movs	r0, #2
 8000bba:	f7ff ffb5 	bl	8000b28 <LCD_Write_Data>
	
	/* Pump ratio control (F7h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xF7 );
 8000bbe:	20f7      	movs	r0, #247	; 0xf7
 8000bc0:	f7ff ffa4 	bl	8000b0c <LCD_Write_Cmd>
	LCD_Write_Data ( 0x20 );
 8000bc4:	2020      	movs	r0, #32
 8000bc6:	f7ff ffaf 	bl	8000b28 <LCD_Write_Data>
	
	/* Driver timing control B */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xEA );
 8000bca:	20ea      	movs	r0, #234	; 0xea
 8000bcc:	f7ff ff9e 	bl	8000b0c <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8000bd0:	2000      	movs	r0, #0
 8000bd2:	f7ff ffa9 	bl	8000b28 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8000bd6:	2000      	movs	r0, #0
 8000bd8:	f7ff ffa6 	bl	8000b28 <LCD_Write_Data>
	
	/* Frame Rate Control (In Normal Mode/Full Colors) (B1h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xB1 );
 8000bdc:	20b1      	movs	r0, #177	; 0xb1
 8000bde:	f7ff ff95 	bl	8000b0c <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8000be2:	2000      	movs	r0, #0
 8000be4:	f7ff ffa0 	bl	8000b28 <LCD_Write_Data>
	LCD_Write_Data ( 0x1B );
 8000be8:	201b      	movs	r0, #27
 8000bea:	f7ff ff9d 	bl	8000b28 <LCD_Write_Data>
	
	/*  Display Function Control (B6h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xB6 );
 8000bee:	20b6      	movs	r0, #182	; 0xb6
 8000bf0:	f7ff ff8c 	bl	8000b0c <LCD_Write_Cmd>
	LCD_Write_Data ( 0x0A );
 8000bf4:	200a      	movs	r0, #10
 8000bf6:	f7ff ff97 	bl	8000b28 <LCD_Write_Data>
	LCD_Write_Data ( 0xA2 );
 8000bfa:	20a2      	movs	r0, #162	; 0xa2
 8000bfc:	f7ff ff94 	bl	8000b28 <LCD_Write_Data>
	
	/* Power Control 1 (C0h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xC0 );
 8000c00:	20c0      	movs	r0, #192	; 0xc0
 8000c02:	f7ff ff83 	bl	8000b0c <LCD_Write_Cmd>
	LCD_Write_Data ( 0x35 );
 8000c06:	2035      	movs	r0, #53	; 0x35
 8000c08:	f7ff ff8e 	bl	8000b28 <LCD_Write_Data>
	
	/* Power Control 2 (C1h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xC1 );
 8000c0c:	20c1      	movs	r0, #193	; 0xc1
 8000c0e:	f7ff ff7d 	bl	8000b0c <LCD_Write_Cmd>
	LCD_Write_Data ( 0x11 );
 8000c12:	2011      	movs	r0, #17
 8000c14:	f7ff ff88 	bl	8000b28 <LCD_Write_Data>
	
	/* VCOM Control 1 (C5h) */
	LCD_Write_Cmd ( 0xC5 );
 8000c18:	20c5      	movs	r0, #197	; 0xc5
 8000c1a:	f7ff ff77 	bl	8000b0c <LCD_Write_Cmd>
	LCD_Write_Data ( 0x45 );
 8000c1e:	2045      	movs	r0, #69	; 0x45
 8000c20:	f7ff ff82 	bl	8000b28 <LCD_Write_Data>
	LCD_Write_Data ( 0x45 );
 8000c24:	2045      	movs	r0, #69	; 0x45
 8000c26:	f7ff ff7f 	bl	8000b28 <LCD_Write_Data>
	
	/*  VCOM Control 2 (C7h)  */
	LCD_Write_Cmd ( 0xC7 );
 8000c2a:	20c7      	movs	r0, #199	; 0xc7
 8000c2c:	f7ff ff6e 	bl	8000b0c <LCD_Write_Cmd>
	LCD_Write_Data ( 0xA2 );
 8000c30:	20a2      	movs	r0, #162	; 0xa2
 8000c32:	f7ff ff79 	bl	8000b28 <LCD_Write_Data>
	
	/* Enable 3G (F2h) */
	LCD_Write_Cmd ( 0xF2 );
 8000c36:	20f2      	movs	r0, #242	; 0xf2
 8000c38:	f7ff ff68 	bl	8000b0c <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8000c3c:	2000      	movs	r0, #0
 8000c3e:	f7ff ff73 	bl	8000b28 <LCD_Write_Data>
	
	/* Gamma Set (26h) */
	LCD_Write_Cmd ( 0x26 );
 8000c42:	2026      	movs	r0, #38	; 0x26
 8000c44:	f7ff ff62 	bl	8000b0c <LCD_Write_Cmd>
	LCD_Write_Data ( 0x01 );
 8000c48:	2001      	movs	r0, #1
 8000c4a:	f7ff ff6d 	bl	8000b28 <LCD_Write_Data>
	DEBUG_DELAY ();
	
	/* Positive Gamma Correction */
	LCD_Write_Cmd ( 0xE0 ); //Set Gamma
 8000c4e:	20e0      	movs	r0, #224	; 0xe0
 8000c50:	f7ff ff5c 	bl	8000b0c <LCD_Write_Cmd>
	LCD_Write_Data ( 0x0F );
 8000c54:	200f      	movs	r0, #15
 8000c56:	f7ff ff67 	bl	8000b28 <LCD_Write_Data>
	LCD_Write_Data ( 0x26 );
 8000c5a:	2026      	movs	r0, #38	; 0x26
 8000c5c:	f7ff ff64 	bl	8000b28 <LCD_Write_Data>
	LCD_Write_Data ( 0x24 );
 8000c60:	2024      	movs	r0, #36	; 0x24
 8000c62:	f7ff ff61 	bl	8000b28 <LCD_Write_Data>
	LCD_Write_Data ( 0x0B );
 8000c66:	200b      	movs	r0, #11
 8000c68:	f7ff ff5e 	bl	8000b28 <LCD_Write_Data>
	LCD_Write_Data ( 0x0E );
 8000c6c:	200e      	movs	r0, #14
 8000c6e:	f7ff ff5b 	bl	8000b28 <LCD_Write_Data>
	LCD_Write_Data ( 0x09 );
 8000c72:	2009      	movs	r0, #9
 8000c74:	f7ff ff58 	bl	8000b28 <LCD_Write_Data>
	LCD_Write_Data ( 0x54 );
 8000c78:	2054      	movs	r0, #84	; 0x54
 8000c7a:	f7ff ff55 	bl	8000b28 <LCD_Write_Data>
	LCD_Write_Data ( 0xA8 );
 8000c7e:	20a8      	movs	r0, #168	; 0xa8
 8000c80:	f7ff ff52 	bl	8000b28 <LCD_Write_Data>
	LCD_Write_Data ( 0x46 );
 8000c84:	2046      	movs	r0, #70	; 0x46
 8000c86:	f7ff ff4f 	bl	8000b28 <LCD_Write_Data>
	LCD_Write_Data ( 0x0C );
 8000c8a:	200c      	movs	r0, #12
 8000c8c:	f7ff ff4c 	bl	8000b28 <LCD_Write_Data>
	LCD_Write_Data ( 0x17 );
 8000c90:	2017      	movs	r0, #23
 8000c92:	f7ff ff49 	bl	8000b28 <LCD_Write_Data>
	LCD_Write_Data ( 0x09 );
 8000c96:	2009      	movs	r0, #9
 8000c98:	f7ff ff46 	bl	8000b28 <LCD_Write_Data>
	LCD_Write_Data ( 0x0F );
 8000c9c:	200f      	movs	r0, #15
 8000c9e:	f7ff ff43 	bl	8000b28 <LCD_Write_Data>
	LCD_Write_Data ( 0x07 );
 8000ca2:	2007      	movs	r0, #7
 8000ca4:	f7ff ff40 	bl	8000b28 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8000ca8:	2000      	movs	r0, #0
 8000caa:	f7ff ff3d 	bl	8000b28 <LCD_Write_Data>
	
	/* Negative Gamma Correction (E1h) */
	LCD_Write_Cmd ( 0XE1 ); //Set Gamma
 8000cae:	20e1      	movs	r0, #225	; 0xe1
 8000cb0:	f7ff ff2c 	bl	8000b0c <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8000cb4:	2000      	movs	r0, #0
 8000cb6:	f7ff ff37 	bl	8000b28 <LCD_Write_Data>
	LCD_Write_Data ( 0x19 );
 8000cba:	2019      	movs	r0, #25
 8000cbc:	f7ff ff34 	bl	8000b28 <LCD_Write_Data>
	LCD_Write_Data ( 0x1B );
 8000cc0:	201b      	movs	r0, #27
 8000cc2:	f7ff ff31 	bl	8000b28 <LCD_Write_Data>
	LCD_Write_Data ( 0x04 );
 8000cc6:	2004      	movs	r0, #4
 8000cc8:	f7ff ff2e 	bl	8000b28 <LCD_Write_Data>
	LCD_Write_Data ( 0x10 );
 8000ccc:	2010      	movs	r0, #16
 8000cce:	f7ff ff2b 	bl	8000b28 <LCD_Write_Data>
	LCD_Write_Data ( 0x07 );
 8000cd2:	2007      	movs	r0, #7
 8000cd4:	f7ff ff28 	bl	8000b28 <LCD_Write_Data>
	LCD_Write_Data ( 0x2A );
 8000cd8:	202a      	movs	r0, #42	; 0x2a
 8000cda:	f7ff ff25 	bl	8000b28 <LCD_Write_Data>
	LCD_Write_Data ( 0x47 );
 8000cde:	2047      	movs	r0, #71	; 0x47
 8000ce0:	f7ff ff22 	bl	8000b28 <LCD_Write_Data>
	LCD_Write_Data ( 0x39 );
 8000ce4:	2039      	movs	r0, #57	; 0x39
 8000ce6:	f7ff ff1f 	bl	8000b28 <LCD_Write_Data>
	LCD_Write_Data ( 0x03 );
 8000cea:	2003      	movs	r0, #3
 8000cec:	f7ff ff1c 	bl	8000b28 <LCD_Write_Data>
	LCD_Write_Data ( 0x06 );
 8000cf0:	2006      	movs	r0, #6
 8000cf2:	f7ff ff19 	bl	8000b28 <LCD_Write_Data>
	LCD_Write_Data ( 0x06 );
 8000cf6:	2006      	movs	r0, #6
 8000cf8:	f7ff ff16 	bl	8000b28 <LCD_Write_Data>
	LCD_Write_Data ( 0x30 );
 8000cfc:	2030      	movs	r0, #48	; 0x30
 8000cfe:	f7ff ff13 	bl	8000b28 <LCD_Write_Data>
	LCD_Write_Data ( 0x38 );
 8000d02:	2038      	movs	r0, #56	; 0x38
 8000d04:	f7ff ff10 	bl	8000b28 <LCD_Write_Data>
	LCD_Write_Data ( 0x0F );
 8000d08:	200f      	movs	r0, #15
 8000d0a:	f7ff ff0d 	bl	8000b28 <LCD_Write_Data>
	
	/* memory access control set */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0x36 ); 	
 8000d0e:	2036      	movs	r0, #54	; 0x36
 8000d10:	f7ff fefc 	bl	8000b0c <LCD_Write_Cmd>
	LCD_Write_Data ( 0xC8 );    
 8000d14:	20c8      	movs	r0, #200	; 0xc8
 8000d16:	f7ff ff07 	bl	8000b28 <LCD_Write_Data>
	DEBUG_DELAY ();
	
	/* column address control set */
	LCD_Write_Cmd ( CMD_Set_COLUMN ); 
 8000d1a:	202a      	movs	r0, #42	; 0x2a
 8000d1c:	f7ff fef6 	bl	8000b0c <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8000d20:	2000      	movs	r0, #0
 8000d22:	f7ff ff01 	bl	8000b28 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8000d26:	2000      	movs	r0, #0
 8000d28:	f7ff fefe 	bl	8000b28 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8000d2c:	2000      	movs	r0, #0
 8000d2e:	f7ff fefb 	bl	8000b28 <LCD_Write_Data>
	LCD_Write_Data ( 0xEF );
 8000d32:	20ef      	movs	r0, #239	; 0xef
 8000d34:	f7ff fef8 	bl	8000b28 <LCD_Write_Data>
	
	/* page address control set */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( CMD_Set_PAGE ); 
 8000d38:	202b      	movs	r0, #43	; 0x2b
 8000d3a:	f7ff fee7 	bl	8000b0c <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8000d3e:	2000      	movs	r0, #0
 8000d40:	f7ff fef2 	bl	8000b28 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8000d44:	2000      	movs	r0, #0
 8000d46:	f7ff feef 	bl	8000b28 <LCD_Write_Data>
	LCD_Write_Data ( 0x01 );
 8000d4a:	2001      	movs	r0, #1
 8000d4c:	f7ff feec 	bl	8000b28 <LCD_Write_Data>
	LCD_Write_Data ( 0x3F );
 8000d50:	203f      	movs	r0, #63	; 0x3f
 8000d52:	f7ff fee9 	bl	8000b28 <LCD_Write_Data>
	
	/*  Pixel Format Set (3Ah)  */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0x3a ); 
 8000d56:	203a      	movs	r0, #58	; 0x3a
 8000d58:	f7ff fed8 	bl	8000b0c <LCD_Write_Cmd>
	LCD_Write_Data ( 0x55 );
 8000d5c:	2055      	movs	r0, #85	; 0x55
 8000d5e:	f7ff fee3 	bl	8000b28 <LCD_Write_Data>
	
	/* Sleep Out (11h)  */
	LCD_Write_Cmd ( 0x11 );	
 8000d62:	2011      	movs	r0, #17
 8000d64:	f7ff fed2 	bl	8000b0c <LCD_Write_Cmd>
	Delay ( 0xAFFf<<2 );
 8000d68:	4803      	ldr	r0, [pc, #12]	; (8000d78 <LCD_REG_Config+0x230>)
 8000d6a:	f7ff fe73 	bl	8000a54 <Delay>
	DEBUG_DELAY ();
	
	/* Display ON (29h) */
	LCD_Write_Cmd ( 0x29 ); 
 8000d6e:	2029      	movs	r0, #41	; 0x29
 8000d70:	f7ff fecc 	bl	8000b0c <LCD_Write_Cmd>
	
	
}
 8000d74:	bf00      	nop
 8000d76:	bd80      	pop	{r7, pc}
 8000d78:	0002bffc 	.word	0x0002bffc

08000d7c <LCD_OpenWindow>:



void LCD_OpenWindow ( uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usWidth, uint16_t usHeight )
{	
 8000d7c:	b590      	push	{r4, r7, lr}
 8000d7e:	b083      	sub	sp, #12
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	4604      	mov	r4, r0
 8000d84:	4608      	mov	r0, r1
 8000d86:	4611      	mov	r1, r2
 8000d88:	461a      	mov	r2, r3
 8000d8a:	4623      	mov	r3, r4
 8000d8c:	80fb      	strh	r3, [r7, #6]
 8000d8e:	4603      	mov	r3, r0
 8000d90:	80bb      	strh	r3, [r7, #4]
 8000d92:	460b      	mov	r3, r1
 8000d94:	807b      	strh	r3, [r7, #2]
 8000d96:	4613      	mov	r3, r2
 8000d98:	803b      	strh	r3, [r7, #0]
	LCD_Write_Cmd ( CMD_Set_COLUMN ); 				
 8000d9a:	202a      	movs	r0, #42	; 0x2a
 8000d9c:	f7ff feb6 	bl	8000b0c <LCD_Write_Cmd>
	LCD_Write_Data ( usCOLUMN >> 8  );	 
 8000da0:	88fb      	ldrh	r3, [r7, #6]
 8000da2:	0a1b      	lsrs	r3, r3, #8
 8000da4:	b29b      	uxth	r3, r3
 8000da6:	4618      	mov	r0, r3
 8000da8:	f7ff febe 	bl	8000b28 <LCD_Write_Data>
	LCD_Write_Data ( usCOLUMN & 0xff  );	 
 8000dac:	88fb      	ldrh	r3, [r7, #6]
 8000dae:	b2db      	uxtb	r3, r3
 8000db0:	b29b      	uxth	r3, r3
 8000db2:	4618      	mov	r0, r3
 8000db4:	f7ff feb8 	bl	8000b28 <LCD_Write_Data>
	LCD_Write_Data ( ( usCOLUMN + usWidth - 1 ) >> 8  );
 8000db8:	88fa      	ldrh	r2, [r7, #6]
 8000dba:	887b      	ldrh	r3, [r7, #2]
 8000dbc:	4413      	add	r3, r2
 8000dbe:	3b01      	subs	r3, #1
 8000dc0:	121b      	asrs	r3, r3, #8
 8000dc2:	b29b      	uxth	r3, r3
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f7ff feaf 	bl	8000b28 <LCD_Write_Data>
	LCD_Write_Data ( ( usCOLUMN + usWidth - 1 ) & 0xff  );
 8000dca:	88fa      	ldrh	r2, [r7, #6]
 8000dcc:	887b      	ldrh	r3, [r7, #2]
 8000dce:	4413      	add	r3, r2
 8000dd0:	b29b      	uxth	r3, r3
 8000dd2:	3b01      	subs	r3, #1
 8000dd4:	b29b      	uxth	r3, r3
 8000dd6:	b2db      	uxtb	r3, r3
 8000dd8:	b29b      	uxth	r3, r3
 8000dda:	4618      	mov	r0, r3
 8000ddc:	f7ff fea4 	bl	8000b28 <LCD_Write_Data>

	LCD_Write_Cmd ( CMD_Set_PAGE ); 			     
 8000de0:	202b      	movs	r0, #43	; 0x2b
 8000de2:	f7ff fe93 	bl	8000b0c <LCD_Write_Cmd>
	LCD_Write_Data ( usPAGE >> 8  );
 8000de6:	88bb      	ldrh	r3, [r7, #4]
 8000de8:	0a1b      	lsrs	r3, r3, #8
 8000dea:	b29b      	uxth	r3, r3
 8000dec:	4618      	mov	r0, r3
 8000dee:	f7ff fe9b 	bl	8000b28 <LCD_Write_Data>
	LCD_Write_Data ( usPAGE & 0xff  );
 8000df2:	88bb      	ldrh	r3, [r7, #4]
 8000df4:	b2db      	uxtb	r3, r3
 8000df6:	b29b      	uxth	r3, r3
 8000df8:	4618      	mov	r0, r3
 8000dfa:	f7ff fe95 	bl	8000b28 <LCD_Write_Data>
	LCD_Write_Data ( ( usPAGE + usHeight - 1 ) >> 8 );
 8000dfe:	88ba      	ldrh	r2, [r7, #4]
 8000e00:	883b      	ldrh	r3, [r7, #0]
 8000e02:	4413      	add	r3, r2
 8000e04:	3b01      	subs	r3, #1
 8000e06:	121b      	asrs	r3, r3, #8
 8000e08:	b29b      	uxth	r3, r3
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	f7ff fe8c 	bl	8000b28 <LCD_Write_Data>
	LCD_Write_Data ( ( usPAGE + usHeight - 1) & 0xff );
 8000e10:	88ba      	ldrh	r2, [r7, #4]
 8000e12:	883b      	ldrh	r3, [r7, #0]
 8000e14:	4413      	add	r3, r2
 8000e16:	b29b      	uxth	r3, r3
 8000e18:	3b01      	subs	r3, #1
 8000e1a:	b29b      	uxth	r3, r3
 8000e1c:	b2db      	uxtb	r3, r3
 8000e1e:	b29b      	uxth	r3, r3
 8000e20:	4618      	mov	r0, r3
 8000e22:	f7ff fe81 	bl	8000b28 <LCD_Write_Data>
	
}
 8000e26:	bf00      	nop
 8000e28:	370c      	adds	r7, #12
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd90      	pop	{r4, r7, pc}

08000e2e <LCD_FillColor>:


void LCD_FillColor ( uint32_t usPoint, uint16_t usColor )
{
 8000e2e:	b580      	push	{r7, lr}
 8000e30:	b084      	sub	sp, #16
 8000e32:	af00      	add	r7, sp, #0
 8000e34:	6078      	str	r0, [r7, #4]
 8000e36:	460b      	mov	r3, r1
 8000e38:	807b      	strh	r3, [r7, #2]
	uint32_t i = 0;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	60fb      	str	r3, [r7, #12]
	
	/* memory write */
	LCD_Write_Cmd ( CMD_SetPixel );	
 8000e3e:	202c      	movs	r0, #44	; 0x2c
 8000e40:	f7ff fe64 	bl	8000b0c <LCD_Write_Cmd>
		
	for ( i = 0; i < usPoint; i ++ )
 8000e44:	2300      	movs	r3, #0
 8000e46:	60fb      	str	r3, [r7, #12]
 8000e48:	e006      	b.n	8000e58 <LCD_FillColor+0x2a>
		LCD_Write_Data ( usColor );
 8000e4a:	887b      	ldrh	r3, [r7, #2]
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	f7ff fe6b 	bl	8000b28 <LCD_Write_Data>
	for ( i = 0; i < usPoint; i ++ )
 8000e52:	68fb      	ldr	r3, [r7, #12]
 8000e54:	3301      	adds	r3, #1
 8000e56:	60fb      	str	r3, [r7, #12]
 8000e58:	68fa      	ldr	r2, [r7, #12]
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	429a      	cmp	r2, r3
 8000e5e:	d3f4      	bcc.n	8000e4a <LCD_FillColor+0x1c>
		
}
 8000e60:	bf00      	nop
 8000e62:	bf00      	nop
 8000e64:	3710      	adds	r7, #16
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}

08000e6a <LCD_Clear>:




void LCD_Clear ( uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usWidth, uint16_t usHeight, uint16_t usColor )
{
 8000e6a:	b590      	push	{r4, r7, lr}
 8000e6c:	b083      	sub	sp, #12
 8000e6e:	af00      	add	r7, sp, #0
 8000e70:	4604      	mov	r4, r0
 8000e72:	4608      	mov	r0, r1
 8000e74:	4611      	mov	r1, r2
 8000e76:	461a      	mov	r2, r3
 8000e78:	4623      	mov	r3, r4
 8000e7a:	80fb      	strh	r3, [r7, #6]
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	80bb      	strh	r3, [r7, #4]
 8000e80:	460b      	mov	r3, r1
 8000e82:	807b      	strh	r3, [r7, #2]
 8000e84:	4613      	mov	r3, r2
 8000e86:	803b      	strh	r3, [r7, #0]
	LCD_OpenWindow ( usCOLUMN, usPAGE, usWidth, usHeight );
 8000e88:	883b      	ldrh	r3, [r7, #0]
 8000e8a:	887a      	ldrh	r2, [r7, #2]
 8000e8c:	88b9      	ldrh	r1, [r7, #4]
 8000e8e:	88f8      	ldrh	r0, [r7, #6]
 8000e90:	f7ff ff74 	bl	8000d7c <LCD_OpenWindow>

	LCD_FillColor ( usWidth * usHeight, usColor );		
 8000e94:	887b      	ldrh	r3, [r7, #2]
 8000e96:	883a      	ldrh	r2, [r7, #0]
 8000e98:	fb02 f303 	mul.w	r3, r2, r3
 8000e9c:	461a      	mov	r2, r3
 8000e9e:	8b3b      	ldrh	r3, [r7, #24]
 8000ea0:	4619      	mov	r1, r3
 8000ea2:	4610      	mov	r0, r2
 8000ea4:	f7ff ffc3 	bl	8000e2e <LCD_FillColor>
	
}
 8000ea8:	bf00      	nop
 8000eaa:	370c      	adds	r7, #12
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bd90      	pop	{r4, r7, pc}

08000eb0 <LCD_DrawLine>:
}



void LCD_DrawLine ( uint16_t usC1, uint16_t usP1, uint16_t usC2, uint16_t usP2, uint16_t usColor )
{
 8000eb0:	b590      	push	{r4, r7, lr}
 8000eb2:	b08d      	sub	sp, #52	; 0x34
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	4604      	mov	r4, r0
 8000eb8:	4608      	mov	r0, r1
 8000eba:	4611      	mov	r1, r2
 8000ebc:	461a      	mov	r2, r3
 8000ebe:	4623      	mov	r3, r4
 8000ec0:	80fb      	strh	r3, [r7, #6]
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	80bb      	strh	r3, [r7, #4]
 8000ec6:	460b      	mov	r3, r1
 8000ec8:	807b      	strh	r3, [r7, #2]
 8000eca:	4613      	mov	r3, r2
 8000ecc:	803b      	strh	r3, [r7, #0]
	uint16_t us; 
	uint16_t usC_Current, usP_Current;
	
	int32_t lError_C = 0, lError_P = 0, lDelta_C, lDelta_P, lDistance; 
 8000ece:	2300      	movs	r3, #0
 8000ed0:	627b      	str	r3, [r7, #36]	; 0x24
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	623b      	str	r3, [r7, #32]
	int32_t lIncrease_C, lIncrease_P; 	
	
	
	lDelta_C = usC2 - usC1;
 8000ed6:	887a      	ldrh	r2, [r7, #2]
 8000ed8:	88fb      	ldrh	r3, [r7, #6]
 8000eda:	1ad3      	subs	r3, r2, r3
 8000edc:	61fb      	str	r3, [r7, #28]
	lDelta_P = usP2 - usP1; 
 8000ede:	883a      	ldrh	r2, [r7, #0]
 8000ee0:	88bb      	ldrh	r3, [r7, #4]
 8000ee2:	1ad3      	subs	r3, r2, r3
 8000ee4:	61bb      	str	r3, [r7, #24]
	
	usC_Current = usC1; 
 8000ee6:	88fb      	ldrh	r3, [r7, #6]
 8000ee8:	85bb      	strh	r3, [r7, #44]	; 0x2c
	usP_Current = usP1; 
 8000eea:	88bb      	ldrh	r3, [r7, #4]
 8000eec:	857b      	strh	r3, [r7, #42]	; 0x2a
	
	
	if ( lDelta_C > 0 ) 
 8000eee:	69fb      	ldr	r3, [r7, #28]
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	dd02      	ble.n	8000efa <LCD_DrawLine+0x4a>
		lIncrease_C = 1;  
 8000ef4:	2301      	movs	r3, #1
 8000ef6:	613b      	str	r3, [r7, #16]
 8000ef8:	e00b      	b.n	8000f12 <LCD_DrawLine+0x62>
	
	else if ( lDelta_C == 0 ) 
 8000efa:	69fb      	ldr	r3, [r7, #28]
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d102      	bne.n	8000f06 <LCD_DrawLine+0x56>
		lIncrease_C = 0;
 8000f00:	2300      	movs	r3, #0
 8000f02:	613b      	str	r3, [r7, #16]
 8000f04:	e005      	b.n	8000f12 <LCD_DrawLine+0x62>
	
	else 
  	{ 
    		lIncrease_C = -1;
 8000f06:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000f0a:	613b      	str	r3, [r7, #16]
    		lDelta_C = - lDelta_C;
 8000f0c:	69fb      	ldr	r3, [r7, #28]
 8000f0e:	425b      	negs	r3, r3
 8000f10:	61fb      	str	r3, [r7, #28]
  	} 

	
	if ( lDelta_P > 0 )
 8000f12:	69bb      	ldr	r3, [r7, #24]
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	dd02      	ble.n	8000f1e <LCD_DrawLine+0x6e>
		lIncrease_P = 1; 
 8000f18:	2301      	movs	r3, #1
 8000f1a:	60fb      	str	r3, [r7, #12]
 8000f1c:	e00b      	b.n	8000f36 <LCD_DrawLine+0x86>
	
	else if ( lDelta_P == 0 )
 8000f1e:	69bb      	ldr	r3, [r7, #24]
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d102      	bne.n	8000f2a <LCD_DrawLine+0x7a>
		lIncrease_P = 0;
 8000f24:	2300      	movs	r3, #0
 8000f26:	60fb      	str	r3, [r7, #12]
 8000f28:	e005      	b.n	8000f36 <LCD_DrawLine+0x86>
	else 
	{
  		lIncrease_P = -1;
 8000f2a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000f2e:	60fb      	str	r3, [r7, #12]
    		lDelta_P = - lDelta_P;
 8000f30:	69bb      	ldr	r3, [r7, #24]
 8000f32:	425b      	negs	r3, r3
 8000f34:	61bb      	str	r3, [r7, #24]
 	} 

	if (  lDelta_C > lDelta_P )
 8000f36:	69fa      	ldr	r2, [r7, #28]
 8000f38:	69bb      	ldr	r3, [r7, #24]
 8000f3a:	429a      	cmp	r2, r3
 8000f3c:	dd02      	ble.n	8000f44 <LCD_DrawLine+0x94>
		lDistance = lDelta_C; 
 8000f3e:	69fb      	ldr	r3, [r7, #28]
 8000f40:	617b      	str	r3, [r7, #20]
 8000f42:	e001      	b.n	8000f48 <LCD_DrawLine+0x98>
	
	else 
		lDistance = lDelta_P; 
 8000f44:	69bb      	ldr	r3, [r7, #24]
 8000f46:	617b      	str	r3, [r7, #20]
	
	
	for ( us = 0; us <= lDistance + 1; us ++ ) 
 8000f48:	2300      	movs	r3, #0
 8000f4a:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8000f4c:	e02b      	b.n	8000fa6 <LCD_DrawLine+0xf6>
	{  
		LCD_DrawDot ( usC_Current, usP_Current, usColor );
 8000f4e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8000f52:	8d79      	ldrh	r1, [r7, #42]	; 0x2a
 8000f54:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8000f56:	4618      	mov	r0, r3
 8000f58:	f000 f8a5 	bl	80010a6 <LCD_DrawDot>
		
		lError_C += lDelta_C ; 
 8000f5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f5e:	69fb      	ldr	r3, [r7, #28]
 8000f60:	4413      	add	r3, r2
 8000f62:	627b      	str	r3, [r7, #36]	; 0x24
		lError_P += lDelta_P ; 
 8000f64:	6a3a      	ldr	r2, [r7, #32]
 8000f66:	69bb      	ldr	r3, [r7, #24]
 8000f68:	4413      	add	r3, r2
 8000f6a:	623b      	str	r3, [r7, #32]
		
		if ( lError_C > lDistance ) 
 8000f6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f6e:	697b      	ldr	r3, [r7, #20]
 8000f70:	429a      	cmp	r2, r3
 8000f72:	dd08      	ble.n	8000f86 <LCD_DrawLine+0xd6>
		{ 
			lError_C -= lDistance; 
 8000f74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f76:	697b      	ldr	r3, [r7, #20]
 8000f78:	1ad3      	subs	r3, r2, r3
 8000f7a:	627b      	str	r3, [r7, #36]	; 0x24
			usC_Current += lIncrease_C; 
 8000f7c:	693b      	ldr	r3, [r7, #16]
 8000f7e:	b29a      	uxth	r2, r3
 8000f80:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8000f82:	4413      	add	r3, r2
 8000f84:	85bb      	strh	r3, [r7, #44]	; 0x2c
		}  
		
		if ( lError_P > lDistance ) 
 8000f86:	6a3a      	ldr	r2, [r7, #32]
 8000f88:	697b      	ldr	r3, [r7, #20]
 8000f8a:	429a      	cmp	r2, r3
 8000f8c:	dd08      	ble.n	8000fa0 <LCD_DrawLine+0xf0>
		{ 
			lError_P -= lDistance; 
 8000f8e:	6a3a      	ldr	r2, [r7, #32]
 8000f90:	697b      	ldr	r3, [r7, #20]
 8000f92:	1ad3      	subs	r3, r2, r3
 8000f94:	623b      	str	r3, [r7, #32]
			usP_Current += lIncrease_P; 
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	b29a      	uxth	r2, r3
 8000f9a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8000f9c:	4413      	add	r3, r2
 8000f9e:	857b      	strh	r3, [r7, #42]	; 0x2a
	for ( us = 0; us <= lDistance + 1; us ++ ) 
 8000fa0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000fa2:	3301      	adds	r3, #1
 8000fa4:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8000fa6:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8000fa8:	697b      	ldr	r3, [r7, #20]
 8000faa:	3301      	adds	r3, #1
 8000fac:	429a      	cmp	r2, r3
 8000fae:	ddce      	ble.n	8000f4e <LCD_DrawLine+0x9e>
		} 
		
	}  
	
	
}   
 8000fb0:	bf00      	nop
 8000fb2:	bf00      	nop
 8000fb4:	3734      	adds	r7, #52	; 0x34
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd90      	pop	{r4, r7, pc}
	...

08000fbc <LCD_DrawChar>:


void LCD_DrawChar ( uint16_t usC, uint16_t usP, uint8_t cChar )
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b084      	sub	sp, #16
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	80fb      	strh	r3, [r7, #6]
 8000fc6:	460b      	mov	r3, r1
 8000fc8:	80bb      	strh	r3, [r7, #4]
 8000fca:	4613      	mov	r3, r2
 8000fcc:	70fb      	strb	r3, [r7, #3]
	uint8_t ucTemp, ucRelativePositon, ucPage, ucColumn;

	
	ucRelativePositon = cChar - ' ';
 8000fce:	78fb      	ldrb	r3, [r7, #3]
 8000fd0:	3b20      	subs	r3, #32
 8000fd2:	733b      	strb	r3, [r7, #12]
	
	LCD_OpenWindow ( usC, usP, WIDTH_EN_CHAR, HEIGHT_EN_CHAR );
 8000fd4:	88b9      	ldrh	r1, [r7, #4]
 8000fd6:	88f8      	ldrh	r0, [r7, #6]
 8000fd8:	2310      	movs	r3, #16
 8000fda:	2208      	movs	r2, #8
 8000fdc:	f7ff fece 	bl	8000d7c <LCD_OpenWindow>
	
	LCD_Write_Cmd ( CMD_SetPixel );	
 8000fe0:	202c      	movs	r0, #44	; 0x2c
 8000fe2:	f7ff fd93 	bl	8000b0c <LCD_Write_Cmd>
	
	for ( ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage ++ )
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	73bb      	strb	r3, [r7, #14]
 8000fea:	e023      	b.n	8001034 <LCD_DrawChar+0x78>
	{
		ucTemp = ucAscii_1608 [ ucRelativePositon ] [ ucPage ];
 8000fec:	7b3a      	ldrb	r2, [r7, #12]
 8000fee:	7bbb      	ldrb	r3, [r7, #14]
 8000ff0:	4914      	ldr	r1, [pc, #80]	; (8001044 <LCD_DrawChar+0x88>)
 8000ff2:	0112      	lsls	r2, r2, #4
 8000ff4:	440a      	add	r2, r1
 8000ff6:	4413      	add	r3, r2
 8000ff8:	781b      	ldrb	r3, [r3, #0]
 8000ffa:	73fb      	strb	r3, [r7, #15]
		
		for ( ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn ++ )
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	737b      	strb	r3, [r7, #13]
 8001000:	e012      	b.n	8001028 <LCD_DrawChar+0x6c>
		{
			if ( ucTemp & 0x01 )
 8001002:	7bfb      	ldrb	r3, [r7, #15]
 8001004:	f003 0301 	and.w	r3, r3, #1
 8001008:	2b00      	cmp	r3, #0
 800100a:	d003      	beq.n	8001014 <LCD_DrawChar+0x58>
				LCD_Write_Data ( 0x001F );
 800100c:	201f      	movs	r0, #31
 800100e:	f7ff fd8b 	bl	8000b28 <LCD_Write_Data>
 8001012:	e003      	b.n	800101c <LCD_DrawChar+0x60>
			
			else
				LCD_Write_Data (  0xFFFF );								
 8001014:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001018:	f7ff fd86 	bl	8000b28 <LCD_Write_Data>
			
			ucTemp >>= 1;		
 800101c:	7bfb      	ldrb	r3, [r7, #15]
 800101e:	085b      	lsrs	r3, r3, #1
 8001020:	73fb      	strb	r3, [r7, #15]
		for ( ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn ++ )
 8001022:	7b7b      	ldrb	r3, [r7, #13]
 8001024:	3301      	adds	r3, #1
 8001026:	737b      	strb	r3, [r7, #13]
 8001028:	7b7b      	ldrb	r3, [r7, #13]
 800102a:	2b07      	cmp	r3, #7
 800102c:	d9e9      	bls.n	8001002 <LCD_DrawChar+0x46>
	for ( ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage ++ )
 800102e:	7bbb      	ldrb	r3, [r7, #14]
 8001030:	3301      	adds	r3, #1
 8001032:	73bb      	strb	r3, [r7, #14]
 8001034:	7bbb      	ldrb	r3, [r7, #14]
 8001036:	2b0f      	cmp	r3, #15
 8001038:	d9d8      	bls.n	8000fec <LCD_DrawChar+0x30>
			
		}
		
	}
	
}
 800103a:	bf00      	nop
 800103c:	bf00      	nop
 800103e:	3710      	adds	r7, #16
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}
 8001044:	08005e1c 	.word	0x08005e1c

08001048 <LCD_DrawString>:




void LCD_DrawString ( uint16_t usC, uint16_t usP, const char * pStr )
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b082      	sub	sp, #8
 800104c:	af00      	add	r7, sp, #0
 800104e:	4603      	mov	r3, r0
 8001050:	603a      	str	r2, [r7, #0]
 8001052:	80fb      	strh	r3, [r7, #6]
 8001054:	460b      	mov	r3, r1
 8001056:	80bb      	strh	r3, [r7, #4]
	while ( * pStr != '\0' )
 8001058:	e01c      	b.n	8001094 <LCD_DrawString+0x4c>
	{
		if ( ( usC - LCD_DispWindow_Start_COLUMN + WIDTH_EN_CHAR ) > LCD_DispWindow_COLUMN )
 800105a:	88fb      	ldrh	r3, [r7, #6]
 800105c:	2be8      	cmp	r3, #232	; 0xe8
 800105e:	d904      	bls.n	800106a <LCD_DrawString+0x22>
		{
			usC = LCD_DispWindow_Start_COLUMN;
 8001060:	2300      	movs	r3, #0
 8001062:	80fb      	strh	r3, [r7, #6]
			usP += HEIGHT_EN_CHAR;
 8001064:	88bb      	ldrh	r3, [r7, #4]
 8001066:	3310      	adds	r3, #16
 8001068:	80bb      	strh	r3, [r7, #4]
		}
		
		if ( ( usP - LCD_DispWindow_Start_PAGE + HEIGHT_EN_CHAR ) > LCD_DispWindow_PAGE )
 800106a:	88bb      	ldrh	r3, [r7, #4]
 800106c:	f5b3 7f98 	cmp.w	r3, #304	; 0x130
 8001070:	d903      	bls.n	800107a <LCD_DrawString+0x32>
		{
			usC = LCD_DispWindow_Start_COLUMN;
 8001072:	2300      	movs	r3, #0
 8001074:	80fb      	strh	r3, [r7, #6]
			usP = LCD_DispWindow_Start_PAGE;
 8001076:	2300      	movs	r3, #0
 8001078:	80bb      	strh	r3, [r7, #4]
		}
		
		LCD_DrawChar ( usC, usP, * pStr );
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	781a      	ldrb	r2, [r3, #0]
 800107e:	88b9      	ldrh	r1, [r7, #4]
 8001080:	88fb      	ldrh	r3, [r7, #6]
 8001082:	4618      	mov	r0, r3
 8001084:	f7ff ff9a 	bl	8000fbc <LCD_DrawChar>
		
		pStr ++;
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	3301      	adds	r3, #1
 800108c:	603b      	str	r3, [r7, #0]
		
		usC += WIDTH_EN_CHAR;
 800108e:	88fb      	ldrh	r3, [r7, #6]
 8001090:	3308      	adds	r3, #8
 8001092:	80fb      	strh	r3, [r7, #6]
	while ( * pStr != '\0' )
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	781b      	ldrb	r3, [r3, #0]
 8001098:	2b00      	cmp	r3, #0
 800109a:	d1de      	bne.n	800105a <LCD_DrawString+0x12>
		
	}
	
}
 800109c:	bf00      	nop
 800109e:	bf00      	nop
 80010a0:	3708      	adds	r7, #8
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}

080010a6 <LCD_DrawDot>:


//Task 2
void LCD_DrawDot(uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usColor)	
{	
 80010a6:	b580      	push	{r7, lr}
 80010a8:	b082      	sub	sp, #8
 80010aa:	af00      	add	r7, sp, #0
 80010ac:	4603      	mov	r3, r0
 80010ae:	80fb      	strh	r3, [r7, #6]
 80010b0:	460b      	mov	r3, r1
 80010b2:	80bb      	strh	r3, [r7, #4]
 80010b4:	4613      	mov	r3, r2
 80010b6:	807b      	strh	r3, [r7, #2]
	if (( usCOLUMN < LCD_DispWindow_COLUMN ) && ( usPAGE < LCD_DispWindow_PAGE ))
 80010b8:	88fb      	ldrh	r3, [r7, #6]
 80010ba:	2bef      	cmp	r3, #239	; 0xef
 80010bc:	d809      	bhi.n	80010d2 <LCD_DrawDot+0x2c>
 80010be:	88bb      	ldrh	r3, [r7, #4]
 80010c0:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80010c4:	d205      	bcs.n	80010d2 <LCD_DrawDot+0x2c>
	LCD_OpenWindow ( usCOLUMN, usPAGE, 1, 1 );
 80010c6:	88b9      	ldrh	r1, [r7, #4]
 80010c8:	88f8      	ldrh	r0, [r7, #6]
 80010ca:	2301      	movs	r3, #1
 80010cc:	2201      	movs	r2, #1
 80010ce:	f7ff fe55 	bl	8000d7c <LCD_OpenWindow>
	LCD_FillColor (1, usColor);
 80010d2:	887b      	ldrh	r3, [r7, #2]
 80010d4:	4619      	mov	r1, r3
 80010d6:	2001      	movs	r0, #1
 80010d8:	f7ff fea9 	bl	8000e2e <LCD_FillColor>
}
 80010dc:	bf00      	nop
 80010de:	3708      	adds	r7, #8
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}

080010e4 <LCD_Draw_Num>:

}


void LCD_Draw_Num ( uint16_t usC, uint16_t usP, const uint8_t arr[96] )
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b084      	sub	sp, #16
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	4603      	mov	r3, r0
 80010ec:	603a      	str	r2, [r7, #0]
 80010ee:	80fb      	strh	r3, [r7, #6]
 80010f0:	460b      	mov	r3, r1
 80010f2:	80bb      	strh	r3, [r7, #4]
	uint8_t ucTemp, ucPage, ucColumn;



		LCD_OpenWindow ( usC, usP, 24, 32 );
 80010f4:	88b9      	ldrh	r1, [r7, #4]
 80010f6:	88f8      	ldrh	r0, [r7, #6]
 80010f8:	2320      	movs	r3, #32
 80010fa:	2218      	movs	r2, #24
 80010fc:	f7ff fe3e 	bl	8000d7c <LCD_OpenWindow>

		LCD_Write_Cmd ( CMD_SetPixel );
 8001100:	202c      	movs	r0, #44	; 0x2c
 8001102:	f7ff fd03 	bl	8000b0c <LCD_Write_Cmd>

		for ( ucPage = 0; ucPage < 96; ucPage ++ )
 8001106:	2300      	movs	r3, #0
 8001108:	73bb      	strb	r3, [r7, #14]
 800110a:	e020      	b.n	800114e <LCD_Draw_Num+0x6a>
		{
			ucTemp = arr[ ucPage ];
 800110c:	7bbb      	ldrb	r3, [r7, #14]
 800110e:	683a      	ldr	r2, [r7, #0]
 8001110:	4413      	add	r3, r2
 8001112:	781b      	ldrb	r3, [r3, #0]
 8001114:	73fb      	strb	r3, [r7, #15]

			for ( ucColumn = 0; ucColumn < 8; ucColumn ++ )
 8001116:	2300      	movs	r3, #0
 8001118:	737b      	strb	r3, [r7, #13]
 800111a:	e012      	b.n	8001142 <LCD_Draw_Num+0x5e>
			{
				if ( ucTemp & 0x01 )
 800111c:	7bfb      	ldrb	r3, [r7, #15]
 800111e:	f003 0301 	and.w	r3, r3, #1
 8001122:	2b00      	cmp	r3, #0
 8001124:	d003      	beq.n	800112e <LCD_Draw_Num+0x4a>
					LCD_Write_Data ( 0x001F );
 8001126:	201f      	movs	r0, #31
 8001128:	f7ff fcfe 	bl	8000b28 <LCD_Write_Data>
 800112c:	e003      	b.n	8001136 <LCD_Draw_Num+0x52>

				else
					LCD_Write_Data (  0xFFFF );
 800112e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001132:	f7ff fcf9 	bl	8000b28 <LCD_Write_Data>

				ucTemp >>= 1;
 8001136:	7bfb      	ldrb	r3, [r7, #15]
 8001138:	085b      	lsrs	r3, r3, #1
 800113a:	73fb      	strb	r3, [r7, #15]
			for ( ucColumn = 0; ucColumn < 8; ucColumn ++ )
 800113c:	7b7b      	ldrb	r3, [r7, #13]
 800113e:	3301      	adds	r3, #1
 8001140:	737b      	strb	r3, [r7, #13]
 8001142:	7b7b      	ldrb	r3, [r7, #13]
 8001144:	2b07      	cmp	r3, #7
 8001146:	d9e9      	bls.n	800111c <LCD_Draw_Num+0x38>
		for ( ucPage = 0; ucPage < 96; ucPage ++ )
 8001148:	7bbb      	ldrb	r3, [r7, #14]
 800114a:	3301      	adds	r3, #1
 800114c:	73bb      	strb	r3, [r7, #14]
 800114e:	7bbb      	ldrb	r3, [r7, #14]
 8001150:	2b5f      	cmp	r3, #95	; 0x5f
 8001152:	d9db      	bls.n	800110c <LCD_Draw_Num+0x28>

			}

		}
}
 8001154:	bf00      	nop
 8001156:	bf00      	nop
 8001158:	3710      	adds	r7, #16
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}

0800115e <LCD_Draw_24sqr>:

void LCD_Draw_24sqr ( uint16_t usC, uint16_t usP, const uint8_t arr[72] )
{
 800115e:	b580      	push	{r7, lr}
 8001160:	b084      	sub	sp, #16
 8001162:	af00      	add	r7, sp, #0
 8001164:	4603      	mov	r3, r0
 8001166:	603a      	str	r2, [r7, #0]
 8001168:	80fb      	strh	r3, [r7, #6]
 800116a:	460b      	mov	r3, r1
 800116c:	80bb      	strh	r3, [r7, #4]
	uint8_t ucTemp, ucPage, ucColumn;



		LCD_OpenWindow ( usC, usP, 24, 24 );
 800116e:	88b9      	ldrh	r1, [r7, #4]
 8001170:	88f8      	ldrh	r0, [r7, #6]
 8001172:	2318      	movs	r3, #24
 8001174:	2218      	movs	r2, #24
 8001176:	f7ff fe01 	bl	8000d7c <LCD_OpenWindow>

		LCD_Write_Cmd ( CMD_SetPixel );
 800117a:	202c      	movs	r0, #44	; 0x2c
 800117c:	f7ff fcc6 	bl	8000b0c <LCD_Write_Cmd>

		for ( ucPage = 0; ucPage < 72; ucPage ++ )
 8001180:	2300      	movs	r3, #0
 8001182:	73bb      	strb	r3, [r7, #14]
 8001184:	e020      	b.n	80011c8 <LCD_Draw_24sqr+0x6a>
		{
			ucTemp = arr[ ucPage ];
 8001186:	7bbb      	ldrb	r3, [r7, #14]
 8001188:	683a      	ldr	r2, [r7, #0]
 800118a:	4413      	add	r3, r2
 800118c:	781b      	ldrb	r3, [r3, #0]
 800118e:	73fb      	strb	r3, [r7, #15]

			for ( ucColumn = 0; ucColumn < 8; ucColumn ++ )
 8001190:	2300      	movs	r3, #0
 8001192:	737b      	strb	r3, [r7, #13]
 8001194:	e012      	b.n	80011bc <LCD_Draw_24sqr+0x5e>
			{
				if ( ucTemp & 0x01 )
 8001196:	7bfb      	ldrb	r3, [r7, #15]
 8001198:	f003 0301 	and.w	r3, r3, #1
 800119c:	2b00      	cmp	r3, #0
 800119e:	d003      	beq.n	80011a8 <LCD_Draw_24sqr+0x4a>
					LCD_Write_Data ( 0x001F );
 80011a0:	201f      	movs	r0, #31
 80011a2:	f7ff fcc1 	bl	8000b28 <LCD_Write_Data>
 80011a6:	e003      	b.n	80011b0 <LCD_Draw_24sqr+0x52>

				else
					LCD_Write_Data (  0xFFFF );
 80011a8:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80011ac:	f7ff fcbc 	bl	8000b28 <LCD_Write_Data>

				ucTemp >>= 1;
 80011b0:	7bfb      	ldrb	r3, [r7, #15]
 80011b2:	085b      	lsrs	r3, r3, #1
 80011b4:	73fb      	strb	r3, [r7, #15]
			for ( ucColumn = 0; ucColumn < 8; ucColumn ++ )
 80011b6:	7b7b      	ldrb	r3, [r7, #13]
 80011b8:	3301      	adds	r3, #1
 80011ba:	737b      	strb	r3, [r7, #13]
 80011bc:	7b7b      	ldrb	r3, [r7, #13]
 80011be:	2b07      	cmp	r3, #7
 80011c0:	d9e9      	bls.n	8001196 <LCD_Draw_24sqr+0x38>
		for ( ucPage = 0; ucPage < 72; ucPage ++ )
 80011c2:	7bbb      	ldrb	r3, [r7, #14]
 80011c4:	3301      	adds	r3, #1
 80011c6:	73bb      	strb	r3, [r7, #14]
 80011c8:	7bbb      	ldrb	r3, [r7, #14]
 80011ca:	2b47      	cmp	r3, #71	; 0x47
 80011cc:	d9db      	bls.n	8001186 <LCD_Draw_24sqr+0x28>

			}

		}
}
 80011ce:	bf00      	nop
 80011d0:	bf00      	nop
 80011d2:	3710      	adds	r7, #16
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}

080011d8 <delay>:
#include "main.h"
#include "stdio.h"

TIM_HandleTypeDef htim6;

void delay (uint16_t time_us){
 80011d8:	b480      	push	{r7}
 80011da:	b083      	sub	sp, #12
 80011dc:	af00      	add	r7, sp, #0
 80011de:	4603      	mov	r3, r0
 80011e0:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim6, 0);
 80011e2:	4b08      	ldr	r3, [pc, #32]	; (8001204 <delay+0x2c>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	2200      	movs	r2, #0
 80011e8:	625a      	str	r2, [r3, #36]	; 0x24
	while(__HAL_TIM_GET_COUNTER(&htim6)<time_us);
 80011ea:	bf00      	nop
 80011ec:	4b05      	ldr	r3, [pc, #20]	; (8001204 <delay+0x2c>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80011f2:	88fb      	ldrh	r3, [r7, #6]
 80011f4:	429a      	cmp	r2, r3
 80011f6:	d3f9      	bcc.n	80011ec <delay+0x14>
}
 80011f8:	bf00      	nop
 80011fa:	bf00      	nop
 80011fc:	370c      	adds	r7, #12
 80011fe:	46bd      	mov	sp, r7
 8001200:	bc80      	pop	{r7}
 8001202:	4770      	bx	lr
 8001204:	200000c0 	.word	0x200000c0

08001208 <Set_Pin_Output>:

void Set_Pin_Output(GPIO_TypeDef* port, uint16_t pin){
 8001208:	b580      	push	{r7, lr}
 800120a:	b086      	sub	sp, #24
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
 8001210:	460b      	mov	r3, r1
 8001212:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef  GPIO_InitStruct = {0};
 8001214:	f107 0308 	add.w	r3, r7, #8
 8001218:	2200      	movs	r2, #0
 800121a:	601a      	str	r2, [r3, #0]
 800121c:	605a      	str	r2, [r3, #4]
 800121e:	609a      	str	r2, [r3, #8]
 8001220:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = pin;
 8001222:	887b      	ldrh	r3, [r7, #2]
 8001224:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001226:	2301      	movs	r3, #1
 8001228:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800122a:	2302      	movs	r3, #2
 800122c:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(port, &GPIO_InitStruct);
 800122e:	f107 0308 	add.w	r3, r7, #8
 8001232:	4619      	mov	r1, r3
 8001234:	6878      	ldr	r0, [r7, #4]
 8001236:	f002 faeb 	bl	8003810 <HAL_GPIO_Init>
}
 800123a:	bf00      	nop
 800123c:	3718      	adds	r7, #24
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}

08001242 <Set_Pin_Input>:

void Set_Pin_Input(GPIO_TypeDef* port, uint16_t pin){
 8001242:	b580      	push	{r7, lr}
 8001244:	b086      	sub	sp, #24
 8001246:	af00      	add	r7, sp, #0
 8001248:	6078      	str	r0, [r7, #4]
 800124a:	460b      	mov	r3, r1
 800124c:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef  GPIO_InitStruct = {0};
 800124e:	f107 0308 	add.w	r3, r7, #8
 8001252:	2200      	movs	r2, #0
 8001254:	601a      	str	r2, [r3, #0]
 8001256:	605a      	str	r2, [r3, #4]
 8001258:	609a      	str	r2, [r3, #8]
 800125a:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = pin;
 800125c:	887b      	ldrh	r3, [r7, #2]
 800125e:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001260:	2300      	movs	r3, #0
 8001262:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001264:	2300      	movs	r3, #0
 8001266:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(port, &GPIO_InitStruct);
 8001268:	f107 0308 	add.w	r3, r7, #8
 800126c:	4619      	mov	r1, r3
 800126e:	6878      	ldr	r0, [r7, #4]
 8001270:	f002 face 	bl	8003810 <HAL_GPIO_Init>
}
 8001274:	bf00      	nop
 8001276:	3718      	adds	r7, #24
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}

0800127c <DHT11_Start>:

void DHT11_Start (void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	af00      	add	r7, sp, #0

	Set_Pin_Output (DHT11_PORT, DHT11_PIN);  // set the pin as output
 8001280:	2140      	movs	r1, #64	; 0x40
 8001282:	480c      	ldr	r0, [pc, #48]	; (80012b4 <DHT11_Start+0x38>)
 8001284:	f7ff ffc0 	bl	8001208 <Set_Pin_Output>
	HAL_GPIO_WritePin (DHT11_PORT, DHT11_PIN, 0);   // pull the pin low
 8001288:	2200      	movs	r2, #0
 800128a:	2140      	movs	r1, #64	; 0x40
 800128c:	4809      	ldr	r0, [pc, #36]	; (80012b4 <DHT11_Start+0x38>)
 800128e:	f002 fc6a 	bl	8003b66 <HAL_GPIO_WritePin>
	HAL_Delay(20);  // wait for 18ms
 8001292:	2014      	movs	r0, #20
 8001294:	f001 fca0 	bl	8002bd8 <HAL_Delay>
	HAL_GPIO_WritePin (DHT11_PORT, DHT11_PIN, 1);
 8001298:	2201      	movs	r2, #1
 800129a:	2140      	movs	r1, #64	; 0x40
 800129c:	4805      	ldr	r0, [pc, #20]	; (80012b4 <DHT11_Start+0x38>)
 800129e:	f002 fc62 	bl	8003b66 <HAL_GPIO_WritePin>
	delay(20);
 80012a2:	2014      	movs	r0, #20
 80012a4:	f7ff ff98 	bl	80011d8 <delay>
	Set_Pin_Input(DHT11_PORT, DHT11_PIN);    // set as input
 80012a8:	2140      	movs	r1, #64	; 0x40
 80012aa:	4802      	ldr	r0, [pc, #8]	; (80012b4 <DHT11_Start+0x38>)
 80012ac:	f7ff ffc9 	bl	8001242 <Set_Pin_Input>
}
 80012b0:	bf00      	nop
 80012b2:	bd80      	pop	{r7, pc}
 80012b4:	40011800 	.word	0x40011800

080012b8 <Check_Response>:

uint8_t Check_Response (void)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b082      	sub	sp, #8
 80012bc:	af00      	add	r7, sp, #0
	uint8_t Response = 0;
 80012be:	2300      	movs	r3, #0
 80012c0:	71fb      	strb	r3, [r7, #7]
	char str[4];
	delay (40);
 80012c2:	2028      	movs	r0, #40	; 0x28
 80012c4:	f7ff ff88 	bl	80011d8 <delay>
	if (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)))
 80012c8:	2140      	movs	r1, #64	; 0x40
 80012ca:	4811      	ldr	r0, [pc, #68]	; (8001310 <Check_Response+0x58>)
 80012cc:	f002 fc34 	bl	8003b38 <HAL_GPIO_ReadPin>
 80012d0:	4603      	mov	r3, r0
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d10e      	bne.n	80012f4 <Check_Response+0x3c>
	{
		delay (80);
 80012d6:	2050      	movs	r0, #80	; 0x50
 80012d8:	f7ff ff7e 	bl	80011d8 <delay>
		if ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN))) Response = 1;
 80012dc:	2140      	movs	r1, #64	; 0x40
 80012de:	480c      	ldr	r0, [pc, #48]	; (8001310 <Check_Response+0x58>)
 80012e0:	f002 fc2a 	bl	8003b38 <HAL_GPIO_ReadPin>
 80012e4:	4603      	mov	r3, r0
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d002      	beq.n	80012f0 <Check_Response+0x38>
 80012ea:	2301      	movs	r3, #1
 80012ec:	71fb      	strb	r3, [r7, #7]
 80012ee:	e001      	b.n	80012f4 <Check_Response+0x3c>
		else Response = -1;
 80012f0:	23ff      	movs	r3, #255	; 0xff
 80012f2:	71fb      	strb	r3, [r7, #7]
	}
//	sprintf(str, "%d", Response);
//	LCD_DrawString(10, 10, str);
	while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)));   // wait for the pin to go low
 80012f4:	bf00      	nop
 80012f6:	2140      	movs	r1, #64	; 0x40
 80012f8:	4805      	ldr	r0, [pc, #20]	; (8001310 <Check_Response+0x58>)
 80012fa:	f002 fc1d 	bl	8003b38 <HAL_GPIO_ReadPin>
 80012fe:	4603      	mov	r3, r0
 8001300:	2b00      	cmp	r3, #0
 8001302:	d1f8      	bne.n	80012f6 <Check_Response+0x3e>
	return Response;
 8001304:	79fb      	ldrb	r3, [r7, #7]
}
 8001306:	4618      	mov	r0, r3
 8001308:	3708      	adds	r7, #8
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	40011800 	.word	0x40011800

08001314 <DHT11_Read>:

uint8_t DHT11_Read (void)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b082      	sub	sp, #8
 8001318:	af00      	add	r7, sp, #0
	uint8_t i,j;
	for (j=0;j<8;j++)
 800131a:	2300      	movs	r3, #0
 800131c:	71bb      	strb	r3, [r7, #6]
 800131e:	e037      	b.n	8001390 <DHT11_Read+0x7c>
	{
		while (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)));   // wait for the pin to go high
 8001320:	bf00      	nop
 8001322:	2140      	movs	r1, #64	; 0x40
 8001324:	481e      	ldr	r0, [pc, #120]	; (80013a0 <DHT11_Read+0x8c>)
 8001326:	f002 fc07 	bl	8003b38 <HAL_GPIO_ReadPin>
 800132a:	4603      	mov	r3, r0
 800132c:	2b00      	cmp	r3, #0
 800132e:	d0f8      	beq.n	8001322 <DHT11_Read+0xe>
		delay (50);   // wait for 40 us
 8001330:	2032      	movs	r0, #50	; 0x32
 8001332:	f7ff ff51 	bl	80011d8 <delay>
		if (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)))   // if the pin is low
 8001336:	2140      	movs	r1, #64	; 0x40
 8001338:	4819      	ldr	r0, [pc, #100]	; (80013a0 <DHT11_Read+0x8c>)
 800133a:	f002 fbfd 	bl	8003b38 <HAL_GPIO_ReadPin>
 800133e:	4603      	mov	r3, r0
 8001340:	2b00      	cmp	r3, #0
 8001342:	d10e      	bne.n	8001362 <DHT11_Read+0x4e>
		{
			i&= ~(1<<(7-j));   // write 0
 8001344:	79bb      	ldrb	r3, [r7, #6]
 8001346:	f1c3 0307 	rsb	r3, r3, #7
 800134a:	2201      	movs	r2, #1
 800134c:	fa02 f303 	lsl.w	r3, r2, r3
 8001350:	b25b      	sxtb	r3, r3
 8001352:	43db      	mvns	r3, r3
 8001354:	b25a      	sxtb	r2, r3
 8001356:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800135a:	4013      	ands	r3, r2
 800135c:	b25b      	sxtb	r3, r3
 800135e:	71fb      	strb	r3, [r7, #7]
 8001360:	e00b      	b.n	800137a <DHT11_Read+0x66>
		}
		else i|= (1<<(7-j));  // if the pin is high, write 1
 8001362:	79bb      	ldrb	r3, [r7, #6]
 8001364:	f1c3 0307 	rsb	r3, r3, #7
 8001368:	2201      	movs	r2, #1
 800136a:	fa02 f303 	lsl.w	r3, r2, r3
 800136e:	b25a      	sxtb	r2, r3
 8001370:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001374:	4313      	orrs	r3, r2
 8001376:	b25b      	sxtb	r3, r3
 8001378:	71fb      	strb	r3, [r7, #7]
		while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)));  // wait for the pin to go low
 800137a:	bf00      	nop
 800137c:	2140      	movs	r1, #64	; 0x40
 800137e:	4808      	ldr	r0, [pc, #32]	; (80013a0 <DHT11_Read+0x8c>)
 8001380:	f002 fbda 	bl	8003b38 <HAL_GPIO_ReadPin>
 8001384:	4603      	mov	r3, r0
 8001386:	2b00      	cmp	r3, #0
 8001388:	d1f8      	bne.n	800137c <DHT11_Read+0x68>
	for (j=0;j<8;j++)
 800138a:	79bb      	ldrb	r3, [r7, #6]
 800138c:	3301      	adds	r3, #1
 800138e:	71bb      	strb	r3, [r7, #6]
 8001390:	79bb      	ldrb	r3, [r7, #6]
 8001392:	2b07      	cmp	r3, #7
 8001394:	d9c4      	bls.n	8001320 <DHT11_Read+0xc>
	}
	return i;
 8001396:	79fb      	ldrb	r3, [r7, #7]
}
 8001398:	4618      	mov	r0, r3
 800139a:	3708      	adds	r7, #8
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}
 80013a0:	40011800 	.word	0x40011800

080013a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013a4:	b5b0      	push	{r4, r5, r7, lr}
 80013a6:	b098      	sub	sp, #96	; 0x60
 80013a8:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
  int32_t adc1_value = 0, adc2_value = 0;
 80013aa:	2300      	movs	r3, #0
 80013ac:	657b      	str	r3, [r7, #84]	; 0x54
 80013ae:	2300      	movs	r3, #0
 80013b0:	653b      	str	r3, [r7, #80]	; 0x50
  char watering_time [2][32] = {{"00:00"},{"00:00"}};
 80013b2:	4b76      	ldr	r3, [pc, #472]	; (800158c <main+0x1e8>)
 80013b4:	f107 040c 	add.w	r4, r7, #12
 80013b8:	461d      	mov	r5, r3
 80013ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80013bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80013be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80013c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80013c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80013c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80013c6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80013ca:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013ce:	f001 fba1 	bl	8002b14 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013d2:	f000 f8f5 	bl	80015c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013d6:	f000 fa51 	bl	800187c <MX_GPIO_Init>
  MX_FSMC_Init();
 80013da:	f000 fb73 	bl	8001ac4 <MX_FSMC_Init>
  MX_ADC1_Init();
 80013de:	f000 f951 	bl	8001684 <MX_ADC1_Init>
  MX_TIM6_Init();
 80013e2:	f000 fa15 	bl	8001810 <MX_TIM6_Init>
  MX_RTC_Init();
 80013e6:	f000 f9c9 	bl	800177c <MX_RTC_Init>
  MX_ADC2_Init();
 80013ea:	f000 f989 	bl	8001700 <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */
  macXPT2046_CS_DISABLE();
 80013ee:	2200      	movs	r2, #0
 80013f0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80013f4:	4866      	ldr	r0, [pc, #408]	; (8001590 <main+0x1ec>)
 80013f6:	f002 fbb6 	bl	8003b66 <HAL_GPIO_WritePin>
  LCD_INIT();
 80013fa:	f7ff fb3c 	bl	8000a76 <LCD_INIT>
  HAL_ADCEx_Calibration_Start(&hadc1);
 80013fe:	4865      	ldr	r0, [pc, #404]	; (8001594 <main+0x1f0>)
 8001400:	f002 f84c 	bl	800349c <HAL_ADCEx_Calibration_Start>
  HAL_TIM_Base_Start(&htim6);
 8001404:	4864      	ldr	r0, [pc, #400]	; (8001598 <main+0x1f4>)
 8001406:	f003 fdbf 	bl	8004f88 <HAL_TIM_Base_Start>
//		Ov7725_vsync = 0;
//		LCD_Rst();
//	}


	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_6, GPIO_PIN_SET);
 800140a:	2201      	movs	r2, #1
 800140c:	2140      	movs	r1, #64	; 0x40
 800140e:	4863      	ldr	r0, [pc, #396]	; (800159c <main+0x1f8>)
 8001410:	f002 fba9 	bl	8003b66 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8001414:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001418:	f001 fbde 	bl	8002bd8 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_6, GPIO_PIN_RESET);
 800141c:	2200      	movs	r2, #0
 800141e:	2140      	movs	r1, #64	; 0x40
 8001420:	485e      	ldr	r0, [pc, #376]	; (800159c <main+0x1f8>)
 8001422:	f002 fba0 	bl	8003b66 <HAL_GPIO_WritePin>
	DHT11_Start();
 8001426:	f7ff ff29 	bl	800127c <DHT11_Start>
	Check_Response();
 800142a:	f7ff ff45 	bl	80012b8 <Check_Response>
	Humidity_B1 = DHT11_Read();
 800142e:	f7ff ff71 	bl	8001314 <DHT11_Read>
 8001432:	4603      	mov	r3, r0
 8001434:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	Humidity_B2 = DHT11_Read();
 8001438:	f7ff ff6c 	bl	8001314 <DHT11_Read>
 800143c:	4603      	mov	r3, r0
 800143e:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
	Temp_B1 = DHT11_Read();
 8001442:	f7ff ff67 	bl	8001314 <DHT11_Read>
 8001446:	4603      	mov	r3, r0
 8001448:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
	Temp_B2 = DHT11_Read();
 800144c:	f7ff ff62 	bl	8001314 <DHT11_Read>
 8001450:	4603      	mov	r3, r0
 8001452:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c

	HAL_ADC_Start(&hadc1);
 8001456:	484f      	ldr	r0, [pc, #316]	; (8001594 <main+0x1f0>)
 8001458:	f001 fccc 	bl	8002df4 <HAL_ADC_Start>
	HAL_ADC_Start(&hadc2);
 800145c:	4850      	ldr	r0, [pc, #320]	; (80015a0 <main+0x1fc>)
 800145e:	f001 fcc9 	bl	8002df4 <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc1, 1000);
 8001462:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001466:	484b      	ldr	r0, [pc, #300]	; (8001594 <main+0x1f0>)
 8001468:	f001 fd72 	bl	8002f50 <HAL_ADC_PollForConversion>
	adc1_value = HAL_ADC_GetValue(&hadc1);
 800146c:	4849      	ldr	r0, [pc, #292]	; (8001594 <main+0x1f0>)
 800146e:	f001 fe75 	bl	800315c <HAL_ADC_GetValue>
 8001472:	4603      	mov	r3, r0
 8001474:	657b      	str	r3, [r7, #84]	; 0x54

    HAL_ADC_PollForConversion(&hadc2, 1000);
 8001476:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800147a:	4849      	ldr	r0, [pc, #292]	; (80015a0 <main+0x1fc>)
 800147c:	f001 fd68 	bl	8002f50 <HAL_ADC_PollForConversion>
	adc2_value = HAL_ADC_GetValue(&hadc2);
 8001480:	4847      	ldr	r0, [pc, #284]	; (80015a0 <main+0x1fc>)
 8001482:	f001 fe6b 	bl	800315c <HAL_ADC_GetValue>
 8001486:	4603      	mov	r3, r0
 8001488:	653b      	str	r3, [r7, #80]	; 0x50
//
//		  LCD_DrawString(200, 20, touch_x);
//		  LCD_DrawString(200, 40, touch_y);
//	  }

	HomePage((int)Temp_B1, (int)Humidity_B1, adc2_value, adc1_value, watering_time);
 800148a:	f897 004d 	ldrb.w	r0, [r7, #77]	; 0x4d
 800148e:	f897 104f 	ldrb.w	r1, [r7, #79]	; 0x4f
 8001492:	f107 030c 	add.w	r3, r7, #12
 8001496:	9300      	str	r3, [sp, #0]
 8001498:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800149a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800149c:	f000 fce6 	bl	8001e6c <HomePage>
	// Touch Screen Activity -- HomePage
	if(XPT2046_Get_TouchedPoint(&touchpt, &strXPT2046_TouchPara) && touchpt.x >= 290 && touchpt.y<=60){
 80014a0:	f107 0308 	add.w	r3, r7, #8
 80014a4:	493f      	ldr	r1, [pc, #252]	; (80015a4 <main+0x200>)
 80014a6:	4618      	mov	r0, r3
 80014a8:	f001 fa86 	bl	80029b8 <XPT2046_Get_TouchedPoint>
 80014ac:	4603      	mov	r3, r0
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d067      	beq.n	8001582 <main+0x1de>
 80014b2:	893b      	ldrh	r3, [r7, #8]
 80014b4:	f5b3 7f91 	cmp.w	r3, #290	; 0x122
 80014b8:	d363      	bcc.n	8001582 <main+0x1de>
 80014ba:	897b      	ldrh	r3, [r7, #10]
 80014bc:	2b3c      	cmp	r3, #60	; 0x3c
 80014be:	d860      	bhi.n	8001582 <main+0x1de>
		LCD_Clear(0, 0, 240, 320, 0xffff);
 80014c0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80014c4:	9300      	str	r3, [sp, #0]
 80014c6:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80014ca:	22f0      	movs	r2, #240	; 0xf0
 80014cc:	2100      	movs	r1, #0
 80014ce:	2000      	movs	r0, #0
 80014d0:	f7ff fccb 	bl	8000e6a <LCD_Clear>
		LCD_Draw_24sqr(10, 10, menu);
 80014d4:	4a34      	ldr	r2, [pc, #208]	; (80015a8 <main+0x204>)
 80014d6:	210a      	movs	r1, #10
 80014d8:	200a      	movs	r0, #10
 80014da:	f7ff fe40 	bl	800115e <LCD_Draw_24sqr>
		LCD_DrawString(48, 50, "Menu");
 80014de:	4a33      	ldr	r2, [pc, #204]	; (80015ac <main+0x208>)
 80014e0:	2132      	movs	r1, #50	; 0x32
 80014e2:	2030      	movs	r0, #48	; 0x30
 80014e4:	f7ff fdb0 	bl	8001048 <LCD_DrawString>
		LCD_DrawString(48, 100, "Home");
 80014e8:	4a31      	ldr	r2, [pc, #196]	; (80015b0 <main+0x20c>)
 80014ea:	2164      	movs	r1, #100	; 0x64
 80014ec:	2030      	movs	r0, #48	; 0x30
 80014ee:	f7ff fdab 	bl	8001048 <LCD_DrawString>
		LCD_DrawString(48, 150, "> Set Watering Time");
 80014f2:	4a30      	ldr	r2, [pc, #192]	; (80015b4 <main+0x210>)
 80014f4:	2196      	movs	r1, #150	; 0x96
 80014f6:	2030      	movs	r0, #48	; 0x30
 80014f8:	f7ff fda6 	bl	8001048 <LCD_DrawString>
		LCD_DrawString(48, 200, "> Review Records");
 80014fc:	4a2e      	ldr	r2, [pc, #184]	; (80015b8 <main+0x214>)
 80014fe:	21c8      	movs	r1, #200	; 0xc8
 8001500:	2030      	movs	r0, #48	; 0x30
 8001502:	f7ff fda1 	bl	8001048 <LCD_DrawString>
		LCD_DrawString(48, 250, "> Review Images");
 8001506:	4a2d      	ldr	r2, [pc, #180]	; (80015bc <main+0x218>)
 8001508:	21fa      	movs	r1, #250	; 0xfa
 800150a:	2030      	movs	r0, #48	; 0x30
 800150c:	f7ff fd9c 	bl	8001048 <LCD_DrawString>
		while(1){
			touchpt.x = 0;
 8001510:	2300      	movs	r3, #0
 8001512:	813b      	strh	r3, [r7, #8]
			touchpt.y = 0;
 8001514:	2300      	movs	r3, #0
 8001516:	817b      	strh	r3, [r7, #10]
			XPT2046_Get_TouchedPoint(&touchpt, &strXPT2046_TouchPara);
 8001518:	f107 0308 	add.w	r3, r7, #8
 800151c:	4921      	ldr	r1, [pc, #132]	; (80015a4 <main+0x200>)
 800151e:	4618      	mov	r0, r3
 8001520:	f001 fa4a 	bl	80029b8 <XPT2046_Get_TouchedPoint>
			if(touchpt.x >= 170 && touchpt.x <=240 && touchpt.y >= 50 && touchpt.y <=200) {
 8001524:	893b      	ldrh	r3, [r7, #8]
 8001526:	2ba9      	cmp	r3, #169	; 0xa9
 8001528:	d90e      	bls.n	8001548 <main+0x1a4>
 800152a:	893b      	ldrh	r3, [r7, #8]
 800152c:	2bf0      	cmp	r3, #240	; 0xf0
 800152e:	d80b      	bhi.n	8001548 <main+0x1a4>
 8001530:	897b      	ldrh	r3, [r7, #10]
 8001532:	2b31      	cmp	r3, #49	; 0x31
 8001534:	d908      	bls.n	8001548 <main+0x1a4>
 8001536:	897b      	ldrh	r3, [r7, #10]
 8001538:	2bc8      	cmp	r3, #200	; 0xc8
 800153a:	d805      	bhi.n	8001548 <main+0x1a4>
				SetTimePage(watering_time);
 800153c:	f107 030c 	add.w	r3, r7, #12
 8001540:	4618      	mov	r0, r3
 8001542:	f000 fcb5 	bl	8001eb0 <SetTimePage>
				break;
 8001546:	e01c      	b.n	8001582 <main+0x1de>
			}
			else if(touchpt.x >= 60 && touchpt.x <=120 && touchpt.y >= 40 && touchpt.y <=180) {
 8001548:	893b      	ldrh	r3, [r7, #8]
 800154a:	2b3b      	cmp	r3, #59	; 0x3b
 800154c:	d90b      	bls.n	8001566 <main+0x1c2>
 800154e:	893b      	ldrh	r3, [r7, #8]
 8001550:	2b78      	cmp	r3, #120	; 0x78
 8001552:	d808      	bhi.n	8001566 <main+0x1c2>
 8001554:	897b      	ldrh	r3, [r7, #10]
 8001556:	2b27      	cmp	r3, #39	; 0x27
 8001558:	d905      	bls.n	8001566 <main+0x1c2>
 800155a:	897b      	ldrh	r3, [r7, #10]
 800155c:	2bb4      	cmp	r3, #180	; 0xb4
 800155e:	d802      	bhi.n	8001566 <main+0x1c2>
				RecordsPage();
 8001560:	f000 fde6 	bl	8002130 <RecordsPage>
				break;
 8001564:	e00d      	b.n	8001582 <main+0x1de>
			}
			else if(touchpt.x >= 40 && touchpt.x <=80 && touchpt.y >= 40 && touchpt.y <=180){
 8001566:	893b      	ldrh	r3, [r7, #8]
 8001568:	2b27      	cmp	r3, #39	; 0x27
 800156a:	d9d1      	bls.n	8001510 <main+0x16c>
 800156c:	893b      	ldrh	r3, [r7, #8]
 800156e:	2b50      	cmp	r3, #80	; 0x50
 8001570:	d8ce      	bhi.n	8001510 <main+0x16c>
 8001572:	897b      	ldrh	r3, [r7, #10]
 8001574:	2b27      	cmp	r3, #39	; 0x27
 8001576:	d9cb      	bls.n	8001510 <main+0x16c>
 8001578:	897b      	ldrh	r3, [r7, #10]
 800157a:	2bb4      	cmp	r3, #180	; 0xb4
 800157c:	d8c8      	bhi.n	8001510 <main+0x16c>
				ImgPage();
 800157e:	f000 fe39 	bl	80021f4 <ImgPage>
//			}
		}

	}

	HAL_Delay(1000);
 8001582:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001586:	f001 fb27 	bl	8002bd8 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_6, GPIO_PIN_SET);
 800158a:	e73e      	b.n	800140a <main+0x66>
 800158c:	08005d68 	.word	0x08005d68
 8001590:	40011400 	.word	0x40011400
 8001594:	20000108 	.word	0x20000108
 8001598:	200000c0 	.word	0x200000c0
 800159c:	40011800 	.word	0x40011800
 80015a0:	20000138 	.word	0x20000138
 80015a4:	20000008 	.word	0x20000008
 80015a8:	0800640c 	.word	0x0800640c
 80015ac:	08005d20 	.word	0x08005d20
 80015b0:	08005d28 	.word	0x08005d28
 80015b4:	08005d30 	.word	0x08005d30
 80015b8:	08005d44 	.word	0x08005d44
 80015bc:	08005d58 	.word	0x08005d58

080015c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b096      	sub	sp, #88	; 0x58
 80015c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015c6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80015ca:	2228      	movs	r2, #40	; 0x28
 80015cc:	2100      	movs	r1, #0
 80015ce:	4618      	mov	r0, r3
 80015d0:	f003 ff18 	bl	8005404 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015d4:	f107 031c 	add.w	r3, r7, #28
 80015d8:	2200      	movs	r2, #0
 80015da:	601a      	str	r2, [r3, #0]
 80015dc:	605a      	str	r2, [r3, #4]
 80015de:	609a      	str	r2, [r3, #8]
 80015e0:	60da      	str	r2, [r3, #12]
 80015e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80015e4:	1d3b      	adds	r3, r7, #4
 80015e6:	2200      	movs	r2, #0
 80015e8:	601a      	str	r2, [r3, #0]
 80015ea:	605a      	str	r2, [r3, #4]
 80015ec:	609a      	str	r2, [r3, #8]
 80015ee:	60da      	str	r2, [r3, #12]
 80015f0:	611a      	str	r2, [r3, #16]
 80015f2:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80015f4:	2309      	movs	r3, #9
 80015f6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80015f8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80015fc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80015fe:	2300      	movs	r3, #0
 8001600:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001602:	2301      	movs	r3, #1
 8001604:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001606:	2301      	movs	r3, #1
 8001608:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800160a:	2302      	movs	r3, #2
 800160c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800160e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001612:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001614:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001618:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800161a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800161e:	4618      	mov	r0, r3
 8001620:	f002 fae8 	bl	8003bf4 <HAL_RCC_OscConfig>
 8001624:	4603      	mov	r3, r0
 8001626:	2b00      	cmp	r3, #0
 8001628:	d001      	beq.n	800162e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800162a:	f000 faaf 	bl	8001b8c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800162e:	230f      	movs	r3, #15
 8001630:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001632:	2302      	movs	r3, #2
 8001634:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001636:	2300      	movs	r3, #0
 8001638:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800163a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800163e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001640:	2300      	movs	r3, #0
 8001642:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001644:	f107 031c 	add.w	r3, r7, #28
 8001648:	2102      	movs	r1, #2
 800164a:	4618      	mov	r0, r3
 800164c:	f002 fd54 	bl	80040f8 <HAL_RCC_ClockConfig>
 8001650:	4603      	mov	r3, r0
 8001652:	2b00      	cmp	r3, #0
 8001654:	d001      	beq.n	800165a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001656:	f000 fa99 	bl	8001b8c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_ADC;
 800165a:	2303      	movs	r3, #3
 800165c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800165e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001662:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001664:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001668:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800166a:	1d3b      	adds	r3, r7, #4
 800166c:	4618      	mov	r0, r3
 800166e:	f002 fec7 	bl	8004400 <HAL_RCCEx_PeriphCLKConfig>
 8001672:	4603      	mov	r3, r0
 8001674:	2b00      	cmp	r3, #0
 8001676:	d001      	beq.n	800167c <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8001678:	f000 fa88 	bl	8001b8c <Error_Handler>
  }
}
 800167c:	bf00      	nop
 800167e:	3758      	adds	r7, #88	; 0x58
 8001680:	46bd      	mov	sp, r7
 8001682:	bd80      	pop	{r7, pc}

08001684 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b084      	sub	sp, #16
 8001688:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800168a:	1d3b      	adds	r3, r7, #4
 800168c:	2200      	movs	r2, #0
 800168e:	601a      	str	r2, [r3, #0]
 8001690:	605a      	str	r2, [r3, #4]
 8001692:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001694:	4b18      	ldr	r3, [pc, #96]	; (80016f8 <MX_ADC1_Init+0x74>)
 8001696:	4a19      	ldr	r2, [pc, #100]	; (80016fc <MX_ADC1_Init+0x78>)
 8001698:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800169a:	4b17      	ldr	r3, [pc, #92]	; (80016f8 <MX_ADC1_Init+0x74>)
 800169c:	2200      	movs	r2, #0
 800169e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80016a0:	4b15      	ldr	r3, [pc, #84]	; (80016f8 <MX_ADC1_Init+0x74>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80016a6:	4b14      	ldr	r3, [pc, #80]	; (80016f8 <MX_ADC1_Init+0x74>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80016ac:	4b12      	ldr	r3, [pc, #72]	; (80016f8 <MX_ADC1_Init+0x74>)
 80016ae:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80016b2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80016b4:	4b10      	ldr	r3, [pc, #64]	; (80016f8 <MX_ADC1_Init+0x74>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80016ba:	4b0f      	ldr	r3, [pc, #60]	; (80016f8 <MX_ADC1_Init+0x74>)
 80016bc:	2201      	movs	r2, #1
 80016be:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80016c0:	480d      	ldr	r0, [pc, #52]	; (80016f8 <MX_ADC1_Init+0x74>)
 80016c2:	f001 faad 	bl	8002c20 <HAL_ADC_Init>
 80016c6:	4603      	mov	r3, r0
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d001      	beq.n	80016d0 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80016cc:	f000 fa5e 	bl	8001b8c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80016d0:	2305      	movs	r3, #5
 80016d2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80016d4:	2301      	movs	r3, #1
 80016d6:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80016d8:	2300      	movs	r3, #0
 80016da:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80016dc:	1d3b      	adds	r3, r7, #4
 80016de:	4619      	mov	r1, r3
 80016e0:	4805      	ldr	r0, [pc, #20]	; (80016f8 <MX_ADC1_Init+0x74>)
 80016e2:	f001 fd47 	bl	8003174 <HAL_ADC_ConfigChannel>
 80016e6:	4603      	mov	r3, r0
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d001      	beq.n	80016f0 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80016ec:	f000 fa4e 	bl	8001b8c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80016f0:	bf00      	nop
 80016f2:	3710      	adds	r7, #16
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bd80      	pop	{r7, pc}
 80016f8:	20000108 	.word	0x20000108
 80016fc:	40012400 	.word	0x40012400

08001700 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b084      	sub	sp, #16
 8001704:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001706:	1d3b      	adds	r3, r7, #4
 8001708:	2200      	movs	r2, #0
 800170a:	601a      	str	r2, [r3, #0]
 800170c:	605a      	str	r2, [r3, #4]
 800170e:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8001710:	4b18      	ldr	r3, [pc, #96]	; (8001774 <MX_ADC2_Init+0x74>)
 8001712:	4a19      	ldr	r2, [pc, #100]	; (8001778 <MX_ADC2_Init+0x78>)
 8001714:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001716:	4b17      	ldr	r3, [pc, #92]	; (8001774 <MX_ADC2_Init+0x74>)
 8001718:	2200      	movs	r2, #0
 800171a:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800171c:	4b15      	ldr	r3, [pc, #84]	; (8001774 <MX_ADC2_Init+0x74>)
 800171e:	2200      	movs	r2, #0
 8001720:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001722:	4b14      	ldr	r3, [pc, #80]	; (8001774 <MX_ADC2_Init+0x74>)
 8001724:	2200      	movs	r2, #0
 8001726:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001728:	4b12      	ldr	r3, [pc, #72]	; (8001774 <MX_ADC2_Init+0x74>)
 800172a:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800172e:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001730:	4b10      	ldr	r3, [pc, #64]	; (8001774 <MX_ADC2_Init+0x74>)
 8001732:	2200      	movs	r2, #0
 8001734:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 1;
 8001736:	4b0f      	ldr	r3, [pc, #60]	; (8001774 <MX_ADC2_Init+0x74>)
 8001738:	2201      	movs	r2, #1
 800173a:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800173c:	480d      	ldr	r0, [pc, #52]	; (8001774 <MX_ADC2_Init+0x74>)
 800173e:	f001 fa6f 	bl	8002c20 <HAL_ADC_Init>
 8001742:	4603      	mov	r3, r0
 8001744:	2b00      	cmp	r3, #0
 8001746:	d001      	beq.n	800174c <MX_ADC2_Init+0x4c>
  {
    Error_Handler();
 8001748:	f000 fa20 	bl	8001b8c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800174c:	2306      	movs	r3, #6
 800174e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001750:	2301      	movs	r3, #1
 8001752:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001754:	2300      	movs	r3, #0
 8001756:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001758:	1d3b      	adds	r3, r7, #4
 800175a:	4619      	mov	r1, r3
 800175c:	4805      	ldr	r0, [pc, #20]	; (8001774 <MX_ADC2_Init+0x74>)
 800175e:	f001 fd09 	bl	8003174 <HAL_ADC_ConfigChannel>
 8001762:	4603      	mov	r3, r0
 8001764:	2b00      	cmp	r3, #0
 8001766:	d001      	beq.n	800176c <MX_ADC2_Init+0x6c>
  {
    Error_Handler();
 8001768:	f000 fa10 	bl	8001b8c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800176c:	bf00      	nop
 800176e:	3710      	adds	r7, #16
 8001770:	46bd      	mov	sp, r7
 8001772:	bd80      	pop	{r7, pc}
 8001774:	20000138 	.word	0x20000138
 8001778:	40012800 	.word	0x40012800

0800177c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b082      	sub	sp, #8
 8001780:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001782:	1d3b      	adds	r3, r7, #4
 8001784:	2100      	movs	r1, #0
 8001786:	460a      	mov	r2, r1
 8001788:	801a      	strh	r2, [r3, #0]
 800178a:	460a      	mov	r2, r1
 800178c:	709a      	strb	r2, [r3, #2]
  RTC_DateTypeDef DateToUpdate = {0};
 800178e:	2300      	movs	r3, #0
 8001790:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001792:	4b1d      	ldr	r3, [pc, #116]	; (8001808 <MX_RTC_Init+0x8c>)
 8001794:	4a1d      	ldr	r2, [pc, #116]	; (800180c <MX_RTC_Init+0x90>)
 8001796:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8001798:	4b1b      	ldr	r3, [pc, #108]	; (8001808 <MX_RTC_Init+0x8c>)
 800179a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800179e:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 80017a0:	4b19      	ldr	r3, [pc, #100]	; (8001808 <MX_RTC_Init+0x8c>)
 80017a2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80017a6:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80017a8:	4817      	ldr	r0, [pc, #92]	; (8001808 <MX_RTC_Init+0x8c>)
 80017aa:	f002 ffc3 	bl	8004734 <HAL_RTC_Init>
 80017ae:	4603      	mov	r3, r0
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d001      	beq.n	80017b8 <MX_RTC_Init+0x3c>
  {
    Error_Handler();
 80017b4:	f000 f9ea 	bl	8001b8c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80017b8:	2300      	movs	r3, #0
 80017ba:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 80017bc:	2300      	movs	r3, #0
 80017be:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 80017c0:	2300      	movs	r3, #0
 80017c2:	71bb      	strb	r3, [r7, #6]

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80017c4:	1d3b      	adds	r3, r7, #4
 80017c6:	2201      	movs	r2, #1
 80017c8:	4619      	mov	r1, r3
 80017ca:	480f      	ldr	r0, [pc, #60]	; (8001808 <MX_RTC_Init+0x8c>)
 80017cc:	f003 f848 	bl	8004860 <HAL_RTC_SetTime>
 80017d0:	4603      	mov	r3, r0
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d001      	beq.n	80017da <MX_RTC_Init+0x5e>
  {
    Error_Handler();
 80017d6:	f000 f9d9 	bl	8001b8c <Error_Handler>
  }
  DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 80017da:	2301      	movs	r3, #1
 80017dc:	703b      	strb	r3, [r7, #0]
  DateToUpdate.Month = RTC_MONTH_JANUARY;
 80017de:	2301      	movs	r3, #1
 80017e0:	707b      	strb	r3, [r7, #1]
  DateToUpdate.Date = 0x1;
 80017e2:	2301      	movs	r3, #1
 80017e4:	70bb      	strb	r3, [r7, #2]
  DateToUpdate.Year = 0x0;
 80017e6:	2300      	movs	r3, #0
 80017e8:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 80017ea:	463b      	mov	r3, r7
 80017ec:	2201      	movs	r2, #1
 80017ee:	4619      	mov	r1, r3
 80017f0:	4805      	ldr	r0, [pc, #20]	; (8001808 <MX_RTC_Init+0x8c>)
 80017f2:	f003 f8cd 	bl	8004990 <HAL_RTC_SetDate>
 80017f6:	4603      	mov	r3, r0
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d001      	beq.n	8001800 <MX_RTC_Init+0x84>
  {
    Error_Handler();
 80017fc:	f000 f9c6 	bl	8001b8c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001800:	bf00      	nop
 8001802:	3708      	adds	r7, #8
 8001804:	46bd      	mov	sp, r7
 8001806:	bd80      	pop	{r7, pc}
 8001808:	20000168 	.word	0x20000168
 800180c:	40002800 	.word	0x40002800

08001810 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b082      	sub	sp, #8
 8001814:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001816:	463b      	mov	r3, r7
 8001818:	2200      	movs	r2, #0
 800181a:	601a      	str	r2, [r3, #0]
 800181c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800181e:	4b15      	ldr	r3, [pc, #84]	; (8001874 <MX_TIM6_Init+0x64>)
 8001820:	4a15      	ldr	r2, [pc, #84]	; (8001878 <MX_TIM6_Init+0x68>)
 8001822:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 71;
 8001824:	4b13      	ldr	r3, [pc, #76]	; (8001874 <MX_TIM6_Init+0x64>)
 8001826:	2247      	movs	r2, #71	; 0x47
 8001828:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800182a:	4b12      	ldr	r3, [pc, #72]	; (8001874 <MX_TIM6_Init+0x64>)
 800182c:	2200      	movs	r2, #0
 800182e:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8001830:	4b10      	ldr	r3, [pc, #64]	; (8001874 <MX_TIM6_Init+0x64>)
 8001832:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001836:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001838:	4b0e      	ldr	r3, [pc, #56]	; (8001874 <MX_TIM6_Init+0x64>)
 800183a:	2200      	movs	r2, #0
 800183c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800183e:	480d      	ldr	r0, [pc, #52]	; (8001874 <MX_TIM6_Init+0x64>)
 8001840:	f003 fb53 	bl	8004eea <HAL_TIM_Base_Init>
 8001844:	4603      	mov	r3, r0
 8001846:	2b00      	cmp	r3, #0
 8001848:	d001      	beq.n	800184e <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 800184a:	f000 f99f 	bl	8001b8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800184e:	2300      	movs	r3, #0
 8001850:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001852:	2300      	movs	r3, #0
 8001854:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001856:	463b      	mov	r3, r7
 8001858:	4619      	mov	r1, r3
 800185a:	4806      	ldr	r0, [pc, #24]	; (8001874 <MX_TIM6_Init+0x64>)
 800185c:	f003 fc66 	bl	800512c <HAL_TIMEx_MasterConfigSynchronization>
 8001860:	4603      	mov	r3, r0
 8001862:	2b00      	cmp	r3, #0
 8001864:	d001      	beq.n	800186a <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8001866:	f000 f991 	bl	8001b8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800186a:	bf00      	nop
 800186c:	3708      	adds	r7, #8
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}
 8001872:	bf00      	nop
 8001874:	200000c0 	.word	0x200000c0
 8001878:	40001000 	.word	0x40001000

0800187c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b08a      	sub	sp, #40	; 0x28
 8001880:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001882:	f107 0318 	add.w	r3, r7, #24
 8001886:	2200      	movs	r2, #0
 8001888:	601a      	str	r2, [r3, #0]
 800188a:	605a      	str	r2, [r3, #4]
 800188c:	609a      	str	r2, [r3, #8]
 800188e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001890:	4b84      	ldr	r3, [pc, #528]	; (8001aa4 <MX_GPIO_Init+0x228>)
 8001892:	699b      	ldr	r3, [r3, #24]
 8001894:	4a83      	ldr	r2, [pc, #524]	; (8001aa4 <MX_GPIO_Init+0x228>)
 8001896:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800189a:	6193      	str	r3, [r2, #24]
 800189c:	4b81      	ldr	r3, [pc, #516]	; (8001aa4 <MX_GPIO_Init+0x228>)
 800189e:	699b      	ldr	r3, [r3, #24]
 80018a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018a4:	617b      	str	r3, [r7, #20]
 80018a6:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018a8:	4b7e      	ldr	r3, [pc, #504]	; (8001aa4 <MX_GPIO_Init+0x228>)
 80018aa:	699b      	ldr	r3, [r3, #24]
 80018ac:	4a7d      	ldr	r2, [pc, #500]	; (8001aa4 <MX_GPIO_Init+0x228>)
 80018ae:	f043 0310 	orr.w	r3, r3, #16
 80018b2:	6193      	str	r3, [r2, #24]
 80018b4:	4b7b      	ldr	r3, [pc, #492]	; (8001aa4 <MX_GPIO_Init+0x228>)
 80018b6:	699b      	ldr	r3, [r3, #24]
 80018b8:	f003 0310 	and.w	r3, r3, #16
 80018bc:	613b      	str	r3, [r7, #16]
 80018be:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018c0:	4b78      	ldr	r3, [pc, #480]	; (8001aa4 <MX_GPIO_Init+0x228>)
 80018c2:	699b      	ldr	r3, [r3, #24]
 80018c4:	4a77      	ldr	r2, [pc, #476]	; (8001aa4 <MX_GPIO_Init+0x228>)
 80018c6:	f043 0304 	orr.w	r3, r3, #4
 80018ca:	6193      	str	r3, [r2, #24]
 80018cc:	4b75      	ldr	r3, [pc, #468]	; (8001aa4 <MX_GPIO_Init+0x228>)
 80018ce:	699b      	ldr	r3, [r3, #24]
 80018d0:	f003 0304 	and.w	r3, r3, #4
 80018d4:	60fb      	str	r3, [r7, #12]
 80018d6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018d8:	4b72      	ldr	r3, [pc, #456]	; (8001aa4 <MX_GPIO_Init+0x228>)
 80018da:	699b      	ldr	r3, [r3, #24]
 80018dc:	4a71      	ldr	r2, [pc, #452]	; (8001aa4 <MX_GPIO_Init+0x228>)
 80018de:	f043 0308 	orr.w	r3, r3, #8
 80018e2:	6193      	str	r3, [r2, #24]
 80018e4:	4b6f      	ldr	r3, [pc, #444]	; (8001aa4 <MX_GPIO_Init+0x228>)
 80018e6:	699b      	ldr	r3, [r3, #24]
 80018e8:	f003 0308 	and.w	r3, r3, #8
 80018ec:	60bb      	str	r3, [r7, #8]
 80018ee:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80018f0:	4b6c      	ldr	r3, [pc, #432]	; (8001aa4 <MX_GPIO_Init+0x228>)
 80018f2:	699b      	ldr	r3, [r3, #24]
 80018f4:	4a6b      	ldr	r2, [pc, #428]	; (8001aa4 <MX_GPIO_Init+0x228>)
 80018f6:	f043 0320 	orr.w	r3, r3, #32
 80018fa:	6193      	str	r3, [r2, #24]
 80018fc:	4b69      	ldr	r3, [pc, #420]	; (8001aa4 <MX_GPIO_Init+0x228>)
 80018fe:	699b      	ldr	r3, [r3, #24]
 8001900:	f003 0320 	and.w	r3, r3, #32
 8001904:	607b      	str	r3, [r7, #4]
 8001906:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|GPIO_PIN_6|GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 8001908:	2200      	movs	r2, #0
 800190a:	2147      	movs	r1, #71	; 0x47
 800190c:	4866      	ldr	r0, [pc, #408]	; (8001aa8 <MX_GPIO_Init+0x22c>)
 800190e:	f002 f92a 	bl	8003b66 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 8001912:	2200      	movs	r2, #0
 8001914:	210c      	movs	r1, #12
 8001916:	4865      	ldr	r0, [pc, #404]	; (8001aac <MX_GPIO_Init+0x230>)
 8001918:	f002 f925 	bl	8003b66 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 800191c:	2201      	movs	r2, #1
 800191e:	2110      	movs	r1, #16
 8001920:	4862      	ldr	r0, [pc, #392]	; (8001aac <MX_GPIO_Init+0x230>)
 8001922:	f002 f920 	bl	8003b66 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8001926:	2200      	movs	r2, #0
 8001928:	21f0      	movs	r1, #240	; 0xf0
 800192a:	4861      	ldr	r0, [pc, #388]	; (8001ab0 <MX_GPIO_Init+0x234>)
 800192c:	f002 f91b 	bl	8003b66 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_3, GPIO_PIN_RESET);
 8001930:	2200      	movs	r2, #0
 8001932:	f243 0108 	movw	r1, #12296	; 0x3008
 8001936:	485f      	ldr	r0, [pc, #380]	; (8001ab4 <MX_GPIO_Init+0x238>)
 8001938:	f002 f915 	bl	8003b66 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE6 PE0 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_6|GPIO_PIN_0|GPIO_PIN_1;
 800193c:	2347      	movs	r3, #71	; 0x47
 800193e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001940:	2301      	movs	r3, #1
 8001942:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001944:	2300      	movs	r3, #0
 8001946:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001948:	2303      	movs	r3, #3
 800194a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800194c:	f107 0318 	add.w	r3, r7, #24
 8001950:	4619      	mov	r1, r3
 8001952:	4855      	ldr	r0, [pc, #340]	; (8001aa8 <MX_GPIO_Init+0x22c>)
 8001954:	f001 ff5c 	bl	8003810 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001958:	2308      	movs	r3, #8
 800195a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800195c:	2300      	movs	r3, #0
 800195e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001960:	2301      	movs	r3, #1
 8001962:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001964:	f107 0318 	add.w	r3, r7, #24
 8001968:	4619      	mov	r1, r3
 800196a:	484f      	ldr	r0, [pc, #316]	; (8001aa8 <MX_GPIO_Init+0x22c>)
 800196c:	f001 ff50 	bl	8003810 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001970:	2310      	movs	r3, #16
 8001972:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001974:	4b50      	ldr	r3, [pc, #320]	; (8001ab8 <MX_GPIO_Init+0x23c>)
 8001976:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001978:	2300      	movs	r3, #0
 800197a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800197c:	f107 0318 	add.w	r3, r7, #24
 8001980:	4619      	mov	r1, r3
 8001982:	4849      	ldr	r0, [pc, #292]	; (8001aa8 <MX_GPIO_Init+0x22c>)
 8001984:	f001 ff44 	bl	8003810 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001988:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800198c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800198e:	2300      	movs	r3, #0
 8001990:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001992:	2300      	movs	r3, #0
 8001994:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001996:	f107 0318 	add.w	r3, r7, #24
 800199a:	4619      	mov	r1, r3
 800199c:	4844      	ldr	r0, [pc, #272]	; (8001ab0 <MX_GPIO_Init+0x234>)
 800199e:	f001 ff37 	bl	8003810 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80019a2:	2308      	movs	r3, #8
 80019a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80019a6:	4b45      	ldr	r3, [pc, #276]	; (8001abc <MX_GPIO_Init+0x240>)
 80019a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019aa:	2300      	movs	r3, #0
 80019ac:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019ae:	f107 0318 	add.w	r3, r7, #24
 80019b2:	4619      	mov	r1, r3
 80019b4:	483e      	ldr	r0, [pc, #248]	; (8001ab0 <MX_GPIO_Init+0x234>)
 80019b6:	f001 ff2b 	bl	8003810 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80019ba:	2301      	movs	r3, #1
 80019bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019be:	2300      	movs	r3, #0
 80019c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c2:	2300      	movs	r3, #0
 80019c4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019c6:	f107 0318 	add.w	r3, r7, #24
 80019ca:	4619      	mov	r1, r3
 80019cc:	4837      	ldr	r0, [pc, #220]	; (8001aac <MX_GPIO_Init+0x230>)
 80019ce:	f001 ff1f 	bl	8003810 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80019d2:	230c      	movs	r3, #12
 80019d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019d6:	2301      	movs	r3, #1
 80019d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019da:	2300      	movs	r3, #0
 80019dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80019de:	2303      	movs	r3, #3
 80019e0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019e2:	f107 0318 	add.w	r3, r7, #24
 80019e6:	4619      	mov	r1, r3
 80019e8:	4830      	ldr	r0, [pc, #192]	; (8001aac <MX_GPIO_Init+0x230>)
 80019ea:	f001 ff11 	bl	8003810 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80019ee:	2310      	movs	r3, #16
 80019f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019f2:	2301      	movs	r3, #1
 80019f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f6:	2300      	movs	r3, #0
 80019f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019fa:	2302      	movs	r3, #2
 80019fc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019fe:	f107 0318 	add.w	r3, r7, #24
 8001a02:	4619      	mov	r1, r3
 8001a04:	4829      	ldr	r0, [pc, #164]	; (8001aac <MX_GPIO_Init+0x230>)
 8001a06:	f001 ff03 	bl	8003810 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001a0a:	2330      	movs	r3, #48	; 0x30
 8001a0c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a0e:	2301      	movs	r3, #1
 8001a10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a12:	2300      	movs	r3, #0
 8001a14:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a16:	2303      	movs	r3, #3
 8001a18:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a1a:	f107 0318 	add.w	r3, r7, #24
 8001a1e:	4619      	mov	r1, r3
 8001a20:	4823      	ldr	r0, [pc, #140]	; (8001ab0 <MX_GPIO_Init+0x234>)
 8001a22:	f001 fef5 	bl	8003810 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB11 PB12 PB13
                           PB14 PB15 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 8001a26:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 8001a2a:	61bb      	str	r3, [r7, #24]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a30:	2300      	movs	r3, #0
 8001a32:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a34:	f107 0318 	add.w	r3, r7, #24
 8001a38:	4619      	mov	r1, r3
 8001a3a:	4821      	ldr	r0, [pc, #132]	; (8001ac0 <MX_GPIO_Init+0x244>)
 8001a3c:	f001 fee8 	bl	8003810 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD3 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_3;
 8001a40:	f243 0308 	movw	r3, #12296	; 0x3008
 8001a44:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a46:	2301      	movs	r3, #1
 8001a48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a4e:	2303      	movs	r3, #3
 8001a50:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a52:	f107 0318 	add.w	r3, r7, #24
 8001a56:	4619      	mov	r1, r3
 8001a58:	4816      	ldr	r0, [pc, #88]	; (8001ab4 <MX_GPIO_Init+0x238>)
 8001a5a:	f001 fed9 	bl	8003810 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001a5e:	23c0      	movs	r3, #192	; 0xc0
 8001a60:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001a62:	2311      	movs	r3, #17
 8001a64:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a66:	2300      	movs	r3, #0
 8001a68:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a6a:	2303      	movs	r3, #3
 8001a6c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a6e:	f107 0318 	add.w	r3, r7, #24
 8001a72:	4619      	mov	r1, r3
 8001a74:	480e      	ldr	r0, [pc, #56]	; (8001ab0 <MX_GPIO_Init+0x234>)
 8001a76:	f001 fecb 	bl	8003810 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	2100      	movs	r1, #0
 8001a7e:	2009      	movs	r0, #9
 8001a80:	f001 fe8f 	bl	80037a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001a84:	2009      	movs	r0, #9
 8001a86:	f001 fea8 	bl	80037da <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	2100      	movs	r1, #0
 8001a8e:	200a      	movs	r0, #10
 8001a90:	f001 fe87 	bl	80037a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001a94:	200a      	movs	r0, #10
 8001a96:	f001 fea0 	bl	80037da <HAL_NVIC_EnableIRQ>

}
 8001a9a:	bf00      	nop
 8001a9c:	3728      	adds	r7, #40	; 0x28
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}
 8001aa2:	bf00      	nop
 8001aa4:	40021000 	.word	0x40021000
 8001aa8:	40011800 	.word	0x40011800
 8001aac:	40010800 	.word	0x40010800
 8001ab0:	40011000 	.word	0x40011000
 8001ab4:	40011400 	.word	0x40011400
 8001ab8:	10110000 	.word	0x10110000
 8001abc:	10210000 	.word	0x10210000
 8001ac0:	40010c00 	.word	0x40010c00

08001ac4 <MX_FSMC_Init>:

/* FSMC initialization function */
static void MX_FSMC_Init(void)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b088      	sub	sp, #32
 8001ac8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8001aca:	1d3b      	adds	r3, r7, #4
 8001acc:	2200      	movs	r2, #0
 8001ace:	601a      	str	r2, [r3, #0]
 8001ad0:	605a      	str	r2, [r3, #4]
 8001ad2:	609a      	str	r2, [r3, #8]
 8001ad4:	60da      	str	r2, [r3, #12]
 8001ad6:	611a      	str	r2, [r3, #16]
 8001ad8:	615a      	str	r2, [r3, #20]
 8001ada:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8001adc:	4b28      	ldr	r3, [pc, #160]	; (8001b80 <MX_FSMC_Init+0xbc>)
 8001ade:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8001ae2:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8001ae4:	4b26      	ldr	r3, [pc, #152]	; (8001b80 <MX_FSMC_Init+0xbc>)
 8001ae6:	4a27      	ldr	r2, [pc, #156]	; (8001b84 <MX_FSMC_Init+0xc0>)
 8001ae8:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 8001aea:	4b25      	ldr	r3, [pc, #148]	; (8001b80 <MX_FSMC_Init+0xbc>)
 8001aec:	2200      	movs	r2, #0
 8001aee:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8001af0:	4b23      	ldr	r3, [pc, #140]	; (8001b80 <MX_FSMC_Init+0xbc>)
 8001af2:	2200      	movs	r2, #0
 8001af4:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8001af6:	4b22      	ldr	r3, [pc, #136]	; (8001b80 <MX_FSMC_Init+0xbc>)
 8001af8:	2200      	movs	r2, #0
 8001afa:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8001afc:	4b20      	ldr	r3, [pc, #128]	; (8001b80 <MX_FSMC_Init+0xbc>)
 8001afe:	2210      	movs	r2, #16
 8001b00:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8001b02:	4b1f      	ldr	r3, [pc, #124]	; (8001b80 <MX_FSMC_Init+0xbc>)
 8001b04:	2200      	movs	r2, #0
 8001b06:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8001b08:	4b1d      	ldr	r3, [pc, #116]	; (8001b80 <MX_FSMC_Init+0xbc>)
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 8001b0e:	4b1c      	ldr	r3, [pc, #112]	; (8001b80 <MX_FSMC_Init+0xbc>)
 8001b10:	2200      	movs	r2, #0
 8001b12:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8001b14:	4b1a      	ldr	r3, [pc, #104]	; (8001b80 <MX_FSMC_Init+0xbc>)
 8001b16:	2200      	movs	r2, #0
 8001b18:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8001b1a:	4b19      	ldr	r3, [pc, #100]	; (8001b80 <MX_FSMC_Init+0xbc>)
 8001b1c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001b20:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8001b22:	4b17      	ldr	r3, [pc, #92]	; (8001b80 <MX_FSMC_Init+0xbc>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 8001b28:	4b15      	ldr	r3, [pc, #84]	; (8001b80 <MX_FSMC_Init+0xbc>)
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8001b2e:	4b14      	ldr	r3, [pc, #80]	; (8001b80 <MX_FSMC_Init+0xbc>)
 8001b30:	2200      	movs	r2, #0
 8001b32:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8001b34:	4b12      	ldr	r3, [pc, #72]	; (8001b80 <MX_FSMC_Init+0xbc>)
 8001b36:	2200      	movs	r2, #0
 8001b38:	639a      	str	r2, [r3, #56]	; 0x38
  /* Timing */
  Timing.AddressSetupTime = 15;
 8001b3a:	230f      	movs	r3, #15
 8001b3c:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 8001b3e:	230f      	movs	r3, #15
 8001b40:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 8001b42:	23ff      	movs	r3, #255	; 0xff
 8001b44:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 8001b46:	230f      	movs	r3, #15
 8001b48:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8001b4a:	2310      	movs	r3, #16
 8001b4c:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8001b4e:	2311      	movs	r3, #17
 8001b50:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8001b52:	2300      	movs	r3, #0
 8001b54:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8001b56:	1d3b      	adds	r3, r7, #4
 8001b58:	2200      	movs	r2, #0
 8001b5a:	4619      	mov	r1, r3
 8001b5c:	4808      	ldr	r0, [pc, #32]	; (8001b80 <MX_FSMC_Init+0xbc>)
 8001b5e:	f003 f977 	bl	8004e50 <HAL_SRAM_Init>
 8001b62:	4603      	mov	r3, r0
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d001      	beq.n	8001b6c <MX_FSMC_Init+0xa8>
  {
    Error_Handler( );
 8001b68:	f000 f810 	bl	8001b8c <Error_Handler>
  }

  /** Disconnect NADV
  */

  __HAL_AFIO_FSMCNADV_DISCONNECTED();
 8001b6c:	4b06      	ldr	r3, [pc, #24]	; (8001b88 <MX_FSMC_Init+0xc4>)
 8001b6e:	69db      	ldr	r3, [r3, #28]
 8001b70:	4a05      	ldr	r2, [pc, #20]	; (8001b88 <MX_FSMC_Init+0xc4>)
 8001b72:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b76:	61d3      	str	r3, [r2, #28]

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 8001b78:	bf00      	nop
 8001b7a:	3720      	adds	r7, #32
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bd80      	pop	{r7, pc}
 8001b80:	2000017c 	.word	0x2000017c
 8001b84:	a0000104 	.word	0xa0000104
 8001b88:	40010000 	.word	0x40010000

08001b8c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001b90:	bf00      	nop
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bc80      	pop	{r7}
 8001b96:	4770      	bx	lr

08001b98 <components_display>:
const uint8_t plus[] = { 0x00, 0x3c, 0x00, 0x00, 0x3c, 0x00, 0x00, 0x3c, 0x00, 0x00, 0x3c, 0x00, 0x00, 0x3c, 0x00, 0x00, 0x3c, 0x00, 0x00, 0x3c, 0x00, 0x00, 0x3c, 0x00, 0x00, 0x3c, 0x00, 0x00, 0x3c, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x3c, 0x00, 0x00, 0x3c, 0x00, 0x00, 0x3c, 0x00, 0x00, 0x3c, 0x00, 0x00, 0x3c, 0x00, 0x00, 0x3c, 0x00, 0x00, 0x3c, 0x00, 0x00, 0x3c, 0x00, 0x00, 0x3c, 0x00, 0x00, 0x3c, 0x00};
const uint8_t minus[] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};

const uint8_t setting[] = { 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff};

void components_display(int temp, int humidity, int luminosity, int water_level, char watering_time[][32]){
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b0a2      	sub	sp, #136	; 0x88
 8001b9c:	af02      	add	r7, sp, #8
 8001b9e:	60f8      	str	r0, [r7, #12]
 8001ba0:	60b9      	str	r1, [r7, #8]
 8001ba2:	607a      	str	r2, [r7, #4]
 8001ba4:	603b      	str	r3, [r7, #0]
	char temperature_value_display [16], humidity_value_display [16];
	char adc1_value_display [8], adc2_value_display [8];
	char watering_time_display[64];

	// clock
	LCD_Draw_Num(48, 60, num[1]);
 8001ba6:	4aa6      	ldr	r2, [pc, #664]	; (8001e40 <components_display+0x2a8>)
 8001ba8:	213c      	movs	r1, #60	; 0x3c
 8001baa:	2030      	movs	r0, #48	; 0x30
 8001bac:	f7ff fa9a 	bl	80010e4 <LCD_Draw_Num>
	LCD_Draw_Num(82, 60, num[2]);
 8001bb0:	4aa4      	ldr	r2, [pc, #656]	; (8001e44 <components_display+0x2ac>)
 8001bb2:	213c      	movs	r1, #60	; 0x3c
 8001bb4:	2052      	movs	r0, #82	; 0x52
 8001bb6:	f7ff fa95 	bl	80010e4 <LCD_Draw_Num>
	LCD_Draw_Num(108, 60, num[10]);
 8001bba:	4aa3      	ldr	r2, [pc, #652]	; (8001e48 <components_display+0x2b0>)
 8001bbc:	213c      	movs	r1, #60	; 0x3c
 8001bbe:	206c      	movs	r0, #108	; 0x6c
 8001bc0:	f7ff fa90 	bl	80010e4 <LCD_Draw_Num>
	LCD_Draw_Num(134, 60, num[0]);
 8001bc4:	4aa1      	ldr	r2, [pc, #644]	; (8001e4c <components_display+0x2b4>)
 8001bc6:	213c      	movs	r1, #60	; 0x3c
 8001bc8:	2086      	movs	r0, #134	; 0x86
 8001bca:	f7ff fa8b 	bl	80010e4 <LCD_Draw_Num>
	LCD_Draw_Num(168, 60, num[8]);
 8001bce:	4aa0      	ldr	r2, [pc, #640]	; (8001e50 <components_display+0x2b8>)
 8001bd0:	213c      	movs	r1, #60	; 0x3c
 8001bd2:	20a8      	movs	r0, #168	; 0xa8
 8001bd4:	f7ff fa86 	bl	80010e4 <LCD_Draw_Num>

    sprintf(watering_time_display, "Next watering time: %s", watering_time[0]);
 8001bd8:	f107 0310 	add.w	r3, r7, #16
 8001bdc:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8001be0:	499c      	ldr	r1, [pc, #624]	; (8001e54 <components_display+0x2bc>)
 8001be2:	4618      	mov	r0, r3
 8001be4:	f003 fc16 	bl	8005414 <siprintf>
	LCD_DrawString(30, 135, watering_time_display);
 8001be8:	f107 0310 	add.w	r3, r7, #16
 8001bec:	461a      	mov	r2, r3
 8001bee:	2187      	movs	r1, #135	; 0x87
 8001bf0:	201e      	movs	r0, #30
 8001bf2:	f7ff fa29 	bl	8001048 <LCD_DrawString>

	//DHT11 Temperature Value and Display
    LCD_Draw_24sqr(20, 166, temperature);
 8001bf6:	4a98      	ldr	r2, [pc, #608]	; (8001e58 <components_display+0x2c0>)
 8001bf8:	21a6      	movs	r1, #166	; 0xa6
 8001bfa:	2014      	movs	r0, #20
 8001bfc:	f7ff faaf 	bl	800115e <LCD_Draw_24sqr>
    sprintf(temperature_value_display, "%d", temp);
 8001c00:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001c04:	68fa      	ldr	r2, [r7, #12]
 8001c06:	4995      	ldr	r1, [pc, #596]	; (8001e5c <components_display+0x2c4>)
 8001c08:	4618      	mov	r0, r3
 8001c0a:	f003 fc03 	bl	8005414 <siprintf>
	LCD_Clear(51, 167, 32, 16, 0xffff);
 8001c0e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c12:	9300      	str	r3, [sp, #0]
 8001c14:	2310      	movs	r3, #16
 8001c16:	2220      	movs	r2, #32
 8001c18:	21a7      	movs	r1, #167	; 0xa7
 8001c1a:	2033      	movs	r0, #51	; 0x33
 8001c1c:	f7ff f925 	bl	8000e6a <LCD_Clear>
	LCD_DrawString(51, 167, temperature_value_display);
 8001c20:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001c24:	461a      	mov	r2, r3
 8001c26:	21a7      	movs	r1, #167	; 0xa7
 8001c28:	2033      	movs	r0, #51	; 0x33
 8001c2a:	f7ff fa0d 	bl	8001048 <LCD_DrawString>
	LCD_DrawLine(50, 166 ,100, 166, 0x0);
 8001c2e:	2300      	movs	r3, #0
 8001c30:	9300      	str	r3, [sp, #0]
 8001c32:	23a6      	movs	r3, #166	; 0xa6
 8001c34:	2264      	movs	r2, #100	; 0x64
 8001c36:	21a6      	movs	r1, #166	; 0xa6
 8001c38:	2032      	movs	r0, #50	; 0x32
 8001c3a:	f7ff f939 	bl	8000eb0 <LCD_DrawLine>
	LCD_DrawLine(50, 186 ,100, 186, 0x0);
 8001c3e:	2300      	movs	r3, #0
 8001c40:	9300      	str	r3, [sp, #0]
 8001c42:	23ba      	movs	r3, #186	; 0xba
 8001c44:	2264      	movs	r2, #100	; 0x64
 8001c46:	21ba      	movs	r1, #186	; 0xba
 8001c48:	2032      	movs	r0, #50	; 0x32
 8001c4a:	f7ff f931 	bl	8000eb0 <LCD_DrawLine>
	LCD_DrawLine(50, 166 ,50, 186, 0x0);
 8001c4e:	2300      	movs	r3, #0
 8001c50:	9300      	str	r3, [sp, #0]
 8001c52:	23ba      	movs	r3, #186	; 0xba
 8001c54:	2232      	movs	r2, #50	; 0x32
 8001c56:	21a6      	movs	r1, #166	; 0xa6
 8001c58:	2032      	movs	r0, #50	; 0x32
 8001c5a:	f7ff f929 	bl	8000eb0 <LCD_DrawLine>
	LCD_DrawLine(100, 166 ,100, 186, 0x0);
 8001c5e:	2300      	movs	r3, #0
 8001c60:	9300      	str	r3, [sp, #0]
 8001c62:	23ba      	movs	r3, #186	; 0xba
 8001c64:	2264      	movs	r2, #100	; 0x64
 8001c66:	21a6      	movs	r1, #166	; 0xa6
 8001c68:	2064      	movs	r0, #100	; 0x64
 8001c6a:	f7ff f921 	bl	8000eb0 <LCD_DrawLine>

	//DHT11 Humidity Value and Display
	LCD_Draw_24sqr(20, 206, dew);
 8001c6e:	4a7c      	ldr	r2, [pc, #496]	; (8001e60 <components_display+0x2c8>)
 8001c70:	21ce      	movs	r1, #206	; 0xce
 8001c72:	2014      	movs	r0, #20
 8001c74:	f7ff fa73 	bl	800115e <LCD_Draw_24sqr>
    sprintf(humidity_value_display, "%d", humidity);
 8001c78:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001c7c:	68ba      	ldr	r2, [r7, #8]
 8001c7e:	4977      	ldr	r1, [pc, #476]	; (8001e5c <components_display+0x2c4>)
 8001c80:	4618      	mov	r0, r3
 8001c82:	f003 fbc7 	bl	8005414 <siprintf>
	LCD_Clear(51, 207, 32, 16, 0xffff);
 8001c86:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c8a:	9300      	str	r3, [sp, #0]
 8001c8c:	2310      	movs	r3, #16
 8001c8e:	2220      	movs	r2, #32
 8001c90:	21cf      	movs	r1, #207	; 0xcf
 8001c92:	2033      	movs	r0, #51	; 0x33
 8001c94:	f7ff f8e9 	bl	8000e6a <LCD_Clear>
	LCD_DrawString(51, 207, humidity_value_display);
 8001c98:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001c9c:	461a      	mov	r2, r3
 8001c9e:	21cf      	movs	r1, #207	; 0xcf
 8001ca0:	2033      	movs	r0, #51	; 0x33
 8001ca2:	f7ff f9d1 	bl	8001048 <LCD_DrawString>
	LCD_DrawLine(50, 206 ,100, 206, 0x0);
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	9300      	str	r3, [sp, #0]
 8001caa:	23ce      	movs	r3, #206	; 0xce
 8001cac:	2264      	movs	r2, #100	; 0x64
 8001cae:	21ce      	movs	r1, #206	; 0xce
 8001cb0:	2032      	movs	r0, #50	; 0x32
 8001cb2:	f7ff f8fd 	bl	8000eb0 <LCD_DrawLine>
	LCD_DrawLine(50, 226 ,100, 226, 0x0);
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	9300      	str	r3, [sp, #0]
 8001cba:	23e2      	movs	r3, #226	; 0xe2
 8001cbc:	2264      	movs	r2, #100	; 0x64
 8001cbe:	21e2      	movs	r1, #226	; 0xe2
 8001cc0:	2032      	movs	r0, #50	; 0x32
 8001cc2:	f7ff f8f5 	bl	8000eb0 <LCD_DrawLine>
	LCD_DrawLine(50, 206 ,50, 226, 0x0);
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	9300      	str	r3, [sp, #0]
 8001cca:	23e2      	movs	r3, #226	; 0xe2
 8001ccc:	2232      	movs	r2, #50	; 0x32
 8001cce:	21ce      	movs	r1, #206	; 0xce
 8001cd0:	2032      	movs	r0, #50	; 0x32
 8001cd2:	f7ff f8ed 	bl	8000eb0 <LCD_DrawLine>
	LCD_DrawLine(100, 206 ,100, 226, 0x0);
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	9300      	str	r3, [sp, #0]
 8001cda:	23e2      	movs	r3, #226	; 0xe2
 8001cdc:	2264      	movs	r2, #100	; 0x64
 8001cde:	21ce      	movs	r1, #206	; 0xce
 8001ce0:	2064      	movs	r0, #100	; 0x64
 8001ce2:	f7ff f8e5 	bl	8000eb0 <LCD_DrawLine>


	//LDR Sensor Value and Display
	sprintf(adc2_value_display, "%d", luminosity);
 8001ce6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001cea:	687a      	ldr	r2, [r7, #4]
 8001cec:	495b      	ldr	r1, [pc, #364]	; (8001e5c <components_display+0x2c4>)
 8001cee:	4618      	mov	r0, r3
 8001cf0:	f003 fb90 	bl	8005414 <siprintf>
	LCD_Clear(51, 247, 32, 16, 0xffff);
 8001cf4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001cf8:	9300      	str	r3, [sp, #0]
 8001cfa:	2310      	movs	r3, #16
 8001cfc:	2220      	movs	r2, #32
 8001cfe:	21f7      	movs	r1, #247	; 0xf7
 8001d00:	2033      	movs	r0, #51	; 0x33
 8001d02:	f7ff f8b2 	bl	8000e6a <LCD_Clear>
	LCD_DrawString(51, 247, adc2_value_display);
 8001d06:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001d0a:	461a      	mov	r2, r3
 8001d0c:	21f7      	movs	r1, #247	; 0xf7
 8001d0e:	2033      	movs	r0, #51	; 0x33
 8001d10:	f7ff f99a 	bl	8001048 <LCD_DrawString>
	LCD_Draw_24sqr(20, 246, light);
 8001d14:	4a53      	ldr	r2, [pc, #332]	; (8001e64 <components_display+0x2cc>)
 8001d16:	21f6      	movs	r1, #246	; 0xf6
 8001d18:	2014      	movs	r0, #20
 8001d1a:	f7ff fa20 	bl	800115e <LCD_Draw_24sqr>
	LCD_DrawLine(50, 246 ,100, 246, 0x0);
 8001d1e:	2300      	movs	r3, #0
 8001d20:	9300      	str	r3, [sp, #0]
 8001d22:	23f6      	movs	r3, #246	; 0xf6
 8001d24:	2264      	movs	r2, #100	; 0x64
 8001d26:	21f6      	movs	r1, #246	; 0xf6
 8001d28:	2032      	movs	r0, #50	; 0x32
 8001d2a:	f7ff f8c1 	bl	8000eb0 <LCD_DrawLine>
	LCD_DrawLine(50, 266 ,100, 266, 0x0);
 8001d2e:	2300      	movs	r3, #0
 8001d30:	9300      	str	r3, [sp, #0]
 8001d32:	f44f 7385 	mov.w	r3, #266	; 0x10a
 8001d36:	2264      	movs	r2, #100	; 0x64
 8001d38:	f44f 7185 	mov.w	r1, #266	; 0x10a
 8001d3c:	2032      	movs	r0, #50	; 0x32
 8001d3e:	f7ff f8b7 	bl	8000eb0 <LCD_DrawLine>
	LCD_DrawLine(50, 246 ,50, 266, 0x0);
 8001d42:	2300      	movs	r3, #0
 8001d44:	9300      	str	r3, [sp, #0]
 8001d46:	f44f 7385 	mov.w	r3, #266	; 0x10a
 8001d4a:	2232      	movs	r2, #50	; 0x32
 8001d4c:	21f6      	movs	r1, #246	; 0xf6
 8001d4e:	2032      	movs	r0, #50	; 0x32
 8001d50:	f7ff f8ae 	bl	8000eb0 <LCD_DrawLine>
    LCD_DrawLine(100, 246 ,100, 266, 0x0);
 8001d54:	2300      	movs	r3, #0
 8001d56:	9300      	str	r3, [sp, #0]
 8001d58:	f44f 7385 	mov.w	r3, #266	; 0x10a
 8001d5c:	2264      	movs	r2, #100	; 0x64
 8001d5e:	21f6      	movs	r1, #246	; 0xf6
 8001d60:	2064      	movs	r0, #100	; 0x64
 8001d62:	f7ff f8a5 	bl	8000eb0 <LCD_DrawLine>

    // water level of the tank
    LCD_Clear (145, 210, 70, 50, 0xffff);
 8001d66:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001d6a:	9300      	str	r3, [sp, #0]
 8001d6c:	2332      	movs	r3, #50	; 0x32
 8001d6e:	2246      	movs	r2, #70	; 0x46
 8001d70:	21d2      	movs	r1, #210	; 0xd2
 8001d72:	2091      	movs	r0, #145	; 0x91
 8001d74:	f7ff f879 	bl	8000e6a <LCD_Clear>
	sprintf(adc1_value_display, "%d", water_level);
 8001d78:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001d7c:	683a      	ldr	r2, [r7, #0]
 8001d7e:	4937      	ldr	r1, [pc, #220]	; (8001e5c <components_display+0x2c4>)
 8001d80:	4618      	mov	r0, r3
 8001d82:	f003 fb47 	bl	8005414 <siprintf>
	LCD_Clear(140, 160, 100, 20, 0xffff);
 8001d86:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001d8a:	9300      	str	r3, [sp, #0]
 8001d8c:	2314      	movs	r3, #20
 8001d8e:	2264      	movs	r2, #100	; 0x64
 8001d90:	21a0      	movs	r1, #160	; 0xa0
 8001d92:	208c      	movs	r0, #140	; 0x8c
 8001d94:	f7ff f869 	bl	8000e6a <LCD_Clear>
	water_level *= 0.02;
 8001d98:	6838      	ldr	r0, [r7, #0]
 8001d9a:	f7fe fb97 	bl	80004cc <__aeabi_i2d>
 8001d9e:	a326      	add	r3, pc, #152	; (adr r3, 8001e38 <components_display+0x2a0>)
 8001da0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001da4:	f7fe fbfc 	bl	80005a0 <__aeabi_dmul>
 8001da8:	4602      	mov	r2, r0
 8001daa:	460b      	mov	r3, r1
 8001dac:	4610      	mov	r0, r2
 8001dae:	4619      	mov	r1, r3
 8001db0:	f7fe fe08 	bl	80009c4 <__aeabi_d2iz>
 8001db4:	4603      	mov	r3, r0
 8001db6:	603b      	str	r3, [r7, #0]
	LCD_DrawString(140, 160, adc1_value_display);
 8001db8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001dbc:	461a      	mov	r2, r3
 8001dbe:	21a0      	movs	r1, #160	; 0xa0
 8001dc0:	208c      	movs	r0, #140	; 0x8c
 8001dc2:	f7ff f941 	bl	8001048 <LCD_DrawString>
	LCD_Clear(140, 180, 100, 20, 0xffff);
 8001dc6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001dca:	9300      	str	r3, [sp, #0]
 8001dcc:	2314      	movs	r3, #20
 8001dce:	2264      	movs	r2, #100	; 0x64
 8001dd0:	21b4      	movs	r1, #180	; 0xb4
 8001dd2:	208c      	movs	r0, #140	; 0x8c
 8001dd4:	f7ff f849 	bl	8000e6a <LCD_Clear>
	LCD_DrawString(140, 180, "Water level");
 8001dd8:	4a23      	ldr	r2, [pc, #140]	; (8001e68 <components_display+0x2d0>)
 8001dda:	21b4      	movs	r1, #180	; 0xb4
 8001ddc:	208c      	movs	r0, #140	; 0x8c
 8001dde:	f7ff f933 	bl	8001048 <LCD_DrawString>
    LCD_DrawLine(140, 206, 140, 266, 0x0);
 8001de2:	2300      	movs	r3, #0
 8001de4:	9300      	str	r3, [sp, #0]
 8001de6:	f44f 7385 	mov.w	r3, #266	; 0x10a
 8001dea:	228c      	movs	r2, #140	; 0x8c
 8001dec:	21ce      	movs	r1, #206	; 0xce
 8001dee:	208c      	movs	r0, #140	; 0x8c
 8001df0:	f7ff f85e 	bl	8000eb0 <LCD_DrawLine>
    LCD_DrawLine(220, 206, 220, 266, 0x0);
 8001df4:	2300      	movs	r3, #0
 8001df6:	9300      	str	r3, [sp, #0]
 8001df8:	f44f 7385 	mov.w	r3, #266	; 0x10a
 8001dfc:	22dc      	movs	r2, #220	; 0xdc
 8001dfe:	21ce      	movs	r1, #206	; 0xce
 8001e00:	20dc      	movs	r0, #220	; 0xdc
 8001e02:	f7ff f855 	bl	8000eb0 <LCD_DrawLine>
	LCD_DrawLine(140, 266, 220, 266, 0x0);
 8001e06:	2300      	movs	r3, #0
 8001e08:	9300      	str	r3, [sp, #0]
 8001e0a:	f44f 7385 	mov.w	r3, #266	; 0x10a
 8001e0e:	22dc      	movs	r2, #220	; 0xdc
 8001e10:	f44f 7185 	mov.w	r1, #266	; 0x10a
 8001e14:	208c      	movs	r0, #140	; 0x8c
 8001e16:	f7ff f84b 	bl	8000eb0 <LCD_DrawLine>
	LCD_Clear (145, 210, 70, water_level, 0x001f);
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	b29b      	uxth	r3, r3
 8001e1e:	221f      	movs	r2, #31
 8001e20:	9200      	str	r2, [sp, #0]
 8001e22:	2246      	movs	r2, #70	; 0x46
 8001e24:	21d2      	movs	r1, #210	; 0xd2
 8001e26:	2091      	movs	r0, #145	; 0x91
 8001e28:	f7ff f81f 	bl	8000e6a <LCD_Clear>
}
 8001e2c:	bf00      	nop
 8001e2e:	3780      	adds	r7, #128	; 0x80
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bd80      	pop	{r7, pc}
 8001e34:	f3af 8000 	nop.w
 8001e38:	47ae147b 	.word	0x47ae147b
 8001e3c:	3f947ae1 	.word	0x3f947ae1
 8001e40:	080064b4 	.word	0x080064b4
 8001e44:	08006514 	.word	0x08006514
 8001e48:	08006814 	.word	0x08006814
 8001e4c:	08006454 	.word	0x08006454
 8001e50:	08006754 	.word	0x08006754
 8001e54:	08005da8 	.word	0x08005da8
 8001e58:	080068bc 	.word	0x080068bc
 8001e5c:	08005dc0 	.word	0x08005dc0
 8001e60:	08006874 	.word	0x08006874
 8001e64:	08006904 	.word	0x08006904
 8001e68:	08005dc4 	.word	0x08005dc4

08001e6c <HomePage>:

void HomePage(int temp, int humidity, int luminosity, int water_level, char watering_time[][32]){
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b086      	sub	sp, #24
 8001e70:	af02      	add	r7, sp, #8
 8001e72:	60f8      	str	r0, [r7, #12]
 8001e74:	60b9      	str	r1, [r7, #8]
 8001e76:	607a      	str	r2, [r7, #4]
 8001e78:	603b      	str	r3, [r7, #0]
	LCD_Draw_24sqr(10, 10, setting);
 8001e7a:	4a0c      	ldr	r2, [pc, #48]	; (8001eac <HomePage+0x40>)
 8001e7c:	210a      	movs	r1, #10
 8001e7e:	200a      	movs	r0, #10
 8001e80:	f7ff f96d 	bl	800115e <LCD_Draw_24sqr>
	components_display(temp, humidity, luminosity, water_level, watering_time);
 8001e84:	69bb      	ldr	r3, [r7, #24]
 8001e86:	9300      	str	r3, [sp, #0]
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	687a      	ldr	r2, [r7, #4]
 8001e8c:	68b9      	ldr	r1, [r7, #8]
 8001e8e:	68f8      	ldr	r0, [r7, #12]
 8001e90:	f7ff fe82 	bl	8001b98 <components_display>
	LCD_DrawLine(0, 152, 240, 152, 0x0);
 8001e94:	2300      	movs	r3, #0
 8001e96:	9300      	str	r3, [sp, #0]
 8001e98:	2398      	movs	r3, #152	; 0x98
 8001e9a:	22f0      	movs	r2, #240	; 0xf0
 8001e9c:	2198      	movs	r1, #152	; 0x98
 8001e9e:	2000      	movs	r0, #0
 8001ea0:	f7ff f806 	bl	8000eb0 <LCD_DrawLine>
}
 8001ea4:	bf00      	nop
 8001ea6:	3710      	adds	r7, #16
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	bd80      	pop	{r7, pc}
 8001eac:	0800694c 	.word	0x0800694c

08001eb0 <SetTimePage>:

void SetTimePage(char watering_time[][32]){
 8001eb0:	b5b0      	push	{r4, r5, r7, lr}
 8001eb2:	b088      	sub	sp, #32
 8001eb4:	af02      	add	r7, sp, #8
 8001eb6:	6078      	str	r0, [r7, #4]
//	Setting Watering time
	strType_XPT2046_Coordinate touchpt;
	char touch_x[4], touch_y[4];
	uint8_t hr = 0, min = 0;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	75fb      	strb	r3, [r7, #23]
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	75bb      	strb	r3, [r7, #22]
	LCD_Clear(0, 0, 240, 320, 0xffff);
 8001ec0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001ec4:	9300      	str	r3, [sp, #0]
 8001ec6:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001eca:	22f0      	movs	r2, #240	; 0xf0
 8001ecc:	2100      	movs	r1, #0
 8001ece:	2000      	movs	r0, #0
 8001ed0:	f7fe ffcb 	bl	8000e6a <LCD_Clear>
	LCD_Draw_24sqr(10, 10, setting);
 8001ed4:	4a8e      	ldr	r2, [pc, #568]	; (8002110 <SetTimePage+0x260>)
 8001ed6:	210a      	movs	r1, #10
 8001ed8:	200a      	movs	r0, #10
 8001eda:	f7ff f940 	bl	800115e <LCD_Draw_24sqr>
	LCD_DrawString(40, 50, "Set the watering time:");
 8001ede:	4a8d      	ldr	r2, [pc, #564]	; (8002114 <SetTimePage+0x264>)
 8001ee0:	2132      	movs	r1, #50	; 0x32
 8001ee2:	2028      	movs	r0, #40	; 0x28
 8001ee4:	f7ff f8b0 	bl	8001048 <LCD_DrawString>
	LCD_Draw_Num(48, 80, num[0]);
 8001ee8:	4a8b      	ldr	r2, [pc, #556]	; (8002118 <SetTimePage+0x268>)
 8001eea:	2150      	movs	r1, #80	; 0x50
 8001eec:	2030      	movs	r0, #48	; 0x30
 8001eee:	f7ff f8f9 	bl	80010e4 <LCD_Draw_Num>
	LCD_Draw_Num(82, 80, num[0]);
 8001ef2:	4a89      	ldr	r2, [pc, #548]	; (8002118 <SetTimePage+0x268>)
 8001ef4:	2150      	movs	r1, #80	; 0x50
 8001ef6:	2052      	movs	r0, #82	; 0x52
 8001ef8:	f7ff f8f4 	bl	80010e4 <LCD_Draw_Num>
	LCD_Draw_Num(108, 80, num[10]);
 8001efc:	4a87      	ldr	r2, [pc, #540]	; (800211c <SetTimePage+0x26c>)
 8001efe:	2150      	movs	r1, #80	; 0x50
 8001f00:	206c      	movs	r0, #108	; 0x6c
 8001f02:	f7ff f8ef 	bl	80010e4 <LCD_Draw_Num>
	LCD_Draw_Num(134, 80, num[0]);
 8001f06:	4a84      	ldr	r2, [pc, #528]	; (8002118 <SetTimePage+0x268>)
 8001f08:	2150      	movs	r1, #80	; 0x50
 8001f0a:	2086      	movs	r0, #134	; 0x86
 8001f0c:	f7ff f8ea 	bl	80010e4 <LCD_Draw_Num>
	LCD_Draw_Num(168, 80, num[0]);
 8001f10:	4a81      	ldr	r2, [pc, #516]	; (8002118 <SetTimePage+0x268>)
 8001f12:	2150      	movs	r1, #80	; 0x50
 8001f14:	20a8      	movs	r0, #168	; 0xa8
 8001f16:	f7ff f8e5 	bl	80010e4 <LCD_Draw_Num>

	LCD_DrawLine(0, 135, 240, 135, 0x0);
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	9300      	str	r3, [sp, #0]
 8001f1e:	2387      	movs	r3, #135	; 0x87
 8001f20:	22f0      	movs	r2, #240	; 0xf0
 8001f22:	2187      	movs	r1, #135	; 0x87
 8001f24:	2000      	movs	r0, #0
 8001f26:	f7fe ffc3 	bl	8000eb0 <LCD_DrawLine>

			while(1){
			  XPT2046_Get_TouchedPoint(&touchpt, &strXPT2046_TouchPara);
 8001f2a:	f107 0310 	add.w	r3, r7, #16
 8001f2e:	497c      	ldr	r1, [pc, #496]	; (8002120 <SetTimePage+0x270>)
 8001f30:	4618      	mov	r0, r3
 8001f32:	f000 fd41 	bl	80029b8 <XPT2046_Get_TouchedPoint>
			  if(touchpt.x <= 270 && touchpt.x >= 235 && touchpt.y <= 120 && touchpt.y >= 60) hr += 1;
 8001f36:	8a3b      	ldrh	r3, [r7, #16]
 8001f38:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8001f3c:	d80c      	bhi.n	8001f58 <SetTimePage+0xa8>
 8001f3e:	8a3b      	ldrh	r3, [r7, #16]
 8001f40:	2bea      	cmp	r3, #234	; 0xea
 8001f42:	d909      	bls.n	8001f58 <SetTimePage+0xa8>
 8001f44:	8a7b      	ldrh	r3, [r7, #18]
 8001f46:	2b78      	cmp	r3, #120	; 0x78
 8001f48:	d806      	bhi.n	8001f58 <SetTimePage+0xa8>
 8001f4a:	8a7b      	ldrh	r3, [r7, #18]
 8001f4c:	2b3b      	cmp	r3, #59	; 0x3b
 8001f4e:	d903      	bls.n	8001f58 <SetTimePage+0xa8>
 8001f50:	7dfb      	ldrb	r3, [r7, #23]
 8001f52:	3301      	adds	r3, #1
 8001f54:	75fb      	strb	r3, [r7, #23]
 8001f56:	e00f      	b.n	8001f78 <SetTimePage+0xc8>
			  else if (touchpt.x <= 270 && touchpt.x >= 235 && touchpt.y <= 190 && touchpt.y >= 135) min += 1;
 8001f58:	8a3b      	ldrh	r3, [r7, #16]
 8001f5a:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8001f5e:	d80b      	bhi.n	8001f78 <SetTimePage+0xc8>
 8001f60:	8a3b      	ldrh	r3, [r7, #16]
 8001f62:	2bea      	cmp	r3, #234	; 0xea
 8001f64:	d908      	bls.n	8001f78 <SetTimePage+0xc8>
 8001f66:	8a7b      	ldrh	r3, [r7, #18]
 8001f68:	2bbe      	cmp	r3, #190	; 0xbe
 8001f6a:	d805      	bhi.n	8001f78 <SetTimePage+0xc8>
 8001f6c:	8a7b      	ldrh	r3, [r7, #18]
 8001f6e:	2b86      	cmp	r3, #134	; 0x86
 8001f70:	d902      	bls.n	8001f78 <SetTimePage+0xc8>
 8001f72:	7dbb      	ldrb	r3, [r7, #22]
 8001f74:	3301      	adds	r3, #1
 8001f76:	75bb      	strb	r3, [r7, #22]
			  if(hr == 24) hr = 0;
 8001f78:	7dfb      	ldrb	r3, [r7, #23]
 8001f7a:	2b18      	cmp	r3, #24
 8001f7c:	d101      	bne.n	8001f82 <SetTimePage+0xd2>
 8001f7e:	2300      	movs	r3, #0
 8001f80:	75fb      	strb	r3, [r7, #23]
			  if(min == 60) min = 0;
 8001f82:	7dbb      	ldrb	r3, [r7, #22]
 8001f84:	2b3c      	cmp	r3, #60	; 0x3c
 8001f86:	d101      	bne.n	8001f8c <SetTimePage+0xdc>
 8001f88:	2300      	movs	r3, #0
 8001f8a:	75bb      	strb	r3, [r7, #22]
			  LCD_Draw_Num(48, 80, num[hr/10]);
 8001f8c:	7dfb      	ldrb	r3, [r7, #23]
 8001f8e:	4a65      	ldr	r2, [pc, #404]	; (8002124 <SetTimePage+0x274>)
 8001f90:	fba2 2303 	umull	r2, r3, r2, r3
 8001f94:	08db      	lsrs	r3, r3, #3
 8001f96:	b2db      	uxtb	r3, r3
 8001f98:	461a      	mov	r2, r3
 8001f9a:	4613      	mov	r3, r2
 8001f9c:	005b      	lsls	r3, r3, #1
 8001f9e:	4413      	add	r3, r2
 8001fa0:	015b      	lsls	r3, r3, #5
 8001fa2:	4a5d      	ldr	r2, [pc, #372]	; (8002118 <SetTimePage+0x268>)
 8001fa4:	4413      	add	r3, r2
 8001fa6:	461a      	mov	r2, r3
 8001fa8:	2150      	movs	r1, #80	; 0x50
 8001faa:	2030      	movs	r0, #48	; 0x30
 8001fac:	f7ff f89a 	bl	80010e4 <LCD_Draw_Num>
			  LCD_Draw_Num(82, 80, num[hr%10]);
 8001fb0:	7dfa      	ldrb	r2, [r7, #23]
 8001fb2:	4b5c      	ldr	r3, [pc, #368]	; (8002124 <SetTimePage+0x274>)
 8001fb4:	fba3 1302 	umull	r1, r3, r3, r2
 8001fb8:	08d9      	lsrs	r1, r3, #3
 8001fba:	460b      	mov	r3, r1
 8001fbc:	009b      	lsls	r3, r3, #2
 8001fbe:	440b      	add	r3, r1
 8001fc0:	005b      	lsls	r3, r3, #1
 8001fc2:	1ad3      	subs	r3, r2, r3
 8001fc4:	b2db      	uxtb	r3, r3
 8001fc6:	461a      	mov	r2, r3
 8001fc8:	4613      	mov	r3, r2
 8001fca:	005b      	lsls	r3, r3, #1
 8001fcc:	4413      	add	r3, r2
 8001fce:	015b      	lsls	r3, r3, #5
 8001fd0:	4a51      	ldr	r2, [pc, #324]	; (8002118 <SetTimePage+0x268>)
 8001fd2:	4413      	add	r3, r2
 8001fd4:	461a      	mov	r2, r3
 8001fd6:	2150      	movs	r1, #80	; 0x50
 8001fd8:	2052      	movs	r0, #82	; 0x52
 8001fda:	f7ff f883 	bl	80010e4 <LCD_Draw_Num>
			  LCD_Draw_Num(108, 80, num[10]);
 8001fde:	4a4f      	ldr	r2, [pc, #316]	; (800211c <SetTimePage+0x26c>)
 8001fe0:	2150      	movs	r1, #80	; 0x50
 8001fe2:	206c      	movs	r0, #108	; 0x6c
 8001fe4:	f7ff f87e 	bl	80010e4 <LCD_Draw_Num>
			  LCD_Draw_Num(134, 80, num[min/10]);
 8001fe8:	7dbb      	ldrb	r3, [r7, #22]
 8001fea:	4a4e      	ldr	r2, [pc, #312]	; (8002124 <SetTimePage+0x274>)
 8001fec:	fba2 2303 	umull	r2, r3, r2, r3
 8001ff0:	08db      	lsrs	r3, r3, #3
 8001ff2:	b2db      	uxtb	r3, r3
 8001ff4:	461a      	mov	r2, r3
 8001ff6:	4613      	mov	r3, r2
 8001ff8:	005b      	lsls	r3, r3, #1
 8001ffa:	4413      	add	r3, r2
 8001ffc:	015b      	lsls	r3, r3, #5
 8001ffe:	4a46      	ldr	r2, [pc, #280]	; (8002118 <SetTimePage+0x268>)
 8002000:	4413      	add	r3, r2
 8002002:	461a      	mov	r2, r3
 8002004:	2150      	movs	r1, #80	; 0x50
 8002006:	2086      	movs	r0, #134	; 0x86
 8002008:	f7ff f86c 	bl	80010e4 <LCD_Draw_Num>
			  LCD_Draw_Num(168, 80, num[min%10]);
 800200c:	7dba      	ldrb	r2, [r7, #22]
 800200e:	4b45      	ldr	r3, [pc, #276]	; (8002124 <SetTimePage+0x274>)
 8002010:	fba3 1302 	umull	r1, r3, r3, r2
 8002014:	08d9      	lsrs	r1, r3, #3
 8002016:	460b      	mov	r3, r1
 8002018:	009b      	lsls	r3, r3, #2
 800201a:	440b      	add	r3, r1
 800201c:	005b      	lsls	r3, r3, #1
 800201e:	1ad3      	subs	r3, r2, r3
 8002020:	b2db      	uxtb	r3, r3
 8002022:	461a      	mov	r2, r3
 8002024:	4613      	mov	r3, r2
 8002026:	005b      	lsls	r3, r3, #1
 8002028:	4413      	add	r3, r2
 800202a:	015b      	lsls	r3, r3, #5
 800202c:	4a3a      	ldr	r2, [pc, #232]	; (8002118 <SetTimePage+0x268>)
 800202e:	4413      	add	r3, r2
 8002030:	461a      	mov	r2, r3
 8002032:	2150      	movs	r1, #80	; 0x50
 8002034:	20a8      	movs	r0, #168	; 0xa8
 8002036:	f7ff f855 	bl	80010e4 <LCD_Draw_Num>
			  HAL_Delay(200);
 800203a:	20c8      	movs	r0, #200	; 0xc8
 800203c:	f000 fdcc 	bl	8002bd8 <HAL_Delay>
	//		  LCD_Clear(48, 60, 192, 92, 0xffff);

	//		  LCD_Clear(20, 200, 220, 20, 0xffff);
			  XPT2046_Get_TouchedPoint(&touchpt, &strXPT2046_TouchPara);
 8002040:	f107 0310 	add.w	r3, r7, #16
 8002044:	4936      	ldr	r1, [pc, #216]	; (8002120 <SetTimePage+0x270>)
 8002046:	4618      	mov	r0, r3
 8002048:	f000 fcb6 	bl	80029b8 <XPT2046_Get_TouchedPoint>
			  if(touchpt.x >= 290 && touchpt.y<=80) break;
 800204c:	8a3b      	ldrh	r3, [r7, #16]
 800204e:	f5b3 7f91 	cmp.w	r3, #290	; 0x122
 8002052:	d302      	bcc.n	800205a <SetTimePage+0x1aa>
 8002054:	8a7b      	ldrh	r3, [r7, #18]
 8002056:	2b50      	cmp	r3, #80	; 0x50
 8002058:	d91e      	bls.n	8002098 <SetTimePage+0x1e8>
			  sprintf(touch_x, "%03d", touchpt.x);
 800205a:	8a3b      	ldrh	r3, [r7, #16]
 800205c:	461a      	mov	r2, r3
 800205e:	f107 030c 	add.w	r3, r7, #12
 8002062:	4931      	ldr	r1, [pc, #196]	; (8002128 <SetTimePage+0x278>)
 8002064:	4618      	mov	r0, r3
 8002066:	f003 f9d5 	bl	8005414 <siprintf>
			  sprintf(touch_y, "%03d", touchpt.y);
 800206a:	8a7b      	ldrh	r3, [r7, #18]
 800206c:	461a      	mov	r2, r3
 800206e:	f107 0308 	add.w	r3, r7, #8
 8002072:	492d      	ldr	r1, [pc, #180]	; (8002128 <SetTimePage+0x278>)
 8002074:	4618      	mov	r0, r3
 8002076:	f003 f9cd 	bl	8005414 <siprintf>
			  LCD_DrawString(20, 200, touch_x);
 800207a:	f107 030c 	add.w	r3, r7, #12
 800207e:	461a      	mov	r2, r3
 8002080:	21c8      	movs	r1, #200	; 0xc8
 8002082:	2014      	movs	r0, #20
 8002084:	f7fe ffe0 	bl	8001048 <LCD_DrawString>
			  LCD_DrawString(200, 200, touch_y);
 8002088:	f107 0308 	add.w	r3, r7, #8
 800208c:	461a      	mov	r2, r3
 800208e:	21c8      	movs	r1, #200	; 0xc8
 8002090:	20c8      	movs	r0, #200	; 0xc8
 8002092:	f7fe ffd9 	bl	8001048 <LCD_DrawString>
			  XPT2046_Get_TouchedPoint(&touchpt, &strXPT2046_TouchPara);
 8002096:	e748      	b.n	8001f2a <SetTimePage+0x7a>
			  if(touchpt.x >= 290 && touchpt.y<=80) break;
 8002098:	bf00      	nop
			}
		    LCD_Clear(0, 0, 240, 320, 0xffff);
 800209a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800209e:	9300      	str	r3, [sp, #0]
 80020a0:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80020a4:	22f0      	movs	r2, #240	; 0xf0
 80020a6:	2100      	movs	r1, #0
 80020a8:	2000      	movs	r0, #0
 80020aa:	f7fe fede 	bl	8000e6a <LCD_Clear>
			sprintf(watering_time, "%d%d:%d%d", hr/10, hr%10, min/10, min%10);
 80020ae:	7dfb      	ldrb	r3, [r7, #23]
 80020b0:	4a1c      	ldr	r2, [pc, #112]	; (8002124 <SetTimePage+0x274>)
 80020b2:	fba2 2303 	umull	r2, r3, r2, r3
 80020b6:	08db      	lsrs	r3, r3, #3
 80020b8:	b2db      	uxtb	r3, r3
 80020ba:	461c      	mov	r4, r3
 80020bc:	7dfa      	ldrb	r2, [r7, #23]
 80020be:	4b19      	ldr	r3, [pc, #100]	; (8002124 <SetTimePage+0x274>)
 80020c0:	fba3 1302 	umull	r1, r3, r3, r2
 80020c4:	08d9      	lsrs	r1, r3, #3
 80020c6:	460b      	mov	r3, r1
 80020c8:	009b      	lsls	r3, r3, #2
 80020ca:	440b      	add	r3, r1
 80020cc:	005b      	lsls	r3, r3, #1
 80020ce:	1ad3      	subs	r3, r2, r3
 80020d0:	b2db      	uxtb	r3, r3
 80020d2:	461d      	mov	r5, r3
 80020d4:	7dbb      	ldrb	r3, [r7, #22]
 80020d6:	4a13      	ldr	r2, [pc, #76]	; (8002124 <SetTimePage+0x274>)
 80020d8:	fba2 2303 	umull	r2, r3, r2, r3
 80020dc:	08db      	lsrs	r3, r3, #3
 80020de:	b2db      	uxtb	r3, r3
 80020e0:	4618      	mov	r0, r3
 80020e2:	7dba      	ldrb	r2, [r7, #22]
 80020e4:	4b0f      	ldr	r3, [pc, #60]	; (8002124 <SetTimePage+0x274>)
 80020e6:	fba3 1302 	umull	r1, r3, r3, r2
 80020ea:	08d9      	lsrs	r1, r3, #3
 80020ec:	460b      	mov	r3, r1
 80020ee:	009b      	lsls	r3, r3, #2
 80020f0:	440b      	add	r3, r1
 80020f2:	005b      	lsls	r3, r3, #1
 80020f4:	1ad3      	subs	r3, r2, r3
 80020f6:	b2db      	uxtb	r3, r3
 80020f8:	9301      	str	r3, [sp, #4]
 80020fa:	9000      	str	r0, [sp, #0]
 80020fc:	462b      	mov	r3, r5
 80020fe:	4622      	mov	r2, r4
 8002100:	490a      	ldr	r1, [pc, #40]	; (800212c <SetTimePage+0x27c>)
 8002102:	6878      	ldr	r0, [r7, #4]
 8002104:	f003 f986 	bl	8005414 <siprintf>
}
 8002108:	bf00      	nop
 800210a:	3718      	adds	r7, #24
 800210c:	46bd      	mov	sp, r7
 800210e:	bdb0      	pop	{r4, r5, r7, pc}
 8002110:	0800694c 	.word	0x0800694c
 8002114:	08005dd0 	.word	0x08005dd0
 8002118:	08006454 	.word	0x08006454
 800211c:	08006814 	.word	0x08006814
 8002120:	20000008 	.word	0x20000008
 8002124:	cccccccd 	.word	0xcccccccd
 8002128:	08005de8 	.word	0x08005de8
 800212c:	08005df0 	.word	0x08005df0

08002130 <RecordsPage>:

void RecordsPage(){
 8002130:	b580      	push	{r7, lr}
 8002132:	b084      	sub	sp, #16
 8002134:	af02      	add	r7, sp, #8
	strType_XPT2046_Coordinate touchpt;
	LCD_Clear(0, 0, 240, 320, 0xffff);
 8002136:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800213a:	9300      	str	r3, [sp, #0]
 800213c:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8002140:	22f0      	movs	r2, #240	; 0xf0
 8002142:	2100      	movs	r1, #0
 8002144:	2000      	movs	r0, #0
 8002146:	f7fe fe90 	bl	8000e6a <LCD_Clear>
	LCD_Draw_24sqr(10, 10, setting);
 800214a:	4a25      	ldr	r2, [pc, #148]	; (80021e0 <RecordsPage+0xb0>)
 800214c:	210a      	movs	r1, #10
 800214e:	200a      	movs	r0, #10
 8002150:	f7ff f805 	bl	800115e <LCD_Draw_24sqr>
	LCD_Draw_24sqr(50, 10, temperature);
 8002154:	4a23      	ldr	r2, [pc, #140]	; (80021e4 <RecordsPage+0xb4>)
 8002156:	210a      	movs	r1, #10
 8002158:	2032      	movs	r0, #50	; 0x32
 800215a:	f7ff f800 	bl	800115e <LCD_Draw_24sqr>
	LCD_Draw_24sqr(100, 10, dew);
 800215e:	4a22      	ldr	r2, [pc, #136]	; (80021e8 <RecordsPage+0xb8>)
 8002160:	210a      	movs	r1, #10
 8002162:	2064      	movs	r0, #100	; 0x64
 8002164:	f7fe fffb 	bl	800115e <LCD_Draw_24sqr>
	LCD_Draw_24sqr(150, 10, light);
 8002168:	4a20      	ldr	r2, [pc, #128]	; (80021ec <RecordsPage+0xbc>)
 800216a:	210a      	movs	r1, #10
 800216c:	2096      	movs	r0, #150	; 0x96
 800216e:	f7fe fff6 	bl	800115e <LCD_Draw_24sqr>
	LCD_DrawLine(50, 40 ,200, 40, 0x0);
 8002172:	2300      	movs	r3, #0
 8002174:	9300      	str	r3, [sp, #0]
 8002176:	2328      	movs	r3, #40	; 0x28
 8002178:	22c8      	movs	r2, #200	; 0xc8
 800217a:	2128      	movs	r1, #40	; 0x28
 800217c:	2032      	movs	r0, #50	; 0x32
 800217e:	f7fe fe97 	bl	8000eb0 <LCD_DrawLine>
	LCD_DrawLine(75, 10 ,75, 300, 0x0);
 8002182:	2300      	movs	r3, #0
 8002184:	9300      	str	r3, [sp, #0]
 8002186:	f44f 7396 	mov.w	r3, #300	; 0x12c
 800218a:	224b      	movs	r2, #75	; 0x4b
 800218c:	210a      	movs	r1, #10
 800218e:	204b      	movs	r0, #75	; 0x4b
 8002190:	f7fe fe8e 	bl	8000eb0 <LCD_DrawLine>
	LCD_DrawLine(125, 10 ,125, 300, 0x0);
 8002194:	2300      	movs	r3, #0
 8002196:	9300      	str	r3, [sp, #0]
 8002198:	f44f 7396 	mov.w	r3, #300	; 0x12c
 800219c:	227d      	movs	r2, #125	; 0x7d
 800219e:	210a      	movs	r1, #10
 80021a0:	207d      	movs	r0, #125	; 0x7d
 80021a2:	f7fe fe85 	bl	8000eb0 <LCD_DrawLine>

	while(1){
	  XPT2046_Get_TouchedPoint(&touchpt, &strXPT2046_TouchPara);
 80021a6:	1d3b      	adds	r3, r7, #4
 80021a8:	4911      	ldr	r1, [pc, #68]	; (80021f0 <RecordsPage+0xc0>)
 80021aa:	4618      	mov	r0, r3
 80021ac:	f000 fc04 	bl	80029b8 <XPT2046_Get_TouchedPoint>
	  if(touchpt.x >= 290 && touchpt.y<=80) break;
 80021b0:	88bb      	ldrh	r3, [r7, #4]
 80021b2:	f5b3 7f91 	cmp.w	r3, #290	; 0x122
 80021b6:	d3f6      	bcc.n	80021a6 <RecordsPage+0x76>
 80021b8:	88fb      	ldrh	r3, [r7, #6]
 80021ba:	2b50      	cmp	r3, #80	; 0x50
 80021bc:	d900      	bls.n	80021c0 <RecordsPage+0x90>
	  XPT2046_Get_TouchedPoint(&touchpt, &strXPT2046_TouchPara);
 80021be:	e7f2      	b.n	80021a6 <RecordsPage+0x76>
	  if(touchpt.x >= 290 && touchpt.y<=80) break;
 80021c0:	bf00      	nop
	}
	LCD_Clear(0, 0, 240, 320, 0xffff);
 80021c2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80021c6:	9300      	str	r3, [sp, #0]
 80021c8:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80021cc:	22f0      	movs	r2, #240	; 0xf0
 80021ce:	2100      	movs	r1, #0
 80021d0:	2000      	movs	r0, #0
 80021d2:	f7fe fe4a 	bl	8000e6a <LCD_Clear>

}
 80021d6:	bf00      	nop
 80021d8:	3708      	adds	r7, #8
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}
 80021de:	bf00      	nop
 80021e0:	0800694c 	.word	0x0800694c
 80021e4:	080068bc 	.word	0x080068bc
 80021e8:	08006874 	.word	0x08006874
 80021ec:	08006904 	.word	0x08006904
 80021f0:	20000008 	.word	0x20000008

080021f4 <ImgPage>:


void ImgPage(){}
 80021f4:	b480      	push	{r7}
 80021f6:	af00      	add	r7, sp, #0
 80021f8:	bf00      	nop
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bc80      	pop	{r7}
 80021fe:	4770      	bx	lr

08002200 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002200:	b480      	push	{r7}
 8002202:	b085      	sub	sp, #20
 8002204:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002206:	4b15      	ldr	r3, [pc, #84]	; (800225c <HAL_MspInit+0x5c>)
 8002208:	699b      	ldr	r3, [r3, #24]
 800220a:	4a14      	ldr	r2, [pc, #80]	; (800225c <HAL_MspInit+0x5c>)
 800220c:	f043 0301 	orr.w	r3, r3, #1
 8002210:	6193      	str	r3, [r2, #24]
 8002212:	4b12      	ldr	r3, [pc, #72]	; (800225c <HAL_MspInit+0x5c>)
 8002214:	699b      	ldr	r3, [r3, #24]
 8002216:	f003 0301 	and.w	r3, r3, #1
 800221a:	60bb      	str	r3, [r7, #8]
 800221c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800221e:	4b0f      	ldr	r3, [pc, #60]	; (800225c <HAL_MspInit+0x5c>)
 8002220:	69db      	ldr	r3, [r3, #28]
 8002222:	4a0e      	ldr	r2, [pc, #56]	; (800225c <HAL_MspInit+0x5c>)
 8002224:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002228:	61d3      	str	r3, [r2, #28]
 800222a:	4b0c      	ldr	r3, [pc, #48]	; (800225c <HAL_MspInit+0x5c>)
 800222c:	69db      	ldr	r3, [r3, #28]
 800222e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002232:	607b      	str	r3, [r7, #4]
 8002234:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002236:	4b0a      	ldr	r3, [pc, #40]	; (8002260 <HAL_MspInit+0x60>)
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	60fb      	str	r3, [r7, #12]
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002242:	60fb      	str	r3, [r7, #12]
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800224a:	60fb      	str	r3, [r7, #12]
 800224c:	4a04      	ldr	r2, [pc, #16]	; (8002260 <HAL_MspInit+0x60>)
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002252:	bf00      	nop
 8002254:	3714      	adds	r7, #20
 8002256:	46bd      	mov	sp, r7
 8002258:	bc80      	pop	{r7}
 800225a:	4770      	bx	lr
 800225c:	40021000 	.word	0x40021000
 8002260:	40010000 	.word	0x40010000

08002264 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b08a      	sub	sp, #40	; 0x28
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800226c:	f107 0318 	add.w	r3, r7, #24
 8002270:	2200      	movs	r2, #0
 8002272:	601a      	str	r2, [r3, #0]
 8002274:	605a      	str	r2, [r3, #4]
 8002276:	609a      	str	r2, [r3, #8]
 8002278:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	4a28      	ldr	r2, [pc, #160]	; (8002320 <HAL_ADC_MspInit+0xbc>)
 8002280:	4293      	cmp	r3, r2
 8002282:	d122      	bne.n	80022ca <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002284:	4b27      	ldr	r3, [pc, #156]	; (8002324 <HAL_ADC_MspInit+0xc0>)
 8002286:	699b      	ldr	r3, [r3, #24]
 8002288:	4a26      	ldr	r2, [pc, #152]	; (8002324 <HAL_ADC_MspInit+0xc0>)
 800228a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800228e:	6193      	str	r3, [r2, #24]
 8002290:	4b24      	ldr	r3, [pc, #144]	; (8002324 <HAL_ADC_MspInit+0xc0>)
 8002292:	699b      	ldr	r3, [r3, #24]
 8002294:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002298:	617b      	str	r3, [r7, #20]
 800229a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800229c:	4b21      	ldr	r3, [pc, #132]	; (8002324 <HAL_ADC_MspInit+0xc0>)
 800229e:	699b      	ldr	r3, [r3, #24]
 80022a0:	4a20      	ldr	r2, [pc, #128]	; (8002324 <HAL_ADC_MspInit+0xc0>)
 80022a2:	f043 0304 	orr.w	r3, r3, #4
 80022a6:	6193      	str	r3, [r2, #24]
 80022a8:	4b1e      	ldr	r3, [pc, #120]	; (8002324 <HAL_ADC_MspInit+0xc0>)
 80022aa:	699b      	ldr	r3, [r3, #24]
 80022ac:	f003 0304 	and.w	r3, r3, #4
 80022b0:	613b      	str	r3, [r7, #16]
 80022b2:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80022b4:	2320      	movs	r3, #32
 80022b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80022b8:	2303      	movs	r3, #3
 80022ba:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022bc:	f107 0318 	add.w	r3, r7, #24
 80022c0:	4619      	mov	r1, r3
 80022c2:	4819      	ldr	r0, [pc, #100]	; (8002328 <HAL_ADC_MspInit+0xc4>)
 80022c4:	f001 faa4 	bl	8003810 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80022c8:	e026      	b.n	8002318 <HAL_ADC_MspInit+0xb4>
  else if(hadc->Instance==ADC2)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	4a17      	ldr	r2, [pc, #92]	; (800232c <HAL_ADC_MspInit+0xc8>)
 80022d0:	4293      	cmp	r3, r2
 80022d2:	d121      	bne.n	8002318 <HAL_ADC_MspInit+0xb4>
    __HAL_RCC_ADC2_CLK_ENABLE();
 80022d4:	4b13      	ldr	r3, [pc, #76]	; (8002324 <HAL_ADC_MspInit+0xc0>)
 80022d6:	699b      	ldr	r3, [r3, #24]
 80022d8:	4a12      	ldr	r2, [pc, #72]	; (8002324 <HAL_ADC_MspInit+0xc0>)
 80022da:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80022de:	6193      	str	r3, [r2, #24]
 80022e0:	4b10      	ldr	r3, [pc, #64]	; (8002324 <HAL_ADC_MspInit+0xc0>)
 80022e2:	699b      	ldr	r3, [r3, #24]
 80022e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022e8:	60fb      	str	r3, [r7, #12]
 80022ea:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022ec:	4b0d      	ldr	r3, [pc, #52]	; (8002324 <HAL_ADC_MspInit+0xc0>)
 80022ee:	699b      	ldr	r3, [r3, #24]
 80022f0:	4a0c      	ldr	r2, [pc, #48]	; (8002324 <HAL_ADC_MspInit+0xc0>)
 80022f2:	f043 0304 	orr.w	r3, r3, #4
 80022f6:	6193      	str	r3, [r2, #24]
 80022f8:	4b0a      	ldr	r3, [pc, #40]	; (8002324 <HAL_ADC_MspInit+0xc0>)
 80022fa:	699b      	ldr	r3, [r3, #24]
 80022fc:	f003 0304 	and.w	r3, r3, #4
 8002300:	60bb      	str	r3, [r7, #8]
 8002302:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002304:	2340      	movs	r3, #64	; 0x40
 8002306:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002308:	2303      	movs	r3, #3
 800230a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800230c:	f107 0318 	add.w	r3, r7, #24
 8002310:	4619      	mov	r1, r3
 8002312:	4805      	ldr	r0, [pc, #20]	; (8002328 <HAL_ADC_MspInit+0xc4>)
 8002314:	f001 fa7c 	bl	8003810 <HAL_GPIO_Init>
}
 8002318:	bf00      	nop
 800231a:	3728      	adds	r7, #40	; 0x28
 800231c:	46bd      	mov	sp, r7
 800231e:	bd80      	pop	{r7, pc}
 8002320:	40012400 	.word	0x40012400
 8002324:	40021000 	.word	0x40021000
 8002328:	40010800 	.word	0x40010800
 800232c:	40012800 	.word	0x40012800

08002330 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b084      	sub	sp, #16
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4a0b      	ldr	r2, [pc, #44]	; (800236c <HAL_RTC_MspInit+0x3c>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d110      	bne.n	8002364 <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 8002342:	f001 fc4b 	bl	8003bdc <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 8002346:	4b0a      	ldr	r3, [pc, #40]	; (8002370 <HAL_RTC_MspInit+0x40>)
 8002348:	69db      	ldr	r3, [r3, #28]
 800234a:	4a09      	ldr	r2, [pc, #36]	; (8002370 <HAL_RTC_MspInit+0x40>)
 800234c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002350:	61d3      	str	r3, [r2, #28]
 8002352:	4b07      	ldr	r3, [pc, #28]	; (8002370 <HAL_RTC_MspInit+0x40>)
 8002354:	69db      	ldr	r3, [r3, #28]
 8002356:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800235a:	60fb      	str	r3, [r7, #12]
 800235c:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800235e:	4b05      	ldr	r3, [pc, #20]	; (8002374 <HAL_RTC_MspInit+0x44>)
 8002360:	2201      	movs	r2, #1
 8002362:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002364:	bf00      	nop
 8002366:	3710      	adds	r7, #16
 8002368:	46bd      	mov	sp, r7
 800236a:	bd80      	pop	{r7, pc}
 800236c:	40002800 	.word	0x40002800
 8002370:	40021000 	.word	0x40021000
 8002374:	4242043c 	.word	0x4242043c

08002378 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002378:	b480      	push	{r7}
 800237a:	b085      	sub	sp, #20
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4a09      	ldr	r2, [pc, #36]	; (80023ac <HAL_TIM_Base_MspInit+0x34>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d10b      	bne.n	80023a2 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800238a:	4b09      	ldr	r3, [pc, #36]	; (80023b0 <HAL_TIM_Base_MspInit+0x38>)
 800238c:	69db      	ldr	r3, [r3, #28]
 800238e:	4a08      	ldr	r2, [pc, #32]	; (80023b0 <HAL_TIM_Base_MspInit+0x38>)
 8002390:	f043 0310 	orr.w	r3, r3, #16
 8002394:	61d3      	str	r3, [r2, #28]
 8002396:	4b06      	ldr	r3, [pc, #24]	; (80023b0 <HAL_TIM_Base_MspInit+0x38>)
 8002398:	69db      	ldr	r3, [r3, #28]
 800239a:	f003 0310 	and.w	r3, r3, #16
 800239e:	60fb      	str	r3, [r7, #12]
 80023a0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 80023a2:	bf00      	nop
 80023a4:	3714      	adds	r7, #20
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bc80      	pop	{r7}
 80023aa:	4770      	bx	lr
 80023ac:	40001000 	.word	0x40001000
 80023b0:	40021000 	.word	0x40021000

080023b4 <HAL_FSMC_MspInit>:

}

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b086      	sub	sp, #24
 80023b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80023ba:	f107 0308 	add.w	r3, r7, #8
 80023be:	2200      	movs	r2, #0
 80023c0:	601a      	str	r2, [r3, #0]
 80023c2:	605a      	str	r2, [r3, #4]
 80023c4:	609a      	str	r2, [r3, #8]
 80023c6:	60da      	str	r2, [r3, #12]
  if (FSMC_Initialized) {
 80023c8:	4b18      	ldr	r3, [pc, #96]	; (800242c <HAL_FSMC_MspInit+0x78>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d129      	bne.n	8002424 <HAL_FSMC_MspInit+0x70>
    return;
  }
  FSMC_Initialized = 1;
 80023d0:	4b16      	ldr	r3, [pc, #88]	; (800242c <HAL_FSMC_MspInit+0x78>)
 80023d2:	2201      	movs	r2, #1
 80023d4:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 80023d6:	4b16      	ldr	r3, [pc, #88]	; (8002430 <HAL_FSMC_MspInit+0x7c>)
 80023d8:	695b      	ldr	r3, [r3, #20]
 80023da:	4a15      	ldr	r2, [pc, #84]	; (8002430 <HAL_FSMC_MspInit+0x7c>)
 80023dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023e0:	6153      	str	r3, [r2, #20]
 80023e2:	4b13      	ldr	r3, [pc, #76]	; (8002430 <HAL_FSMC_MspInit+0x7c>)
 80023e4:	695b      	ldr	r3, [r3, #20]
 80023e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023ea:	607b      	str	r3, [r7, #4]
 80023ec:	687b      	ldr	r3, [r7, #4]
  PD1   ------> FSMC_D3
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 80023ee:	f64f 7380 	movw	r3, #65408	; 0xff80
 80023f2:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023f4:	2302      	movs	r3, #2
 80023f6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80023f8:	2303      	movs	r3, #3
 80023fa:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80023fc:	f107 0308 	add.w	r3, r7, #8
 8002400:	4619      	mov	r1, r3
 8002402:	480c      	ldr	r0, [pc, #48]	; (8002434 <HAL_FSMC_MspInit+0x80>)
 8002404:	f001 fa04 	bl	8003810 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8002408:	f64c 73b3 	movw	r3, #53171	; 0xcfb3
 800240c:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800240e:	2302      	movs	r3, #2
 8002410:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002412:	2303      	movs	r3, #3
 8002414:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002416:	f107 0308 	add.w	r3, r7, #8
 800241a:	4619      	mov	r1, r3
 800241c:	4806      	ldr	r0, [pc, #24]	; (8002438 <HAL_FSMC_MspInit+0x84>)
 800241e:	f001 f9f7 	bl	8003810 <HAL_GPIO_Init>
 8002422:	e000      	b.n	8002426 <HAL_FSMC_MspInit+0x72>
    return;
 8002424:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8002426:	3718      	adds	r7, #24
 8002428:	46bd      	mov	sp, r7
 800242a:	bd80      	pop	{r7, pc}
 800242c:	200001c8 	.word	0x200001c8
 8002430:	40021000 	.word	0x40021000
 8002434:	40011800 	.word	0x40011800
 8002438:	40011400 	.word	0x40011400

0800243c <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 800243c:	b580      	push	{r7, lr}
 800243e:	b082      	sub	sp, #8
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8002444:	f7ff ffb6 	bl	80023b4 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8002448:	bf00      	nop
 800244a:	3708      	adds	r7, #8
 800244c:	46bd      	mov	sp, r7
 800244e:	bd80      	pop	{r7, pc}

08002450 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002450:	b480      	push	{r7}
 8002452:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002454:	bf00      	nop
 8002456:	46bd      	mov	sp, r7
 8002458:	bc80      	pop	{r7}
 800245a:	4770      	bx	lr

0800245c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800245c:	b480      	push	{r7}
 800245e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002460:	e7fe      	b.n	8002460 <HardFault_Handler+0x4>

08002462 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002462:	b480      	push	{r7}
 8002464:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002466:	e7fe      	b.n	8002466 <MemManage_Handler+0x4>

08002468 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002468:	b480      	push	{r7}
 800246a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800246c:	e7fe      	b.n	800246c <BusFault_Handler+0x4>

0800246e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800246e:	b480      	push	{r7}
 8002470:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002472:	e7fe      	b.n	8002472 <UsageFault_Handler+0x4>

08002474 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002474:	b480      	push	{r7}
 8002476:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002478:	bf00      	nop
 800247a:	46bd      	mov	sp, r7
 800247c:	bc80      	pop	{r7}
 800247e:	4770      	bx	lr

08002480 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002480:	b480      	push	{r7}
 8002482:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002484:	bf00      	nop
 8002486:	46bd      	mov	sp, r7
 8002488:	bc80      	pop	{r7}
 800248a:	4770      	bx	lr

0800248c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800248c:	b480      	push	{r7}
 800248e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002490:	bf00      	nop
 8002492:	46bd      	mov	sp, r7
 8002494:	bc80      	pop	{r7}
 8002496:	4770      	bx	lr

08002498 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800249c:	f000 fb80 	bl	8002ba0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80024a0:	bf00      	nop
 80024a2:	bd80      	pop	{r7, pc}

080024a4 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_3) != RESET)
 80024a8:	4b17      	ldr	r3, [pc, #92]	; (8002508 <EXTI3_IRQHandler+0x64>)
 80024aa:	695b      	ldr	r3, [r3, #20]
 80024ac:	f003 0308 	and.w	r3, r3, #8
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d023      	beq.n	80024fc <EXTI3_IRQHandler+0x58>
  {
		if( Ov7725_vsync == 0 )
 80024b4:	4b15      	ldr	r3, [pc, #84]	; (800250c <EXTI3_IRQHandler+0x68>)
 80024b6:	781b      	ldrb	r3, [r3, #0]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d10f      	bne.n	80024dc <EXTI3_IRQHandler+0x38>
    {
				FIFO_WRST_L(); 	                      
 80024bc:	4b14      	ldr	r3, [pc, #80]	; (8002510 <EXTI3_IRQHandler+0x6c>)
 80024be:	2210      	movs	r2, #16
 80024c0:	615a      	str	r2, [r3, #20]
        FIFO_WE_H();	                      
 80024c2:	4b14      	ldr	r3, [pc, #80]	; (8002514 <EXTI3_IRQHandler+0x70>)
 80024c4:	2208      	movs	r2, #8
 80024c6:	611a      	str	r2, [r3, #16]
            
        Ov7725_vsync = 1;	   	
 80024c8:	4b10      	ldr	r3, [pc, #64]	; (800250c <EXTI3_IRQHandler+0x68>)
 80024ca:	2201      	movs	r2, #1
 80024cc:	701a      	strb	r2, [r3, #0]
        FIFO_WE_H();                         
 80024ce:	4b11      	ldr	r3, [pc, #68]	; (8002514 <EXTI3_IRQHandler+0x70>)
 80024d0:	2208      	movs	r2, #8
 80024d2:	611a      	str	r2, [r3, #16]
        FIFO_WRST_H();                     
 80024d4:	4b0e      	ldr	r3, [pc, #56]	; (8002510 <EXTI3_IRQHandler+0x6c>)
 80024d6:	2210      	movs	r2, #16
 80024d8:	611a      	str	r2, [r3, #16]
 80024da:	e009      	b.n	80024f0 <EXTI3_IRQHandler+0x4c>
    }
    else if( Ov7725_vsync == 1 )
 80024dc:	4b0b      	ldr	r3, [pc, #44]	; (800250c <EXTI3_IRQHandler+0x68>)
 80024de:	781b      	ldrb	r3, [r3, #0]
 80024e0:	2b01      	cmp	r3, #1
 80024e2:	d105      	bne.n	80024f0 <EXTI3_IRQHandler+0x4c>
    {
        FIFO_WE_L();                       
 80024e4:	4b0b      	ldr	r3, [pc, #44]	; (8002514 <EXTI3_IRQHandler+0x70>)
 80024e6:	2208      	movs	r2, #8
 80024e8:	615a      	str	r2, [r3, #20]
        Ov7725_vsync = 2;
 80024ea:	4b08      	ldr	r3, [pc, #32]	; (800250c <EXTI3_IRQHandler+0x68>)
 80024ec:	2202      	movs	r2, #2
 80024ee:	701a      	strb	r2, [r3, #0]
    }        
				
		
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_3);
 80024f0:	4b05      	ldr	r3, [pc, #20]	; (8002508 <EXTI3_IRQHandler+0x64>)
 80024f2:	2208      	movs	r2, #8
 80024f4:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_PIN_3);
 80024f6:	2008      	movs	r0, #8
 80024f8:	f001 fb66 	bl	8003bc8 <HAL_GPIO_EXTI_Callback>
  }

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 80024fc:	2008      	movs	r0, #8
 80024fe:	f001 fb4b 	bl	8003b98 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8002502:	bf00      	nop
 8002504:	bd80      	pop	{r7, pc}
 8002506:	bf00      	nop
 8002508:	40010400 	.word	0x40010400
 800250c:	200001c4 	.word	0x200001c4
 8002510:	40011000 	.word	0x40011000
 8002514:	40011400 	.word	0x40011400

08002518 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 800251c:	2010      	movs	r0, #16
 800251e:	f001 fb3b 	bl	8003b98 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8002522:	bf00      	nop
 8002524:	bd80      	pop	{r7, pc}
	...

08002528 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b086      	sub	sp, #24
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002530:	4a14      	ldr	r2, [pc, #80]	; (8002584 <_sbrk+0x5c>)
 8002532:	4b15      	ldr	r3, [pc, #84]	; (8002588 <_sbrk+0x60>)
 8002534:	1ad3      	subs	r3, r2, r3
 8002536:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002538:	697b      	ldr	r3, [r7, #20]
 800253a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800253c:	4b13      	ldr	r3, [pc, #76]	; (800258c <_sbrk+0x64>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	2b00      	cmp	r3, #0
 8002542:	d102      	bne.n	800254a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002544:	4b11      	ldr	r3, [pc, #68]	; (800258c <_sbrk+0x64>)
 8002546:	4a12      	ldr	r2, [pc, #72]	; (8002590 <_sbrk+0x68>)
 8002548:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800254a:	4b10      	ldr	r3, [pc, #64]	; (800258c <_sbrk+0x64>)
 800254c:	681a      	ldr	r2, [r3, #0]
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	4413      	add	r3, r2
 8002552:	693a      	ldr	r2, [r7, #16]
 8002554:	429a      	cmp	r2, r3
 8002556:	d207      	bcs.n	8002568 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002558:	f002 ff2a 	bl	80053b0 <__errno>
 800255c:	4603      	mov	r3, r0
 800255e:	220c      	movs	r2, #12
 8002560:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002562:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002566:	e009      	b.n	800257c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002568:	4b08      	ldr	r3, [pc, #32]	; (800258c <_sbrk+0x64>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800256e:	4b07      	ldr	r3, [pc, #28]	; (800258c <_sbrk+0x64>)
 8002570:	681a      	ldr	r2, [r3, #0]
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	4413      	add	r3, r2
 8002576:	4a05      	ldr	r2, [pc, #20]	; (800258c <_sbrk+0x64>)
 8002578:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800257a:	68fb      	ldr	r3, [r7, #12]
}
 800257c:	4618      	mov	r0, r3
 800257e:	3718      	adds	r7, #24
 8002580:	46bd      	mov	sp, r7
 8002582:	bd80      	pop	{r7, pc}
 8002584:	20010000 	.word	0x20010000
 8002588:	00000400 	.word	0x00000400
 800258c:	200001cc 	.word	0x200001cc
 8002590:	200001e8 	.word	0x200001e8

08002594 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002594:	b480      	push	{r7}
 8002596:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8002598:	4b15      	ldr	r3, [pc, #84]	; (80025f0 <SystemInit+0x5c>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4a14      	ldr	r2, [pc, #80]	; (80025f0 <SystemInit+0x5c>)
 800259e:	f043 0301 	orr.w	r3, r3, #1
 80025a2:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80025a4:	4b12      	ldr	r3, [pc, #72]	; (80025f0 <SystemInit+0x5c>)
 80025a6:	685a      	ldr	r2, [r3, #4]
 80025a8:	4911      	ldr	r1, [pc, #68]	; (80025f0 <SystemInit+0x5c>)
 80025aa:	4b12      	ldr	r3, [pc, #72]	; (80025f4 <SystemInit+0x60>)
 80025ac:	4013      	ands	r3, r2
 80025ae:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80025b0:	4b0f      	ldr	r3, [pc, #60]	; (80025f0 <SystemInit+0x5c>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4a0e      	ldr	r2, [pc, #56]	; (80025f0 <SystemInit+0x5c>)
 80025b6:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80025ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025be:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80025c0:	4b0b      	ldr	r3, [pc, #44]	; (80025f0 <SystemInit+0x5c>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4a0a      	ldr	r2, [pc, #40]	; (80025f0 <SystemInit+0x5c>)
 80025c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80025ca:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80025cc:	4b08      	ldr	r3, [pc, #32]	; (80025f0 <SystemInit+0x5c>)
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	4a07      	ldr	r2, [pc, #28]	; (80025f0 <SystemInit+0x5c>)
 80025d2:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80025d6:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80025d8:	4b05      	ldr	r3, [pc, #20]	; (80025f0 <SystemInit+0x5c>)
 80025da:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80025de:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80025e0:	4b05      	ldr	r3, [pc, #20]	; (80025f8 <SystemInit+0x64>)
 80025e2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80025e6:	609a      	str	r2, [r3, #8]
#endif 
}
 80025e8:	bf00      	nop
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bc80      	pop	{r7}
 80025ee:	4770      	bx	lr
 80025f0:	40021000 	.word	0x40021000
 80025f4:	f8ff0000 	.word	0xf8ff0000
 80025f8:	e000ed00 	.word	0xe000ed00

080025fc <XPT2046_DelayUS>:



	
static void XPT2046_DelayUS ( __IO uint32_t ulCount )
{
 80025fc:	b480      	push	{r7}
 80025fe:	b085      	sub	sp, #20
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
	uint32_t i;


	for ( i = 0; i < ulCount; i ++ )
 8002604:	2300      	movs	r3, #0
 8002606:	60fb      	str	r3, [r7, #12]
 8002608:	e00a      	b.n	8002620 <XPT2046_DelayUS+0x24>
	{
		uint8_t uc = 12;     
 800260a:	230c      	movs	r3, #12
 800260c:	72fb      	strb	r3, [r7, #11]
	      
		while ( uc -- );     
 800260e:	bf00      	nop
 8002610:	7afb      	ldrb	r3, [r7, #11]
 8002612:	1e5a      	subs	r2, r3, #1
 8002614:	72fa      	strb	r2, [r7, #11]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d1fa      	bne.n	8002610 <XPT2046_DelayUS+0x14>
	for ( i = 0; i < ulCount; i ++ )
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	3301      	adds	r3, #1
 800261e:	60fb      	str	r3, [r7, #12]
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	68fa      	ldr	r2, [r7, #12]
 8002624:	429a      	cmp	r2, r3
 8002626:	d3f0      	bcc.n	800260a <XPT2046_DelayUS+0xe>

	}
	
}
 8002628:	bf00      	nop
 800262a:	bf00      	nop
 800262c:	3714      	adds	r7, #20
 800262e:	46bd      	mov	sp, r7
 8002630:	bc80      	pop	{r7}
 8002632:	4770      	bx	lr

08002634 <XPT2046_WriteCMD>:


static void XPT2046_WriteCMD ( uint8_t ucCmd ) 
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b084      	sub	sp, #16
 8002638:	af00      	add	r7, sp, #0
 800263a:	4603      	mov	r3, r0
 800263c:	71fb      	strb	r3, [r7, #7]
	uint8_t i;


	macXPT2046_MOSI_0();
 800263e:	2200      	movs	r2, #0
 8002640:	2104      	movs	r1, #4
 8002642:	481d      	ldr	r0, [pc, #116]	; (80026b8 <XPT2046_WriteCMD+0x84>)
 8002644:	f001 fa8f 	bl	8003b66 <HAL_GPIO_WritePin>
	
	macXPT2046_CLK_LOW();
 8002648:	2200      	movs	r2, #0
 800264a:	2101      	movs	r1, #1
 800264c:	481a      	ldr	r0, [pc, #104]	; (80026b8 <XPT2046_WriteCMD+0x84>)
 800264e:	f001 fa8a 	bl	8003b66 <HAL_GPIO_WritePin>

	for ( i = 0; i < 8; i ++ ) 
 8002652:	2300      	movs	r3, #0
 8002654:	73fb      	strb	r3, [r7, #15]
 8002656:	e027      	b.n	80026a8 <XPT2046_WriteCMD+0x74>
	{
		( ( ucCmd >> ( 7 - i ) ) & 0x01 ) ? macXPT2046_MOSI_1() : macXPT2046_MOSI_0();
 8002658:	79fa      	ldrb	r2, [r7, #7]
 800265a:	7bfb      	ldrb	r3, [r7, #15]
 800265c:	f1c3 0307 	rsb	r3, r3, #7
 8002660:	fa42 f303 	asr.w	r3, r2, r3
 8002664:	f003 0301 	and.w	r3, r3, #1
 8002668:	2b00      	cmp	r3, #0
 800266a:	d005      	beq.n	8002678 <XPT2046_WriteCMD+0x44>
 800266c:	2201      	movs	r2, #1
 800266e:	2104      	movs	r1, #4
 8002670:	4811      	ldr	r0, [pc, #68]	; (80026b8 <XPT2046_WriteCMD+0x84>)
 8002672:	f001 fa78 	bl	8003b66 <HAL_GPIO_WritePin>
 8002676:	e004      	b.n	8002682 <XPT2046_WriteCMD+0x4e>
 8002678:	2200      	movs	r2, #0
 800267a:	2104      	movs	r1, #4
 800267c:	480e      	ldr	r0, [pc, #56]	; (80026b8 <XPT2046_WriteCMD+0x84>)
 800267e:	f001 fa72 	bl	8003b66 <HAL_GPIO_WritePin>
		
	  XPT2046_DelayUS ( 5 );
 8002682:	2005      	movs	r0, #5
 8002684:	f7ff ffba 	bl	80025fc <XPT2046_DelayUS>
		
		macXPT2046_CLK_HIGH();
 8002688:	2201      	movs	r2, #1
 800268a:	2101      	movs	r1, #1
 800268c:	480a      	ldr	r0, [pc, #40]	; (80026b8 <XPT2046_WriteCMD+0x84>)
 800268e:	f001 fa6a 	bl	8003b66 <HAL_GPIO_WritePin>

	  XPT2046_DelayUS ( 5 );
 8002692:	2005      	movs	r0, #5
 8002694:	f7ff ffb2 	bl	80025fc <XPT2046_DelayUS>

		macXPT2046_CLK_LOW();
 8002698:	2200      	movs	r2, #0
 800269a:	2101      	movs	r1, #1
 800269c:	4806      	ldr	r0, [pc, #24]	; (80026b8 <XPT2046_WriteCMD+0x84>)
 800269e:	f001 fa62 	bl	8003b66 <HAL_GPIO_WritePin>
	for ( i = 0; i < 8; i ++ ) 
 80026a2:	7bfb      	ldrb	r3, [r7, #15]
 80026a4:	3301      	adds	r3, #1
 80026a6:	73fb      	strb	r3, [r7, #15]
 80026a8:	7bfb      	ldrb	r3, [r7, #15]
 80026aa:	2b07      	cmp	r3, #7
 80026ac:	d9d4      	bls.n	8002658 <XPT2046_WriteCMD+0x24>
	}
	
}
 80026ae:	bf00      	nop
 80026b0:	bf00      	nop
 80026b2:	3710      	adds	r7, #16
 80026b4:	46bd      	mov	sp, r7
 80026b6:	bd80      	pop	{r7, pc}
 80026b8:	40011800 	.word	0x40011800

080026bc <XPT2046_ReadCMD>:


static uint16_t XPT2046_ReadCMD ( void ) 
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b082      	sub	sp, #8
 80026c0:	af00      	add	r7, sp, #0
	uint8_t i;
	uint16_t usBuf=0, usTemp;
 80026c2:	2300      	movs	r3, #0
 80026c4:	80bb      	strh	r3, [r7, #4]
	


	macXPT2046_MOSI_0();
 80026c6:	2200      	movs	r2, #0
 80026c8:	2104      	movs	r1, #4
 80026ca:	4819      	ldr	r0, [pc, #100]	; (8002730 <XPT2046_ReadCMD+0x74>)
 80026cc:	f001 fa4b 	bl	8003b66 <HAL_GPIO_WritePin>

	macXPT2046_CLK_HIGH();
 80026d0:	2201      	movs	r2, #1
 80026d2:	2101      	movs	r1, #1
 80026d4:	4816      	ldr	r0, [pc, #88]	; (8002730 <XPT2046_ReadCMD+0x74>)
 80026d6:	f001 fa46 	bl	8003b66 <HAL_GPIO_WritePin>

	for ( i=0;i<12;i++ ) 
 80026da:	2300      	movs	r3, #0
 80026dc:	71fb      	strb	r3, [r7, #7]
 80026de:	e01e      	b.n	800271e <XPT2046_ReadCMD+0x62>
	{
		macXPT2046_CLK_LOW();    
 80026e0:	2200      	movs	r2, #0
 80026e2:	2101      	movs	r1, #1
 80026e4:	4812      	ldr	r0, [pc, #72]	; (8002730 <XPT2046_ReadCMD+0x74>)
 80026e6:	f001 fa3e 	bl	8003b66 <HAL_GPIO_WritePin>
	
		usTemp = macXPT2046_MISO();
 80026ea:	2108      	movs	r1, #8
 80026ec:	4810      	ldr	r0, [pc, #64]	; (8002730 <XPT2046_ReadCMD+0x74>)
 80026ee:	f001 fa23 	bl	8003b38 <HAL_GPIO_ReadPin>
 80026f2:	4603      	mov	r3, r0
 80026f4:	807b      	strh	r3, [r7, #2]
		
		usBuf |= usTemp << ( 11 - i );
 80026f6:	887a      	ldrh	r2, [r7, #2]
 80026f8:	79fb      	ldrb	r3, [r7, #7]
 80026fa:	f1c3 030b 	rsb	r3, r3, #11
 80026fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002702:	b21a      	sxth	r2, r3
 8002704:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002708:	4313      	orrs	r3, r2
 800270a:	b21b      	sxth	r3, r3
 800270c:	80bb      	strh	r3, [r7, #4]
	
		macXPT2046_CLK_HIGH();
 800270e:	2201      	movs	r2, #1
 8002710:	2101      	movs	r1, #1
 8002712:	4807      	ldr	r0, [pc, #28]	; (8002730 <XPT2046_ReadCMD+0x74>)
 8002714:	f001 fa27 	bl	8003b66 <HAL_GPIO_WritePin>
	for ( i=0;i<12;i++ ) 
 8002718:	79fb      	ldrb	r3, [r7, #7]
 800271a:	3301      	adds	r3, #1
 800271c:	71fb      	strb	r3, [r7, #7]
 800271e:	79fb      	ldrb	r3, [r7, #7]
 8002720:	2b0b      	cmp	r3, #11
 8002722:	d9dd      	bls.n	80026e0 <XPT2046_ReadCMD+0x24>
		
	}
	
	return usBuf;
 8002724:	88bb      	ldrh	r3, [r7, #4]

}
 8002726:	4618      	mov	r0, r3
 8002728:	3708      	adds	r7, #8
 800272a:	46bd      	mov	sp, r7
 800272c:	bd80      	pop	{r7, pc}
 800272e:	bf00      	nop
 8002730:	40011800 	.word	0x40011800

08002734 <XPT2046_ReadAdc>:


static uint16_t XPT2046_ReadAdc ( uint8_t ucChannel )
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b082      	sub	sp, #8
 8002738:	af00      	add	r7, sp, #0
 800273a:	4603      	mov	r3, r0
 800273c:	71fb      	strb	r3, [r7, #7]
	XPT2046_WriteCMD ( ucChannel );
 800273e:	79fb      	ldrb	r3, [r7, #7]
 8002740:	4618      	mov	r0, r3
 8002742:	f7ff ff77 	bl	8002634 <XPT2046_WriteCMD>

  return 	XPT2046_ReadCMD ();
 8002746:	f7ff ffb9 	bl	80026bc <XPT2046_ReadCMD>
 800274a:	4603      	mov	r3, r0
	
}
 800274c:	4618      	mov	r0, r3
 800274e:	3708      	adds	r7, #8
 8002750:	46bd      	mov	sp, r7
 8002752:	bd80      	pop	{r7, pc}

08002754 <XPT2046_ReadAdc_XY>:


static void XPT2046_ReadAdc_XY ( int16_t * sX_Ad, int16_t * sY_Ad )  
{ 
 8002754:	b580      	push	{r7, lr}
 8002756:	b084      	sub	sp, #16
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
 800275c:	6039      	str	r1, [r7, #0]
	int16_t sX_Ad_Temp, sY_Ad_Temp; 

	
	
	sX_Ad_Temp = XPT2046_ReadAdc ( macXPT2046_CHANNEL_X );
 800275e:	2090      	movs	r0, #144	; 0x90
 8002760:	f7ff ffe8 	bl	8002734 <XPT2046_ReadAdc>
 8002764:	4603      	mov	r3, r0
 8002766:	81fb      	strh	r3, [r7, #14]

	XPT2046_DelayUS ( 1 ); 
 8002768:	2001      	movs	r0, #1
 800276a:	f7ff ff47 	bl	80025fc <XPT2046_DelayUS>

	sY_Ad_Temp = XPT2046_ReadAdc ( macXPT2046_CHANNEL_Y ); 
 800276e:	20d0      	movs	r0, #208	; 0xd0
 8002770:	f7ff ffe0 	bl	8002734 <XPT2046_ReadAdc>
 8002774:	4603      	mov	r3, r0
 8002776:	81bb      	strh	r3, [r7, #12]
	
	
	* sX_Ad = sX_Ad_Temp; 
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	89fa      	ldrh	r2, [r7, #14]
 800277c:	801a      	strh	r2, [r3, #0]
	* sY_Ad = sY_Ad_Temp; 
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	89ba      	ldrh	r2, [r7, #12]
 8002782:	801a      	strh	r2, [r3, #0]
	
	
}
 8002784:	bf00      	nop
 8002786:	3710      	adds	r7, #16
 8002788:	46bd      	mov	sp, r7
 800278a:	bd80      	pop	{r7, pc}

0800278c <XPT2046_ReadAdc_Smooth_XY>:
}


#else     
static uint8_t XPT2046_ReadAdc_Smooth_XY ( strType_XPT2046_Coordinate * pScreenCoordinate )
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b092      	sub	sp, #72	; 0x48
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
	uint8_t ucCount = 0, i;
 8002794:	2300      	movs	r3, #0
 8002796:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	
	int16_t sAD_X, sAD_Y;
	int16_t sBufferArray [ 2 ] [ 10 ] = { { 0 },{ 0 } };  
 800279a:	f107 0308 	add.w	r3, r7, #8
 800279e:	2228      	movs	r2, #40	; 0x28
 80027a0:	2100      	movs	r1, #0
 80027a2:	4618      	mov	r0, r3
 80027a4:	f002 fe2e 	bl	8005404 <memset>
	int32_t lX_Min, lX_Max, lY_Min, lY_Max;


	do					       				
	{		  
		XPT2046_ReadAdc_XY ( & sAD_X, & sAD_Y );  
 80027a8:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80027ac:	f107 0332 	add.w	r3, r7, #50	; 0x32
 80027b0:	4611      	mov	r1, r2
 80027b2:	4618      	mov	r0, r3
 80027b4:	f7ff ffce 	bl	8002754 <XPT2046_ReadAdc_XY>
		
		sBufferArray [ 0 ] [ ucCount ] = sAD_X;  
 80027b8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80027bc:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
 80027c0:	005b      	lsls	r3, r3, #1
 80027c2:	3348      	adds	r3, #72	; 0x48
 80027c4:	443b      	add	r3, r7
 80027c6:	f823 2c40 	strh.w	r2, [r3, #-64]
		sBufferArray [ 1 ] [ ucCount ] = sAD_Y;
 80027ca:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80027ce:	f9b7 2030 	ldrsh.w	r2, [r7, #48]	; 0x30
 80027d2:	330a      	adds	r3, #10
 80027d4:	005b      	lsls	r3, r3, #1
 80027d6:	3348      	adds	r3, #72	; 0x48
 80027d8:	443b      	add	r3, r7
 80027da:	f823 2c40 	strh.w	r2, [r3, #-64]
		
		ucCount ++;  
 80027de:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80027e2:	3301      	adds	r3, #1
 80027e4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		
	}	while ( ( macXPT2046_EXTI_Read() == macXPT2046_EXTI_ActiveLevel ) && ( ucCount < 10 ) );
 80027e8:	2110      	movs	r1, #16
 80027ea:	4871      	ldr	r0, [pc, #452]	; (80029b0 <XPT2046_ReadAdc_Smooth_XY+0x224>)
 80027ec:	f001 f9a4 	bl	8003b38 <HAL_GPIO_ReadPin>
 80027f0:	4603      	mov	r3, r0
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d103      	bne.n	80027fe <XPT2046_ReadAdc_Smooth_XY+0x72>
 80027f6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80027fa:	2b09      	cmp	r3, #9
 80027fc:	d9d4      	bls.n	80027a8 <XPT2046_ReadAdc_Smooth_XY+0x1c>
	

	if ( macXPT2046_EXTI_Read() != macXPT2046_EXTI_ActiveLevel )
 80027fe:	2110      	movs	r1, #16
 8002800:	486b      	ldr	r0, [pc, #428]	; (80029b0 <XPT2046_ReadAdc_Smooth_XY+0x224>)
 8002802:	f001 f999 	bl	8003b38 <HAL_GPIO_ReadPin>
 8002806:	4603      	mov	r3, r0
 8002808:	2b00      	cmp	r3, #0
 800280a:	d002      	beq.n	8002812 <XPT2046_ReadAdc_Smooth_XY+0x86>
		ucXPT2046_TouchFlag = 0;			
 800280c:	4b69      	ldr	r3, [pc, #420]	; (80029b4 <XPT2046_ReadAdc_Smooth_XY+0x228>)
 800280e:	2200      	movs	r2, #0
 8002810:	701a      	strb	r2, [r3, #0]


	if ( ucCount ==10 )		 					
 8002812:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002816:	2b0a      	cmp	r3, #10
 8002818:	f040 80c4 	bne.w	80029a4 <XPT2046_ReadAdc_Smooth_XY+0x218>
	{
		lX_Max = lX_Min = sBufferArray [ 0 ] [ 0 ];
 800281c:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8002820:	643b      	str	r3, [r7, #64]	; 0x40
 8002822:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002824:	63fb      	str	r3, [r7, #60]	; 0x3c
		lY_Max = lY_Min = sBufferArray [ 1 ] [ 0 ];       
 8002826:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800282a:	63bb      	str	r3, [r7, #56]	; 0x38
 800282c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800282e:	637b      	str	r3, [r7, #52]	; 0x34
		
		for ( i = 1; i < 10; i ++ )
 8002830:	2301      	movs	r3, #1
 8002832:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8002836:	e02b      	b.n	8002890 <XPT2046_ReadAdc_Smooth_XY+0x104>
		{
			if ( sBufferArray [ 0 ] [ i ] < lX_Min )
 8002838:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800283c:	005b      	lsls	r3, r3, #1
 800283e:	3348      	adds	r3, #72	; 0x48
 8002840:	443b      	add	r3, r7
 8002842:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 8002846:	461a      	mov	r2, r3
 8002848:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800284a:	4293      	cmp	r3, r2
 800284c:	dd08      	ble.n	8002860 <XPT2046_ReadAdc_Smooth_XY+0xd4>
				lX_Min = sBufferArray [ 0 ] [ i ];
 800284e:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8002852:	005b      	lsls	r3, r3, #1
 8002854:	3348      	adds	r3, #72	; 0x48
 8002856:	443b      	add	r3, r7
 8002858:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 800285c:	643b      	str	r3, [r7, #64]	; 0x40
 800285e:	e012      	b.n	8002886 <XPT2046_ReadAdc_Smooth_XY+0xfa>
			
			else if ( sBufferArray [ 0 ] [ i ] > lX_Max )
 8002860:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8002864:	005b      	lsls	r3, r3, #1
 8002866:	3348      	adds	r3, #72	; 0x48
 8002868:	443b      	add	r3, r7
 800286a:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 800286e:	461a      	mov	r2, r3
 8002870:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002872:	4293      	cmp	r3, r2
 8002874:	da07      	bge.n	8002886 <XPT2046_ReadAdc_Smooth_XY+0xfa>
				lX_Max = sBufferArray [ 0 ] [ i ];
 8002876:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800287a:	005b      	lsls	r3, r3, #1
 800287c:	3348      	adds	r3, #72	; 0x48
 800287e:	443b      	add	r3, r7
 8002880:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 8002884:	63fb      	str	r3, [r7, #60]	; 0x3c
		for ( i = 1; i < 10; i ++ )
 8002886:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800288a:	3301      	adds	r3, #1
 800288c:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8002890:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8002894:	2b09      	cmp	r3, #9
 8002896:	d9cf      	bls.n	8002838 <XPT2046_ReadAdc_Smooth_XY+0xac>

		}
		
		for ( i = 1; i < 10; i ++ )
 8002898:	2301      	movs	r3, #1
 800289a:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 800289e:	e02f      	b.n	8002900 <XPT2046_ReadAdc_Smooth_XY+0x174>
		{
			if ( sBufferArray [ 1 ] [ i ] < lY_Min )
 80028a0:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80028a4:	330a      	adds	r3, #10
 80028a6:	005b      	lsls	r3, r3, #1
 80028a8:	3348      	adds	r3, #72	; 0x48
 80028aa:	443b      	add	r3, r7
 80028ac:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 80028b0:	461a      	mov	r2, r3
 80028b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028b4:	4293      	cmp	r3, r2
 80028b6:	dd09      	ble.n	80028cc <XPT2046_ReadAdc_Smooth_XY+0x140>
				lY_Min = sBufferArray [ 1 ] [ i ];
 80028b8:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80028bc:	330a      	adds	r3, #10
 80028be:	005b      	lsls	r3, r3, #1
 80028c0:	3348      	adds	r3, #72	; 0x48
 80028c2:	443b      	add	r3, r7
 80028c4:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 80028c8:	63bb      	str	r3, [r7, #56]	; 0x38
 80028ca:	e014      	b.n	80028f6 <XPT2046_ReadAdc_Smooth_XY+0x16a>
			
			else if ( sBufferArray [ 1 ] [ i ] > lY_Max )
 80028cc:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80028d0:	330a      	adds	r3, #10
 80028d2:	005b      	lsls	r3, r3, #1
 80028d4:	3348      	adds	r3, #72	; 0x48
 80028d6:	443b      	add	r3, r7
 80028d8:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 80028dc:	461a      	mov	r2, r3
 80028de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028e0:	4293      	cmp	r3, r2
 80028e2:	da08      	bge.n	80028f6 <XPT2046_ReadAdc_Smooth_XY+0x16a>
				lY_Max = sBufferArray [ 1 ] [ i ];
 80028e4:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80028e8:	330a      	adds	r3, #10
 80028ea:	005b      	lsls	r3, r3, #1
 80028ec:	3348      	adds	r3, #72	; 0x48
 80028ee:	443b      	add	r3, r7
 80028f0:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 80028f4:	637b      	str	r3, [r7, #52]	; 0x34
		for ( i = 1; i < 10; i ++ )
 80028f6:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80028fa:	3301      	adds	r3, #1
 80028fc:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8002900:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8002904:	2b09      	cmp	r3, #9
 8002906:	d9cb      	bls.n	80028a0 <XPT2046_ReadAdc_Smooth_XY+0x114>

		}
		

		pScreenCoordinate ->x =  ( sBufferArray [ 0 ] [ 0 ] + sBufferArray [ 0 ] [ 1 ] + sBufferArray [ 0 ] [ 2 ] + sBufferArray [ 0 ] [ 3 ] + sBufferArray [ 0 ] [ 4 ] + 
 8002908:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800290c:	461a      	mov	r2, r3
 800290e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002912:	4413      	add	r3, r2
 8002914:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8002918:	4413      	add	r3, r2
 800291a:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800291e:	4413      	add	r3, r2
 8002920:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8002924:	4413      	add	r3, r2
		                           sBufferArray [ 0 ] [ 5 ] + sBufferArray [ 0 ] [ 6 ] + sBufferArray [ 0 ] [ 7 ] + sBufferArray [ 0 ] [ 8 ] + sBufferArray [ 0 ] [ 9 ] - lX_Min-lX_Max ) >> 3;
 8002926:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
		pScreenCoordinate ->x =  ( sBufferArray [ 0 ] [ 0 ] + sBufferArray [ 0 ] [ 1 ] + sBufferArray [ 0 ] [ 2 ] + sBufferArray [ 0 ] [ 3 ] + sBufferArray [ 0 ] [ 4 ] + 
 800292a:	4413      	add	r3, r2
		                           sBufferArray [ 0 ] [ 5 ] + sBufferArray [ 0 ] [ 6 ] + sBufferArray [ 0 ] [ 7 ] + sBufferArray [ 0 ] [ 8 ] + sBufferArray [ 0 ] [ 9 ] - lX_Min-lX_Max ) >> 3;
 800292c:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8002930:	4413      	add	r3, r2
 8002932:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8002936:	4413      	add	r3, r2
 8002938:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 800293c:	4413      	add	r3, r2
 800293e:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 8002942:	441a      	add	r2, r3
 8002944:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002946:	1ad2      	subs	r2, r2, r3
 8002948:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800294a:	1ad3      	subs	r3, r2, r3
 800294c:	10db      	asrs	r3, r3, #3
		pScreenCoordinate ->x =  ( sBufferArray [ 0 ] [ 0 ] + sBufferArray [ 0 ] [ 1 ] + sBufferArray [ 0 ] [ 2 ] + sBufferArray [ 0 ] [ 3 ] + sBufferArray [ 0 ] [ 4 ] + 
 800294e:	b29a      	uxth	r2, r3
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	801a      	strh	r2, [r3, #0]
		
		pScreenCoordinate ->y =  ( sBufferArray [ 1 ] [ 0 ] + sBufferArray [ 1 ] [ 1 ] + sBufferArray [ 1 ] [ 2 ] + sBufferArray [ 1 ] [ 3 ] + sBufferArray [ 1 ] [ 4 ] + 
 8002954:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8002958:	461a      	mov	r2, r3
 800295a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800295e:	4413      	add	r3, r2
 8002960:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8002964:	4413      	add	r3, r2
 8002966:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 800296a:	4413      	add	r3, r2
 800296c:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 8002970:	4413      	add	r3, r2
		                           sBufferArray [ 1 ] [ 5 ] + sBufferArray [ 1 ] [ 6 ] + sBufferArray [ 1 ] [ 7 ] + sBufferArray [ 1 ] [ 8 ] + sBufferArray [ 1 ] [ 9 ] - lY_Min-lY_Max ) >> 3; 
 8002972:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
		pScreenCoordinate ->y =  ( sBufferArray [ 1 ] [ 0 ] + sBufferArray [ 1 ] [ 1 ] + sBufferArray [ 1 ] [ 2 ] + sBufferArray [ 1 ] [ 3 ] + sBufferArray [ 1 ] [ 4 ] + 
 8002976:	4413      	add	r3, r2
		                           sBufferArray [ 1 ] [ 5 ] + sBufferArray [ 1 ] [ 6 ] + sBufferArray [ 1 ] [ 7 ] + sBufferArray [ 1 ] [ 8 ] + sBufferArray [ 1 ] [ 9 ] - lY_Min-lY_Max ) >> 3; 
 8002978:	f9b7 2028 	ldrsh.w	r2, [r7, #40]	; 0x28
 800297c:	4413      	add	r3, r2
 800297e:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 8002982:	4413      	add	r3, r2
 8002984:	f9b7 202c 	ldrsh.w	r2, [r7, #44]	; 0x2c
 8002988:	4413      	add	r3, r2
 800298a:	f9b7 202e 	ldrsh.w	r2, [r7, #46]	; 0x2e
 800298e:	441a      	add	r2, r3
 8002990:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002992:	1ad2      	subs	r2, r2, r3
 8002994:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002996:	1ad3      	subs	r3, r2, r3
 8002998:	10db      	asrs	r3, r3, #3
		pScreenCoordinate ->y =  ( sBufferArray [ 1 ] [ 0 ] + sBufferArray [ 1 ] [ 1 ] + sBufferArray [ 1 ] [ 2 ] + sBufferArray [ 1 ] [ 3 ] + sBufferArray [ 1 ] [ 4 ] + 
 800299a:	b29a      	uxth	r2, r3
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	805a      	strh	r2, [r3, #2]
		
		
		return 1;
 80029a0:	2301      	movs	r3, #1
 80029a2:	e000      	b.n	80029a6 <XPT2046_ReadAdc_Smooth_XY+0x21a>
		

	}   
	
	
	return 0;    
 80029a4:	2300      	movs	r3, #0
	
	
}
 80029a6:	4618      	mov	r0, r3
 80029a8:	3748      	adds	r7, #72	; 0x48
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bd80      	pop	{r7, pc}
 80029ae:	bf00      	nop
 80029b0:	40011800 	.word	0x40011800
 80029b4:	200001d0 	.word	0x200001d0

080029b8 <XPT2046_Get_TouchedPoint>:
}

   

uint8_t XPT2046_Get_TouchedPoint ( strType_XPT2046_Coordinate * pDisplayCoordinate, strType_XPT2046_TouchPara * pTouchPara )
{
 80029b8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80029bc:	b084      	sub	sp, #16
 80029be:	af00      	add	r7, sp, #0
 80029c0:	6078      	str	r0, [r7, #4]
 80029c2:	6039      	str	r1, [r7, #0]
	uint8_t ucRet = 1;           
 80029c4:	2301      	movs	r3, #1
 80029c6:	73fb      	strb	r3, [r7, #15]
	
	strType_XPT2046_Coordinate strScreenCoordinate; 
	

  if ( XPT2046_ReadAdc_Smooth_XY ( & strScreenCoordinate ) )
 80029c8:	f107 0308 	add.w	r3, r7, #8
 80029cc:	4618      	mov	r0, r3
 80029ce:	f7ff fedd 	bl	800278c <XPT2046_ReadAdc_Smooth_XY>
 80029d2:	4603      	mov	r3, r0
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d06e      	beq.n	8002ab6 <XPT2046_Get_TouchedPoint+0xfe>
  {    
		pDisplayCoordinate ->x = ( ( pTouchPara ->dX_X * strScreenCoordinate .x ) + ( pTouchPara ->dX_Y * strScreenCoordinate .y ) + pTouchPara ->dX );        
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	e9d3 4500 	ldrd	r4, r5, [r3]
 80029de:	893b      	ldrh	r3, [r7, #8]
 80029e0:	4618      	mov	r0, r3
 80029e2:	f7fd fd73 	bl	80004cc <__aeabi_i2d>
 80029e6:	4602      	mov	r2, r0
 80029e8:	460b      	mov	r3, r1
 80029ea:	4620      	mov	r0, r4
 80029ec:	4629      	mov	r1, r5
 80029ee:	f7fd fdd7 	bl	80005a0 <__aeabi_dmul>
 80029f2:	4602      	mov	r2, r0
 80029f4:	460b      	mov	r3, r1
 80029f6:	4690      	mov	r8, r2
 80029f8:	4699      	mov	r9, r3
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8002a00:	897b      	ldrh	r3, [r7, #10]
 8002a02:	4618      	mov	r0, r3
 8002a04:	f7fd fd62 	bl	80004cc <__aeabi_i2d>
 8002a08:	4602      	mov	r2, r0
 8002a0a:	460b      	mov	r3, r1
 8002a0c:	4620      	mov	r0, r4
 8002a0e:	4629      	mov	r1, r5
 8002a10:	f7fd fdc6 	bl	80005a0 <__aeabi_dmul>
 8002a14:	4602      	mov	r2, r0
 8002a16:	460b      	mov	r3, r1
 8002a18:	4640      	mov	r0, r8
 8002a1a:	4649      	mov	r1, r9
 8002a1c:	f7fd fc0a 	bl	8000234 <__adddf3>
 8002a20:	4602      	mov	r2, r0
 8002a22:	460b      	mov	r3, r1
 8002a24:	4610      	mov	r0, r2
 8002a26:	4619      	mov	r1, r3
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002a2e:	f7fd fc01 	bl	8000234 <__adddf3>
 8002a32:	4602      	mov	r2, r0
 8002a34:	460b      	mov	r3, r1
 8002a36:	4610      	mov	r0, r2
 8002a38:	4619      	mov	r1, r3
 8002a3a:	f7fd ffeb 	bl	8000a14 <__aeabi_d2uiz>
 8002a3e:	4603      	mov	r3, r0
 8002a40:	b29a      	uxth	r2, r3
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	801a      	strh	r2, [r3, #0]
		pDisplayCoordinate ->y = ( ( pTouchPara ->dY_X * strScreenCoordinate .x ) + ( pTouchPara ->dY_Y * strScreenCoordinate .y ) + pTouchPara ->dY );
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8002a4c:	893b      	ldrh	r3, [r7, #8]
 8002a4e:	4618      	mov	r0, r3
 8002a50:	f7fd fd3c 	bl	80004cc <__aeabi_i2d>
 8002a54:	4602      	mov	r2, r0
 8002a56:	460b      	mov	r3, r1
 8002a58:	4620      	mov	r0, r4
 8002a5a:	4629      	mov	r1, r5
 8002a5c:	f7fd fda0 	bl	80005a0 <__aeabi_dmul>
 8002a60:	4602      	mov	r2, r0
 8002a62:	460b      	mov	r3, r1
 8002a64:	4690      	mov	r8, r2
 8002a66:	4699      	mov	r9, r3
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 8002a6e:	897b      	ldrh	r3, [r7, #10]
 8002a70:	4618      	mov	r0, r3
 8002a72:	f7fd fd2b 	bl	80004cc <__aeabi_i2d>
 8002a76:	4602      	mov	r2, r0
 8002a78:	460b      	mov	r3, r1
 8002a7a:	4620      	mov	r0, r4
 8002a7c:	4629      	mov	r1, r5
 8002a7e:	f7fd fd8f 	bl	80005a0 <__aeabi_dmul>
 8002a82:	4602      	mov	r2, r0
 8002a84:	460b      	mov	r3, r1
 8002a86:	4640      	mov	r0, r8
 8002a88:	4649      	mov	r1, r9
 8002a8a:	f7fd fbd3 	bl	8000234 <__adddf3>
 8002a8e:	4602      	mov	r2, r0
 8002a90:	460b      	mov	r3, r1
 8002a92:	4610      	mov	r0, r2
 8002a94:	4619      	mov	r1, r3
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8002a9c:	f7fd fbca 	bl	8000234 <__adddf3>
 8002aa0:	4602      	mov	r2, r0
 8002aa2:	460b      	mov	r3, r1
 8002aa4:	4610      	mov	r0, r2
 8002aa6:	4619      	mov	r1, r3
 8002aa8:	f7fd ffb4 	bl	8000a14 <__aeabi_d2uiz>
 8002aac:	4603      	mov	r3, r0
 8002aae:	b29a      	uxth	r2, r3
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	805a      	strh	r2, [r3, #2]
 8002ab4:	e001      	b.n	8002aba <XPT2046_Get_TouchedPoint+0x102>

  }
	 
	else ucRet = 0;            
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	73fb      	strb	r3, [r7, #15]
	
	return ucRet;
 8002aba:	7bfb      	ldrb	r3, [r7, #15]
	
	
} 
 8002abc:	4618      	mov	r0, r3
 8002abe:	3710      	adds	r7, #16
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
	...

08002ac8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002ac8:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8002aca:	e003      	b.n	8002ad4 <LoopCopyDataInit>

08002acc <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002acc:	4b0b      	ldr	r3, [pc, #44]	; (8002afc <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8002ace:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002ad0:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8002ad2:	3104      	adds	r1, #4

08002ad4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002ad4:	480a      	ldr	r0, [pc, #40]	; (8002b00 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8002ad6:	4b0b      	ldr	r3, [pc, #44]	; (8002b04 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002ad8:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8002ada:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002adc:	d3f6      	bcc.n	8002acc <CopyDataInit>
  ldr r2, =_sbss
 8002ade:	4a0a      	ldr	r2, [pc, #40]	; (8002b08 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8002ae0:	e002      	b.n	8002ae8 <LoopFillZerobss>

08002ae2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8002ae2:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002ae4:	f842 3b04 	str.w	r3, [r2], #4

08002ae8 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002ae8:	4b08      	ldr	r3, [pc, #32]	; (8002b0c <LoopFillZerobss+0x24>)
  cmp r2, r3
 8002aea:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002aec:	d3f9      	bcc.n	8002ae2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002aee:	f7ff fd51 	bl	8002594 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002af2:	f002 fc63 	bl	80053bc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002af6:	f7fe fc55 	bl	80013a4 <main>
  bx lr
 8002afa:	4770      	bx	lr
  ldr r3, =_sidata
 8002afc:	080069e8 	.word	0x080069e8
  ldr r0, =_sdata
 8002b00:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002b04:	200000a4 	.word	0x200000a4
  ldr r2, =_sbss
 8002b08:	200000a4 	.word	0x200000a4
  ldr r3, = _ebss
 8002b0c:	200001e8 	.word	0x200001e8

08002b10 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002b10:	e7fe      	b.n	8002b10 <ADC1_2_IRQHandler>
	...

08002b14 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002b18:	4b08      	ldr	r3, [pc, #32]	; (8002b3c <HAL_Init+0x28>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4a07      	ldr	r2, [pc, #28]	; (8002b3c <HAL_Init+0x28>)
 8002b1e:	f043 0310 	orr.w	r3, r3, #16
 8002b22:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b24:	2003      	movs	r0, #3
 8002b26:	f000 fe31 	bl	800378c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002b2a:	2000      	movs	r0, #0
 8002b2c:	f000 f808 	bl	8002b40 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002b30:	f7ff fb66 	bl	8002200 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002b34:	2300      	movs	r3, #0
}
 8002b36:	4618      	mov	r0, r3
 8002b38:	bd80      	pop	{r7, pc}
 8002b3a:	bf00      	nop
 8002b3c:	40022000 	.word	0x40022000

08002b40 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b082      	sub	sp, #8
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002b48:	4b12      	ldr	r3, [pc, #72]	; (8002b94 <HAL_InitTick+0x54>)
 8002b4a:	681a      	ldr	r2, [r3, #0]
 8002b4c:	4b12      	ldr	r3, [pc, #72]	; (8002b98 <HAL_InitTick+0x58>)
 8002b4e:	781b      	ldrb	r3, [r3, #0]
 8002b50:	4619      	mov	r1, r3
 8002b52:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b56:	fbb3 f3f1 	udiv	r3, r3, r1
 8002b5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b5e:	4618      	mov	r0, r3
 8002b60:	f000 fe49 	bl	80037f6 <HAL_SYSTICK_Config>
 8002b64:	4603      	mov	r3, r0
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d001      	beq.n	8002b6e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	e00e      	b.n	8002b8c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2b0f      	cmp	r3, #15
 8002b72:	d80a      	bhi.n	8002b8a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002b74:	2200      	movs	r2, #0
 8002b76:	6879      	ldr	r1, [r7, #4]
 8002b78:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002b7c:	f000 fe11 	bl	80037a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002b80:	4a06      	ldr	r2, [pc, #24]	; (8002b9c <HAL_InitTick+0x5c>)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002b86:	2300      	movs	r3, #0
 8002b88:	e000      	b.n	8002b8c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002b8a:	2301      	movs	r3, #1
}
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	3708      	adds	r7, #8
 8002b90:	46bd      	mov	sp, r7
 8002b92:	bd80      	pop	{r7, pc}
 8002b94:	20000000 	.word	0x20000000
 8002b98:	2000003c 	.word	0x2000003c
 8002b9c:	20000038 	.word	0x20000038

08002ba0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002ba4:	4b05      	ldr	r3, [pc, #20]	; (8002bbc <HAL_IncTick+0x1c>)
 8002ba6:	781b      	ldrb	r3, [r3, #0]
 8002ba8:	461a      	mov	r2, r3
 8002baa:	4b05      	ldr	r3, [pc, #20]	; (8002bc0 <HAL_IncTick+0x20>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4413      	add	r3, r2
 8002bb0:	4a03      	ldr	r2, [pc, #12]	; (8002bc0 <HAL_IncTick+0x20>)
 8002bb2:	6013      	str	r3, [r2, #0]
}
 8002bb4:	bf00      	nop
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bc80      	pop	{r7}
 8002bba:	4770      	bx	lr
 8002bbc:	2000003c 	.word	0x2000003c
 8002bc0:	200001d4 	.word	0x200001d4

08002bc4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	af00      	add	r7, sp, #0
  return uwTick;
 8002bc8:	4b02      	ldr	r3, [pc, #8]	; (8002bd4 <HAL_GetTick+0x10>)
 8002bca:	681b      	ldr	r3, [r3, #0]
}
 8002bcc:	4618      	mov	r0, r3
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bc80      	pop	{r7}
 8002bd2:	4770      	bx	lr
 8002bd4:	200001d4 	.word	0x200001d4

08002bd8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b084      	sub	sp, #16
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002be0:	f7ff fff0 	bl	8002bc4 <HAL_GetTick>
 8002be4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002bf0:	d005      	beq.n	8002bfe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002bf2:	4b0a      	ldr	r3, [pc, #40]	; (8002c1c <HAL_Delay+0x44>)
 8002bf4:	781b      	ldrb	r3, [r3, #0]
 8002bf6:	461a      	mov	r2, r3
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	4413      	add	r3, r2
 8002bfc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002bfe:	bf00      	nop
 8002c00:	f7ff ffe0 	bl	8002bc4 <HAL_GetTick>
 8002c04:	4602      	mov	r2, r0
 8002c06:	68bb      	ldr	r3, [r7, #8]
 8002c08:	1ad3      	subs	r3, r2, r3
 8002c0a:	68fa      	ldr	r2, [r7, #12]
 8002c0c:	429a      	cmp	r2, r3
 8002c0e:	d8f7      	bhi.n	8002c00 <HAL_Delay+0x28>
  {
  }
}
 8002c10:	bf00      	nop
 8002c12:	bf00      	nop
 8002c14:	3710      	adds	r7, #16
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bd80      	pop	{r7, pc}
 8002c1a:	bf00      	nop
 8002c1c:	2000003c 	.word	0x2000003c

08002c20 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b086      	sub	sp, #24
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c28:	2300      	movs	r3, #0
 8002c2a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002c30:	2300      	movs	r3, #0
 8002c32:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002c34:	2300      	movs	r3, #0
 8002c36:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d101      	bne.n	8002c42 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002c3e:	2301      	movs	r3, #1
 8002c40:	e0ce      	b.n	8002de0 <HAL_ADC_Init+0x1c0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	689b      	ldr	r3, [r3, #8]
 8002c46:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d109      	bne.n	8002c64 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2200      	movs	r2, #0
 8002c54:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2200      	movs	r2, #0
 8002c5a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002c5e:	6878      	ldr	r0, [r7, #4]
 8002c60:	f7ff fb00 	bl	8002264 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002c64:	6878      	ldr	r0, [r7, #4]
 8002c66:	f000 fbd7 	bl	8003418 <ADC_ConversionStop_Disable>
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c72:	f003 0310 	and.w	r3, r3, #16
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	f040 80a9 	bne.w	8002dce <HAL_ADC_Init+0x1ae>
 8002c7c:	7dfb      	ldrb	r3, [r7, #23]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	f040 80a5 	bne.w	8002dce <HAL_ADC_Init+0x1ae>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c88:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002c8c:	f023 0302 	bic.w	r3, r3, #2
 8002c90:	f043 0202 	orr.w	r2, r3, #2
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4951      	ldr	r1, [pc, #324]	; (8002de8 <HAL_ADC_Init+0x1c8>)
 8002ca2:	428b      	cmp	r3, r1
 8002ca4:	d10a      	bne.n	8002cbc <HAL_ADC_Init+0x9c>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	69db      	ldr	r3, [r3, #28]
 8002caa:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002cae:	d002      	beq.n	8002cb6 <HAL_ADC_Init+0x96>
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	69db      	ldr	r3, [r3, #28]
 8002cb4:	e004      	b.n	8002cc0 <HAL_ADC_Init+0xa0>
 8002cb6:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002cba:	e001      	b.n	8002cc0 <HAL_ADC_Init+0xa0>
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002cc0:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	7b1b      	ldrb	r3, [r3, #12]
 8002cc6:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002cc8:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002cca:	68ba      	ldr	r2, [r7, #8]
 8002ccc:	4313      	orrs	r3, r2
 8002cce:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	689b      	ldr	r3, [r3, #8]
 8002cd4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002cd8:	d003      	beq.n	8002ce2 <HAL_ADC_Init+0xc2>
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	689b      	ldr	r3, [r3, #8]
 8002cde:	2b01      	cmp	r3, #1
 8002ce0:	d102      	bne.n	8002ce8 <HAL_ADC_Init+0xc8>
 8002ce2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002ce6:	e000      	b.n	8002cea <HAL_ADC_Init+0xca>
 8002ce8:	2300      	movs	r3, #0
 8002cea:	693a      	ldr	r2, [r7, #16]
 8002cec:	4313      	orrs	r3, r2
 8002cee:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	7d1b      	ldrb	r3, [r3, #20]
 8002cf4:	2b01      	cmp	r3, #1
 8002cf6:	d119      	bne.n	8002d2c <HAL_ADC_Init+0x10c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	7b1b      	ldrb	r3, [r3, #12]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d109      	bne.n	8002d14 <HAL_ADC_Init+0xf4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	699b      	ldr	r3, [r3, #24]
 8002d04:	3b01      	subs	r3, #1
 8002d06:	035a      	lsls	r2, r3, #13
 8002d08:	693b      	ldr	r3, [r7, #16]
 8002d0a:	4313      	orrs	r3, r2
 8002d0c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002d10:	613b      	str	r3, [r7, #16]
 8002d12:	e00b      	b.n	8002d2c <HAL_ADC_Init+0x10c>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d18:	f043 0220 	orr.w	r2, r3, #32
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d24:	f043 0201 	orr.w	r2, r3, #1
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	693a      	ldr	r2, [r7, #16]
 8002d3c:	430a      	orrs	r2, r1
 8002d3e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	689a      	ldr	r2, [r3, #8]
 8002d46:	4b29      	ldr	r3, [pc, #164]	; (8002dec <HAL_ADC_Init+0x1cc>)
 8002d48:	4013      	ands	r3, r2
 8002d4a:	687a      	ldr	r2, [r7, #4]
 8002d4c:	6812      	ldr	r2, [r2, #0]
 8002d4e:	68b9      	ldr	r1, [r7, #8]
 8002d50:	430b      	orrs	r3, r1
 8002d52:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	689b      	ldr	r3, [r3, #8]
 8002d58:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d5c:	d003      	beq.n	8002d66 <HAL_ADC_Init+0x146>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	689b      	ldr	r3, [r3, #8]
 8002d62:	2b01      	cmp	r3, #1
 8002d64:	d104      	bne.n	8002d70 <HAL_ADC_Init+0x150>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	691b      	ldr	r3, [r3, #16]
 8002d6a:	3b01      	subs	r3, #1
 8002d6c:	051b      	lsls	r3, r3, #20
 8002d6e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d76:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	68fa      	ldr	r2, [r7, #12]
 8002d80:	430a      	orrs	r2, r1
 8002d82:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	689a      	ldr	r2, [r3, #8]
 8002d8a:	4b19      	ldr	r3, [pc, #100]	; (8002df0 <HAL_ADC_Init+0x1d0>)
 8002d8c:	4013      	ands	r3, r2
 8002d8e:	68ba      	ldr	r2, [r7, #8]
 8002d90:	429a      	cmp	r2, r3
 8002d92:	d10b      	bne.n	8002dac <HAL_ADC_Init+0x18c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2200      	movs	r2, #0
 8002d98:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d9e:	f023 0303 	bic.w	r3, r3, #3
 8002da2:	f043 0201 	orr.w	r2, r3, #1
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002daa:	e018      	b.n	8002dde <HAL_ADC_Init+0x1be>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002db0:	f023 0312 	bic.w	r3, r3, #18
 8002db4:	f043 0210 	orr.w	r2, r3, #16
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dc0:	f043 0201 	orr.w	r2, r3, #1
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002dc8:	2301      	movs	r3, #1
 8002dca:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002dcc:	e007      	b.n	8002dde <HAL_ADC_Init+0x1be>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dd2:	f043 0210 	orr.w	r2, r3, #16
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002dda:	2301      	movs	r3, #1
 8002ddc:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002dde:	7dfb      	ldrb	r3, [r7, #23]
}
 8002de0:	4618      	mov	r0, r3
 8002de2:	3718      	adds	r7, #24
 8002de4:	46bd      	mov	sp, r7
 8002de6:	bd80      	pop	{r7, pc}
 8002de8:	40013c00 	.word	0x40013c00
 8002dec:	ffe1f7fd 	.word	0xffe1f7fd
 8002df0:	ff1f0efe 	.word	0xff1f0efe

08002df4 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b084      	sub	sp, #16
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002e06:	2b01      	cmp	r3, #1
 8002e08:	d101      	bne.n	8002e0e <HAL_ADC_Start+0x1a>
 8002e0a:	2302      	movs	r3, #2
 8002e0c:	e098      	b.n	8002f40 <HAL_ADC_Start+0x14c>
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2201      	movs	r2, #1
 8002e12:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8002e16:	6878      	ldr	r0, [r7, #4]
 8002e18:	f000 faa4 	bl	8003364 <ADC_Enable>
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8002e20:	7bfb      	ldrb	r3, [r7, #15]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	f040 8087 	bne.w	8002f36 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e2c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e30:	f023 0301 	bic.w	r3, r3, #1
 8002e34:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4a41      	ldr	r2, [pc, #260]	; (8002f48 <HAL_ADC_Start+0x154>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d105      	bne.n	8002e52 <HAL_ADC_Start+0x5e>
 8002e46:	4b41      	ldr	r3, [pc, #260]	; (8002f4c <HAL_ADC_Start+0x158>)
 8002e48:	685b      	ldr	r3, [r3, #4]
 8002e4a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d115      	bne.n	8002e7e <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e56:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d026      	beq.n	8002eba <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e70:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002e74:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002e7c:	e01d      	b.n	8002eba <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e82:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4a2f      	ldr	r2, [pc, #188]	; (8002f4c <HAL_ADC_Start+0x158>)
 8002e90:	4293      	cmp	r3, r2
 8002e92:	d004      	beq.n	8002e9e <HAL_ADC_Start+0xaa>
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4a2b      	ldr	r2, [pc, #172]	; (8002f48 <HAL_ADC_Start+0x154>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d10d      	bne.n	8002eba <HAL_ADC_Start+0xc6>
 8002e9e:	4b2b      	ldr	r3, [pc, #172]	; (8002f4c <HAL_ADC_Start+0x158>)
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d007      	beq.n	8002eba <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eae:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002eb2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ebe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d006      	beq.n	8002ed4 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eca:	f023 0206 	bic.w	r2, r3, #6
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	62da      	str	r2, [r3, #44]	; 0x2c
 8002ed2:	e002      	b.n	8002eda <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2200      	movs	r2, #0
 8002ede:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f06f 0202 	mvn.w	r2, #2
 8002eea:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	689b      	ldr	r3, [r3, #8]
 8002ef2:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002ef6:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002efa:	d113      	bne.n	8002f24 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002f00:	4a11      	ldr	r2, [pc, #68]	; (8002f48 <HAL_ADC_Start+0x154>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d105      	bne.n	8002f12 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002f06:	4b11      	ldr	r3, [pc, #68]	; (8002f4c <HAL_ADC_Start+0x158>)
 8002f08:	685b      	ldr	r3, [r3, #4]
 8002f0a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d108      	bne.n	8002f24 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	689a      	ldr	r2, [r3, #8]
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8002f20:	609a      	str	r2, [r3, #8]
 8002f22:	e00c      	b.n	8002f3e <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	689a      	ldr	r2, [r3, #8]
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002f32:	609a      	str	r2, [r3, #8]
 8002f34:	e003      	b.n	8002f3e <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2200      	movs	r2, #0
 8002f3a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8002f3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f40:	4618      	mov	r0, r3
 8002f42:	3710      	adds	r7, #16
 8002f44:	46bd      	mov	sp, r7
 8002f46:	bd80      	pop	{r7, pc}
 8002f48:	40012800 	.word	0x40012800
 8002f4c:	40012400 	.word	0x40012400

08002f50 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002f50:	b590      	push	{r4, r7, lr}
 8002f52:	b087      	sub	sp, #28
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
 8002f58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8002f5e:	2300      	movs	r3, #0
 8002f60:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8002f62:	2300      	movs	r3, #0
 8002f64:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8002f66:	f7ff fe2d 	bl	8002bc4 <HAL_GetTick>
 8002f6a:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	689b      	ldr	r3, [r3, #8]
 8002f72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d00b      	beq.n	8002f92 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f7e:	f043 0220 	orr.w	r2, r3, #32
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2200      	movs	r2, #0
 8002f8a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8002f8e:	2301      	movs	r3, #1
 8002f90:	e0d3      	b.n	800313a <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d131      	bne.n	8003004 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fa6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d12a      	bne.n	8003004 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002fae:	e021      	b.n	8002ff4 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002fb6:	d01d      	beq.n	8002ff4 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d007      	beq.n	8002fce <HAL_ADC_PollForConversion+0x7e>
 8002fbe:	f7ff fe01 	bl	8002bc4 <HAL_GetTick>
 8002fc2:	4602      	mov	r2, r0
 8002fc4:	697b      	ldr	r3, [r7, #20]
 8002fc6:	1ad3      	subs	r3, r2, r3
 8002fc8:	683a      	ldr	r2, [r7, #0]
 8002fca:	429a      	cmp	r2, r3
 8002fcc:	d212      	bcs.n	8002ff4 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f003 0302 	and.w	r3, r3, #2
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d10b      	bne.n	8002ff4 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fe0:	f043 0204 	orr.w	r2, r3, #4
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2200      	movs	r2, #0
 8002fec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 8002ff0:	2303      	movs	r3, #3
 8002ff2:	e0a2      	b.n	800313a <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f003 0302 	and.w	r3, r3, #2
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d0d6      	beq.n	8002fb0 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8003002:	e070      	b.n	80030e6 <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8003004:	4b4f      	ldr	r3, [pc, #316]	; (8003144 <HAL_ADC_PollForConversion+0x1f4>)
 8003006:	681c      	ldr	r4, [r3, #0]
 8003008:	2002      	movs	r0, #2
 800300a:	f001 faaf 	bl	800456c <HAL_RCCEx_GetPeriphCLKFreq>
 800300e:	4603      	mov	r3, r0
 8003010:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	6919      	ldr	r1, [r3, #16]
 800301a:	4b4b      	ldr	r3, [pc, #300]	; (8003148 <HAL_ADC_PollForConversion+0x1f8>)
 800301c:	400b      	ands	r3, r1
 800301e:	2b00      	cmp	r3, #0
 8003020:	d118      	bne.n	8003054 <HAL_ADC_PollForConversion+0x104>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	68d9      	ldr	r1, [r3, #12]
 8003028:	4b48      	ldr	r3, [pc, #288]	; (800314c <HAL_ADC_PollForConversion+0x1fc>)
 800302a:	400b      	ands	r3, r1
 800302c:	2b00      	cmp	r3, #0
 800302e:	d111      	bne.n	8003054 <HAL_ADC_PollForConversion+0x104>
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	6919      	ldr	r1, [r3, #16]
 8003036:	4b46      	ldr	r3, [pc, #280]	; (8003150 <HAL_ADC_PollForConversion+0x200>)
 8003038:	400b      	ands	r3, r1
 800303a:	2b00      	cmp	r3, #0
 800303c:	d108      	bne.n	8003050 <HAL_ADC_PollForConversion+0x100>
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	68d9      	ldr	r1, [r3, #12]
 8003044:	4b43      	ldr	r3, [pc, #268]	; (8003154 <HAL_ADC_PollForConversion+0x204>)
 8003046:	400b      	ands	r3, r1
 8003048:	2b00      	cmp	r3, #0
 800304a:	d101      	bne.n	8003050 <HAL_ADC_PollForConversion+0x100>
 800304c:	2314      	movs	r3, #20
 800304e:	e020      	b.n	8003092 <HAL_ADC_PollForConversion+0x142>
 8003050:	2329      	movs	r3, #41	; 0x29
 8003052:	e01e      	b.n	8003092 <HAL_ADC_PollForConversion+0x142>
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	6919      	ldr	r1, [r3, #16]
 800305a:	4b3d      	ldr	r3, [pc, #244]	; (8003150 <HAL_ADC_PollForConversion+0x200>)
 800305c:	400b      	ands	r3, r1
 800305e:	2b00      	cmp	r3, #0
 8003060:	d106      	bne.n	8003070 <HAL_ADC_PollForConversion+0x120>
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	68d9      	ldr	r1, [r3, #12]
 8003068:	4b3a      	ldr	r3, [pc, #232]	; (8003154 <HAL_ADC_PollForConversion+0x204>)
 800306a:	400b      	ands	r3, r1
 800306c:	2b00      	cmp	r3, #0
 800306e:	d00d      	beq.n	800308c <HAL_ADC_PollForConversion+0x13c>
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	6919      	ldr	r1, [r3, #16]
 8003076:	4b38      	ldr	r3, [pc, #224]	; (8003158 <HAL_ADC_PollForConversion+0x208>)
 8003078:	400b      	ands	r3, r1
 800307a:	2b00      	cmp	r3, #0
 800307c:	d108      	bne.n	8003090 <HAL_ADC_PollForConversion+0x140>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	68d9      	ldr	r1, [r3, #12]
 8003084:	4b34      	ldr	r3, [pc, #208]	; (8003158 <HAL_ADC_PollForConversion+0x208>)
 8003086:	400b      	ands	r3, r1
 8003088:	2b00      	cmp	r3, #0
 800308a:	d101      	bne.n	8003090 <HAL_ADC_PollForConversion+0x140>
 800308c:	2354      	movs	r3, #84	; 0x54
 800308e:	e000      	b.n	8003092 <HAL_ADC_PollForConversion+0x142>
 8003090:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8003092:	fb02 f303 	mul.w	r3, r2, r3
 8003096:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8003098:	e021      	b.n	80030de <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80030a0:	d01a      	beq.n	80030d8 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d007      	beq.n	80030b8 <HAL_ADC_PollForConversion+0x168>
 80030a8:	f7ff fd8c 	bl	8002bc4 <HAL_GetTick>
 80030ac:	4602      	mov	r2, r0
 80030ae:	697b      	ldr	r3, [r7, #20]
 80030b0:	1ad3      	subs	r3, r2, r3
 80030b2:	683a      	ldr	r2, [r7, #0]
 80030b4:	429a      	cmp	r2, r3
 80030b6:	d20f      	bcs.n	80030d8 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	693a      	ldr	r2, [r7, #16]
 80030bc:	429a      	cmp	r2, r3
 80030be:	d90b      	bls.n	80030d8 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030c4:	f043 0204 	orr.w	r2, r3, #4
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2200      	movs	r2, #0
 80030d0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 80030d4:	2303      	movs	r3, #3
 80030d6:	e030      	b.n	800313a <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	3301      	adds	r3, #1
 80030dc:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	693a      	ldr	r2, [r7, #16]
 80030e2:	429a      	cmp	r2, r3
 80030e4:	d8d9      	bhi.n	800309a <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f06f 0212 	mvn.w	r2, #18
 80030ee:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030f4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	689b      	ldr	r3, [r3, #8]
 8003102:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8003106:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800310a:	d115      	bne.n	8003138 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003110:	2b00      	cmp	r3, #0
 8003112:	d111      	bne.n	8003138 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003118:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003124:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003128:	2b00      	cmp	r3, #0
 800312a:	d105      	bne.n	8003138 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003130:	f043 0201 	orr.w	r2, r3, #1
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8003138:	2300      	movs	r3, #0
}
 800313a:	4618      	mov	r0, r3
 800313c:	371c      	adds	r7, #28
 800313e:	46bd      	mov	sp, r7
 8003140:	bd90      	pop	{r4, r7, pc}
 8003142:	bf00      	nop
 8003144:	20000000 	.word	0x20000000
 8003148:	24924924 	.word	0x24924924
 800314c:	00924924 	.word	0x00924924
 8003150:	12492492 	.word	0x12492492
 8003154:	00492492 	.word	0x00492492
 8003158:	00249249 	.word	0x00249249

0800315c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 800315c:	b480      	push	{r7}
 800315e:	b083      	sub	sp, #12
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800316a:	4618      	mov	r0, r3
 800316c:	370c      	adds	r7, #12
 800316e:	46bd      	mov	sp, r7
 8003170:	bc80      	pop	{r7}
 8003172:	4770      	bx	lr

08003174 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8003174:	b480      	push	{r7}
 8003176:	b085      	sub	sp, #20
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
 800317c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800317e:	2300      	movs	r3, #0
 8003180:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8003182:	2300      	movs	r3, #0
 8003184:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800318c:	2b01      	cmp	r3, #1
 800318e:	d101      	bne.n	8003194 <HAL_ADC_ConfigChannel+0x20>
 8003190:	2302      	movs	r3, #2
 8003192:	e0dc      	b.n	800334e <HAL_ADC_ConfigChannel+0x1da>
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2201      	movs	r2, #1
 8003198:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	2b06      	cmp	r3, #6
 80031a2:	d81c      	bhi.n	80031de <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	685a      	ldr	r2, [r3, #4]
 80031ae:	4613      	mov	r3, r2
 80031b0:	009b      	lsls	r3, r3, #2
 80031b2:	4413      	add	r3, r2
 80031b4:	3b05      	subs	r3, #5
 80031b6:	221f      	movs	r2, #31
 80031b8:	fa02 f303 	lsl.w	r3, r2, r3
 80031bc:	43db      	mvns	r3, r3
 80031be:	4019      	ands	r1, r3
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	6818      	ldr	r0, [r3, #0]
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	685a      	ldr	r2, [r3, #4]
 80031c8:	4613      	mov	r3, r2
 80031ca:	009b      	lsls	r3, r3, #2
 80031cc:	4413      	add	r3, r2
 80031ce:	3b05      	subs	r3, #5
 80031d0:	fa00 f203 	lsl.w	r2, r0, r3
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	430a      	orrs	r2, r1
 80031da:	635a      	str	r2, [r3, #52]	; 0x34
 80031dc:	e03c      	b.n	8003258 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	685b      	ldr	r3, [r3, #4]
 80031e2:	2b0c      	cmp	r3, #12
 80031e4:	d81c      	bhi.n	8003220 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	685a      	ldr	r2, [r3, #4]
 80031f0:	4613      	mov	r3, r2
 80031f2:	009b      	lsls	r3, r3, #2
 80031f4:	4413      	add	r3, r2
 80031f6:	3b23      	subs	r3, #35	; 0x23
 80031f8:	221f      	movs	r2, #31
 80031fa:	fa02 f303 	lsl.w	r3, r2, r3
 80031fe:	43db      	mvns	r3, r3
 8003200:	4019      	ands	r1, r3
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	6818      	ldr	r0, [r3, #0]
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	685a      	ldr	r2, [r3, #4]
 800320a:	4613      	mov	r3, r2
 800320c:	009b      	lsls	r3, r3, #2
 800320e:	4413      	add	r3, r2
 8003210:	3b23      	subs	r3, #35	; 0x23
 8003212:	fa00 f203 	lsl.w	r2, r0, r3
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	430a      	orrs	r2, r1
 800321c:	631a      	str	r2, [r3, #48]	; 0x30
 800321e:	e01b      	b.n	8003258 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	685a      	ldr	r2, [r3, #4]
 800322a:	4613      	mov	r3, r2
 800322c:	009b      	lsls	r3, r3, #2
 800322e:	4413      	add	r3, r2
 8003230:	3b41      	subs	r3, #65	; 0x41
 8003232:	221f      	movs	r2, #31
 8003234:	fa02 f303 	lsl.w	r3, r2, r3
 8003238:	43db      	mvns	r3, r3
 800323a:	4019      	ands	r1, r3
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	6818      	ldr	r0, [r3, #0]
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	685a      	ldr	r2, [r3, #4]
 8003244:	4613      	mov	r3, r2
 8003246:	009b      	lsls	r3, r3, #2
 8003248:	4413      	add	r3, r2
 800324a:	3b41      	subs	r3, #65	; 0x41
 800324c:	fa00 f203 	lsl.w	r2, r0, r3
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	430a      	orrs	r2, r1
 8003256:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	2b09      	cmp	r3, #9
 800325e:	d91c      	bls.n	800329a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	68d9      	ldr	r1, [r3, #12]
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	681a      	ldr	r2, [r3, #0]
 800326a:	4613      	mov	r3, r2
 800326c:	005b      	lsls	r3, r3, #1
 800326e:	4413      	add	r3, r2
 8003270:	3b1e      	subs	r3, #30
 8003272:	2207      	movs	r2, #7
 8003274:	fa02 f303 	lsl.w	r3, r2, r3
 8003278:	43db      	mvns	r3, r3
 800327a:	4019      	ands	r1, r3
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	6898      	ldr	r0, [r3, #8]
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	681a      	ldr	r2, [r3, #0]
 8003284:	4613      	mov	r3, r2
 8003286:	005b      	lsls	r3, r3, #1
 8003288:	4413      	add	r3, r2
 800328a:	3b1e      	subs	r3, #30
 800328c:	fa00 f203 	lsl.w	r2, r0, r3
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	430a      	orrs	r2, r1
 8003296:	60da      	str	r2, [r3, #12]
 8003298:	e019      	b.n	80032ce <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	6919      	ldr	r1, [r3, #16]
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	681a      	ldr	r2, [r3, #0]
 80032a4:	4613      	mov	r3, r2
 80032a6:	005b      	lsls	r3, r3, #1
 80032a8:	4413      	add	r3, r2
 80032aa:	2207      	movs	r2, #7
 80032ac:	fa02 f303 	lsl.w	r3, r2, r3
 80032b0:	43db      	mvns	r3, r3
 80032b2:	4019      	ands	r1, r3
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	6898      	ldr	r0, [r3, #8]
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	681a      	ldr	r2, [r3, #0]
 80032bc:	4613      	mov	r3, r2
 80032be:	005b      	lsls	r3, r3, #1
 80032c0:	4413      	add	r3, r2
 80032c2:	fa00 f203 	lsl.w	r2, r0, r3
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	430a      	orrs	r2, r1
 80032cc:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	2b10      	cmp	r3, #16
 80032d4:	d003      	beq.n	80032de <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80032da:	2b11      	cmp	r3, #17
 80032dc:	d132      	bne.n	8003344 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	4a1d      	ldr	r2, [pc, #116]	; (8003358 <HAL_ADC_ConfigChannel+0x1e4>)
 80032e4:	4293      	cmp	r3, r2
 80032e6:	d125      	bne.n	8003334 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	689b      	ldr	r3, [r3, #8]
 80032ee:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d126      	bne.n	8003344 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	689a      	ldr	r2, [r3, #8]
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8003304:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	2b10      	cmp	r3, #16
 800330c:	d11a      	bne.n	8003344 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800330e:	4b13      	ldr	r3, [pc, #76]	; (800335c <HAL_ADC_ConfigChannel+0x1e8>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4a13      	ldr	r2, [pc, #76]	; (8003360 <HAL_ADC_ConfigChannel+0x1ec>)
 8003314:	fba2 2303 	umull	r2, r3, r2, r3
 8003318:	0c9a      	lsrs	r2, r3, #18
 800331a:	4613      	mov	r3, r2
 800331c:	009b      	lsls	r3, r3, #2
 800331e:	4413      	add	r3, r2
 8003320:	005b      	lsls	r3, r3, #1
 8003322:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003324:	e002      	b.n	800332c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8003326:	68bb      	ldr	r3, [r7, #8]
 8003328:	3b01      	subs	r3, #1
 800332a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800332c:	68bb      	ldr	r3, [r7, #8]
 800332e:	2b00      	cmp	r3, #0
 8003330:	d1f9      	bne.n	8003326 <HAL_ADC_ConfigChannel+0x1b2>
 8003332:	e007      	b.n	8003344 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003338:	f043 0220 	orr.w	r2, r3, #32
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8003340:	2301      	movs	r3, #1
 8003342:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2200      	movs	r2, #0
 8003348:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800334c:	7bfb      	ldrb	r3, [r7, #15]
}
 800334e:	4618      	mov	r0, r3
 8003350:	3714      	adds	r7, #20
 8003352:	46bd      	mov	sp, r7
 8003354:	bc80      	pop	{r7}
 8003356:	4770      	bx	lr
 8003358:	40012400 	.word	0x40012400
 800335c:	20000000 	.word	0x20000000
 8003360:	431bde83 	.word	0x431bde83

08003364 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b084      	sub	sp, #16
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800336c:	2300      	movs	r3, #0
 800336e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8003370:	2300      	movs	r3, #0
 8003372:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	689b      	ldr	r3, [r3, #8]
 800337a:	f003 0301 	and.w	r3, r3, #1
 800337e:	2b01      	cmp	r3, #1
 8003380:	d040      	beq.n	8003404 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	689a      	ldr	r2, [r3, #8]
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f042 0201 	orr.w	r2, r2, #1
 8003390:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003392:	4b1f      	ldr	r3, [pc, #124]	; (8003410 <ADC_Enable+0xac>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4a1f      	ldr	r2, [pc, #124]	; (8003414 <ADC_Enable+0xb0>)
 8003398:	fba2 2303 	umull	r2, r3, r2, r3
 800339c:	0c9b      	lsrs	r3, r3, #18
 800339e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80033a0:	e002      	b.n	80033a8 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80033a2:	68bb      	ldr	r3, [r7, #8]
 80033a4:	3b01      	subs	r3, #1
 80033a6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80033a8:	68bb      	ldr	r3, [r7, #8]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d1f9      	bne.n	80033a2 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80033ae:	f7ff fc09 	bl	8002bc4 <HAL_GetTick>
 80033b2:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80033b4:	e01f      	b.n	80033f6 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80033b6:	f7ff fc05 	bl	8002bc4 <HAL_GetTick>
 80033ba:	4602      	mov	r2, r0
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	1ad3      	subs	r3, r2, r3
 80033c0:	2b02      	cmp	r3, #2
 80033c2:	d918      	bls.n	80033f6 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	689b      	ldr	r3, [r3, #8]
 80033ca:	f003 0301 	and.w	r3, r3, #1
 80033ce:	2b01      	cmp	r3, #1
 80033d0:	d011      	beq.n	80033f6 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033d6:	f043 0210 	orr.w	r2, r3, #16
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033e2:	f043 0201 	orr.w	r2, r3, #1
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	2200      	movs	r2, #0
 80033ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80033f2:	2301      	movs	r3, #1
 80033f4:	e007      	b.n	8003406 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	689b      	ldr	r3, [r3, #8]
 80033fc:	f003 0301 	and.w	r3, r3, #1
 8003400:	2b01      	cmp	r3, #1
 8003402:	d1d8      	bne.n	80033b6 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8003404:	2300      	movs	r3, #0
}
 8003406:	4618      	mov	r0, r3
 8003408:	3710      	adds	r7, #16
 800340a:	46bd      	mov	sp, r7
 800340c:	bd80      	pop	{r7, pc}
 800340e:	bf00      	nop
 8003410:	20000000 	.word	0x20000000
 8003414:	431bde83 	.word	0x431bde83

08003418 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b084      	sub	sp, #16
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003420:	2300      	movs	r3, #0
 8003422:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	689b      	ldr	r3, [r3, #8]
 800342a:	f003 0301 	and.w	r3, r3, #1
 800342e:	2b01      	cmp	r3, #1
 8003430:	d12e      	bne.n	8003490 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	689a      	ldr	r2, [r3, #8]
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f022 0201 	bic.w	r2, r2, #1
 8003440:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003442:	f7ff fbbf 	bl	8002bc4 <HAL_GetTick>
 8003446:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003448:	e01b      	b.n	8003482 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800344a:	f7ff fbbb 	bl	8002bc4 <HAL_GetTick>
 800344e:	4602      	mov	r2, r0
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	1ad3      	subs	r3, r2, r3
 8003454:	2b02      	cmp	r3, #2
 8003456:	d914      	bls.n	8003482 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	689b      	ldr	r3, [r3, #8]
 800345e:	f003 0301 	and.w	r3, r3, #1
 8003462:	2b01      	cmp	r3, #1
 8003464:	d10d      	bne.n	8003482 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800346a:	f043 0210 	orr.w	r2, r3, #16
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003476:	f043 0201 	orr.w	r2, r3, #1
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 800347e:	2301      	movs	r3, #1
 8003480:	e007      	b.n	8003492 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	689b      	ldr	r3, [r3, #8]
 8003488:	f003 0301 	and.w	r3, r3, #1
 800348c:	2b01      	cmp	r3, #1
 800348e:	d0dc      	beq.n	800344a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003490:	2300      	movs	r3, #0
}
 8003492:	4618      	mov	r0, r3
 8003494:	3710      	adds	r7, #16
 8003496:	46bd      	mov	sp, r7
 8003498:	bd80      	pop	{r7, pc}
	...

0800349c <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 800349c:	b590      	push	{r4, r7, lr}
 800349e:	b087      	sub	sp, #28
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80034a4:	2300      	movs	r3, #0
 80034a6:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 80034a8:	2300      	movs	r3, #0
 80034aa:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80034b2:	2b01      	cmp	r3, #1
 80034b4:	d101      	bne.n	80034ba <HAL_ADCEx_Calibration_Start+0x1e>
 80034b6:	2302      	movs	r3, #2
 80034b8:	e095      	b.n	80035e6 <HAL_ADCEx_Calibration_Start+0x14a>
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2201      	movs	r2, #1
 80034be:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  /* 1. Calibration prerequisite:                                             */
  /*    - ADC must be disabled for at least two ADC clock cycles in disable   */
  /*      mode before ADC enable                                              */
  /* Stop potential conversion on going, on regular and injected groups       */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80034c2:	6878      	ldr	r0, [r7, #4]
 80034c4:	f7ff ffa8 	bl	8003418 <ADC_ConversionStop_Disable>
 80034c8:	4603      	mov	r3, r0
 80034ca:	75fb      	strb	r3, [r7, #23]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80034cc:	7dfb      	ldrb	r3, [r7, #23]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	f040 8084 	bne.w	80035dc <HAL_ADCEx_Calibration_Start+0x140>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034d8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80034dc:	f023 0302 	bic.w	r3, r3, #2
 80034e0:	f043 0202 	orr.w	r2, r3, #2
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80034e8:	4b41      	ldr	r3, [pc, #260]	; (80035f0 <HAL_ADCEx_Calibration_Start+0x154>)
 80034ea:	681c      	ldr	r4, [r3, #0]
 80034ec:	2002      	movs	r0, #2
 80034ee:	f001 f83d 	bl	800456c <HAL_RCCEx_GetPeriphCLKFreq>
 80034f2:	4603      	mov	r3, r0
 80034f4:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 80034f8:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 80034fa:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 80034fc:	e002      	b.n	8003504 <HAL_ADCEx_Calibration_Start+0x68>
    {
      wait_loop_index--;
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	3b01      	subs	r3, #1
 8003502:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d1f9      	bne.n	80034fe <HAL_ADCEx_Calibration_Start+0x62>
    }
    
    /* 2. Enable the ADC peripheral */
    ADC_Enable(hadc);
 800350a:	6878      	ldr	r0, [r7, #4]
 800350c:	f7ff ff2a 	bl	8003364 <ADC_Enable>
    
    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	689a      	ldr	r2, [r3, #8]
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f042 0208 	orr.w	r2, r2, #8
 800351e:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8003520:	f7ff fb50 	bl	8002bc4 <HAL_GetTick>
 8003524:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8003526:	e01b      	b.n	8003560 <HAL_ADCEx_Calibration_Start+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8003528:	f7ff fb4c 	bl	8002bc4 <HAL_GetTick>
 800352c:	4602      	mov	r2, r0
 800352e:	693b      	ldr	r3, [r7, #16]
 8003530:	1ad3      	subs	r3, r2, r3
 8003532:	2b0a      	cmp	r3, #10
 8003534:	d914      	bls.n	8003560 <HAL_ADCEx_Calibration_Start+0xc4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	689b      	ldr	r3, [r3, #8]
 800353c:	f003 0308 	and.w	r3, r3, #8
 8003540:	2b00      	cmp	r3, #0
 8003542:	d00d      	beq.n	8003560 <HAL_ADCEx_Calibration_Start+0xc4>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003548:	f023 0312 	bic.w	r3, r3, #18
 800354c:	f043 0210 	orr.w	r2, r3, #16
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2200      	movs	r2, #0
 8003558:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 800355c:	2301      	movs	r3, #1
 800355e:	e042      	b.n	80035e6 <HAL_ADCEx_Calibration_Start+0x14a>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	689b      	ldr	r3, [r3, #8]
 8003566:	f003 0308 	and.w	r3, r3, #8
 800356a:	2b00      	cmp	r3, #0
 800356c:	d1dc      	bne.n	8003528 <HAL_ADCEx_Calibration_Start+0x8c>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	689a      	ldr	r2, [r3, #8]
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f042 0204 	orr.w	r2, r2, #4
 800357c:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 800357e:	f7ff fb21 	bl	8002bc4 <HAL_GetTick>
 8003582:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8003584:	e01b      	b.n	80035be <HAL_ADCEx_Calibration_Start+0x122>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8003586:	f7ff fb1d 	bl	8002bc4 <HAL_GetTick>
 800358a:	4602      	mov	r2, r0
 800358c:	693b      	ldr	r3, [r7, #16]
 800358e:	1ad3      	subs	r3, r2, r3
 8003590:	2b0a      	cmp	r3, #10
 8003592:	d914      	bls.n	80035be <HAL_ADCEx_Calibration_Start+0x122>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	689b      	ldr	r3, [r3, #8]
 800359a:	f003 0304 	and.w	r3, r3, #4
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d00d      	beq.n	80035be <HAL_ADCEx_Calibration_Start+0x122>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035a6:	f023 0312 	bic.w	r3, r3, #18
 80035aa:	f043 0210 	orr.w	r2, r3, #16
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2200      	movs	r2, #0
 80035b6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80035ba:	2301      	movs	r3, #1
 80035bc:	e013      	b.n	80035e6 <HAL_ADCEx_Calibration_Start+0x14a>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	689b      	ldr	r3, [r3, #8]
 80035c4:	f003 0304 	and.w	r3, r3, #4
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d1dc      	bne.n	8003586 <HAL_ADCEx_Calibration_Start+0xea>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035d0:	f023 0303 	bic.w	r3, r3, #3
 80035d4:	f043 0201 	orr.w	r2, r3, #1
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2200      	movs	r2, #0
 80035e0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80035e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80035e6:	4618      	mov	r0, r3
 80035e8:	371c      	adds	r7, #28
 80035ea:	46bd      	mov	sp, r7
 80035ec:	bd90      	pop	{r4, r7, pc}
 80035ee:	bf00      	nop
 80035f0:	20000000 	.word	0x20000000

080035f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80035f4:	b480      	push	{r7}
 80035f6:	b085      	sub	sp, #20
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	f003 0307 	and.w	r3, r3, #7
 8003602:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003604:	4b0c      	ldr	r3, [pc, #48]	; (8003638 <__NVIC_SetPriorityGrouping+0x44>)
 8003606:	68db      	ldr	r3, [r3, #12]
 8003608:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800360a:	68ba      	ldr	r2, [r7, #8]
 800360c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003610:	4013      	ands	r3, r2
 8003612:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003618:	68bb      	ldr	r3, [r7, #8]
 800361a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800361c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003620:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003624:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003626:	4a04      	ldr	r2, [pc, #16]	; (8003638 <__NVIC_SetPriorityGrouping+0x44>)
 8003628:	68bb      	ldr	r3, [r7, #8]
 800362a:	60d3      	str	r3, [r2, #12]
}
 800362c:	bf00      	nop
 800362e:	3714      	adds	r7, #20
 8003630:	46bd      	mov	sp, r7
 8003632:	bc80      	pop	{r7}
 8003634:	4770      	bx	lr
 8003636:	bf00      	nop
 8003638:	e000ed00 	.word	0xe000ed00

0800363c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800363c:	b480      	push	{r7}
 800363e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003640:	4b04      	ldr	r3, [pc, #16]	; (8003654 <__NVIC_GetPriorityGrouping+0x18>)
 8003642:	68db      	ldr	r3, [r3, #12]
 8003644:	0a1b      	lsrs	r3, r3, #8
 8003646:	f003 0307 	and.w	r3, r3, #7
}
 800364a:	4618      	mov	r0, r3
 800364c:	46bd      	mov	sp, r7
 800364e:	bc80      	pop	{r7}
 8003650:	4770      	bx	lr
 8003652:	bf00      	nop
 8003654:	e000ed00 	.word	0xe000ed00

08003658 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003658:	b480      	push	{r7}
 800365a:	b083      	sub	sp, #12
 800365c:	af00      	add	r7, sp, #0
 800365e:	4603      	mov	r3, r0
 8003660:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003662:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003666:	2b00      	cmp	r3, #0
 8003668:	db0b      	blt.n	8003682 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800366a:	79fb      	ldrb	r3, [r7, #7]
 800366c:	f003 021f 	and.w	r2, r3, #31
 8003670:	4906      	ldr	r1, [pc, #24]	; (800368c <__NVIC_EnableIRQ+0x34>)
 8003672:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003676:	095b      	lsrs	r3, r3, #5
 8003678:	2001      	movs	r0, #1
 800367a:	fa00 f202 	lsl.w	r2, r0, r2
 800367e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003682:	bf00      	nop
 8003684:	370c      	adds	r7, #12
 8003686:	46bd      	mov	sp, r7
 8003688:	bc80      	pop	{r7}
 800368a:	4770      	bx	lr
 800368c:	e000e100 	.word	0xe000e100

08003690 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003690:	b480      	push	{r7}
 8003692:	b083      	sub	sp, #12
 8003694:	af00      	add	r7, sp, #0
 8003696:	4603      	mov	r3, r0
 8003698:	6039      	str	r1, [r7, #0]
 800369a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800369c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	db0a      	blt.n	80036ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	b2da      	uxtb	r2, r3
 80036a8:	490c      	ldr	r1, [pc, #48]	; (80036dc <__NVIC_SetPriority+0x4c>)
 80036aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036ae:	0112      	lsls	r2, r2, #4
 80036b0:	b2d2      	uxtb	r2, r2
 80036b2:	440b      	add	r3, r1
 80036b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80036b8:	e00a      	b.n	80036d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	b2da      	uxtb	r2, r3
 80036be:	4908      	ldr	r1, [pc, #32]	; (80036e0 <__NVIC_SetPriority+0x50>)
 80036c0:	79fb      	ldrb	r3, [r7, #7]
 80036c2:	f003 030f 	and.w	r3, r3, #15
 80036c6:	3b04      	subs	r3, #4
 80036c8:	0112      	lsls	r2, r2, #4
 80036ca:	b2d2      	uxtb	r2, r2
 80036cc:	440b      	add	r3, r1
 80036ce:	761a      	strb	r2, [r3, #24]
}
 80036d0:	bf00      	nop
 80036d2:	370c      	adds	r7, #12
 80036d4:	46bd      	mov	sp, r7
 80036d6:	bc80      	pop	{r7}
 80036d8:	4770      	bx	lr
 80036da:	bf00      	nop
 80036dc:	e000e100 	.word	0xe000e100
 80036e0:	e000ed00 	.word	0xe000ed00

080036e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80036e4:	b480      	push	{r7}
 80036e6:	b089      	sub	sp, #36	; 0x24
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	60f8      	str	r0, [r7, #12]
 80036ec:	60b9      	str	r1, [r7, #8]
 80036ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	f003 0307 	and.w	r3, r3, #7
 80036f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80036f8:	69fb      	ldr	r3, [r7, #28]
 80036fa:	f1c3 0307 	rsb	r3, r3, #7
 80036fe:	2b04      	cmp	r3, #4
 8003700:	bf28      	it	cs
 8003702:	2304      	movcs	r3, #4
 8003704:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003706:	69fb      	ldr	r3, [r7, #28]
 8003708:	3304      	adds	r3, #4
 800370a:	2b06      	cmp	r3, #6
 800370c:	d902      	bls.n	8003714 <NVIC_EncodePriority+0x30>
 800370e:	69fb      	ldr	r3, [r7, #28]
 8003710:	3b03      	subs	r3, #3
 8003712:	e000      	b.n	8003716 <NVIC_EncodePriority+0x32>
 8003714:	2300      	movs	r3, #0
 8003716:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003718:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800371c:	69bb      	ldr	r3, [r7, #24]
 800371e:	fa02 f303 	lsl.w	r3, r2, r3
 8003722:	43da      	mvns	r2, r3
 8003724:	68bb      	ldr	r3, [r7, #8]
 8003726:	401a      	ands	r2, r3
 8003728:	697b      	ldr	r3, [r7, #20]
 800372a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800372c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003730:	697b      	ldr	r3, [r7, #20]
 8003732:	fa01 f303 	lsl.w	r3, r1, r3
 8003736:	43d9      	mvns	r1, r3
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800373c:	4313      	orrs	r3, r2
         );
}
 800373e:	4618      	mov	r0, r3
 8003740:	3724      	adds	r7, #36	; 0x24
 8003742:	46bd      	mov	sp, r7
 8003744:	bc80      	pop	{r7}
 8003746:	4770      	bx	lr

08003748 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b082      	sub	sp, #8
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	3b01      	subs	r3, #1
 8003754:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003758:	d301      	bcc.n	800375e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800375a:	2301      	movs	r3, #1
 800375c:	e00f      	b.n	800377e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800375e:	4a0a      	ldr	r2, [pc, #40]	; (8003788 <SysTick_Config+0x40>)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	3b01      	subs	r3, #1
 8003764:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003766:	210f      	movs	r1, #15
 8003768:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800376c:	f7ff ff90 	bl	8003690 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003770:	4b05      	ldr	r3, [pc, #20]	; (8003788 <SysTick_Config+0x40>)
 8003772:	2200      	movs	r2, #0
 8003774:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003776:	4b04      	ldr	r3, [pc, #16]	; (8003788 <SysTick_Config+0x40>)
 8003778:	2207      	movs	r2, #7
 800377a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800377c:	2300      	movs	r3, #0
}
 800377e:	4618      	mov	r0, r3
 8003780:	3708      	adds	r7, #8
 8003782:	46bd      	mov	sp, r7
 8003784:	bd80      	pop	{r7, pc}
 8003786:	bf00      	nop
 8003788:	e000e010 	.word	0xe000e010

0800378c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	b082      	sub	sp, #8
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003794:	6878      	ldr	r0, [r7, #4]
 8003796:	f7ff ff2d 	bl	80035f4 <__NVIC_SetPriorityGrouping>
}
 800379a:	bf00      	nop
 800379c:	3708      	adds	r7, #8
 800379e:	46bd      	mov	sp, r7
 80037a0:	bd80      	pop	{r7, pc}

080037a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80037a2:	b580      	push	{r7, lr}
 80037a4:	b086      	sub	sp, #24
 80037a6:	af00      	add	r7, sp, #0
 80037a8:	4603      	mov	r3, r0
 80037aa:	60b9      	str	r1, [r7, #8]
 80037ac:	607a      	str	r2, [r7, #4]
 80037ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80037b0:	2300      	movs	r3, #0
 80037b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80037b4:	f7ff ff42 	bl	800363c <__NVIC_GetPriorityGrouping>
 80037b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80037ba:	687a      	ldr	r2, [r7, #4]
 80037bc:	68b9      	ldr	r1, [r7, #8]
 80037be:	6978      	ldr	r0, [r7, #20]
 80037c0:	f7ff ff90 	bl	80036e4 <NVIC_EncodePriority>
 80037c4:	4602      	mov	r2, r0
 80037c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80037ca:	4611      	mov	r1, r2
 80037cc:	4618      	mov	r0, r3
 80037ce:	f7ff ff5f 	bl	8003690 <__NVIC_SetPriority>
}
 80037d2:	bf00      	nop
 80037d4:	3718      	adds	r7, #24
 80037d6:	46bd      	mov	sp, r7
 80037d8:	bd80      	pop	{r7, pc}

080037da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80037da:	b580      	push	{r7, lr}
 80037dc:	b082      	sub	sp, #8
 80037de:	af00      	add	r7, sp, #0
 80037e0:	4603      	mov	r3, r0
 80037e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80037e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037e8:	4618      	mov	r0, r3
 80037ea:	f7ff ff35 	bl	8003658 <__NVIC_EnableIRQ>
}
 80037ee:	bf00      	nop
 80037f0:	3708      	adds	r7, #8
 80037f2:	46bd      	mov	sp, r7
 80037f4:	bd80      	pop	{r7, pc}

080037f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80037f6:	b580      	push	{r7, lr}
 80037f8:	b082      	sub	sp, #8
 80037fa:	af00      	add	r7, sp, #0
 80037fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80037fe:	6878      	ldr	r0, [r7, #4]
 8003800:	f7ff ffa2 	bl	8003748 <SysTick_Config>
 8003804:	4603      	mov	r3, r0
}
 8003806:	4618      	mov	r0, r3
 8003808:	3708      	adds	r7, #8
 800380a:	46bd      	mov	sp, r7
 800380c:	bd80      	pop	{r7, pc}
	...

08003810 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003810:	b480      	push	{r7}
 8003812:	b08b      	sub	sp, #44	; 0x2c
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
 8003818:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800381a:	2300      	movs	r3, #0
 800381c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800381e:	2300      	movs	r3, #0
 8003820:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003822:	e179      	b.n	8003b18 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003824:	2201      	movs	r2, #1
 8003826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003828:	fa02 f303 	lsl.w	r3, r2, r3
 800382c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	69fa      	ldr	r2, [r7, #28]
 8003834:	4013      	ands	r3, r2
 8003836:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003838:	69ba      	ldr	r2, [r7, #24]
 800383a:	69fb      	ldr	r3, [r7, #28]
 800383c:	429a      	cmp	r2, r3
 800383e:	f040 8168 	bne.w	8003b12 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	685b      	ldr	r3, [r3, #4]
 8003846:	4a96      	ldr	r2, [pc, #600]	; (8003aa0 <HAL_GPIO_Init+0x290>)
 8003848:	4293      	cmp	r3, r2
 800384a:	d05e      	beq.n	800390a <HAL_GPIO_Init+0xfa>
 800384c:	4a94      	ldr	r2, [pc, #592]	; (8003aa0 <HAL_GPIO_Init+0x290>)
 800384e:	4293      	cmp	r3, r2
 8003850:	d875      	bhi.n	800393e <HAL_GPIO_Init+0x12e>
 8003852:	4a94      	ldr	r2, [pc, #592]	; (8003aa4 <HAL_GPIO_Init+0x294>)
 8003854:	4293      	cmp	r3, r2
 8003856:	d058      	beq.n	800390a <HAL_GPIO_Init+0xfa>
 8003858:	4a92      	ldr	r2, [pc, #584]	; (8003aa4 <HAL_GPIO_Init+0x294>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d86f      	bhi.n	800393e <HAL_GPIO_Init+0x12e>
 800385e:	4a92      	ldr	r2, [pc, #584]	; (8003aa8 <HAL_GPIO_Init+0x298>)
 8003860:	4293      	cmp	r3, r2
 8003862:	d052      	beq.n	800390a <HAL_GPIO_Init+0xfa>
 8003864:	4a90      	ldr	r2, [pc, #576]	; (8003aa8 <HAL_GPIO_Init+0x298>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d869      	bhi.n	800393e <HAL_GPIO_Init+0x12e>
 800386a:	4a90      	ldr	r2, [pc, #576]	; (8003aac <HAL_GPIO_Init+0x29c>)
 800386c:	4293      	cmp	r3, r2
 800386e:	d04c      	beq.n	800390a <HAL_GPIO_Init+0xfa>
 8003870:	4a8e      	ldr	r2, [pc, #568]	; (8003aac <HAL_GPIO_Init+0x29c>)
 8003872:	4293      	cmp	r3, r2
 8003874:	d863      	bhi.n	800393e <HAL_GPIO_Init+0x12e>
 8003876:	4a8e      	ldr	r2, [pc, #568]	; (8003ab0 <HAL_GPIO_Init+0x2a0>)
 8003878:	4293      	cmp	r3, r2
 800387a:	d046      	beq.n	800390a <HAL_GPIO_Init+0xfa>
 800387c:	4a8c      	ldr	r2, [pc, #560]	; (8003ab0 <HAL_GPIO_Init+0x2a0>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d85d      	bhi.n	800393e <HAL_GPIO_Init+0x12e>
 8003882:	2b12      	cmp	r3, #18
 8003884:	d82a      	bhi.n	80038dc <HAL_GPIO_Init+0xcc>
 8003886:	2b12      	cmp	r3, #18
 8003888:	d859      	bhi.n	800393e <HAL_GPIO_Init+0x12e>
 800388a:	a201      	add	r2, pc, #4	; (adr r2, 8003890 <HAL_GPIO_Init+0x80>)
 800388c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003890:	0800390b 	.word	0x0800390b
 8003894:	080038e5 	.word	0x080038e5
 8003898:	080038f7 	.word	0x080038f7
 800389c:	08003939 	.word	0x08003939
 80038a0:	0800393f 	.word	0x0800393f
 80038a4:	0800393f 	.word	0x0800393f
 80038a8:	0800393f 	.word	0x0800393f
 80038ac:	0800393f 	.word	0x0800393f
 80038b0:	0800393f 	.word	0x0800393f
 80038b4:	0800393f 	.word	0x0800393f
 80038b8:	0800393f 	.word	0x0800393f
 80038bc:	0800393f 	.word	0x0800393f
 80038c0:	0800393f 	.word	0x0800393f
 80038c4:	0800393f 	.word	0x0800393f
 80038c8:	0800393f 	.word	0x0800393f
 80038cc:	0800393f 	.word	0x0800393f
 80038d0:	0800393f 	.word	0x0800393f
 80038d4:	080038ed 	.word	0x080038ed
 80038d8:	08003901 	.word	0x08003901
 80038dc:	4a75      	ldr	r2, [pc, #468]	; (8003ab4 <HAL_GPIO_Init+0x2a4>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d013      	beq.n	800390a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80038e2:	e02c      	b.n	800393e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	68db      	ldr	r3, [r3, #12]
 80038e8:	623b      	str	r3, [r7, #32]
          break;
 80038ea:	e029      	b.n	8003940 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	68db      	ldr	r3, [r3, #12]
 80038f0:	3304      	adds	r3, #4
 80038f2:	623b      	str	r3, [r7, #32]
          break;
 80038f4:	e024      	b.n	8003940 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	68db      	ldr	r3, [r3, #12]
 80038fa:	3308      	adds	r3, #8
 80038fc:	623b      	str	r3, [r7, #32]
          break;
 80038fe:	e01f      	b.n	8003940 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	68db      	ldr	r3, [r3, #12]
 8003904:	330c      	adds	r3, #12
 8003906:	623b      	str	r3, [r7, #32]
          break;
 8003908:	e01a      	b.n	8003940 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	689b      	ldr	r3, [r3, #8]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d102      	bne.n	8003918 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003912:	2304      	movs	r3, #4
 8003914:	623b      	str	r3, [r7, #32]
          break;
 8003916:	e013      	b.n	8003940 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	689b      	ldr	r3, [r3, #8]
 800391c:	2b01      	cmp	r3, #1
 800391e:	d105      	bne.n	800392c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003920:	2308      	movs	r3, #8
 8003922:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	69fa      	ldr	r2, [r7, #28]
 8003928:	611a      	str	r2, [r3, #16]
          break;
 800392a:	e009      	b.n	8003940 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800392c:	2308      	movs	r3, #8
 800392e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	69fa      	ldr	r2, [r7, #28]
 8003934:	615a      	str	r2, [r3, #20]
          break;
 8003936:	e003      	b.n	8003940 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003938:	2300      	movs	r3, #0
 800393a:	623b      	str	r3, [r7, #32]
          break;
 800393c:	e000      	b.n	8003940 <HAL_GPIO_Init+0x130>
          break;
 800393e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003940:	69bb      	ldr	r3, [r7, #24]
 8003942:	2bff      	cmp	r3, #255	; 0xff
 8003944:	d801      	bhi.n	800394a <HAL_GPIO_Init+0x13a>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	e001      	b.n	800394e <HAL_GPIO_Init+0x13e>
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	3304      	adds	r3, #4
 800394e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003950:	69bb      	ldr	r3, [r7, #24]
 8003952:	2bff      	cmp	r3, #255	; 0xff
 8003954:	d802      	bhi.n	800395c <HAL_GPIO_Init+0x14c>
 8003956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003958:	009b      	lsls	r3, r3, #2
 800395a:	e002      	b.n	8003962 <HAL_GPIO_Init+0x152>
 800395c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800395e:	3b08      	subs	r3, #8
 8003960:	009b      	lsls	r3, r3, #2
 8003962:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003964:	697b      	ldr	r3, [r7, #20]
 8003966:	681a      	ldr	r2, [r3, #0]
 8003968:	210f      	movs	r1, #15
 800396a:	693b      	ldr	r3, [r7, #16]
 800396c:	fa01 f303 	lsl.w	r3, r1, r3
 8003970:	43db      	mvns	r3, r3
 8003972:	401a      	ands	r2, r3
 8003974:	6a39      	ldr	r1, [r7, #32]
 8003976:	693b      	ldr	r3, [r7, #16]
 8003978:	fa01 f303 	lsl.w	r3, r1, r3
 800397c:	431a      	orrs	r2, r3
 800397e:	697b      	ldr	r3, [r7, #20]
 8003980:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	685b      	ldr	r3, [r3, #4]
 8003986:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800398a:	2b00      	cmp	r3, #0
 800398c:	f000 80c1 	beq.w	8003b12 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003990:	4b49      	ldr	r3, [pc, #292]	; (8003ab8 <HAL_GPIO_Init+0x2a8>)
 8003992:	699b      	ldr	r3, [r3, #24]
 8003994:	4a48      	ldr	r2, [pc, #288]	; (8003ab8 <HAL_GPIO_Init+0x2a8>)
 8003996:	f043 0301 	orr.w	r3, r3, #1
 800399a:	6193      	str	r3, [r2, #24]
 800399c:	4b46      	ldr	r3, [pc, #280]	; (8003ab8 <HAL_GPIO_Init+0x2a8>)
 800399e:	699b      	ldr	r3, [r3, #24]
 80039a0:	f003 0301 	and.w	r3, r3, #1
 80039a4:	60bb      	str	r3, [r7, #8]
 80039a6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80039a8:	4a44      	ldr	r2, [pc, #272]	; (8003abc <HAL_GPIO_Init+0x2ac>)
 80039aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ac:	089b      	lsrs	r3, r3, #2
 80039ae:	3302      	adds	r3, #2
 80039b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039b4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80039b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039b8:	f003 0303 	and.w	r3, r3, #3
 80039bc:	009b      	lsls	r3, r3, #2
 80039be:	220f      	movs	r2, #15
 80039c0:	fa02 f303 	lsl.w	r3, r2, r3
 80039c4:	43db      	mvns	r3, r3
 80039c6:	68fa      	ldr	r2, [r7, #12]
 80039c8:	4013      	ands	r3, r2
 80039ca:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	4a3c      	ldr	r2, [pc, #240]	; (8003ac0 <HAL_GPIO_Init+0x2b0>)
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d01f      	beq.n	8003a14 <HAL_GPIO_Init+0x204>
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	4a3b      	ldr	r2, [pc, #236]	; (8003ac4 <HAL_GPIO_Init+0x2b4>)
 80039d8:	4293      	cmp	r3, r2
 80039da:	d019      	beq.n	8003a10 <HAL_GPIO_Init+0x200>
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	4a3a      	ldr	r2, [pc, #232]	; (8003ac8 <HAL_GPIO_Init+0x2b8>)
 80039e0:	4293      	cmp	r3, r2
 80039e2:	d013      	beq.n	8003a0c <HAL_GPIO_Init+0x1fc>
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	4a39      	ldr	r2, [pc, #228]	; (8003acc <HAL_GPIO_Init+0x2bc>)
 80039e8:	4293      	cmp	r3, r2
 80039ea:	d00d      	beq.n	8003a08 <HAL_GPIO_Init+0x1f8>
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	4a38      	ldr	r2, [pc, #224]	; (8003ad0 <HAL_GPIO_Init+0x2c0>)
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d007      	beq.n	8003a04 <HAL_GPIO_Init+0x1f4>
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	4a37      	ldr	r2, [pc, #220]	; (8003ad4 <HAL_GPIO_Init+0x2c4>)
 80039f8:	4293      	cmp	r3, r2
 80039fa:	d101      	bne.n	8003a00 <HAL_GPIO_Init+0x1f0>
 80039fc:	2305      	movs	r3, #5
 80039fe:	e00a      	b.n	8003a16 <HAL_GPIO_Init+0x206>
 8003a00:	2306      	movs	r3, #6
 8003a02:	e008      	b.n	8003a16 <HAL_GPIO_Init+0x206>
 8003a04:	2304      	movs	r3, #4
 8003a06:	e006      	b.n	8003a16 <HAL_GPIO_Init+0x206>
 8003a08:	2303      	movs	r3, #3
 8003a0a:	e004      	b.n	8003a16 <HAL_GPIO_Init+0x206>
 8003a0c:	2302      	movs	r3, #2
 8003a0e:	e002      	b.n	8003a16 <HAL_GPIO_Init+0x206>
 8003a10:	2301      	movs	r3, #1
 8003a12:	e000      	b.n	8003a16 <HAL_GPIO_Init+0x206>
 8003a14:	2300      	movs	r3, #0
 8003a16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a18:	f002 0203 	and.w	r2, r2, #3
 8003a1c:	0092      	lsls	r2, r2, #2
 8003a1e:	4093      	lsls	r3, r2
 8003a20:	68fa      	ldr	r2, [r7, #12]
 8003a22:	4313      	orrs	r3, r2
 8003a24:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003a26:	4925      	ldr	r1, [pc, #148]	; (8003abc <HAL_GPIO_Init+0x2ac>)
 8003a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a2a:	089b      	lsrs	r3, r3, #2
 8003a2c:	3302      	adds	r3, #2
 8003a2e:	68fa      	ldr	r2, [r7, #12]
 8003a30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	685b      	ldr	r3, [r3, #4]
 8003a38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d006      	beq.n	8003a4e <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003a40:	4b25      	ldr	r3, [pc, #148]	; (8003ad8 <HAL_GPIO_Init+0x2c8>)
 8003a42:	681a      	ldr	r2, [r3, #0]
 8003a44:	4924      	ldr	r1, [pc, #144]	; (8003ad8 <HAL_GPIO_Init+0x2c8>)
 8003a46:	69bb      	ldr	r3, [r7, #24]
 8003a48:	4313      	orrs	r3, r2
 8003a4a:	600b      	str	r3, [r1, #0]
 8003a4c:	e006      	b.n	8003a5c <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003a4e:	4b22      	ldr	r3, [pc, #136]	; (8003ad8 <HAL_GPIO_Init+0x2c8>)
 8003a50:	681a      	ldr	r2, [r3, #0]
 8003a52:	69bb      	ldr	r3, [r7, #24]
 8003a54:	43db      	mvns	r3, r3
 8003a56:	4920      	ldr	r1, [pc, #128]	; (8003ad8 <HAL_GPIO_Init+0x2c8>)
 8003a58:	4013      	ands	r3, r2
 8003a5a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	685b      	ldr	r3, [r3, #4]
 8003a60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d006      	beq.n	8003a76 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003a68:	4b1b      	ldr	r3, [pc, #108]	; (8003ad8 <HAL_GPIO_Init+0x2c8>)
 8003a6a:	685a      	ldr	r2, [r3, #4]
 8003a6c:	491a      	ldr	r1, [pc, #104]	; (8003ad8 <HAL_GPIO_Init+0x2c8>)
 8003a6e:	69bb      	ldr	r3, [r7, #24]
 8003a70:	4313      	orrs	r3, r2
 8003a72:	604b      	str	r3, [r1, #4]
 8003a74:	e006      	b.n	8003a84 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003a76:	4b18      	ldr	r3, [pc, #96]	; (8003ad8 <HAL_GPIO_Init+0x2c8>)
 8003a78:	685a      	ldr	r2, [r3, #4]
 8003a7a:	69bb      	ldr	r3, [r7, #24]
 8003a7c:	43db      	mvns	r3, r3
 8003a7e:	4916      	ldr	r1, [pc, #88]	; (8003ad8 <HAL_GPIO_Init+0x2c8>)
 8003a80:	4013      	ands	r3, r2
 8003a82:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	685b      	ldr	r3, [r3, #4]
 8003a88:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d025      	beq.n	8003adc <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003a90:	4b11      	ldr	r3, [pc, #68]	; (8003ad8 <HAL_GPIO_Init+0x2c8>)
 8003a92:	689a      	ldr	r2, [r3, #8]
 8003a94:	4910      	ldr	r1, [pc, #64]	; (8003ad8 <HAL_GPIO_Init+0x2c8>)
 8003a96:	69bb      	ldr	r3, [r7, #24]
 8003a98:	4313      	orrs	r3, r2
 8003a9a:	608b      	str	r3, [r1, #8]
 8003a9c:	e025      	b.n	8003aea <HAL_GPIO_Init+0x2da>
 8003a9e:	bf00      	nop
 8003aa0:	10320000 	.word	0x10320000
 8003aa4:	10310000 	.word	0x10310000
 8003aa8:	10220000 	.word	0x10220000
 8003aac:	10210000 	.word	0x10210000
 8003ab0:	10120000 	.word	0x10120000
 8003ab4:	10110000 	.word	0x10110000
 8003ab8:	40021000 	.word	0x40021000
 8003abc:	40010000 	.word	0x40010000
 8003ac0:	40010800 	.word	0x40010800
 8003ac4:	40010c00 	.word	0x40010c00
 8003ac8:	40011000 	.word	0x40011000
 8003acc:	40011400 	.word	0x40011400
 8003ad0:	40011800 	.word	0x40011800
 8003ad4:	40011c00 	.word	0x40011c00
 8003ad8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003adc:	4b15      	ldr	r3, [pc, #84]	; (8003b34 <HAL_GPIO_Init+0x324>)
 8003ade:	689a      	ldr	r2, [r3, #8]
 8003ae0:	69bb      	ldr	r3, [r7, #24]
 8003ae2:	43db      	mvns	r3, r3
 8003ae4:	4913      	ldr	r1, [pc, #76]	; (8003b34 <HAL_GPIO_Init+0x324>)
 8003ae6:	4013      	ands	r3, r2
 8003ae8:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	685b      	ldr	r3, [r3, #4]
 8003aee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d006      	beq.n	8003b04 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003af6:	4b0f      	ldr	r3, [pc, #60]	; (8003b34 <HAL_GPIO_Init+0x324>)
 8003af8:	68da      	ldr	r2, [r3, #12]
 8003afa:	490e      	ldr	r1, [pc, #56]	; (8003b34 <HAL_GPIO_Init+0x324>)
 8003afc:	69bb      	ldr	r3, [r7, #24]
 8003afe:	4313      	orrs	r3, r2
 8003b00:	60cb      	str	r3, [r1, #12]
 8003b02:	e006      	b.n	8003b12 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003b04:	4b0b      	ldr	r3, [pc, #44]	; (8003b34 <HAL_GPIO_Init+0x324>)
 8003b06:	68da      	ldr	r2, [r3, #12]
 8003b08:	69bb      	ldr	r3, [r7, #24]
 8003b0a:	43db      	mvns	r3, r3
 8003b0c:	4909      	ldr	r1, [pc, #36]	; (8003b34 <HAL_GPIO_Init+0x324>)
 8003b0e:	4013      	ands	r3, r2
 8003b10:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8003b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b14:	3301      	adds	r3, #1
 8003b16:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	681a      	ldr	r2, [r3, #0]
 8003b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b1e:	fa22 f303 	lsr.w	r3, r2, r3
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	f47f ae7e 	bne.w	8003824 <HAL_GPIO_Init+0x14>
  }
}
 8003b28:	bf00      	nop
 8003b2a:	bf00      	nop
 8003b2c:	372c      	adds	r7, #44	; 0x2c
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	bc80      	pop	{r7}
 8003b32:	4770      	bx	lr
 8003b34:	40010400 	.word	0x40010400

08003b38 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003b38:	b480      	push	{r7}
 8003b3a:	b085      	sub	sp, #20
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
 8003b40:	460b      	mov	r3, r1
 8003b42:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	689a      	ldr	r2, [r3, #8]
 8003b48:	887b      	ldrh	r3, [r7, #2]
 8003b4a:	4013      	ands	r3, r2
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d002      	beq.n	8003b56 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003b50:	2301      	movs	r3, #1
 8003b52:	73fb      	strb	r3, [r7, #15]
 8003b54:	e001      	b.n	8003b5a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003b56:	2300      	movs	r3, #0
 8003b58:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003b5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	3714      	adds	r7, #20
 8003b60:	46bd      	mov	sp, r7
 8003b62:	bc80      	pop	{r7}
 8003b64:	4770      	bx	lr

08003b66 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003b66:	b480      	push	{r7}
 8003b68:	b083      	sub	sp, #12
 8003b6a:	af00      	add	r7, sp, #0
 8003b6c:	6078      	str	r0, [r7, #4]
 8003b6e:	460b      	mov	r3, r1
 8003b70:	807b      	strh	r3, [r7, #2]
 8003b72:	4613      	mov	r3, r2
 8003b74:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003b76:	787b      	ldrb	r3, [r7, #1]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d003      	beq.n	8003b84 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003b7c:	887a      	ldrh	r2, [r7, #2]
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003b82:	e003      	b.n	8003b8c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003b84:	887b      	ldrh	r3, [r7, #2]
 8003b86:	041a      	lsls	r2, r3, #16
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	611a      	str	r2, [r3, #16]
}
 8003b8c:	bf00      	nop
 8003b8e:	370c      	adds	r7, #12
 8003b90:	46bd      	mov	sp, r7
 8003b92:	bc80      	pop	{r7}
 8003b94:	4770      	bx	lr
	...

08003b98 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b082      	sub	sp, #8
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	4603      	mov	r3, r0
 8003ba0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003ba2:	4b08      	ldr	r3, [pc, #32]	; (8003bc4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003ba4:	695a      	ldr	r2, [r3, #20]
 8003ba6:	88fb      	ldrh	r3, [r7, #6]
 8003ba8:	4013      	ands	r3, r2
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d006      	beq.n	8003bbc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003bae:	4a05      	ldr	r2, [pc, #20]	; (8003bc4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003bb0:	88fb      	ldrh	r3, [r7, #6]
 8003bb2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003bb4:	88fb      	ldrh	r3, [r7, #6]
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	f000 f806 	bl	8003bc8 <HAL_GPIO_EXTI_Callback>
  }
}
 8003bbc:	bf00      	nop
 8003bbe:	3708      	adds	r7, #8
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	bd80      	pop	{r7, pc}
 8003bc4:	40010400 	.word	0x40010400

08003bc8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003bc8:	b480      	push	{r7}
 8003bca:	b083      	sub	sp, #12
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	4603      	mov	r3, r0
 8003bd0:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003bd2:	bf00      	nop
 8003bd4:	370c      	adds	r7, #12
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	bc80      	pop	{r7}
 8003bda:	4770      	bx	lr

08003bdc <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003bdc:	b480      	push	{r7}
 8003bde:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8003be0:	4b03      	ldr	r3, [pc, #12]	; (8003bf0 <HAL_PWR_EnableBkUpAccess+0x14>)
 8003be2:	2201      	movs	r2, #1
 8003be4:	601a      	str	r2, [r3, #0]
}
 8003be6:	bf00      	nop
 8003be8:	46bd      	mov	sp, r7
 8003bea:	bc80      	pop	{r7}
 8003bec:	4770      	bx	lr
 8003bee:	bf00      	nop
 8003bf0:	420e0020 	.word	0x420e0020

08003bf4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b086      	sub	sp, #24
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d101      	bne.n	8003c06 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003c02:	2301      	movs	r3, #1
 8003c04:	e272      	b.n	80040ec <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f003 0301 	and.w	r3, r3, #1
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	f000 8087 	beq.w	8003d22 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003c14:	4b92      	ldr	r3, [pc, #584]	; (8003e60 <HAL_RCC_OscConfig+0x26c>)
 8003c16:	685b      	ldr	r3, [r3, #4]
 8003c18:	f003 030c 	and.w	r3, r3, #12
 8003c1c:	2b04      	cmp	r3, #4
 8003c1e:	d00c      	beq.n	8003c3a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003c20:	4b8f      	ldr	r3, [pc, #572]	; (8003e60 <HAL_RCC_OscConfig+0x26c>)
 8003c22:	685b      	ldr	r3, [r3, #4]
 8003c24:	f003 030c 	and.w	r3, r3, #12
 8003c28:	2b08      	cmp	r3, #8
 8003c2a:	d112      	bne.n	8003c52 <HAL_RCC_OscConfig+0x5e>
 8003c2c:	4b8c      	ldr	r3, [pc, #560]	; (8003e60 <HAL_RCC_OscConfig+0x26c>)
 8003c2e:	685b      	ldr	r3, [r3, #4]
 8003c30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c38:	d10b      	bne.n	8003c52 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c3a:	4b89      	ldr	r3, [pc, #548]	; (8003e60 <HAL_RCC_OscConfig+0x26c>)
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d06c      	beq.n	8003d20 <HAL_RCC_OscConfig+0x12c>
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	685b      	ldr	r3, [r3, #4]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d168      	bne.n	8003d20 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003c4e:	2301      	movs	r3, #1
 8003c50:	e24c      	b.n	80040ec <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	685b      	ldr	r3, [r3, #4]
 8003c56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c5a:	d106      	bne.n	8003c6a <HAL_RCC_OscConfig+0x76>
 8003c5c:	4b80      	ldr	r3, [pc, #512]	; (8003e60 <HAL_RCC_OscConfig+0x26c>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4a7f      	ldr	r2, [pc, #508]	; (8003e60 <HAL_RCC_OscConfig+0x26c>)
 8003c62:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c66:	6013      	str	r3, [r2, #0]
 8003c68:	e02e      	b.n	8003cc8 <HAL_RCC_OscConfig+0xd4>
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	685b      	ldr	r3, [r3, #4]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d10c      	bne.n	8003c8c <HAL_RCC_OscConfig+0x98>
 8003c72:	4b7b      	ldr	r3, [pc, #492]	; (8003e60 <HAL_RCC_OscConfig+0x26c>)
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	4a7a      	ldr	r2, [pc, #488]	; (8003e60 <HAL_RCC_OscConfig+0x26c>)
 8003c78:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c7c:	6013      	str	r3, [r2, #0]
 8003c7e:	4b78      	ldr	r3, [pc, #480]	; (8003e60 <HAL_RCC_OscConfig+0x26c>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	4a77      	ldr	r2, [pc, #476]	; (8003e60 <HAL_RCC_OscConfig+0x26c>)
 8003c84:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c88:	6013      	str	r3, [r2, #0]
 8003c8a:	e01d      	b.n	8003cc8 <HAL_RCC_OscConfig+0xd4>
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	685b      	ldr	r3, [r3, #4]
 8003c90:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003c94:	d10c      	bne.n	8003cb0 <HAL_RCC_OscConfig+0xbc>
 8003c96:	4b72      	ldr	r3, [pc, #456]	; (8003e60 <HAL_RCC_OscConfig+0x26c>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	4a71      	ldr	r2, [pc, #452]	; (8003e60 <HAL_RCC_OscConfig+0x26c>)
 8003c9c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003ca0:	6013      	str	r3, [r2, #0]
 8003ca2:	4b6f      	ldr	r3, [pc, #444]	; (8003e60 <HAL_RCC_OscConfig+0x26c>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	4a6e      	ldr	r2, [pc, #440]	; (8003e60 <HAL_RCC_OscConfig+0x26c>)
 8003ca8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003cac:	6013      	str	r3, [r2, #0]
 8003cae:	e00b      	b.n	8003cc8 <HAL_RCC_OscConfig+0xd4>
 8003cb0:	4b6b      	ldr	r3, [pc, #428]	; (8003e60 <HAL_RCC_OscConfig+0x26c>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	4a6a      	ldr	r2, [pc, #424]	; (8003e60 <HAL_RCC_OscConfig+0x26c>)
 8003cb6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003cba:	6013      	str	r3, [r2, #0]
 8003cbc:	4b68      	ldr	r3, [pc, #416]	; (8003e60 <HAL_RCC_OscConfig+0x26c>)
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	4a67      	ldr	r2, [pc, #412]	; (8003e60 <HAL_RCC_OscConfig+0x26c>)
 8003cc2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003cc6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	685b      	ldr	r3, [r3, #4]
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d013      	beq.n	8003cf8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cd0:	f7fe ff78 	bl	8002bc4 <HAL_GetTick>
 8003cd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cd6:	e008      	b.n	8003cea <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003cd8:	f7fe ff74 	bl	8002bc4 <HAL_GetTick>
 8003cdc:	4602      	mov	r2, r0
 8003cde:	693b      	ldr	r3, [r7, #16]
 8003ce0:	1ad3      	subs	r3, r2, r3
 8003ce2:	2b64      	cmp	r3, #100	; 0x64
 8003ce4:	d901      	bls.n	8003cea <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003ce6:	2303      	movs	r3, #3
 8003ce8:	e200      	b.n	80040ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cea:	4b5d      	ldr	r3, [pc, #372]	; (8003e60 <HAL_RCC_OscConfig+0x26c>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d0f0      	beq.n	8003cd8 <HAL_RCC_OscConfig+0xe4>
 8003cf6:	e014      	b.n	8003d22 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cf8:	f7fe ff64 	bl	8002bc4 <HAL_GetTick>
 8003cfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003cfe:	e008      	b.n	8003d12 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d00:	f7fe ff60 	bl	8002bc4 <HAL_GetTick>
 8003d04:	4602      	mov	r2, r0
 8003d06:	693b      	ldr	r3, [r7, #16]
 8003d08:	1ad3      	subs	r3, r2, r3
 8003d0a:	2b64      	cmp	r3, #100	; 0x64
 8003d0c:	d901      	bls.n	8003d12 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003d0e:	2303      	movs	r3, #3
 8003d10:	e1ec      	b.n	80040ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d12:	4b53      	ldr	r3, [pc, #332]	; (8003e60 <HAL_RCC_OscConfig+0x26c>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d1f0      	bne.n	8003d00 <HAL_RCC_OscConfig+0x10c>
 8003d1e:	e000      	b.n	8003d22 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d20:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f003 0302 	and.w	r3, r3, #2
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d063      	beq.n	8003df6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003d2e:	4b4c      	ldr	r3, [pc, #304]	; (8003e60 <HAL_RCC_OscConfig+0x26c>)
 8003d30:	685b      	ldr	r3, [r3, #4]
 8003d32:	f003 030c 	and.w	r3, r3, #12
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d00b      	beq.n	8003d52 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003d3a:	4b49      	ldr	r3, [pc, #292]	; (8003e60 <HAL_RCC_OscConfig+0x26c>)
 8003d3c:	685b      	ldr	r3, [r3, #4]
 8003d3e:	f003 030c 	and.w	r3, r3, #12
 8003d42:	2b08      	cmp	r3, #8
 8003d44:	d11c      	bne.n	8003d80 <HAL_RCC_OscConfig+0x18c>
 8003d46:	4b46      	ldr	r3, [pc, #280]	; (8003e60 <HAL_RCC_OscConfig+0x26c>)
 8003d48:	685b      	ldr	r3, [r3, #4]
 8003d4a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d116      	bne.n	8003d80 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d52:	4b43      	ldr	r3, [pc, #268]	; (8003e60 <HAL_RCC_OscConfig+0x26c>)
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f003 0302 	and.w	r3, r3, #2
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d005      	beq.n	8003d6a <HAL_RCC_OscConfig+0x176>
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	691b      	ldr	r3, [r3, #16]
 8003d62:	2b01      	cmp	r3, #1
 8003d64:	d001      	beq.n	8003d6a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003d66:	2301      	movs	r3, #1
 8003d68:	e1c0      	b.n	80040ec <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d6a:	4b3d      	ldr	r3, [pc, #244]	; (8003e60 <HAL_RCC_OscConfig+0x26c>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	695b      	ldr	r3, [r3, #20]
 8003d76:	00db      	lsls	r3, r3, #3
 8003d78:	4939      	ldr	r1, [pc, #228]	; (8003e60 <HAL_RCC_OscConfig+0x26c>)
 8003d7a:	4313      	orrs	r3, r2
 8003d7c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d7e:	e03a      	b.n	8003df6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	691b      	ldr	r3, [r3, #16]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d020      	beq.n	8003dca <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d88:	4b36      	ldr	r3, [pc, #216]	; (8003e64 <HAL_RCC_OscConfig+0x270>)
 8003d8a:	2201      	movs	r2, #1
 8003d8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d8e:	f7fe ff19 	bl	8002bc4 <HAL_GetTick>
 8003d92:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d94:	e008      	b.n	8003da8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d96:	f7fe ff15 	bl	8002bc4 <HAL_GetTick>
 8003d9a:	4602      	mov	r2, r0
 8003d9c:	693b      	ldr	r3, [r7, #16]
 8003d9e:	1ad3      	subs	r3, r2, r3
 8003da0:	2b02      	cmp	r3, #2
 8003da2:	d901      	bls.n	8003da8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003da4:	2303      	movs	r3, #3
 8003da6:	e1a1      	b.n	80040ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003da8:	4b2d      	ldr	r3, [pc, #180]	; (8003e60 <HAL_RCC_OscConfig+0x26c>)
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f003 0302 	and.w	r3, r3, #2
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d0f0      	beq.n	8003d96 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003db4:	4b2a      	ldr	r3, [pc, #168]	; (8003e60 <HAL_RCC_OscConfig+0x26c>)
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	695b      	ldr	r3, [r3, #20]
 8003dc0:	00db      	lsls	r3, r3, #3
 8003dc2:	4927      	ldr	r1, [pc, #156]	; (8003e60 <HAL_RCC_OscConfig+0x26c>)
 8003dc4:	4313      	orrs	r3, r2
 8003dc6:	600b      	str	r3, [r1, #0]
 8003dc8:	e015      	b.n	8003df6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003dca:	4b26      	ldr	r3, [pc, #152]	; (8003e64 <HAL_RCC_OscConfig+0x270>)
 8003dcc:	2200      	movs	r2, #0
 8003dce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dd0:	f7fe fef8 	bl	8002bc4 <HAL_GetTick>
 8003dd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003dd6:	e008      	b.n	8003dea <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003dd8:	f7fe fef4 	bl	8002bc4 <HAL_GetTick>
 8003ddc:	4602      	mov	r2, r0
 8003dde:	693b      	ldr	r3, [r7, #16]
 8003de0:	1ad3      	subs	r3, r2, r3
 8003de2:	2b02      	cmp	r3, #2
 8003de4:	d901      	bls.n	8003dea <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003de6:	2303      	movs	r3, #3
 8003de8:	e180      	b.n	80040ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003dea:	4b1d      	ldr	r3, [pc, #116]	; (8003e60 <HAL_RCC_OscConfig+0x26c>)
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f003 0302 	and.w	r3, r3, #2
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d1f0      	bne.n	8003dd8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f003 0308 	and.w	r3, r3, #8
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d03a      	beq.n	8003e78 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	699b      	ldr	r3, [r3, #24]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d019      	beq.n	8003e3e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e0a:	4b17      	ldr	r3, [pc, #92]	; (8003e68 <HAL_RCC_OscConfig+0x274>)
 8003e0c:	2201      	movs	r2, #1
 8003e0e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e10:	f7fe fed8 	bl	8002bc4 <HAL_GetTick>
 8003e14:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e16:	e008      	b.n	8003e2a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e18:	f7fe fed4 	bl	8002bc4 <HAL_GetTick>
 8003e1c:	4602      	mov	r2, r0
 8003e1e:	693b      	ldr	r3, [r7, #16]
 8003e20:	1ad3      	subs	r3, r2, r3
 8003e22:	2b02      	cmp	r3, #2
 8003e24:	d901      	bls.n	8003e2a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003e26:	2303      	movs	r3, #3
 8003e28:	e160      	b.n	80040ec <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e2a:	4b0d      	ldr	r3, [pc, #52]	; (8003e60 <HAL_RCC_OscConfig+0x26c>)
 8003e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e2e:	f003 0302 	and.w	r3, r3, #2
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d0f0      	beq.n	8003e18 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003e36:	2001      	movs	r0, #1
 8003e38:	f000 fac4 	bl	80043c4 <RCC_Delay>
 8003e3c:	e01c      	b.n	8003e78 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e3e:	4b0a      	ldr	r3, [pc, #40]	; (8003e68 <HAL_RCC_OscConfig+0x274>)
 8003e40:	2200      	movs	r2, #0
 8003e42:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e44:	f7fe febe 	bl	8002bc4 <HAL_GetTick>
 8003e48:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e4a:	e00f      	b.n	8003e6c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e4c:	f7fe feba 	bl	8002bc4 <HAL_GetTick>
 8003e50:	4602      	mov	r2, r0
 8003e52:	693b      	ldr	r3, [r7, #16]
 8003e54:	1ad3      	subs	r3, r2, r3
 8003e56:	2b02      	cmp	r3, #2
 8003e58:	d908      	bls.n	8003e6c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003e5a:	2303      	movs	r3, #3
 8003e5c:	e146      	b.n	80040ec <HAL_RCC_OscConfig+0x4f8>
 8003e5e:	bf00      	nop
 8003e60:	40021000 	.word	0x40021000
 8003e64:	42420000 	.word	0x42420000
 8003e68:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e6c:	4b92      	ldr	r3, [pc, #584]	; (80040b8 <HAL_RCC_OscConfig+0x4c4>)
 8003e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e70:	f003 0302 	and.w	r3, r3, #2
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d1e9      	bne.n	8003e4c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f003 0304 	and.w	r3, r3, #4
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	f000 80a6 	beq.w	8003fd2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e86:	2300      	movs	r3, #0
 8003e88:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e8a:	4b8b      	ldr	r3, [pc, #556]	; (80040b8 <HAL_RCC_OscConfig+0x4c4>)
 8003e8c:	69db      	ldr	r3, [r3, #28]
 8003e8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d10d      	bne.n	8003eb2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e96:	4b88      	ldr	r3, [pc, #544]	; (80040b8 <HAL_RCC_OscConfig+0x4c4>)
 8003e98:	69db      	ldr	r3, [r3, #28]
 8003e9a:	4a87      	ldr	r2, [pc, #540]	; (80040b8 <HAL_RCC_OscConfig+0x4c4>)
 8003e9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ea0:	61d3      	str	r3, [r2, #28]
 8003ea2:	4b85      	ldr	r3, [pc, #532]	; (80040b8 <HAL_RCC_OscConfig+0x4c4>)
 8003ea4:	69db      	ldr	r3, [r3, #28]
 8003ea6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003eaa:	60bb      	str	r3, [r7, #8]
 8003eac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003eae:	2301      	movs	r3, #1
 8003eb0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003eb2:	4b82      	ldr	r3, [pc, #520]	; (80040bc <HAL_RCC_OscConfig+0x4c8>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d118      	bne.n	8003ef0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003ebe:	4b7f      	ldr	r3, [pc, #508]	; (80040bc <HAL_RCC_OscConfig+0x4c8>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	4a7e      	ldr	r2, [pc, #504]	; (80040bc <HAL_RCC_OscConfig+0x4c8>)
 8003ec4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ec8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003eca:	f7fe fe7b 	bl	8002bc4 <HAL_GetTick>
 8003ece:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ed0:	e008      	b.n	8003ee4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ed2:	f7fe fe77 	bl	8002bc4 <HAL_GetTick>
 8003ed6:	4602      	mov	r2, r0
 8003ed8:	693b      	ldr	r3, [r7, #16]
 8003eda:	1ad3      	subs	r3, r2, r3
 8003edc:	2b64      	cmp	r3, #100	; 0x64
 8003ede:	d901      	bls.n	8003ee4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003ee0:	2303      	movs	r3, #3
 8003ee2:	e103      	b.n	80040ec <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ee4:	4b75      	ldr	r3, [pc, #468]	; (80040bc <HAL_RCC_OscConfig+0x4c8>)
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d0f0      	beq.n	8003ed2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	68db      	ldr	r3, [r3, #12]
 8003ef4:	2b01      	cmp	r3, #1
 8003ef6:	d106      	bne.n	8003f06 <HAL_RCC_OscConfig+0x312>
 8003ef8:	4b6f      	ldr	r3, [pc, #444]	; (80040b8 <HAL_RCC_OscConfig+0x4c4>)
 8003efa:	6a1b      	ldr	r3, [r3, #32]
 8003efc:	4a6e      	ldr	r2, [pc, #440]	; (80040b8 <HAL_RCC_OscConfig+0x4c4>)
 8003efe:	f043 0301 	orr.w	r3, r3, #1
 8003f02:	6213      	str	r3, [r2, #32]
 8003f04:	e02d      	b.n	8003f62 <HAL_RCC_OscConfig+0x36e>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	68db      	ldr	r3, [r3, #12]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d10c      	bne.n	8003f28 <HAL_RCC_OscConfig+0x334>
 8003f0e:	4b6a      	ldr	r3, [pc, #424]	; (80040b8 <HAL_RCC_OscConfig+0x4c4>)
 8003f10:	6a1b      	ldr	r3, [r3, #32]
 8003f12:	4a69      	ldr	r2, [pc, #420]	; (80040b8 <HAL_RCC_OscConfig+0x4c4>)
 8003f14:	f023 0301 	bic.w	r3, r3, #1
 8003f18:	6213      	str	r3, [r2, #32]
 8003f1a:	4b67      	ldr	r3, [pc, #412]	; (80040b8 <HAL_RCC_OscConfig+0x4c4>)
 8003f1c:	6a1b      	ldr	r3, [r3, #32]
 8003f1e:	4a66      	ldr	r2, [pc, #408]	; (80040b8 <HAL_RCC_OscConfig+0x4c4>)
 8003f20:	f023 0304 	bic.w	r3, r3, #4
 8003f24:	6213      	str	r3, [r2, #32]
 8003f26:	e01c      	b.n	8003f62 <HAL_RCC_OscConfig+0x36e>
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	68db      	ldr	r3, [r3, #12]
 8003f2c:	2b05      	cmp	r3, #5
 8003f2e:	d10c      	bne.n	8003f4a <HAL_RCC_OscConfig+0x356>
 8003f30:	4b61      	ldr	r3, [pc, #388]	; (80040b8 <HAL_RCC_OscConfig+0x4c4>)
 8003f32:	6a1b      	ldr	r3, [r3, #32]
 8003f34:	4a60      	ldr	r2, [pc, #384]	; (80040b8 <HAL_RCC_OscConfig+0x4c4>)
 8003f36:	f043 0304 	orr.w	r3, r3, #4
 8003f3a:	6213      	str	r3, [r2, #32]
 8003f3c:	4b5e      	ldr	r3, [pc, #376]	; (80040b8 <HAL_RCC_OscConfig+0x4c4>)
 8003f3e:	6a1b      	ldr	r3, [r3, #32]
 8003f40:	4a5d      	ldr	r2, [pc, #372]	; (80040b8 <HAL_RCC_OscConfig+0x4c4>)
 8003f42:	f043 0301 	orr.w	r3, r3, #1
 8003f46:	6213      	str	r3, [r2, #32]
 8003f48:	e00b      	b.n	8003f62 <HAL_RCC_OscConfig+0x36e>
 8003f4a:	4b5b      	ldr	r3, [pc, #364]	; (80040b8 <HAL_RCC_OscConfig+0x4c4>)
 8003f4c:	6a1b      	ldr	r3, [r3, #32]
 8003f4e:	4a5a      	ldr	r2, [pc, #360]	; (80040b8 <HAL_RCC_OscConfig+0x4c4>)
 8003f50:	f023 0301 	bic.w	r3, r3, #1
 8003f54:	6213      	str	r3, [r2, #32]
 8003f56:	4b58      	ldr	r3, [pc, #352]	; (80040b8 <HAL_RCC_OscConfig+0x4c4>)
 8003f58:	6a1b      	ldr	r3, [r3, #32]
 8003f5a:	4a57      	ldr	r2, [pc, #348]	; (80040b8 <HAL_RCC_OscConfig+0x4c4>)
 8003f5c:	f023 0304 	bic.w	r3, r3, #4
 8003f60:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	68db      	ldr	r3, [r3, #12]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d015      	beq.n	8003f96 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f6a:	f7fe fe2b 	bl	8002bc4 <HAL_GetTick>
 8003f6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f70:	e00a      	b.n	8003f88 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f72:	f7fe fe27 	bl	8002bc4 <HAL_GetTick>
 8003f76:	4602      	mov	r2, r0
 8003f78:	693b      	ldr	r3, [r7, #16]
 8003f7a:	1ad3      	subs	r3, r2, r3
 8003f7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f80:	4293      	cmp	r3, r2
 8003f82:	d901      	bls.n	8003f88 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003f84:	2303      	movs	r3, #3
 8003f86:	e0b1      	b.n	80040ec <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f88:	4b4b      	ldr	r3, [pc, #300]	; (80040b8 <HAL_RCC_OscConfig+0x4c4>)
 8003f8a:	6a1b      	ldr	r3, [r3, #32]
 8003f8c:	f003 0302 	and.w	r3, r3, #2
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d0ee      	beq.n	8003f72 <HAL_RCC_OscConfig+0x37e>
 8003f94:	e014      	b.n	8003fc0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f96:	f7fe fe15 	bl	8002bc4 <HAL_GetTick>
 8003f9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f9c:	e00a      	b.n	8003fb4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f9e:	f7fe fe11 	bl	8002bc4 <HAL_GetTick>
 8003fa2:	4602      	mov	r2, r0
 8003fa4:	693b      	ldr	r3, [r7, #16]
 8003fa6:	1ad3      	subs	r3, r2, r3
 8003fa8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fac:	4293      	cmp	r3, r2
 8003fae:	d901      	bls.n	8003fb4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003fb0:	2303      	movs	r3, #3
 8003fb2:	e09b      	b.n	80040ec <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003fb4:	4b40      	ldr	r3, [pc, #256]	; (80040b8 <HAL_RCC_OscConfig+0x4c4>)
 8003fb6:	6a1b      	ldr	r3, [r3, #32]
 8003fb8:	f003 0302 	and.w	r3, r3, #2
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d1ee      	bne.n	8003f9e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003fc0:	7dfb      	ldrb	r3, [r7, #23]
 8003fc2:	2b01      	cmp	r3, #1
 8003fc4:	d105      	bne.n	8003fd2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003fc6:	4b3c      	ldr	r3, [pc, #240]	; (80040b8 <HAL_RCC_OscConfig+0x4c4>)
 8003fc8:	69db      	ldr	r3, [r3, #28]
 8003fca:	4a3b      	ldr	r2, [pc, #236]	; (80040b8 <HAL_RCC_OscConfig+0x4c4>)
 8003fcc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003fd0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	69db      	ldr	r3, [r3, #28]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	f000 8087 	beq.w	80040ea <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003fdc:	4b36      	ldr	r3, [pc, #216]	; (80040b8 <HAL_RCC_OscConfig+0x4c4>)
 8003fde:	685b      	ldr	r3, [r3, #4]
 8003fe0:	f003 030c 	and.w	r3, r3, #12
 8003fe4:	2b08      	cmp	r3, #8
 8003fe6:	d061      	beq.n	80040ac <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	69db      	ldr	r3, [r3, #28]
 8003fec:	2b02      	cmp	r3, #2
 8003fee:	d146      	bne.n	800407e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ff0:	4b33      	ldr	r3, [pc, #204]	; (80040c0 <HAL_RCC_OscConfig+0x4cc>)
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ff6:	f7fe fde5 	bl	8002bc4 <HAL_GetTick>
 8003ffa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ffc:	e008      	b.n	8004010 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ffe:	f7fe fde1 	bl	8002bc4 <HAL_GetTick>
 8004002:	4602      	mov	r2, r0
 8004004:	693b      	ldr	r3, [r7, #16]
 8004006:	1ad3      	subs	r3, r2, r3
 8004008:	2b02      	cmp	r3, #2
 800400a:	d901      	bls.n	8004010 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800400c:	2303      	movs	r3, #3
 800400e:	e06d      	b.n	80040ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004010:	4b29      	ldr	r3, [pc, #164]	; (80040b8 <HAL_RCC_OscConfig+0x4c4>)
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004018:	2b00      	cmp	r3, #0
 800401a:	d1f0      	bne.n	8003ffe <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6a1b      	ldr	r3, [r3, #32]
 8004020:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004024:	d108      	bne.n	8004038 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004026:	4b24      	ldr	r3, [pc, #144]	; (80040b8 <HAL_RCC_OscConfig+0x4c4>)
 8004028:	685b      	ldr	r3, [r3, #4]
 800402a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	689b      	ldr	r3, [r3, #8]
 8004032:	4921      	ldr	r1, [pc, #132]	; (80040b8 <HAL_RCC_OscConfig+0x4c4>)
 8004034:	4313      	orrs	r3, r2
 8004036:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004038:	4b1f      	ldr	r3, [pc, #124]	; (80040b8 <HAL_RCC_OscConfig+0x4c4>)
 800403a:	685b      	ldr	r3, [r3, #4]
 800403c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6a19      	ldr	r1, [r3, #32]
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004048:	430b      	orrs	r3, r1
 800404a:	491b      	ldr	r1, [pc, #108]	; (80040b8 <HAL_RCC_OscConfig+0x4c4>)
 800404c:	4313      	orrs	r3, r2
 800404e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004050:	4b1b      	ldr	r3, [pc, #108]	; (80040c0 <HAL_RCC_OscConfig+0x4cc>)
 8004052:	2201      	movs	r2, #1
 8004054:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004056:	f7fe fdb5 	bl	8002bc4 <HAL_GetTick>
 800405a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800405c:	e008      	b.n	8004070 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800405e:	f7fe fdb1 	bl	8002bc4 <HAL_GetTick>
 8004062:	4602      	mov	r2, r0
 8004064:	693b      	ldr	r3, [r7, #16]
 8004066:	1ad3      	subs	r3, r2, r3
 8004068:	2b02      	cmp	r3, #2
 800406a:	d901      	bls.n	8004070 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800406c:	2303      	movs	r3, #3
 800406e:	e03d      	b.n	80040ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004070:	4b11      	ldr	r3, [pc, #68]	; (80040b8 <HAL_RCC_OscConfig+0x4c4>)
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004078:	2b00      	cmp	r3, #0
 800407a:	d0f0      	beq.n	800405e <HAL_RCC_OscConfig+0x46a>
 800407c:	e035      	b.n	80040ea <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800407e:	4b10      	ldr	r3, [pc, #64]	; (80040c0 <HAL_RCC_OscConfig+0x4cc>)
 8004080:	2200      	movs	r2, #0
 8004082:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004084:	f7fe fd9e 	bl	8002bc4 <HAL_GetTick>
 8004088:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800408a:	e008      	b.n	800409e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800408c:	f7fe fd9a 	bl	8002bc4 <HAL_GetTick>
 8004090:	4602      	mov	r2, r0
 8004092:	693b      	ldr	r3, [r7, #16]
 8004094:	1ad3      	subs	r3, r2, r3
 8004096:	2b02      	cmp	r3, #2
 8004098:	d901      	bls.n	800409e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800409a:	2303      	movs	r3, #3
 800409c:	e026      	b.n	80040ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800409e:	4b06      	ldr	r3, [pc, #24]	; (80040b8 <HAL_RCC_OscConfig+0x4c4>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d1f0      	bne.n	800408c <HAL_RCC_OscConfig+0x498>
 80040aa:	e01e      	b.n	80040ea <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	69db      	ldr	r3, [r3, #28]
 80040b0:	2b01      	cmp	r3, #1
 80040b2:	d107      	bne.n	80040c4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80040b4:	2301      	movs	r3, #1
 80040b6:	e019      	b.n	80040ec <HAL_RCC_OscConfig+0x4f8>
 80040b8:	40021000 	.word	0x40021000
 80040bc:	40007000 	.word	0x40007000
 80040c0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80040c4:	4b0b      	ldr	r3, [pc, #44]	; (80040f4 <HAL_RCC_OscConfig+0x500>)
 80040c6:	685b      	ldr	r3, [r3, #4]
 80040c8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6a1b      	ldr	r3, [r3, #32]
 80040d4:	429a      	cmp	r2, r3
 80040d6:	d106      	bne.n	80040e6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040e2:	429a      	cmp	r2, r3
 80040e4:	d001      	beq.n	80040ea <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80040e6:	2301      	movs	r3, #1
 80040e8:	e000      	b.n	80040ec <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80040ea:	2300      	movs	r3, #0
}
 80040ec:	4618      	mov	r0, r3
 80040ee:	3718      	adds	r7, #24
 80040f0:	46bd      	mov	sp, r7
 80040f2:	bd80      	pop	{r7, pc}
 80040f4:	40021000 	.word	0x40021000

080040f8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b084      	sub	sp, #16
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
 8004100:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	2b00      	cmp	r3, #0
 8004106:	d101      	bne.n	800410c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004108:	2301      	movs	r3, #1
 800410a:	e0d0      	b.n	80042ae <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800410c:	4b6a      	ldr	r3, [pc, #424]	; (80042b8 <HAL_RCC_ClockConfig+0x1c0>)
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f003 0307 	and.w	r3, r3, #7
 8004114:	683a      	ldr	r2, [r7, #0]
 8004116:	429a      	cmp	r2, r3
 8004118:	d910      	bls.n	800413c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800411a:	4b67      	ldr	r3, [pc, #412]	; (80042b8 <HAL_RCC_ClockConfig+0x1c0>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f023 0207 	bic.w	r2, r3, #7
 8004122:	4965      	ldr	r1, [pc, #404]	; (80042b8 <HAL_RCC_ClockConfig+0x1c0>)
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	4313      	orrs	r3, r2
 8004128:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800412a:	4b63      	ldr	r3, [pc, #396]	; (80042b8 <HAL_RCC_ClockConfig+0x1c0>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f003 0307 	and.w	r3, r3, #7
 8004132:	683a      	ldr	r2, [r7, #0]
 8004134:	429a      	cmp	r2, r3
 8004136:	d001      	beq.n	800413c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004138:	2301      	movs	r3, #1
 800413a:	e0b8      	b.n	80042ae <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f003 0302 	and.w	r3, r3, #2
 8004144:	2b00      	cmp	r3, #0
 8004146:	d020      	beq.n	800418a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f003 0304 	and.w	r3, r3, #4
 8004150:	2b00      	cmp	r3, #0
 8004152:	d005      	beq.n	8004160 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004154:	4b59      	ldr	r3, [pc, #356]	; (80042bc <HAL_RCC_ClockConfig+0x1c4>)
 8004156:	685b      	ldr	r3, [r3, #4]
 8004158:	4a58      	ldr	r2, [pc, #352]	; (80042bc <HAL_RCC_ClockConfig+0x1c4>)
 800415a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800415e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f003 0308 	and.w	r3, r3, #8
 8004168:	2b00      	cmp	r3, #0
 800416a:	d005      	beq.n	8004178 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800416c:	4b53      	ldr	r3, [pc, #332]	; (80042bc <HAL_RCC_ClockConfig+0x1c4>)
 800416e:	685b      	ldr	r3, [r3, #4]
 8004170:	4a52      	ldr	r2, [pc, #328]	; (80042bc <HAL_RCC_ClockConfig+0x1c4>)
 8004172:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004176:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004178:	4b50      	ldr	r3, [pc, #320]	; (80042bc <HAL_RCC_ClockConfig+0x1c4>)
 800417a:	685b      	ldr	r3, [r3, #4]
 800417c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	689b      	ldr	r3, [r3, #8]
 8004184:	494d      	ldr	r1, [pc, #308]	; (80042bc <HAL_RCC_ClockConfig+0x1c4>)
 8004186:	4313      	orrs	r3, r2
 8004188:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f003 0301 	and.w	r3, r3, #1
 8004192:	2b00      	cmp	r3, #0
 8004194:	d040      	beq.n	8004218 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	685b      	ldr	r3, [r3, #4]
 800419a:	2b01      	cmp	r3, #1
 800419c:	d107      	bne.n	80041ae <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800419e:	4b47      	ldr	r3, [pc, #284]	; (80042bc <HAL_RCC_ClockConfig+0x1c4>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d115      	bne.n	80041d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041aa:	2301      	movs	r3, #1
 80041ac:	e07f      	b.n	80042ae <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	685b      	ldr	r3, [r3, #4]
 80041b2:	2b02      	cmp	r3, #2
 80041b4:	d107      	bne.n	80041c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041b6:	4b41      	ldr	r3, [pc, #260]	; (80042bc <HAL_RCC_ClockConfig+0x1c4>)
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d109      	bne.n	80041d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041c2:	2301      	movs	r3, #1
 80041c4:	e073      	b.n	80042ae <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041c6:	4b3d      	ldr	r3, [pc, #244]	; (80042bc <HAL_RCC_ClockConfig+0x1c4>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f003 0302 	and.w	r3, r3, #2
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d101      	bne.n	80041d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041d2:	2301      	movs	r3, #1
 80041d4:	e06b      	b.n	80042ae <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80041d6:	4b39      	ldr	r3, [pc, #228]	; (80042bc <HAL_RCC_ClockConfig+0x1c4>)
 80041d8:	685b      	ldr	r3, [r3, #4]
 80041da:	f023 0203 	bic.w	r2, r3, #3
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	685b      	ldr	r3, [r3, #4]
 80041e2:	4936      	ldr	r1, [pc, #216]	; (80042bc <HAL_RCC_ClockConfig+0x1c4>)
 80041e4:	4313      	orrs	r3, r2
 80041e6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80041e8:	f7fe fcec 	bl	8002bc4 <HAL_GetTick>
 80041ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041ee:	e00a      	b.n	8004206 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041f0:	f7fe fce8 	bl	8002bc4 <HAL_GetTick>
 80041f4:	4602      	mov	r2, r0
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	1ad3      	subs	r3, r2, r3
 80041fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80041fe:	4293      	cmp	r3, r2
 8004200:	d901      	bls.n	8004206 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004202:	2303      	movs	r3, #3
 8004204:	e053      	b.n	80042ae <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004206:	4b2d      	ldr	r3, [pc, #180]	; (80042bc <HAL_RCC_ClockConfig+0x1c4>)
 8004208:	685b      	ldr	r3, [r3, #4]
 800420a:	f003 020c 	and.w	r2, r3, #12
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	685b      	ldr	r3, [r3, #4]
 8004212:	009b      	lsls	r3, r3, #2
 8004214:	429a      	cmp	r2, r3
 8004216:	d1eb      	bne.n	80041f0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004218:	4b27      	ldr	r3, [pc, #156]	; (80042b8 <HAL_RCC_ClockConfig+0x1c0>)
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f003 0307 	and.w	r3, r3, #7
 8004220:	683a      	ldr	r2, [r7, #0]
 8004222:	429a      	cmp	r2, r3
 8004224:	d210      	bcs.n	8004248 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004226:	4b24      	ldr	r3, [pc, #144]	; (80042b8 <HAL_RCC_ClockConfig+0x1c0>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f023 0207 	bic.w	r2, r3, #7
 800422e:	4922      	ldr	r1, [pc, #136]	; (80042b8 <HAL_RCC_ClockConfig+0x1c0>)
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	4313      	orrs	r3, r2
 8004234:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004236:	4b20      	ldr	r3, [pc, #128]	; (80042b8 <HAL_RCC_ClockConfig+0x1c0>)
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f003 0307 	and.w	r3, r3, #7
 800423e:	683a      	ldr	r2, [r7, #0]
 8004240:	429a      	cmp	r2, r3
 8004242:	d001      	beq.n	8004248 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004244:	2301      	movs	r3, #1
 8004246:	e032      	b.n	80042ae <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f003 0304 	and.w	r3, r3, #4
 8004250:	2b00      	cmp	r3, #0
 8004252:	d008      	beq.n	8004266 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004254:	4b19      	ldr	r3, [pc, #100]	; (80042bc <HAL_RCC_ClockConfig+0x1c4>)
 8004256:	685b      	ldr	r3, [r3, #4]
 8004258:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	68db      	ldr	r3, [r3, #12]
 8004260:	4916      	ldr	r1, [pc, #88]	; (80042bc <HAL_RCC_ClockConfig+0x1c4>)
 8004262:	4313      	orrs	r3, r2
 8004264:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f003 0308 	and.w	r3, r3, #8
 800426e:	2b00      	cmp	r3, #0
 8004270:	d009      	beq.n	8004286 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004272:	4b12      	ldr	r3, [pc, #72]	; (80042bc <HAL_RCC_ClockConfig+0x1c4>)
 8004274:	685b      	ldr	r3, [r3, #4]
 8004276:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	691b      	ldr	r3, [r3, #16]
 800427e:	00db      	lsls	r3, r3, #3
 8004280:	490e      	ldr	r1, [pc, #56]	; (80042bc <HAL_RCC_ClockConfig+0x1c4>)
 8004282:	4313      	orrs	r3, r2
 8004284:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004286:	f000 f821 	bl	80042cc <HAL_RCC_GetSysClockFreq>
 800428a:	4602      	mov	r2, r0
 800428c:	4b0b      	ldr	r3, [pc, #44]	; (80042bc <HAL_RCC_ClockConfig+0x1c4>)
 800428e:	685b      	ldr	r3, [r3, #4]
 8004290:	091b      	lsrs	r3, r3, #4
 8004292:	f003 030f 	and.w	r3, r3, #15
 8004296:	490a      	ldr	r1, [pc, #40]	; (80042c0 <HAL_RCC_ClockConfig+0x1c8>)
 8004298:	5ccb      	ldrb	r3, [r1, r3]
 800429a:	fa22 f303 	lsr.w	r3, r2, r3
 800429e:	4a09      	ldr	r2, [pc, #36]	; (80042c4 <HAL_RCC_ClockConfig+0x1cc>)
 80042a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80042a2:	4b09      	ldr	r3, [pc, #36]	; (80042c8 <HAL_RCC_ClockConfig+0x1d0>)
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	4618      	mov	r0, r3
 80042a8:	f7fe fc4a 	bl	8002b40 <HAL_InitTick>

  return HAL_OK;
 80042ac:	2300      	movs	r3, #0
}
 80042ae:	4618      	mov	r0, r3
 80042b0:	3710      	adds	r7, #16
 80042b2:	46bd      	mov	sp, r7
 80042b4:	bd80      	pop	{r7, pc}
 80042b6:	bf00      	nop
 80042b8:	40022000 	.word	0x40022000
 80042bc:	40021000 	.word	0x40021000
 80042c0:	08006994 	.word	0x08006994
 80042c4:	20000000 	.word	0x20000000
 80042c8:	20000038 	.word	0x20000038

080042cc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80042cc:	b490      	push	{r4, r7}
 80042ce:	b08a      	sub	sp, #40	; 0x28
 80042d0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80042d2:	4b29      	ldr	r3, [pc, #164]	; (8004378 <HAL_RCC_GetSysClockFreq+0xac>)
 80042d4:	1d3c      	adds	r4, r7, #4
 80042d6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80042d8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80042dc:	f240 2301 	movw	r3, #513	; 0x201
 80042e0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80042e2:	2300      	movs	r3, #0
 80042e4:	61fb      	str	r3, [r7, #28]
 80042e6:	2300      	movs	r3, #0
 80042e8:	61bb      	str	r3, [r7, #24]
 80042ea:	2300      	movs	r3, #0
 80042ec:	627b      	str	r3, [r7, #36]	; 0x24
 80042ee:	2300      	movs	r3, #0
 80042f0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80042f2:	2300      	movs	r3, #0
 80042f4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80042f6:	4b21      	ldr	r3, [pc, #132]	; (800437c <HAL_RCC_GetSysClockFreq+0xb0>)
 80042f8:	685b      	ldr	r3, [r3, #4]
 80042fa:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80042fc:	69fb      	ldr	r3, [r7, #28]
 80042fe:	f003 030c 	and.w	r3, r3, #12
 8004302:	2b04      	cmp	r3, #4
 8004304:	d002      	beq.n	800430c <HAL_RCC_GetSysClockFreq+0x40>
 8004306:	2b08      	cmp	r3, #8
 8004308:	d003      	beq.n	8004312 <HAL_RCC_GetSysClockFreq+0x46>
 800430a:	e02b      	b.n	8004364 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800430c:	4b1c      	ldr	r3, [pc, #112]	; (8004380 <HAL_RCC_GetSysClockFreq+0xb4>)
 800430e:	623b      	str	r3, [r7, #32]
      break;
 8004310:	e02b      	b.n	800436a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004312:	69fb      	ldr	r3, [r7, #28]
 8004314:	0c9b      	lsrs	r3, r3, #18
 8004316:	f003 030f 	and.w	r3, r3, #15
 800431a:	3328      	adds	r3, #40	; 0x28
 800431c:	443b      	add	r3, r7
 800431e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004322:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004324:	69fb      	ldr	r3, [r7, #28]
 8004326:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800432a:	2b00      	cmp	r3, #0
 800432c:	d012      	beq.n	8004354 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800432e:	4b13      	ldr	r3, [pc, #76]	; (800437c <HAL_RCC_GetSysClockFreq+0xb0>)
 8004330:	685b      	ldr	r3, [r3, #4]
 8004332:	0c5b      	lsrs	r3, r3, #17
 8004334:	f003 0301 	and.w	r3, r3, #1
 8004338:	3328      	adds	r3, #40	; 0x28
 800433a:	443b      	add	r3, r7
 800433c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004340:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004342:	697b      	ldr	r3, [r7, #20]
 8004344:	4a0e      	ldr	r2, [pc, #56]	; (8004380 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004346:	fb03 f202 	mul.w	r2, r3, r2
 800434a:	69bb      	ldr	r3, [r7, #24]
 800434c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004350:	627b      	str	r3, [r7, #36]	; 0x24
 8004352:	e004      	b.n	800435e <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004354:	697b      	ldr	r3, [r7, #20]
 8004356:	4a0b      	ldr	r2, [pc, #44]	; (8004384 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004358:	fb02 f303 	mul.w	r3, r2, r3
 800435c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800435e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004360:	623b      	str	r3, [r7, #32]
      break;
 8004362:	e002      	b.n	800436a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004364:	4b06      	ldr	r3, [pc, #24]	; (8004380 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004366:	623b      	str	r3, [r7, #32]
      break;
 8004368:	bf00      	nop
    }
  }
  return sysclockfreq;
 800436a:	6a3b      	ldr	r3, [r7, #32]
}
 800436c:	4618      	mov	r0, r3
 800436e:	3728      	adds	r7, #40	; 0x28
 8004370:	46bd      	mov	sp, r7
 8004372:	bc90      	pop	{r4, r7}
 8004374:	4770      	bx	lr
 8004376:	bf00      	nop
 8004378:	08005dfc 	.word	0x08005dfc
 800437c:	40021000 	.word	0x40021000
 8004380:	007a1200 	.word	0x007a1200
 8004384:	003d0900 	.word	0x003d0900

08004388 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004388:	b480      	push	{r7}
 800438a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800438c:	4b02      	ldr	r3, [pc, #8]	; (8004398 <HAL_RCC_GetHCLKFreq+0x10>)
 800438e:	681b      	ldr	r3, [r3, #0]
}
 8004390:	4618      	mov	r0, r3
 8004392:	46bd      	mov	sp, r7
 8004394:	bc80      	pop	{r7}
 8004396:	4770      	bx	lr
 8004398:	20000000 	.word	0x20000000

0800439c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800439c:	b580      	push	{r7, lr}
 800439e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80043a0:	f7ff fff2 	bl	8004388 <HAL_RCC_GetHCLKFreq>
 80043a4:	4602      	mov	r2, r0
 80043a6:	4b05      	ldr	r3, [pc, #20]	; (80043bc <HAL_RCC_GetPCLK2Freq+0x20>)
 80043a8:	685b      	ldr	r3, [r3, #4]
 80043aa:	0adb      	lsrs	r3, r3, #11
 80043ac:	f003 0307 	and.w	r3, r3, #7
 80043b0:	4903      	ldr	r1, [pc, #12]	; (80043c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80043b2:	5ccb      	ldrb	r3, [r1, r3]
 80043b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80043b8:	4618      	mov	r0, r3
 80043ba:	bd80      	pop	{r7, pc}
 80043bc:	40021000 	.word	0x40021000
 80043c0:	080069a4 	.word	0x080069a4

080043c4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80043c4:	b480      	push	{r7}
 80043c6:	b085      	sub	sp, #20
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80043cc:	4b0a      	ldr	r3, [pc, #40]	; (80043f8 <RCC_Delay+0x34>)
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	4a0a      	ldr	r2, [pc, #40]	; (80043fc <RCC_Delay+0x38>)
 80043d2:	fba2 2303 	umull	r2, r3, r2, r3
 80043d6:	0a5b      	lsrs	r3, r3, #9
 80043d8:	687a      	ldr	r2, [r7, #4]
 80043da:	fb02 f303 	mul.w	r3, r2, r3
 80043de:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80043e0:	bf00      	nop
  }
  while (Delay --);
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	1e5a      	subs	r2, r3, #1
 80043e6:	60fa      	str	r2, [r7, #12]
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d1f9      	bne.n	80043e0 <RCC_Delay+0x1c>
}
 80043ec:	bf00      	nop
 80043ee:	bf00      	nop
 80043f0:	3714      	adds	r7, #20
 80043f2:	46bd      	mov	sp, r7
 80043f4:	bc80      	pop	{r7}
 80043f6:	4770      	bx	lr
 80043f8:	20000000 	.word	0x20000000
 80043fc:	10624dd3 	.word	0x10624dd3

08004400 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004400:	b580      	push	{r7, lr}
 8004402:	b086      	sub	sp, #24
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004408:	2300      	movs	r3, #0
 800440a:	613b      	str	r3, [r7, #16]
 800440c:	2300      	movs	r3, #0
 800440e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f003 0301 	and.w	r3, r3, #1
 8004418:	2b00      	cmp	r3, #0
 800441a:	d07d      	beq.n	8004518 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 800441c:	2300      	movs	r3, #0
 800441e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004420:	4b4f      	ldr	r3, [pc, #316]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004422:	69db      	ldr	r3, [r3, #28]
 8004424:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004428:	2b00      	cmp	r3, #0
 800442a:	d10d      	bne.n	8004448 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800442c:	4b4c      	ldr	r3, [pc, #304]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800442e:	69db      	ldr	r3, [r3, #28]
 8004430:	4a4b      	ldr	r2, [pc, #300]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004432:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004436:	61d3      	str	r3, [r2, #28]
 8004438:	4b49      	ldr	r3, [pc, #292]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800443a:	69db      	ldr	r3, [r3, #28]
 800443c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004440:	60bb      	str	r3, [r7, #8]
 8004442:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004444:	2301      	movs	r3, #1
 8004446:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004448:	4b46      	ldr	r3, [pc, #280]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004450:	2b00      	cmp	r3, #0
 8004452:	d118      	bne.n	8004486 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004454:	4b43      	ldr	r3, [pc, #268]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	4a42      	ldr	r2, [pc, #264]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800445a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800445e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004460:	f7fe fbb0 	bl	8002bc4 <HAL_GetTick>
 8004464:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004466:	e008      	b.n	800447a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004468:	f7fe fbac 	bl	8002bc4 <HAL_GetTick>
 800446c:	4602      	mov	r2, r0
 800446e:	693b      	ldr	r3, [r7, #16]
 8004470:	1ad3      	subs	r3, r2, r3
 8004472:	2b64      	cmp	r3, #100	; 0x64
 8004474:	d901      	bls.n	800447a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004476:	2303      	movs	r3, #3
 8004478:	e06d      	b.n	8004556 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800447a:	4b3a      	ldr	r3, [pc, #232]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004482:	2b00      	cmp	r3, #0
 8004484:	d0f0      	beq.n	8004468 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004486:	4b36      	ldr	r3, [pc, #216]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004488:	6a1b      	ldr	r3, [r3, #32]
 800448a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800448e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	2b00      	cmp	r3, #0
 8004494:	d02e      	beq.n	80044f4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	685b      	ldr	r3, [r3, #4]
 800449a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800449e:	68fa      	ldr	r2, [r7, #12]
 80044a0:	429a      	cmp	r2, r3
 80044a2:	d027      	beq.n	80044f4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80044a4:	4b2e      	ldr	r3, [pc, #184]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044a6:	6a1b      	ldr	r3, [r3, #32]
 80044a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044ac:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80044ae:	4b2e      	ldr	r3, [pc, #184]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80044b0:	2201      	movs	r2, #1
 80044b2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80044b4:	4b2c      	ldr	r3, [pc, #176]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80044b6:	2200      	movs	r2, #0
 80044b8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80044ba:	4a29      	ldr	r2, [pc, #164]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	f003 0301 	and.w	r3, r3, #1
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d014      	beq.n	80044f4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044ca:	f7fe fb7b 	bl	8002bc4 <HAL_GetTick>
 80044ce:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044d0:	e00a      	b.n	80044e8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80044d2:	f7fe fb77 	bl	8002bc4 <HAL_GetTick>
 80044d6:	4602      	mov	r2, r0
 80044d8:	693b      	ldr	r3, [r7, #16]
 80044da:	1ad3      	subs	r3, r2, r3
 80044dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80044e0:	4293      	cmp	r3, r2
 80044e2:	d901      	bls.n	80044e8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80044e4:	2303      	movs	r3, #3
 80044e6:	e036      	b.n	8004556 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044e8:	4b1d      	ldr	r3, [pc, #116]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044ea:	6a1b      	ldr	r3, [r3, #32]
 80044ec:	f003 0302 	and.w	r3, r3, #2
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d0ee      	beq.n	80044d2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80044f4:	4b1a      	ldr	r3, [pc, #104]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044f6:	6a1b      	ldr	r3, [r3, #32]
 80044f8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	685b      	ldr	r3, [r3, #4]
 8004500:	4917      	ldr	r1, [pc, #92]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004502:	4313      	orrs	r3, r2
 8004504:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004506:	7dfb      	ldrb	r3, [r7, #23]
 8004508:	2b01      	cmp	r3, #1
 800450a:	d105      	bne.n	8004518 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800450c:	4b14      	ldr	r3, [pc, #80]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800450e:	69db      	ldr	r3, [r3, #28]
 8004510:	4a13      	ldr	r2, [pc, #76]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004512:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004516:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f003 0302 	and.w	r3, r3, #2
 8004520:	2b00      	cmp	r3, #0
 8004522:	d008      	beq.n	8004536 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004524:	4b0e      	ldr	r3, [pc, #56]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004526:	685b      	ldr	r3, [r3, #4]
 8004528:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	689b      	ldr	r3, [r3, #8]
 8004530:	490b      	ldr	r1, [pc, #44]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004532:	4313      	orrs	r3, r2
 8004534:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f003 0310 	and.w	r3, r3, #16
 800453e:	2b00      	cmp	r3, #0
 8004540:	d008      	beq.n	8004554 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004542:	4b07      	ldr	r3, [pc, #28]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004544:	685b      	ldr	r3, [r3, #4]
 8004546:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	695b      	ldr	r3, [r3, #20]
 800454e:	4904      	ldr	r1, [pc, #16]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004550:	4313      	orrs	r3, r2
 8004552:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004554:	2300      	movs	r3, #0
}
 8004556:	4618      	mov	r0, r3
 8004558:	3718      	adds	r7, #24
 800455a:	46bd      	mov	sp, r7
 800455c:	bd80      	pop	{r7, pc}
 800455e:	bf00      	nop
 8004560:	40021000 	.word	0x40021000
 8004564:	40007000 	.word	0x40007000
 8004568:	42420440 	.word	0x42420440

0800456c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800456c:	b590      	push	{r4, r7, lr}
 800456e:	b08d      	sub	sp, #52	; 0x34
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004574:	4b6a      	ldr	r3, [pc, #424]	; (8004720 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>)
 8004576:	f107 040c 	add.w	r4, r7, #12
 800457a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800457c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004580:	f240 2301 	movw	r3, #513	; 0x201
 8004584:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8004586:	2300      	movs	r3, #0
 8004588:	627b      	str	r3, [r7, #36]	; 0x24
 800458a:	2300      	movs	r3, #0
 800458c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800458e:	2300      	movs	r3, #0
 8004590:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8004592:	2300      	movs	r3, #0
 8004594:	61fb      	str	r3, [r7, #28]
 8004596:	2300      	movs	r3, #0
 8004598:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	3b01      	subs	r3, #1
 800459e:	2b0f      	cmp	r3, #15
 80045a0:	f200 80b4 	bhi.w	800470c <HAL_RCCEx_GetPeriphCLKFreq+0x1a0>
 80045a4:	a201      	add	r2, pc, #4	; (adr r2, 80045ac <HAL_RCCEx_GetPeriphCLKFreq+0x40>)
 80045a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045aa:	bf00      	nop
 80045ac:	0800468b 	.word	0x0800468b
 80045b0:	080046f1 	.word	0x080046f1
 80045b4:	0800470d 	.word	0x0800470d
 80045b8:	0800467b 	.word	0x0800467b
 80045bc:	0800470d 	.word	0x0800470d
 80045c0:	0800470d 	.word	0x0800470d
 80045c4:	0800470d 	.word	0x0800470d
 80045c8:	08004683 	.word	0x08004683
 80045cc:	0800470d 	.word	0x0800470d
 80045d0:	0800470d 	.word	0x0800470d
 80045d4:	0800470d 	.word	0x0800470d
 80045d8:	0800470d 	.word	0x0800470d
 80045dc:	0800470d 	.word	0x0800470d
 80045e0:	0800470d 	.word	0x0800470d
 80045e4:	0800470d 	.word	0x0800470d
 80045e8:	080045ed 	.word	0x080045ed
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_USB:
    {
      /* Get RCC configuration ------------------------------------------------------*/
      temp_reg = RCC->CFGR;
 80045ec:	4b4d      	ldr	r3, [pc, #308]	; (8004724 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 80045ee:	685b      	ldr	r3, [r3, #4]
 80045f0:	61fb      	str	r3, [r7, #28]

      /* Check if PLL is enabled */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80045f2:	4b4c      	ldr	r3, [pc, #304]	; (8004724 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	f000 8088 	beq.w	8004710 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
      {
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004600:	69fb      	ldr	r3, [r7, #28]
 8004602:	0c9b      	lsrs	r3, r3, #18
 8004604:	f003 030f 	and.w	r3, r3, #15
 8004608:	3330      	adds	r3, #48	; 0x30
 800460a:	443b      	add	r3, r7
 800460c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004610:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004612:	69fb      	ldr	r3, [r7, #28]
 8004614:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004618:	2b00      	cmp	r3, #0
 800461a:	d017      	beq.n	800464c <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        {
#if defined(STM32F105xC) || defined(STM32F107xC) || defined(STM32F100xB)\
 || defined(STM32F100xE)
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800461c:	4b41      	ldr	r3, [pc, #260]	; (8004724 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 800461e:	685b      	ldr	r3, [r3, #4]
 8004620:	0c5b      	lsrs	r3, r3, #17
 8004622:	f003 0301 	and.w	r3, r3, #1
 8004626:	3330      	adds	r3, #48	; 0x30
 8004628:	443b      	add	r3, r7
 800462a:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800462e:	627b      	str	r3, [r7, #36]	; 0x24
          if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
          {
            pllclk = pllclk / 2;
          }
#else
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004630:	69fb      	ldr	r3, [r7, #28]
 8004632:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004636:	2b00      	cmp	r3, #0
 8004638:	d00d      	beq.n	8004656 <HAL_RCCEx_GetPeriphCLKFreq+0xea>
          {
            /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 800463a:	4a3b      	ldr	r2, [pc, #236]	; (8004728 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>)
 800463c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800463e:	fbb2 f2f3 	udiv	r2, r2, r3
 8004642:	6a3b      	ldr	r3, [r7, #32]
 8004644:	fb02 f303 	mul.w	r3, r2, r3
 8004648:	62fb      	str	r3, [r7, #44]	; 0x2c
 800464a:	e004      	b.n	8004656 <HAL_RCCEx_GetPeriphCLKFreq+0xea>
#endif /* STM32F105xC || STM32F107xC */
        }
        else
        {
          /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800464c:	6a3b      	ldr	r3, [r7, #32]
 800464e:	4a37      	ldr	r2, [pc, #220]	; (800472c <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>)
 8004650:	fb02 f303 	mul.w	r3, r2, r3
 8004654:	62fb      	str	r3, [r7, #44]	; 0x2c
          /* Prescaler of 3 selected for USB */
          frequency = (2 * pllclk) / 3;
        }
#else
        /* USBCLK = PLLCLK / USB prescaler */
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8004656:	4b33      	ldr	r3, [pc, #204]	; (8004724 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 8004658:	685b      	ldr	r3, [r3, #4]
 800465a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800465e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004662:	d102      	bne.n	800466a <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
        {
          /* No prescaler selected for USB */
          frequency = pllclk;
 8004664:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004666:	62bb      	str	r3, [r7, #40]	; 0x28
          /* Prescaler of 1.5 selected for USB */
          frequency = (pllclk * 2) / 3;
        }
#endif
      }
      break;
 8004668:	e052      	b.n	8004710 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
          frequency = (pllclk * 2) / 3;
 800466a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800466c:	005b      	lsls	r3, r3, #1
 800466e:	4a30      	ldr	r2, [pc, #192]	; (8004730 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>)
 8004670:	fba2 2303 	umull	r2, r3, r2, r3
 8004674:	085b      	lsrs	r3, r3, #1
 8004676:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8004678:	e04a      	b.n	8004710 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
#if defined(STM32F103xE) || defined(STM32F103xG) || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_I2S2:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S2 */
      frequency = HAL_RCC_GetSysClockFreq();
 800467a:	f7ff fe27 	bl	80042cc <HAL_RCC_GetSysClockFreq>
 800467e:	62b8      	str	r0, [r7, #40]	; 0x28
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 8004680:	e049      	b.n	8004716 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
    }
    case RCC_PERIPHCLK_I2S3:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S3 */
      frequency = HAL_RCC_GetSysClockFreq();
 8004682:	f7ff fe23 	bl	80042cc <HAL_RCC_GetSysClockFreq>
 8004686:	62b8      	str	r0, [r7, #40]	; 0x28
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 8004688:	e045      	b.n	8004716 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
    }
#endif /* STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */
    case RCC_PERIPHCLK_RTC:
    {
      /* Get RCC BDCR configuration ------------------------------------------------------*/
      temp_reg = RCC->BDCR;
 800468a:	4b26      	ldr	r3, [pc, #152]	; (8004724 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 800468c:	6a1b      	ldr	r3, [r3, #32]
 800468e:	61fb      	str	r3, [r7, #28]

      /* Check if LSE is ready if RTC clock selection is LSE */
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8004690:	69fb      	ldr	r3, [r7, #28]
 8004692:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004696:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800469a:	d108      	bne.n	80046ae <HAL_RCCEx_GetPeriphCLKFreq+0x142>
 800469c:	69fb      	ldr	r3, [r7, #28]
 800469e:	f003 0302 	and.w	r3, r3, #2
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d003      	beq.n	80046ae <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      {
        frequency = LSE_VALUE;
 80046a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80046aa:	62bb      	str	r3, [r7, #40]	; 0x28
 80046ac:	e01f      	b.n	80046ee <HAL_RCCEx_GetPeriphCLKFreq+0x182>
      }
      /* Check if LSI is ready if RTC clock selection is LSI */
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80046ae:	69fb      	ldr	r3, [r7, #28]
 80046b0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80046b8:	d109      	bne.n	80046ce <HAL_RCCEx_GetPeriphCLKFreq+0x162>
 80046ba:	4b1a      	ldr	r3, [pc, #104]	; (8004724 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 80046bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046be:	f003 0302 	and.w	r3, r3, #2
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d003      	beq.n	80046ce <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      {
        frequency = LSI_VALUE;
 80046c6:	f649 4340 	movw	r3, #40000	; 0x9c40
 80046ca:	62bb      	str	r3, [r7, #40]	; 0x28
 80046cc:	e00f      	b.n	80046ee <HAL_RCCEx_GetPeriphCLKFreq+0x182>
      }
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80046ce:	69fb      	ldr	r3, [r7, #28]
 80046d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046d4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80046d8:	d11c      	bne.n	8004714 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
 80046da:	4b12      	ldr	r3, [pc, #72]	; (8004724 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d016      	beq.n	8004714 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
      {
        frequency = HSE_VALUE / 128U;
 80046e6:	f24f 4324 	movw	r3, #62500	; 0xf424
 80046ea:	62bb      	str	r3, [r7, #40]	; 0x28
      /* Clock not enabled for RTC*/
      else
      {
        /* nothing to do: frequency already initialized to 0U */
      }
      break;
 80046ec:	e012      	b.n	8004714 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
 80046ee:	e011      	b.n	8004714 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
    }
    case RCC_PERIPHCLK_ADC:
    {
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80046f0:	f7ff fe54 	bl	800439c <HAL_RCC_GetPCLK2Freq>
 80046f4:	4602      	mov	r2, r0
 80046f6:	4b0b      	ldr	r3, [pc, #44]	; (8004724 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 80046f8:	685b      	ldr	r3, [r3, #4]
 80046fa:	0b9b      	lsrs	r3, r3, #14
 80046fc:	f003 0303 	and.w	r3, r3, #3
 8004700:	3301      	adds	r3, #1
 8004702:	005b      	lsls	r3, r3, #1
 8004704:	fbb2 f3f3 	udiv	r3, r2, r3
 8004708:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800470a:	e004      	b.n	8004716 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
    }
    default:
    {
      break;
 800470c:	bf00      	nop
 800470e:	e002      	b.n	8004716 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
      break;
 8004710:	bf00      	nop
 8004712:	e000      	b.n	8004716 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
      break;
 8004714:	bf00      	nop
    }
  }
  return (frequency);
 8004716:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8004718:	4618      	mov	r0, r3
 800471a:	3734      	adds	r7, #52	; 0x34
 800471c:	46bd      	mov	sp, r7
 800471e:	bd90      	pop	{r4, r7, pc}
 8004720:	08005e0c 	.word	0x08005e0c
 8004724:	40021000 	.word	0x40021000
 8004728:	007a1200 	.word	0x007a1200
 800472c:	003d0900 	.word	0x003d0900
 8004730:	aaaaaaab 	.word	0xaaaaaaab

08004734 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004734:	b580      	push	{r7, lr}
 8004736:	b084      	sub	sp, #16
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 800473c:	2300      	movs	r3, #0
 800473e:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2b00      	cmp	r3, #0
 8004744:	d101      	bne.n	800474a <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8004746:	2301      	movs	r3, #1
 8004748:	e084      	b.n	8004854 <HAL_RTC_Init+0x120>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	7c5b      	ldrb	r3, [r3, #17]
 800474e:	b2db      	uxtb	r3, r3
 8004750:	2b00      	cmp	r3, #0
 8004752:	d105      	bne.n	8004760 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2200      	movs	r2, #0
 8004758:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800475a:	6878      	ldr	r0, [r7, #4]
 800475c:	f7fd fde8 	bl	8002330 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2202      	movs	r2, #2
 8004764:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004766:	6878      	ldr	r0, [r7, #4]
 8004768:	f000 f9c8 	bl	8004afc <HAL_RTC_WaitForSynchro>
 800476c:	4603      	mov	r3, r0
 800476e:	2b00      	cmp	r3, #0
 8004770:	d004      	beq.n	800477c <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	2204      	movs	r2, #4
 8004776:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8004778:	2301      	movs	r3, #1
 800477a:	e06b      	b.n	8004854 <HAL_RTC_Init+0x120>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800477c:	6878      	ldr	r0, [r7, #4]
 800477e:	f000 fa81 	bl	8004c84 <RTC_EnterInitMode>
 8004782:	4603      	mov	r3, r0
 8004784:	2b00      	cmp	r3, #0
 8004786:	d004      	beq.n	8004792 <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2204      	movs	r2, #4
 800478c:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 800478e:	2301      	movs	r3, #1
 8004790:	e060      	b.n	8004854 <HAL_RTC_Init+0x120>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	685a      	ldr	r2, [r3, #4]
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f022 0207 	bic.w	r2, r2, #7
 80047a0:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	689b      	ldr	r3, [r3, #8]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d005      	beq.n	80047b6 <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 80047aa:	4b2c      	ldr	r3, [pc, #176]	; (800485c <HAL_RTC_Init+0x128>)
 80047ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047ae:	4a2b      	ldr	r2, [pc, #172]	; (800485c <HAL_RTC_Init+0x128>)
 80047b0:	f023 0301 	bic.w	r3, r3, #1
 80047b4:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 80047b6:	4b29      	ldr	r3, [pc, #164]	; (800485c <HAL_RTC_Init+0x128>)
 80047b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047ba:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	689b      	ldr	r3, [r3, #8]
 80047c2:	4926      	ldr	r1, [pc, #152]	; (800485c <HAL_RTC_Init+0x128>)
 80047c4:	4313      	orrs	r3, r2
 80047c6:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	685b      	ldr	r3, [r3, #4]
 80047cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80047d0:	d003      	beq.n	80047da <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	685b      	ldr	r3, [r3, #4]
 80047d6:	60fb      	str	r3, [r7, #12]
 80047d8:	e00e      	b.n	80047f8 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 80047da:	2001      	movs	r0, #1
 80047dc:	f7ff fec6 	bl	800456c <HAL_RCCEx_GetPeriphCLKFreq>
 80047e0:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d104      	bne.n	80047f2 <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2204      	movs	r2, #4
 80047ec:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 80047ee:	2301      	movs	r3, #1
 80047f0:	e030      	b.n	8004854 <HAL_RTC_Init+0x120>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	3b01      	subs	r3, #1
 80047f6:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	689b      	ldr	r3, [r3, #8]
 80047fe:	f023 010f 	bic.w	r1, r3, #15
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	0c1a      	lsrs	r2, r3, #16
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	430a      	orrs	r2, r1
 800480c:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	68db      	ldr	r3, [r3, #12]
 8004814:	0c1b      	lsrs	r3, r3, #16
 8004816:	041b      	lsls	r3, r3, #16
 8004818:	68fa      	ldr	r2, [r7, #12]
 800481a:	b291      	uxth	r1, r2
 800481c:	687a      	ldr	r2, [r7, #4]
 800481e:	6812      	ldr	r2, [r2, #0]
 8004820:	430b      	orrs	r3, r1
 8004822:	60d3      	str	r3, [r2, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8004824:	6878      	ldr	r0, [r7, #4]
 8004826:	f000 fa55 	bl	8004cd4 <RTC_ExitInitMode>
 800482a:	4603      	mov	r3, r0
 800482c:	2b00      	cmp	r3, #0
 800482e:	d004      	beq.n	800483a <HAL_RTC_Init+0x106>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2204      	movs	r2, #4
 8004834:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 8004836:	2301      	movs	r3, #1
 8004838:	e00c      	b.n	8004854 <HAL_RTC_Init+0x120>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	2200      	movs	r2, #0
 800483e:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2201      	movs	r2, #1
 8004844:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	2201      	movs	r2, #1
 800484a:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2201      	movs	r2, #1
 8004850:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 8004852:	2300      	movs	r3, #0
  }
}
 8004854:	4618      	mov	r0, r3
 8004856:	3710      	adds	r7, #16
 8004858:	46bd      	mov	sp, r7
 800485a:	bd80      	pop	{r7, pc}
 800485c:	40006c00 	.word	0x40006c00

08004860 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004860:	b590      	push	{r4, r7, lr}
 8004862:	b087      	sub	sp, #28
 8004864:	af00      	add	r7, sp, #0
 8004866:	60f8      	str	r0, [r7, #12]
 8004868:	60b9      	str	r1, [r7, #8]
 800486a:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 800486c:	2300      	movs	r3, #0
 800486e:	617b      	str	r3, [r7, #20]
 8004870:	2300      	movs	r3, #0
 8004872:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	2b00      	cmp	r3, #0
 8004878:	d002      	beq.n	8004880 <HAL_RTC_SetTime+0x20>
 800487a:	68bb      	ldr	r3, [r7, #8]
 800487c:	2b00      	cmp	r3, #0
 800487e:	d101      	bne.n	8004884 <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 8004880:	2301      	movs	r3, #1
 8004882:	e080      	b.n	8004986 <HAL_RTC_SetTime+0x126>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	7c1b      	ldrb	r3, [r3, #16]
 8004888:	2b01      	cmp	r3, #1
 800488a:	d101      	bne.n	8004890 <HAL_RTC_SetTime+0x30>
 800488c:	2302      	movs	r3, #2
 800488e:	e07a      	b.n	8004986 <HAL_RTC_SetTime+0x126>
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	2201      	movs	r2, #1
 8004894:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	2202      	movs	r2, #2
 800489a:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d113      	bne.n	80048ca <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 80048a2:	68bb      	ldr	r3, [r7, #8]
 80048a4:	781b      	ldrb	r3, [r3, #0]
 80048a6:	461a      	mov	r2, r3
 80048a8:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80048ac:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 80048b0:	68bb      	ldr	r3, [r7, #8]
 80048b2:	785b      	ldrb	r3, [r3, #1]
 80048b4:	4619      	mov	r1, r3
 80048b6:	460b      	mov	r3, r1
 80048b8:	011b      	lsls	r3, r3, #4
 80048ba:	1a5b      	subs	r3, r3, r1
 80048bc:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 80048be:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 80048c0:	68ba      	ldr	r2, [r7, #8]
 80048c2:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 80048c4:	4413      	add	r3, r2
 80048c6:	617b      	str	r3, [r7, #20]
 80048c8:	e01e      	b.n	8004908 <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 80048ca:	68bb      	ldr	r3, [r7, #8]
 80048cc:	781b      	ldrb	r3, [r3, #0]
 80048ce:	4618      	mov	r0, r3
 80048d0:	f000 fa28 	bl	8004d24 <RTC_Bcd2ToByte>
 80048d4:	4603      	mov	r3, r0
 80048d6:	461a      	mov	r2, r3
 80048d8:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80048dc:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 80048e0:	68bb      	ldr	r3, [r7, #8]
 80048e2:	785b      	ldrb	r3, [r3, #1]
 80048e4:	4618      	mov	r0, r3
 80048e6:	f000 fa1d 	bl	8004d24 <RTC_Bcd2ToByte>
 80048ea:	4603      	mov	r3, r0
 80048ec:	461a      	mov	r2, r3
 80048ee:	4613      	mov	r3, r2
 80048f0:	011b      	lsls	r3, r3, #4
 80048f2:	1a9b      	subs	r3, r3, r2
 80048f4:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 80048f6:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 80048f8:	68bb      	ldr	r3, [r7, #8]
 80048fa:	789b      	ldrb	r3, [r3, #2]
 80048fc:	4618      	mov	r0, r3
 80048fe:	f000 fa11 	bl	8004d24 <RTC_Bcd2ToByte>
 8004902:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8004904:	4423      	add	r3, r4
 8004906:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8004908:	6979      	ldr	r1, [r7, #20]
 800490a:	68f8      	ldr	r0, [r7, #12]
 800490c:	f000 f953 	bl	8004bb6 <RTC_WriteTimeCounter>
 8004910:	4603      	mov	r3, r0
 8004912:	2b00      	cmp	r3, #0
 8004914:	d007      	beq.n	8004926 <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	2204      	movs	r2, #4
 800491a:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	2200      	movs	r2, #0
 8004920:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 8004922:	2301      	movs	r3, #1
 8004924:	e02f      	b.n	8004986 <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	685a      	ldr	r2, [r3, #4]
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f022 0205 	bic.w	r2, r2, #5
 8004934:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8004936:	68f8      	ldr	r0, [r7, #12]
 8004938:	f000 f964 	bl	8004c04 <RTC_ReadAlarmCounter>
 800493c:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 800493e:	693b      	ldr	r3, [r7, #16]
 8004940:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004944:	d018      	beq.n	8004978 <HAL_RTC_SetTime+0x118>
    {
      if (counter_alarm < counter_time)
 8004946:	693a      	ldr	r2, [r7, #16]
 8004948:	697b      	ldr	r3, [r7, #20]
 800494a:	429a      	cmp	r2, r3
 800494c:	d214      	bcs.n	8004978 <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 800494e:	693b      	ldr	r3, [r7, #16]
 8004950:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8004954:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8004958:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 800495a:	6939      	ldr	r1, [r7, #16]
 800495c:	68f8      	ldr	r0, [r7, #12]
 800495e:	f000 f96a 	bl	8004c36 <RTC_WriteAlarmCounter>
 8004962:	4603      	mov	r3, r0
 8004964:	2b00      	cmp	r3, #0
 8004966:	d007      	beq.n	8004978 <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	2204      	movs	r2, #4
 800496c:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	2200      	movs	r2, #0
 8004972:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8004974:	2301      	movs	r3, #1
 8004976:	e006      	b.n	8004986 <HAL_RTC_SetTime+0x126>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	2201      	movs	r2, #1
 800497c:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	2200      	movs	r2, #0
 8004982:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 8004984:	2300      	movs	r3, #0
  }
}
 8004986:	4618      	mov	r0, r3
 8004988:	371c      	adds	r7, #28
 800498a:	46bd      	mov	sp, r7
 800498c:	bd90      	pop	{r4, r7, pc}
	...

08004990 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004990:	b580      	push	{r7, lr}
 8004992:	b088      	sub	sp, #32
 8004994:	af00      	add	r7, sp, #0
 8004996:	60f8      	str	r0, [r7, #12]
 8004998:	60b9      	str	r1, [r7, #8]
 800499a:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 800499c:	2300      	movs	r3, #0
 800499e:	61fb      	str	r3, [r7, #28]
 80049a0:	2300      	movs	r3, #0
 80049a2:	61bb      	str	r3, [r7, #24]
 80049a4:	2300      	movs	r3, #0
 80049a6:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d002      	beq.n	80049b4 <HAL_RTC_SetDate+0x24>
 80049ae:	68bb      	ldr	r3, [r7, #8]
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d101      	bne.n	80049b8 <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 80049b4:	2301      	movs	r3, #1
 80049b6:	e097      	b.n	8004ae8 <HAL_RTC_SetDate+0x158>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	7c1b      	ldrb	r3, [r3, #16]
 80049bc:	2b01      	cmp	r3, #1
 80049be:	d101      	bne.n	80049c4 <HAL_RTC_SetDate+0x34>
 80049c0:	2302      	movs	r3, #2
 80049c2:	e091      	b.n	8004ae8 <HAL_RTC_SetDate+0x158>
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	2201      	movs	r2, #1
 80049c8:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	2202      	movs	r2, #2
 80049ce:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d10c      	bne.n	80049f0 <HAL_RTC_SetDate+0x60>
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 80049d6:	68bb      	ldr	r3, [r7, #8]
 80049d8:	78da      	ldrb	r2, [r3, #3]
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 80049de:	68bb      	ldr	r3, [r7, #8]
 80049e0:	785a      	ldrb	r2, [r3, #1]
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 80049e6:	68bb      	ldr	r3, [r7, #8]
 80049e8:	789a      	ldrb	r2, [r3, #2]
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	739a      	strb	r2, [r3, #14]
 80049ee:	e01a      	b.n	8004a26 <HAL_RTC_SetDate+0x96>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 80049f0:	68bb      	ldr	r3, [r7, #8]
 80049f2:	78db      	ldrb	r3, [r3, #3]
 80049f4:	4618      	mov	r0, r3
 80049f6:	f000 f995 	bl	8004d24 <RTC_Bcd2ToByte>
 80049fa:	4603      	mov	r3, r0
 80049fc:	461a      	mov	r2, r3
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 8004a02:	68bb      	ldr	r3, [r7, #8]
 8004a04:	785b      	ldrb	r3, [r3, #1]
 8004a06:	4618      	mov	r0, r3
 8004a08:	f000 f98c 	bl	8004d24 <RTC_Bcd2ToByte>
 8004a0c:	4603      	mov	r3, r0
 8004a0e:	461a      	mov	r2, r3
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 8004a14:	68bb      	ldr	r3, [r7, #8]
 8004a16:	789b      	ldrb	r3, [r3, #2]
 8004a18:	4618      	mov	r0, r3
 8004a1a:	f000 f983 	bl	8004d24 <RTC_Bcd2ToByte>
 8004a1e:	4603      	mov	r3, r0
 8004a20:	461a      	mov	r2, r3
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	7bdb      	ldrb	r3, [r3, #15]
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	7b59      	ldrb	r1, [r3, #13]
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	7b9b      	ldrb	r3, [r3, #14]
 8004a34:	461a      	mov	r2, r3
 8004a36:	f000 f993 	bl	8004d60 <RTC_WeekDayNum>
 8004a3a:	4603      	mov	r3, r0
 8004a3c:	461a      	mov	r2, r3
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	7b1a      	ldrb	r2, [r3, #12]
 8004a46:	68bb      	ldr	r3, [r7, #8]
 8004a48:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8004a4a:	68f8      	ldr	r0, [r7, #12]
 8004a4c:	f000 f883 	bl	8004b56 <RTC_ReadTimeCounter>
 8004a50:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8004a52:	69fb      	ldr	r3, [r7, #28]
 8004a54:	4a26      	ldr	r2, [pc, #152]	; (8004af0 <HAL_RTC_SetDate+0x160>)
 8004a56:	fba2 2303 	umull	r2, r3, r2, r3
 8004a5a:	0adb      	lsrs	r3, r3, #11
 8004a5c:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 8004a5e:	697b      	ldr	r3, [r7, #20]
 8004a60:	2b18      	cmp	r3, #24
 8004a62:	d93a      	bls.n	8004ada <HAL_RTC_SetDate+0x14a>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 8004a64:	697b      	ldr	r3, [r7, #20]
 8004a66:	4a23      	ldr	r2, [pc, #140]	; (8004af4 <HAL_RTC_SetDate+0x164>)
 8004a68:	fba2 2303 	umull	r2, r3, r2, r3
 8004a6c:	091b      	lsrs	r3, r3, #4
 8004a6e:	4a22      	ldr	r2, [pc, #136]	; (8004af8 <HAL_RTC_SetDate+0x168>)
 8004a70:	fb02 f303 	mul.w	r3, r2, r3
 8004a74:	69fa      	ldr	r2, [r7, #28]
 8004a76:	1ad3      	subs	r3, r2, r3
 8004a78:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8004a7a:	69f9      	ldr	r1, [r7, #28]
 8004a7c:	68f8      	ldr	r0, [r7, #12]
 8004a7e:	f000 f89a 	bl	8004bb6 <RTC_WriteTimeCounter>
 8004a82:	4603      	mov	r3, r0
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d007      	beq.n	8004a98 <HAL_RTC_SetDate+0x108>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	2204      	movs	r2, #4
 8004a8c:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	2200      	movs	r2, #0
 8004a92:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 8004a94:	2301      	movs	r3, #1
 8004a96:	e027      	b.n	8004ae8 <HAL_RTC_SetDate+0x158>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8004a98:	68f8      	ldr	r0, [r7, #12]
 8004a9a:	f000 f8b3 	bl	8004c04 <RTC_ReadAlarmCounter>
 8004a9e:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8004aa0:	69bb      	ldr	r3, [r7, #24]
 8004aa2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004aa6:	d018      	beq.n	8004ada <HAL_RTC_SetDate+0x14a>
    {
      if (counter_alarm < counter_time)
 8004aa8:	69ba      	ldr	r2, [r7, #24]
 8004aaa:	69fb      	ldr	r3, [r7, #28]
 8004aac:	429a      	cmp	r2, r3
 8004aae:	d214      	bcs.n	8004ada <HAL_RTC_SetDate+0x14a>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8004ab0:	69bb      	ldr	r3, [r7, #24]
 8004ab2:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8004ab6:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8004aba:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8004abc:	69b9      	ldr	r1, [r7, #24]
 8004abe:	68f8      	ldr	r0, [r7, #12]
 8004ac0:	f000 f8b9 	bl	8004c36 <RTC_WriteAlarmCounter>
 8004ac4:	4603      	mov	r3, r0
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d007      	beq.n	8004ada <HAL_RTC_SetDate+0x14a>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	2204      	movs	r2, #4
 8004ace:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8004ad6:	2301      	movs	r3, #1
 8004ad8:	e006      	b.n	8004ae8 <HAL_RTC_SetDate+0x158>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	2201      	movs	r2, #1
 8004ade:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8004ae6:	2300      	movs	r3, #0
}
 8004ae8:	4618      	mov	r0, r3
 8004aea:	3720      	adds	r7, #32
 8004aec:	46bd      	mov	sp, r7
 8004aee:	bd80      	pop	{r7, pc}
 8004af0:	91a2b3c5 	.word	0x91a2b3c5
 8004af4:	aaaaaaab 	.word	0xaaaaaaab
 8004af8:	00015180 	.word	0x00015180

08004afc <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004afc:	b580      	push	{r7, lr}
 8004afe:	b084      	sub	sp, #16
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004b04:	2300      	movs	r3, #0
 8004b06:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d101      	bne.n	8004b12 <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 8004b0e:	2301      	movs	r3, #1
 8004b10:	e01d      	b.n	8004b4e <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	685a      	ldr	r2, [r3, #4]
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f022 0208 	bic.w	r2, r2, #8
 8004b20:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8004b22:	f7fe f84f 	bl	8002bc4 <HAL_GetTick>
 8004b26:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8004b28:	e009      	b.n	8004b3e <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8004b2a:	f7fe f84b 	bl	8002bc4 <HAL_GetTick>
 8004b2e:	4602      	mov	r2, r0
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	1ad3      	subs	r3, r2, r3
 8004b34:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004b38:	d901      	bls.n	8004b3e <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 8004b3a:	2303      	movs	r3, #3
 8004b3c:	e007      	b.n	8004b4e <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	685b      	ldr	r3, [r3, #4]
 8004b44:	f003 0308 	and.w	r3, r3, #8
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d0ee      	beq.n	8004b2a <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8004b4c:	2300      	movs	r3, #0
}
 8004b4e:	4618      	mov	r0, r3
 8004b50:	3710      	adds	r7, #16
 8004b52:	46bd      	mov	sp, r7
 8004b54:	bd80      	pop	{r7, pc}

08004b56 <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 8004b56:	b480      	push	{r7}
 8004b58:	b087      	sub	sp, #28
 8004b5a:	af00      	add	r7, sp, #0
 8004b5c:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 8004b5e:	2300      	movs	r3, #0
 8004b60:	827b      	strh	r3, [r7, #18]
 8004b62:	2300      	movs	r3, #0
 8004b64:	823b      	strh	r3, [r7, #16]
 8004b66:	2300      	movs	r3, #0
 8004b68:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	699b      	ldr	r3, [r3, #24]
 8004b74:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	69db      	ldr	r3, [r3, #28]
 8004b7c:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	699b      	ldr	r3, [r3, #24]
 8004b84:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 8004b86:	8a7a      	ldrh	r2, [r7, #18]
 8004b88:	8a3b      	ldrh	r3, [r7, #16]
 8004b8a:	429a      	cmp	r2, r3
 8004b8c:	d008      	beq.n	8004ba0 <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 8004b8e:	8a3b      	ldrh	r3, [r7, #16]
 8004b90:	041a      	lsls	r2, r3, #16
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	69db      	ldr	r3, [r3, #28]
 8004b98:	b29b      	uxth	r3, r3
 8004b9a:	4313      	orrs	r3, r2
 8004b9c:	617b      	str	r3, [r7, #20]
 8004b9e:	e004      	b.n	8004baa <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 8004ba0:	8a7b      	ldrh	r3, [r7, #18]
 8004ba2:	041a      	lsls	r2, r3, #16
 8004ba4:	89fb      	ldrh	r3, [r7, #14]
 8004ba6:	4313      	orrs	r3, r2
 8004ba8:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 8004baa:	697b      	ldr	r3, [r7, #20]
}
 8004bac:	4618      	mov	r0, r3
 8004bae:	371c      	adds	r7, #28
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	bc80      	pop	{r7}
 8004bb4:	4770      	bx	lr

08004bb6 <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 8004bb6:	b580      	push	{r7, lr}
 8004bb8:	b084      	sub	sp, #16
 8004bba:	af00      	add	r7, sp, #0
 8004bbc:	6078      	str	r0, [r7, #4]
 8004bbe:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8004bc4:	6878      	ldr	r0, [r7, #4]
 8004bc6:	f000 f85d 	bl	8004c84 <RTC_EnterInitMode>
 8004bca:	4603      	mov	r3, r0
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d002      	beq.n	8004bd6 <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 8004bd0:	2301      	movs	r3, #1
 8004bd2:	73fb      	strb	r3, [r7, #15]
 8004bd4:	e011      	b.n	8004bfa <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	683a      	ldr	r2, [r7, #0]
 8004bdc:	0c12      	lsrs	r2, r2, #16
 8004bde:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	683a      	ldr	r2, [r7, #0]
 8004be6:	b292      	uxth	r2, r2
 8004be8:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8004bea:	6878      	ldr	r0, [r7, #4]
 8004bec:	f000 f872 	bl	8004cd4 <RTC_ExitInitMode>
 8004bf0:	4603      	mov	r3, r0
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d001      	beq.n	8004bfa <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 8004bf6:	2301      	movs	r3, #1
 8004bf8:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8004bfa:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	3710      	adds	r7, #16
 8004c00:	46bd      	mov	sp, r7
 8004c02:	bd80      	pop	{r7, pc}

08004c04 <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 8004c04:	b480      	push	{r7}
 8004c06:	b085      	sub	sp, #20
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	81fb      	strh	r3, [r7, #14]
 8004c10:	2300      	movs	r3, #0
 8004c12:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	6a1b      	ldr	r3, [r3, #32]
 8004c1a:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c22:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 8004c24:	89fb      	ldrh	r3, [r7, #14]
 8004c26:	041a      	lsls	r2, r3, #16
 8004c28:	89bb      	ldrh	r3, [r7, #12]
 8004c2a:	4313      	orrs	r3, r2
}
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	3714      	adds	r7, #20
 8004c30:	46bd      	mov	sp, r7
 8004c32:	bc80      	pop	{r7}
 8004c34:	4770      	bx	lr

08004c36 <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 8004c36:	b580      	push	{r7, lr}
 8004c38:	b084      	sub	sp, #16
 8004c3a:	af00      	add	r7, sp, #0
 8004c3c:	6078      	str	r0, [r7, #4]
 8004c3e:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004c40:	2300      	movs	r3, #0
 8004c42:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8004c44:	6878      	ldr	r0, [r7, #4]
 8004c46:	f000 f81d 	bl	8004c84 <RTC_EnterInitMode>
 8004c4a:	4603      	mov	r3, r0
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d002      	beq.n	8004c56 <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 8004c50:	2301      	movs	r3, #1
 8004c52:	73fb      	strb	r3, [r7, #15]
 8004c54:	e011      	b.n	8004c7a <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	683a      	ldr	r2, [r7, #0]
 8004c5c:	0c12      	lsrs	r2, r2, #16
 8004c5e:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	683a      	ldr	r2, [r7, #0]
 8004c66:	b292      	uxth	r2, r2
 8004c68:	625a      	str	r2, [r3, #36]	; 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8004c6a:	6878      	ldr	r0, [r7, #4]
 8004c6c:	f000 f832 	bl	8004cd4 <RTC_ExitInitMode>
 8004c70:	4603      	mov	r3, r0
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d001      	beq.n	8004c7a <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 8004c76:	2301      	movs	r3, #1
 8004c78:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8004c7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	3710      	adds	r7, #16
 8004c80:	46bd      	mov	sp, r7
 8004c82:	bd80      	pop	{r7, pc}

08004c84 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004c84:	b580      	push	{r7, lr}
 8004c86:	b084      	sub	sp, #16
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004c8c:	2300      	movs	r3, #0
 8004c8e:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 8004c90:	f7fd ff98 	bl	8002bc4 <HAL_GetTick>
 8004c94:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8004c96:	e009      	b.n	8004cac <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8004c98:	f7fd ff94 	bl	8002bc4 <HAL_GetTick>
 8004c9c:	4602      	mov	r2, r0
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	1ad3      	subs	r3, r2, r3
 8004ca2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004ca6:	d901      	bls.n	8004cac <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 8004ca8:	2303      	movs	r3, #3
 8004caa:	e00f      	b.n	8004ccc <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	685b      	ldr	r3, [r3, #4]
 8004cb2:	f003 0320 	and.w	r3, r3, #32
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d0ee      	beq.n	8004c98 <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	685a      	ldr	r2, [r3, #4]
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f042 0210 	orr.w	r2, r2, #16
 8004cc8:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 8004cca:	2300      	movs	r3, #0
}
 8004ccc:	4618      	mov	r0, r3
 8004cce:	3710      	adds	r7, #16
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	bd80      	pop	{r7, pc}

08004cd4 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004cd4:	b580      	push	{r7, lr}
 8004cd6:	b084      	sub	sp, #16
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004cdc:	2300      	movs	r3, #0
 8004cde:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	685a      	ldr	r2, [r3, #4]
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f022 0210 	bic.w	r2, r2, #16
 8004cee:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8004cf0:	f7fd ff68 	bl	8002bc4 <HAL_GetTick>
 8004cf4:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8004cf6:	e009      	b.n	8004d0c <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8004cf8:	f7fd ff64 	bl	8002bc4 <HAL_GetTick>
 8004cfc:	4602      	mov	r2, r0
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	1ad3      	subs	r3, r2, r3
 8004d02:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004d06:	d901      	bls.n	8004d0c <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 8004d08:	2303      	movs	r3, #3
 8004d0a:	e007      	b.n	8004d1c <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	685b      	ldr	r3, [r3, #4]
 8004d12:	f003 0320 	and.w	r3, r3, #32
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d0ee      	beq.n	8004cf8 <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 8004d1a:	2300      	movs	r3, #0
}
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	3710      	adds	r7, #16
 8004d20:	46bd      	mov	sp, r7
 8004d22:	bd80      	pop	{r7, pc}

08004d24 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8004d24:	b480      	push	{r7}
 8004d26:	b085      	sub	sp, #20
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	4603      	mov	r3, r0
 8004d2c:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8004d2e:	2300      	movs	r3, #0
 8004d30:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 8004d32:	79fb      	ldrb	r3, [r7, #7]
 8004d34:	091b      	lsrs	r3, r3, #4
 8004d36:	b2db      	uxtb	r3, r3
 8004d38:	461a      	mov	r2, r3
 8004d3a:	4613      	mov	r3, r2
 8004d3c:	009b      	lsls	r3, r3, #2
 8004d3e:	4413      	add	r3, r2
 8004d40:	005b      	lsls	r3, r3, #1
 8004d42:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8004d44:	79fb      	ldrb	r3, [r7, #7]
 8004d46:	f003 030f 	and.w	r3, r3, #15
 8004d4a:	b2da      	uxtb	r2, r3
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	b2db      	uxtb	r3, r3
 8004d50:	4413      	add	r3, r2
 8004d52:	b2db      	uxtb	r3, r3
}
 8004d54:	4618      	mov	r0, r3
 8004d56:	3714      	adds	r7, #20
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	bc80      	pop	{r7}
 8004d5c:	4770      	bx	lr
	...

08004d60 <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 8004d60:	b480      	push	{r7}
 8004d62:	b085      	sub	sp, #20
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
 8004d68:	460b      	mov	r3, r1
 8004d6a:	70fb      	strb	r3, [r7, #3]
 8004d6c:	4613      	mov	r3, r2
 8004d6e:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 8004d70:	2300      	movs	r3, #0
 8004d72:	60bb      	str	r3, [r7, #8]
 8004d74:	2300      	movs	r3, #0
 8004d76:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8004d7e:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 8004d80:	78fb      	ldrb	r3, [r7, #3]
 8004d82:	2b02      	cmp	r3, #2
 8004d84:	d82d      	bhi.n	8004de2 <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 8004d86:	78fa      	ldrb	r2, [r7, #3]
 8004d88:	4613      	mov	r3, r2
 8004d8a:	005b      	lsls	r3, r3, #1
 8004d8c:	4413      	add	r3, r2
 8004d8e:	00db      	lsls	r3, r3, #3
 8004d90:	1a9b      	subs	r3, r3, r2
 8004d92:	4a2c      	ldr	r2, [pc, #176]	; (8004e44 <RTC_WeekDayNum+0xe4>)
 8004d94:	fba2 2303 	umull	r2, r3, r2, r3
 8004d98:	085a      	lsrs	r2, r3, #1
 8004d9a:	78bb      	ldrb	r3, [r7, #2]
 8004d9c:	441a      	add	r2, r3
 8004d9e:	68bb      	ldr	r3, [r7, #8]
 8004da0:	441a      	add	r2, r3
 8004da2:	68bb      	ldr	r3, [r7, #8]
 8004da4:	3b01      	subs	r3, #1
 8004da6:	089b      	lsrs	r3, r3, #2
 8004da8:	441a      	add	r2, r3
 8004daa:	68bb      	ldr	r3, [r7, #8]
 8004dac:	3b01      	subs	r3, #1
 8004dae:	4926      	ldr	r1, [pc, #152]	; (8004e48 <RTC_WeekDayNum+0xe8>)
 8004db0:	fba1 1303 	umull	r1, r3, r1, r3
 8004db4:	095b      	lsrs	r3, r3, #5
 8004db6:	1ad2      	subs	r2, r2, r3
 8004db8:	68bb      	ldr	r3, [r7, #8]
 8004dba:	3b01      	subs	r3, #1
 8004dbc:	4922      	ldr	r1, [pc, #136]	; (8004e48 <RTC_WeekDayNum+0xe8>)
 8004dbe:	fba1 1303 	umull	r1, r3, r1, r3
 8004dc2:	09db      	lsrs	r3, r3, #7
 8004dc4:	4413      	add	r3, r2
 8004dc6:	1d1a      	adds	r2, r3, #4
 8004dc8:	4b20      	ldr	r3, [pc, #128]	; (8004e4c <RTC_WeekDayNum+0xec>)
 8004dca:	fba3 1302 	umull	r1, r3, r3, r2
 8004dce:	1ad1      	subs	r1, r2, r3
 8004dd0:	0849      	lsrs	r1, r1, #1
 8004dd2:	440b      	add	r3, r1
 8004dd4:	0899      	lsrs	r1, r3, #2
 8004dd6:	460b      	mov	r3, r1
 8004dd8:	00db      	lsls	r3, r3, #3
 8004dda:	1a5b      	subs	r3, r3, r1
 8004ddc:	1ad3      	subs	r3, r2, r3
 8004dde:	60fb      	str	r3, [r7, #12]
 8004de0:	e029      	b.n	8004e36 <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 8004de2:	78fa      	ldrb	r2, [r7, #3]
 8004de4:	4613      	mov	r3, r2
 8004de6:	005b      	lsls	r3, r3, #1
 8004de8:	4413      	add	r3, r2
 8004dea:	00db      	lsls	r3, r3, #3
 8004dec:	1a9b      	subs	r3, r3, r2
 8004dee:	4a15      	ldr	r2, [pc, #84]	; (8004e44 <RTC_WeekDayNum+0xe4>)
 8004df0:	fba2 2303 	umull	r2, r3, r2, r3
 8004df4:	085a      	lsrs	r2, r3, #1
 8004df6:	78bb      	ldrb	r3, [r7, #2]
 8004df8:	441a      	add	r2, r3
 8004dfa:	68bb      	ldr	r3, [r7, #8]
 8004dfc:	441a      	add	r2, r3
 8004dfe:	68bb      	ldr	r3, [r7, #8]
 8004e00:	089b      	lsrs	r3, r3, #2
 8004e02:	441a      	add	r2, r3
 8004e04:	68bb      	ldr	r3, [r7, #8]
 8004e06:	4910      	ldr	r1, [pc, #64]	; (8004e48 <RTC_WeekDayNum+0xe8>)
 8004e08:	fba1 1303 	umull	r1, r3, r1, r3
 8004e0c:	095b      	lsrs	r3, r3, #5
 8004e0e:	1ad2      	subs	r2, r2, r3
 8004e10:	68bb      	ldr	r3, [r7, #8]
 8004e12:	490d      	ldr	r1, [pc, #52]	; (8004e48 <RTC_WeekDayNum+0xe8>)
 8004e14:	fba1 1303 	umull	r1, r3, r1, r3
 8004e18:	09db      	lsrs	r3, r3, #7
 8004e1a:	4413      	add	r3, r2
 8004e1c:	1c9a      	adds	r2, r3, #2
 8004e1e:	4b0b      	ldr	r3, [pc, #44]	; (8004e4c <RTC_WeekDayNum+0xec>)
 8004e20:	fba3 1302 	umull	r1, r3, r3, r2
 8004e24:	1ad1      	subs	r1, r2, r3
 8004e26:	0849      	lsrs	r1, r1, #1
 8004e28:	440b      	add	r3, r1
 8004e2a:	0899      	lsrs	r1, r3, #2
 8004e2c:	460b      	mov	r3, r1
 8004e2e:	00db      	lsls	r3, r3, #3
 8004e30:	1a5b      	subs	r3, r3, r1
 8004e32:	1ad3      	subs	r3, r2, r3
 8004e34:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	b2db      	uxtb	r3, r3
}
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	3714      	adds	r7, #20
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	bc80      	pop	{r7}
 8004e42:	4770      	bx	lr
 8004e44:	38e38e39 	.word	0x38e38e39
 8004e48:	51eb851f 	.word	0x51eb851f
 8004e4c:	24924925 	.word	0x24924925

08004e50 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FSMC_NORSRAM_TimingTypeDef *Timing,
                                FSMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 8004e50:	b580      	push	{r7, lr}
 8004e52:	b084      	sub	sp, #16
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	60f8      	str	r0, [r7, #12]
 8004e58:	60b9      	str	r1, [r7, #8]
 8004e5a:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if ((hsram == NULL) || (hsram->Init.BurstAccessMode == FSMC_BURST_ACCESS_MODE_ENABLE))
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d004      	beq.n	8004e6c <HAL_SRAM_Init+0x1c>
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	699b      	ldr	r3, [r3, #24]
 8004e66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e6a:	d101      	bne.n	8004e70 <HAL_SRAM_Init+0x20>
  {
    return HAL_ERROR;
 8004e6c:	2301      	movs	r3, #1
 8004e6e:	e038      	b.n	8004ee2 <HAL_SRAM_Init+0x92>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004e76:	b2db      	uxtb	r3, r3
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d106      	bne.n	8004e8a <HAL_SRAM_Init+0x3a>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	2200      	movs	r2, #0
 8004e80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8004e84:	68f8      	ldr	r0, [r7, #12]
 8004e86:	f7fd fad9 	bl	800243c <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FSMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	681a      	ldr	r2, [r3, #0]
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	3308      	adds	r3, #8
 8004e92:	4619      	mov	r1, r3
 8004e94:	4610      	mov	r0, r2
 8004e96:	f000 f9b5 	bl	8005204 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FSMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	6818      	ldr	r0, [r3, #0]
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	689b      	ldr	r3, [r3, #8]
 8004ea2:	461a      	mov	r2, r3
 8004ea4:	68b9      	ldr	r1, [r7, #8]
 8004ea6:	f000 fa17 	bl	80052d8 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FSMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	6858      	ldr	r0, [r3, #4]
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	689a      	ldr	r2, [r3, #8]
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eb6:	6879      	ldr	r1, [r7, #4]
 8004eb8:	f000 fa42 	bl	8005340 <FSMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FSMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	68fa      	ldr	r2, [r7, #12]
 8004ec2:	6892      	ldr	r2, [r2, #8]
 8004ec4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	68fa      	ldr	r2, [r7, #12]
 8004ece:	6892      	ldr	r2, [r2, #8]
 8004ed0:	f041 0101 	orr.w	r1, r1, #1
 8004ed4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	2201      	movs	r2, #1
 8004edc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8004ee0:	2300      	movs	r3, #0
}
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	3710      	adds	r7, #16
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	bd80      	pop	{r7, pc}

08004eea <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004eea:	b580      	push	{r7, lr}
 8004eec:	b082      	sub	sp, #8
 8004eee:	af00      	add	r7, sp, #0
 8004ef0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d101      	bne.n	8004efc <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004ef8:	2301      	movs	r3, #1
 8004efa:	e041      	b.n	8004f80 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f02:	b2db      	uxtb	r3, r3
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d106      	bne.n	8004f16 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004f10:	6878      	ldr	r0, [r7, #4]
 8004f12:	f7fd fa31 	bl	8002378 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	2202      	movs	r2, #2
 8004f1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681a      	ldr	r2, [r3, #0]
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	3304      	adds	r3, #4
 8004f26:	4619      	mov	r1, r3
 8004f28:	4610      	mov	r0, r2
 8004f2a:	f000 f885 	bl	8005038 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	2201      	movs	r2, #1
 8004f32:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	2201      	movs	r2, #1
 8004f3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2201      	movs	r2, #1
 8004f42:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	2201      	movs	r2, #1
 8004f4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	2201      	movs	r2, #1
 8004f52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	2201      	movs	r2, #1
 8004f5a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2201      	movs	r2, #1
 8004f62:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	2201      	movs	r2, #1
 8004f6a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	2201      	movs	r2, #1
 8004f72:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	2201      	movs	r2, #1
 8004f7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004f7e:	2300      	movs	r3, #0
}
 8004f80:	4618      	mov	r0, r3
 8004f82:	3708      	adds	r7, #8
 8004f84:	46bd      	mov	sp, r7
 8004f86:	bd80      	pop	{r7, pc}

08004f88 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004f88:	b480      	push	{r7}
 8004f8a:	b085      	sub	sp, #20
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f96:	b2db      	uxtb	r3, r3
 8004f98:	2b01      	cmp	r3, #1
 8004f9a:	d001      	beq.n	8004fa0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004f9c:	2301      	movs	r3, #1
 8004f9e:	e03c      	b.n	800501a <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2202      	movs	r2, #2
 8004fa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	4a1d      	ldr	r2, [pc, #116]	; (8005024 <HAL_TIM_Base_Start+0x9c>)
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d018      	beq.n	8004fe4 <HAL_TIM_Base_Start+0x5c>
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	4a1c      	ldr	r2, [pc, #112]	; (8005028 <HAL_TIM_Base_Start+0xa0>)
 8004fb8:	4293      	cmp	r3, r2
 8004fba:	d013      	beq.n	8004fe4 <HAL_TIM_Base_Start+0x5c>
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fc4:	d00e      	beq.n	8004fe4 <HAL_TIM_Base_Start+0x5c>
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	4a18      	ldr	r2, [pc, #96]	; (800502c <HAL_TIM_Base_Start+0xa4>)
 8004fcc:	4293      	cmp	r3, r2
 8004fce:	d009      	beq.n	8004fe4 <HAL_TIM_Base_Start+0x5c>
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	4a16      	ldr	r2, [pc, #88]	; (8005030 <HAL_TIM_Base_Start+0xa8>)
 8004fd6:	4293      	cmp	r3, r2
 8004fd8:	d004      	beq.n	8004fe4 <HAL_TIM_Base_Start+0x5c>
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	4a15      	ldr	r2, [pc, #84]	; (8005034 <HAL_TIM_Base_Start+0xac>)
 8004fe0:	4293      	cmp	r3, r2
 8004fe2:	d111      	bne.n	8005008 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	689b      	ldr	r3, [r3, #8]
 8004fea:	f003 0307 	and.w	r3, r3, #7
 8004fee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	2b06      	cmp	r3, #6
 8004ff4:	d010      	beq.n	8005018 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	681a      	ldr	r2, [r3, #0]
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f042 0201 	orr.w	r2, r2, #1
 8005004:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005006:	e007      	b.n	8005018 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	681a      	ldr	r2, [r3, #0]
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f042 0201 	orr.w	r2, r2, #1
 8005016:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005018:	2300      	movs	r3, #0
}
 800501a:	4618      	mov	r0, r3
 800501c:	3714      	adds	r7, #20
 800501e:	46bd      	mov	sp, r7
 8005020:	bc80      	pop	{r7}
 8005022:	4770      	bx	lr
 8005024:	40012c00 	.word	0x40012c00
 8005028:	40013400 	.word	0x40013400
 800502c:	40000400 	.word	0x40000400
 8005030:	40000800 	.word	0x40000800
 8005034:	40000c00 	.word	0x40000c00

08005038 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005038:	b480      	push	{r7}
 800503a:	b085      	sub	sp, #20
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
 8005040:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	4a33      	ldr	r2, [pc, #204]	; (8005118 <TIM_Base_SetConfig+0xe0>)
 800504c:	4293      	cmp	r3, r2
 800504e:	d013      	beq.n	8005078 <TIM_Base_SetConfig+0x40>
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	4a32      	ldr	r2, [pc, #200]	; (800511c <TIM_Base_SetConfig+0xe4>)
 8005054:	4293      	cmp	r3, r2
 8005056:	d00f      	beq.n	8005078 <TIM_Base_SetConfig+0x40>
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800505e:	d00b      	beq.n	8005078 <TIM_Base_SetConfig+0x40>
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	4a2f      	ldr	r2, [pc, #188]	; (8005120 <TIM_Base_SetConfig+0xe8>)
 8005064:	4293      	cmp	r3, r2
 8005066:	d007      	beq.n	8005078 <TIM_Base_SetConfig+0x40>
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	4a2e      	ldr	r2, [pc, #184]	; (8005124 <TIM_Base_SetConfig+0xec>)
 800506c:	4293      	cmp	r3, r2
 800506e:	d003      	beq.n	8005078 <TIM_Base_SetConfig+0x40>
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	4a2d      	ldr	r2, [pc, #180]	; (8005128 <TIM_Base_SetConfig+0xf0>)
 8005074:	4293      	cmp	r3, r2
 8005076:	d108      	bne.n	800508a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800507e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	685b      	ldr	r3, [r3, #4]
 8005084:	68fa      	ldr	r2, [r7, #12]
 8005086:	4313      	orrs	r3, r2
 8005088:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	4a22      	ldr	r2, [pc, #136]	; (8005118 <TIM_Base_SetConfig+0xe0>)
 800508e:	4293      	cmp	r3, r2
 8005090:	d013      	beq.n	80050ba <TIM_Base_SetConfig+0x82>
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	4a21      	ldr	r2, [pc, #132]	; (800511c <TIM_Base_SetConfig+0xe4>)
 8005096:	4293      	cmp	r3, r2
 8005098:	d00f      	beq.n	80050ba <TIM_Base_SetConfig+0x82>
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050a0:	d00b      	beq.n	80050ba <TIM_Base_SetConfig+0x82>
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	4a1e      	ldr	r2, [pc, #120]	; (8005120 <TIM_Base_SetConfig+0xe8>)
 80050a6:	4293      	cmp	r3, r2
 80050a8:	d007      	beq.n	80050ba <TIM_Base_SetConfig+0x82>
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	4a1d      	ldr	r2, [pc, #116]	; (8005124 <TIM_Base_SetConfig+0xec>)
 80050ae:	4293      	cmp	r3, r2
 80050b0:	d003      	beq.n	80050ba <TIM_Base_SetConfig+0x82>
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	4a1c      	ldr	r2, [pc, #112]	; (8005128 <TIM_Base_SetConfig+0xf0>)
 80050b6:	4293      	cmp	r3, r2
 80050b8:	d108      	bne.n	80050cc <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	68db      	ldr	r3, [r3, #12]
 80050c6:	68fa      	ldr	r2, [r7, #12]
 80050c8:	4313      	orrs	r3, r2
 80050ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80050d2:	683b      	ldr	r3, [r7, #0]
 80050d4:	695b      	ldr	r3, [r3, #20]
 80050d6:	4313      	orrs	r3, r2
 80050d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	68fa      	ldr	r2, [r7, #12]
 80050de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	689a      	ldr	r2, [r3, #8]
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	681a      	ldr	r2, [r3, #0]
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	4a09      	ldr	r2, [pc, #36]	; (8005118 <TIM_Base_SetConfig+0xe0>)
 80050f4:	4293      	cmp	r3, r2
 80050f6:	d003      	beq.n	8005100 <TIM_Base_SetConfig+0xc8>
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	4a08      	ldr	r2, [pc, #32]	; (800511c <TIM_Base_SetConfig+0xe4>)
 80050fc:	4293      	cmp	r3, r2
 80050fe:	d103      	bne.n	8005108 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	691a      	ldr	r2, [r3, #16]
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2201      	movs	r2, #1
 800510c:	615a      	str	r2, [r3, #20]
}
 800510e:	bf00      	nop
 8005110:	3714      	adds	r7, #20
 8005112:	46bd      	mov	sp, r7
 8005114:	bc80      	pop	{r7}
 8005116:	4770      	bx	lr
 8005118:	40012c00 	.word	0x40012c00
 800511c:	40013400 	.word	0x40013400
 8005120:	40000400 	.word	0x40000400
 8005124:	40000800 	.word	0x40000800
 8005128:	40000c00 	.word	0x40000c00

0800512c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800512c:	b480      	push	{r7}
 800512e:	b085      	sub	sp, #20
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
 8005134:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800513c:	2b01      	cmp	r3, #1
 800513e:	d101      	bne.n	8005144 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005140:	2302      	movs	r3, #2
 8005142:	e050      	b.n	80051e6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2201      	movs	r2, #1
 8005148:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2202      	movs	r2, #2
 8005150:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	685b      	ldr	r3, [r3, #4]
 800515a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	689b      	ldr	r3, [r3, #8]
 8005162:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800516a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800516c:	683b      	ldr	r3, [r7, #0]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	68fa      	ldr	r2, [r7, #12]
 8005172:	4313      	orrs	r3, r2
 8005174:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	68fa      	ldr	r2, [r7, #12]
 800517c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	4a1b      	ldr	r2, [pc, #108]	; (80051f0 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8005184:	4293      	cmp	r3, r2
 8005186:	d018      	beq.n	80051ba <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	4a19      	ldr	r2, [pc, #100]	; (80051f4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800518e:	4293      	cmp	r3, r2
 8005190:	d013      	beq.n	80051ba <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800519a:	d00e      	beq.n	80051ba <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	4a15      	ldr	r2, [pc, #84]	; (80051f8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d009      	beq.n	80051ba <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	4a14      	ldr	r2, [pc, #80]	; (80051fc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80051ac:	4293      	cmp	r3, r2
 80051ae:	d004      	beq.n	80051ba <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	4a12      	ldr	r2, [pc, #72]	; (8005200 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80051b6:	4293      	cmp	r3, r2
 80051b8:	d10c      	bne.n	80051d4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80051ba:	68bb      	ldr	r3, [r7, #8]
 80051bc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80051c0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	685b      	ldr	r3, [r3, #4]
 80051c6:	68ba      	ldr	r2, [r7, #8]
 80051c8:	4313      	orrs	r3, r2
 80051ca:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	68ba      	ldr	r2, [r7, #8]
 80051d2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2201      	movs	r2, #1
 80051d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2200      	movs	r2, #0
 80051e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80051e4:	2300      	movs	r3, #0
}
 80051e6:	4618      	mov	r0, r3
 80051e8:	3714      	adds	r7, #20
 80051ea:	46bd      	mov	sp, r7
 80051ec:	bc80      	pop	{r7}
 80051ee:	4770      	bx	lr
 80051f0:	40012c00 	.word	0x40012c00
 80051f4:	40013400 	.word	0x40013400
 80051f8:	40000400 	.word	0x40000400
 80051fc:	40000800 	.word	0x40000800
 8005200:	40000c00 	.word	0x40000c00

08005204 <FSMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device,
                                    FSMC_NORSRAM_InitTypeDef *Init)
{
 8005204:	b480      	push	{r7}
 8005206:	b087      	sub	sp, #28
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]
 800520c:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_ASYNWAIT(Init->AsynchronousWait));
  assert_param(IS_FSMC_WRITE_BURST(Init->WriteBurst));
  assert_param(IS_FSMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 800520e:	683b      	ldr	r3, [r7, #0]
 8005210:	681a      	ldr	r2, [r3, #0]
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005218:	683a      	ldr	r2, [r7, #0]
 800521a:	6812      	ldr	r2, [r2, #0]
 800521c:	f023 0101 	bic.w	r1, r3, #1
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8005226:	683b      	ldr	r3, [r7, #0]
 8005228:	689b      	ldr	r3, [r3, #8]
 800522a:	2b08      	cmp	r3, #8
 800522c:	d102      	bne.n	8005234 <FSMC_NORSRAM_Init+0x30>
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 800522e:	2340      	movs	r3, #64	; 0x40
 8005230:	617b      	str	r3, [r7, #20]
 8005232:	e001      	b.n	8005238 <FSMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_DISABLE;
 8005234:	2300      	movs	r3, #0
 8005236:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 8005238:	683b      	ldr	r3, [r7, #0]
 800523a:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 800523c:	697b      	ldr	r3, [r7, #20]
 800523e:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 8005240:	683b      	ldr	r3, [r7, #0]
 8005242:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 8005244:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 800524a:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 8005250:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 8005252:	683b      	ldr	r3, [r7, #0]
 8005254:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 8005256:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalPolarity      | \
 800525c:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 800525e:	683b      	ldr	r3, [r7, #0]
 8005260:	6a1b      	ldr	r3, [r3, #32]
              Init->WaitSignalActive        | \
 8005262:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 8005264:	683b      	ldr	r3, [r7, #0]
 8005266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WriteOperation          | \
 8005268:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 800526a:	683b      	ldr	r3, [r7, #0]
 800526c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->WaitSignal              | \
 800526e:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 8005270:	683b      	ldr	r3, [r7, #0]
 8005272:	6adb      	ldr	r3, [r3, #44]	; 0x2c
              Init->ExtendedMode            | \
 8005274:	431a      	orrs	r2, r3
              Init->WriteBurst);
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  btcr_reg = (flashaccess                   | \
 800527a:	4313      	orrs	r3, r2
 800527c:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->WrapMode;
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	699b      	ldr	r3, [r3, #24]
 8005282:	693a      	ldr	r2, [r7, #16]
 8005284:	4313      	orrs	r3, r2
 8005286:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->PageSize;
 8005288:	683b      	ldr	r3, [r7, #0]
 800528a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800528c:	693a      	ldr	r2, [r7, #16]
 800528e:	4313      	orrs	r3, r2
 8005290:	613b      	str	r3, [r7, #16]

  mask = (FSMC_BCRx_MBKEN                |
 8005292:	4b10      	ldr	r3, [pc, #64]	; (80052d4 <FSMC_NORSRAM_Init+0xd0>)
 8005294:	60fb      	str	r3, [r7, #12]
          FSMC_BCRx_WAITEN               |
          FSMC_BCRx_EXTMOD               |
          FSMC_BCRx_ASYNCWAIT            |
          FSMC_BCRx_CBURSTRW);

  mask |= FSMC_BCRx_WRAPMOD;
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800529c:	60fb      	str	r3, [r7, #12]
  mask |= 0x00070000U; /* CPSIZE to be defined in CMSIS file */
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 80052a4:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 80052a6:	683b      	ldr	r3, [r7, #0]
 80052a8:	681a      	ldr	r2, [r3, #0]
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	43db      	mvns	r3, r3
 80052b4:	ea02 0103 	and.w	r1, r2, r3
 80052b8:	683b      	ldr	r3, [r7, #0]
 80052ba:	681a      	ldr	r2, [r3, #0]
 80052bc:	693b      	ldr	r3, [r7, #16]
 80052be:	4319      	orrs	r1, r3
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]


  return HAL_OK;
 80052c6:	2300      	movs	r3, #0
}
 80052c8:	4618      	mov	r0, r3
 80052ca:	371c      	adds	r7, #28
 80052cc:	46bd      	mov	sp, r7
 80052ce:	bc80      	pop	{r7}
 80052d0:	4770      	bx	lr
 80052d2:	bf00      	nop
 80052d4:	0008fb7f 	.word	0x0008fb7f

080052d8 <FSMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device,
                                          FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80052d8:	b480      	push	{r7}
 80052da:	b085      	sub	sp, #20
 80052dc:	af00      	add	r7, sp, #0
 80052de:	60f8      	str	r0, [r7, #12]
 80052e0:	60b9      	str	r1, [r7, #8]
 80052e2:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	1c5a      	adds	r2, r3, #1
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80052ee:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 80052f2:	68bb      	ldr	r3, [r7, #8]
 80052f4:	681a      	ldr	r2, [r3, #0]
 80052f6:	68bb      	ldr	r3, [r7, #8]
 80052f8:	685b      	ldr	r3, [r3, #4]
 80052fa:	011b      	lsls	r3, r3, #4
 80052fc:	431a      	orrs	r2, r3
 80052fe:	68bb      	ldr	r3, [r7, #8]
 8005300:	689b      	ldr	r3, [r3, #8]
 8005302:	021b      	lsls	r3, r3, #8
 8005304:	431a      	orrs	r2, r3
 8005306:	68bb      	ldr	r3, [r7, #8]
 8005308:	68db      	ldr	r3, [r3, #12]
 800530a:	041b      	lsls	r3, r3, #16
 800530c:	431a      	orrs	r2, r3
 800530e:	68bb      	ldr	r3, [r7, #8]
 8005310:	691b      	ldr	r3, [r3, #16]
 8005312:	3b01      	subs	r3, #1
 8005314:	051b      	lsls	r3, r3, #20
 8005316:	431a      	orrs	r2, r3
 8005318:	68bb      	ldr	r3, [r7, #8]
 800531a:	695b      	ldr	r3, [r3, #20]
 800531c:	3b02      	subs	r3, #2
 800531e:	061b      	lsls	r3, r3, #24
 8005320:	431a      	orrs	r2, r3
 8005322:	68bb      	ldr	r3, [r7, #8]
 8005324:	699b      	ldr	r3, [r3, #24]
 8005326:	4313      	orrs	r3, r2
 8005328:	687a      	ldr	r2, [r7, #4]
 800532a:	3201      	adds	r2, #1
 800532c:	4319      	orrs	r1, r3
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                       ((Timing->BusTurnAroundDuration)  << FSMC_BTRx_BUSTURN_Pos) |
                                                       (((Timing->CLKDivision) - 1U)     << FSMC_BTRx_CLKDIV_Pos)  |
                                                       (((Timing->DataLatency) - 2U)     << FSMC_BTRx_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));

  return HAL_OK;
 8005334:	2300      	movs	r3, #0
}
 8005336:	4618      	mov	r0, r3
 8005338:	3714      	adds	r7, #20
 800533a:	46bd      	mov	sp, r7
 800533c:	bc80      	pop	{r7}
 800533e:	4770      	bx	lr

08005340 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 8005340:	b480      	push	{r7}
 8005342:	b085      	sub	sp, #20
 8005344:	af00      	add	r7, sp, #0
 8005346:	60f8      	str	r0, [r7, #12]
 8005348:	60b9      	str	r1, [r7, #8]
 800534a:	607a      	str	r2, [r7, #4]
 800534c:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 800534e:	683b      	ldr	r3, [r7, #0]
 8005350:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005354:	d11d      	bne.n	8005392 <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
#if defined(FSMC_BWTRx_BUSTURN)
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	687a      	ldr	r2, [r7, #4]
 800535a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800535e:	4b13      	ldr	r3, [pc, #76]	; (80053ac <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 8005360:	4013      	ands	r3, r2
 8005362:	68ba      	ldr	r2, [r7, #8]
 8005364:	6811      	ldr	r1, [r2, #0]
 8005366:	68ba      	ldr	r2, [r7, #8]
 8005368:	6852      	ldr	r2, [r2, #4]
 800536a:	0112      	lsls	r2, r2, #4
 800536c:	4311      	orrs	r1, r2
 800536e:	68ba      	ldr	r2, [r7, #8]
 8005370:	6892      	ldr	r2, [r2, #8]
 8005372:	0212      	lsls	r2, r2, #8
 8005374:	4311      	orrs	r1, r2
 8005376:	68ba      	ldr	r2, [r7, #8]
 8005378:	6992      	ldr	r2, [r2, #24]
 800537a:	4311      	orrs	r1, r2
 800537c:	68ba      	ldr	r2, [r7, #8]
 800537e:	68d2      	ldr	r2, [r2, #12]
 8005380:	0412      	lsls	r2, r2, #16
 8005382:	430a      	orrs	r2, r1
 8005384:	ea43 0102 	orr.w	r1, r3, r2
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	687a      	ldr	r2, [r7, #4]
 800538c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8005390:	e005      	b.n	800539e <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     (((Timing->DataLatency) - 2U)     << FSMC_BWTRx_DATLAT_Pos)));
#endif /* FSMC_BWTRx_BUSTURN */
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	687a      	ldr	r2, [r7, #4]
 8005396:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800539a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 800539e:	2300      	movs	r3, #0
}
 80053a0:	4618      	mov	r0, r3
 80053a2:	3714      	adds	r7, #20
 80053a4:	46bd      	mov	sp, r7
 80053a6:	bc80      	pop	{r7}
 80053a8:	4770      	bx	lr
 80053aa:	bf00      	nop
 80053ac:	cff00000 	.word	0xcff00000

080053b0 <__errno>:
 80053b0:	4b01      	ldr	r3, [pc, #4]	; (80053b8 <__errno+0x8>)
 80053b2:	6818      	ldr	r0, [r3, #0]
 80053b4:	4770      	bx	lr
 80053b6:	bf00      	nop
 80053b8:	20000040 	.word	0x20000040

080053bc <__libc_init_array>:
 80053bc:	b570      	push	{r4, r5, r6, lr}
 80053be:	2600      	movs	r6, #0
 80053c0:	4d0c      	ldr	r5, [pc, #48]	; (80053f4 <__libc_init_array+0x38>)
 80053c2:	4c0d      	ldr	r4, [pc, #52]	; (80053f8 <__libc_init_array+0x3c>)
 80053c4:	1b64      	subs	r4, r4, r5
 80053c6:	10a4      	asrs	r4, r4, #2
 80053c8:	42a6      	cmp	r6, r4
 80053ca:	d109      	bne.n	80053e0 <__libc_init_array+0x24>
 80053cc:	f000 fc9c 	bl	8005d08 <_init>
 80053d0:	2600      	movs	r6, #0
 80053d2:	4d0a      	ldr	r5, [pc, #40]	; (80053fc <__libc_init_array+0x40>)
 80053d4:	4c0a      	ldr	r4, [pc, #40]	; (8005400 <__libc_init_array+0x44>)
 80053d6:	1b64      	subs	r4, r4, r5
 80053d8:	10a4      	asrs	r4, r4, #2
 80053da:	42a6      	cmp	r6, r4
 80053dc:	d105      	bne.n	80053ea <__libc_init_array+0x2e>
 80053de:	bd70      	pop	{r4, r5, r6, pc}
 80053e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80053e4:	4798      	blx	r3
 80053e6:	3601      	adds	r6, #1
 80053e8:	e7ee      	b.n	80053c8 <__libc_init_array+0xc>
 80053ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80053ee:	4798      	blx	r3
 80053f0:	3601      	adds	r6, #1
 80053f2:	e7f2      	b.n	80053da <__libc_init_array+0x1e>
 80053f4:	080069e0 	.word	0x080069e0
 80053f8:	080069e0 	.word	0x080069e0
 80053fc:	080069e0 	.word	0x080069e0
 8005400:	080069e4 	.word	0x080069e4

08005404 <memset>:
 8005404:	4603      	mov	r3, r0
 8005406:	4402      	add	r2, r0
 8005408:	4293      	cmp	r3, r2
 800540a:	d100      	bne.n	800540e <memset+0xa>
 800540c:	4770      	bx	lr
 800540e:	f803 1b01 	strb.w	r1, [r3], #1
 8005412:	e7f9      	b.n	8005408 <memset+0x4>

08005414 <siprintf>:
 8005414:	b40e      	push	{r1, r2, r3}
 8005416:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800541a:	b500      	push	{lr}
 800541c:	b09c      	sub	sp, #112	; 0x70
 800541e:	ab1d      	add	r3, sp, #116	; 0x74
 8005420:	9002      	str	r0, [sp, #8]
 8005422:	9006      	str	r0, [sp, #24]
 8005424:	9107      	str	r1, [sp, #28]
 8005426:	9104      	str	r1, [sp, #16]
 8005428:	4808      	ldr	r0, [pc, #32]	; (800544c <siprintf+0x38>)
 800542a:	4909      	ldr	r1, [pc, #36]	; (8005450 <siprintf+0x3c>)
 800542c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005430:	9105      	str	r1, [sp, #20]
 8005432:	6800      	ldr	r0, [r0, #0]
 8005434:	a902      	add	r1, sp, #8
 8005436:	9301      	str	r3, [sp, #4]
 8005438:	f000 f868 	bl	800550c <_svfiprintf_r>
 800543c:	2200      	movs	r2, #0
 800543e:	9b02      	ldr	r3, [sp, #8]
 8005440:	701a      	strb	r2, [r3, #0]
 8005442:	b01c      	add	sp, #112	; 0x70
 8005444:	f85d eb04 	ldr.w	lr, [sp], #4
 8005448:	b003      	add	sp, #12
 800544a:	4770      	bx	lr
 800544c:	20000040 	.word	0x20000040
 8005450:	ffff0208 	.word	0xffff0208

08005454 <__ssputs_r>:
 8005454:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005458:	688e      	ldr	r6, [r1, #8]
 800545a:	4682      	mov	sl, r0
 800545c:	429e      	cmp	r6, r3
 800545e:	460c      	mov	r4, r1
 8005460:	4690      	mov	r8, r2
 8005462:	461f      	mov	r7, r3
 8005464:	d838      	bhi.n	80054d8 <__ssputs_r+0x84>
 8005466:	898a      	ldrh	r2, [r1, #12]
 8005468:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800546c:	d032      	beq.n	80054d4 <__ssputs_r+0x80>
 800546e:	6825      	ldr	r5, [r4, #0]
 8005470:	6909      	ldr	r1, [r1, #16]
 8005472:	3301      	adds	r3, #1
 8005474:	eba5 0901 	sub.w	r9, r5, r1
 8005478:	6965      	ldr	r5, [r4, #20]
 800547a:	444b      	add	r3, r9
 800547c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005480:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005484:	106d      	asrs	r5, r5, #1
 8005486:	429d      	cmp	r5, r3
 8005488:	bf38      	it	cc
 800548a:	461d      	movcc	r5, r3
 800548c:	0553      	lsls	r3, r2, #21
 800548e:	d531      	bpl.n	80054f4 <__ssputs_r+0xa0>
 8005490:	4629      	mov	r1, r5
 8005492:	f000 fb6f 	bl	8005b74 <_malloc_r>
 8005496:	4606      	mov	r6, r0
 8005498:	b950      	cbnz	r0, 80054b0 <__ssputs_r+0x5c>
 800549a:	230c      	movs	r3, #12
 800549c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80054a0:	f8ca 3000 	str.w	r3, [sl]
 80054a4:	89a3      	ldrh	r3, [r4, #12]
 80054a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80054aa:	81a3      	strh	r3, [r4, #12]
 80054ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80054b0:	464a      	mov	r2, r9
 80054b2:	6921      	ldr	r1, [r4, #16]
 80054b4:	f000 face 	bl	8005a54 <memcpy>
 80054b8:	89a3      	ldrh	r3, [r4, #12]
 80054ba:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80054be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80054c2:	81a3      	strh	r3, [r4, #12]
 80054c4:	6126      	str	r6, [r4, #16]
 80054c6:	444e      	add	r6, r9
 80054c8:	6026      	str	r6, [r4, #0]
 80054ca:	463e      	mov	r6, r7
 80054cc:	6165      	str	r5, [r4, #20]
 80054ce:	eba5 0509 	sub.w	r5, r5, r9
 80054d2:	60a5      	str	r5, [r4, #8]
 80054d4:	42be      	cmp	r6, r7
 80054d6:	d900      	bls.n	80054da <__ssputs_r+0x86>
 80054d8:	463e      	mov	r6, r7
 80054da:	4632      	mov	r2, r6
 80054dc:	4641      	mov	r1, r8
 80054de:	6820      	ldr	r0, [r4, #0]
 80054e0:	f000 fac6 	bl	8005a70 <memmove>
 80054e4:	68a3      	ldr	r3, [r4, #8]
 80054e6:	2000      	movs	r0, #0
 80054e8:	1b9b      	subs	r3, r3, r6
 80054ea:	60a3      	str	r3, [r4, #8]
 80054ec:	6823      	ldr	r3, [r4, #0]
 80054ee:	4433      	add	r3, r6
 80054f0:	6023      	str	r3, [r4, #0]
 80054f2:	e7db      	b.n	80054ac <__ssputs_r+0x58>
 80054f4:	462a      	mov	r2, r5
 80054f6:	f000 fbb1 	bl	8005c5c <_realloc_r>
 80054fa:	4606      	mov	r6, r0
 80054fc:	2800      	cmp	r0, #0
 80054fe:	d1e1      	bne.n	80054c4 <__ssputs_r+0x70>
 8005500:	4650      	mov	r0, sl
 8005502:	6921      	ldr	r1, [r4, #16]
 8005504:	f000 face 	bl	8005aa4 <_free_r>
 8005508:	e7c7      	b.n	800549a <__ssputs_r+0x46>
	...

0800550c <_svfiprintf_r>:
 800550c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005510:	4698      	mov	r8, r3
 8005512:	898b      	ldrh	r3, [r1, #12]
 8005514:	4607      	mov	r7, r0
 8005516:	061b      	lsls	r3, r3, #24
 8005518:	460d      	mov	r5, r1
 800551a:	4614      	mov	r4, r2
 800551c:	b09d      	sub	sp, #116	; 0x74
 800551e:	d50e      	bpl.n	800553e <_svfiprintf_r+0x32>
 8005520:	690b      	ldr	r3, [r1, #16]
 8005522:	b963      	cbnz	r3, 800553e <_svfiprintf_r+0x32>
 8005524:	2140      	movs	r1, #64	; 0x40
 8005526:	f000 fb25 	bl	8005b74 <_malloc_r>
 800552a:	6028      	str	r0, [r5, #0]
 800552c:	6128      	str	r0, [r5, #16]
 800552e:	b920      	cbnz	r0, 800553a <_svfiprintf_r+0x2e>
 8005530:	230c      	movs	r3, #12
 8005532:	603b      	str	r3, [r7, #0]
 8005534:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005538:	e0d1      	b.n	80056de <_svfiprintf_r+0x1d2>
 800553a:	2340      	movs	r3, #64	; 0x40
 800553c:	616b      	str	r3, [r5, #20]
 800553e:	2300      	movs	r3, #0
 8005540:	9309      	str	r3, [sp, #36]	; 0x24
 8005542:	2320      	movs	r3, #32
 8005544:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005548:	2330      	movs	r3, #48	; 0x30
 800554a:	f04f 0901 	mov.w	r9, #1
 800554e:	f8cd 800c 	str.w	r8, [sp, #12]
 8005552:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80056f8 <_svfiprintf_r+0x1ec>
 8005556:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800555a:	4623      	mov	r3, r4
 800555c:	469a      	mov	sl, r3
 800555e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005562:	b10a      	cbz	r2, 8005568 <_svfiprintf_r+0x5c>
 8005564:	2a25      	cmp	r2, #37	; 0x25
 8005566:	d1f9      	bne.n	800555c <_svfiprintf_r+0x50>
 8005568:	ebba 0b04 	subs.w	fp, sl, r4
 800556c:	d00b      	beq.n	8005586 <_svfiprintf_r+0x7a>
 800556e:	465b      	mov	r3, fp
 8005570:	4622      	mov	r2, r4
 8005572:	4629      	mov	r1, r5
 8005574:	4638      	mov	r0, r7
 8005576:	f7ff ff6d 	bl	8005454 <__ssputs_r>
 800557a:	3001      	adds	r0, #1
 800557c:	f000 80aa 	beq.w	80056d4 <_svfiprintf_r+0x1c8>
 8005580:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005582:	445a      	add	r2, fp
 8005584:	9209      	str	r2, [sp, #36]	; 0x24
 8005586:	f89a 3000 	ldrb.w	r3, [sl]
 800558a:	2b00      	cmp	r3, #0
 800558c:	f000 80a2 	beq.w	80056d4 <_svfiprintf_r+0x1c8>
 8005590:	2300      	movs	r3, #0
 8005592:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005596:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800559a:	f10a 0a01 	add.w	sl, sl, #1
 800559e:	9304      	str	r3, [sp, #16]
 80055a0:	9307      	str	r3, [sp, #28]
 80055a2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80055a6:	931a      	str	r3, [sp, #104]	; 0x68
 80055a8:	4654      	mov	r4, sl
 80055aa:	2205      	movs	r2, #5
 80055ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80055b0:	4851      	ldr	r0, [pc, #324]	; (80056f8 <_svfiprintf_r+0x1ec>)
 80055b2:	f000 fa41 	bl	8005a38 <memchr>
 80055b6:	9a04      	ldr	r2, [sp, #16]
 80055b8:	b9d8      	cbnz	r0, 80055f2 <_svfiprintf_r+0xe6>
 80055ba:	06d0      	lsls	r0, r2, #27
 80055bc:	bf44      	itt	mi
 80055be:	2320      	movmi	r3, #32
 80055c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80055c4:	0711      	lsls	r1, r2, #28
 80055c6:	bf44      	itt	mi
 80055c8:	232b      	movmi	r3, #43	; 0x2b
 80055ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80055ce:	f89a 3000 	ldrb.w	r3, [sl]
 80055d2:	2b2a      	cmp	r3, #42	; 0x2a
 80055d4:	d015      	beq.n	8005602 <_svfiprintf_r+0xf6>
 80055d6:	4654      	mov	r4, sl
 80055d8:	2000      	movs	r0, #0
 80055da:	f04f 0c0a 	mov.w	ip, #10
 80055de:	9a07      	ldr	r2, [sp, #28]
 80055e0:	4621      	mov	r1, r4
 80055e2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80055e6:	3b30      	subs	r3, #48	; 0x30
 80055e8:	2b09      	cmp	r3, #9
 80055ea:	d94e      	bls.n	800568a <_svfiprintf_r+0x17e>
 80055ec:	b1b0      	cbz	r0, 800561c <_svfiprintf_r+0x110>
 80055ee:	9207      	str	r2, [sp, #28]
 80055f0:	e014      	b.n	800561c <_svfiprintf_r+0x110>
 80055f2:	eba0 0308 	sub.w	r3, r0, r8
 80055f6:	fa09 f303 	lsl.w	r3, r9, r3
 80055fa:	4313      	orrs	r3, r2
 80055fc:	46a2      	mov	sl, r4
 80055fe:	9304      	str	r3, [sp, #16]
 8005600:	e7d2      	b.n	80055a8 <_svfiprintf_r+0x9c>
 8005602:	9b03      	ldr	r3, [sp, #12]
 8005604:	1d19      	adds	r1, r3, #4
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	9103      	str	r1, [sp, #12]
 800560a:	2b00      	cmp	r3, #0
 800560c:	bfbb      	ittet	lt
 800560e:	425b      	neglt	r3, r3
 8005610:	f042 0202 	orrlt.w	r2, r2, #2
 8005614:	9307      	strge	r3, [sp, #28]
 8005616:	9307      	strlt	r3, [sp, #28]
 8005618:	bfb8      	it	lt
 800561a:	9204      	strlt	r2, [sp, #16]
 800561c:	7823      	ldrb	r3, [r4, #0]
 800561e:	2b2e      	cmp	r3, #46	; 0x2e
 8005620:	d10c      	bne.n	800563c <_svfiprintf_r+0x130>
 8005622:	7863      	ldrb	r3, [r4, #1]
 8005624:	2b2a      	cmp	r3, #42	; 0x2a
 8005626:	d135      	bne.n	8005694 <_svfiprintf_r+0x188>
 8005628:	9b03      	ldr	r3, [sp, #12]
 800562a:	3402      	adds	r4, #2
 800562c:	1d1a      	adds	r2, r3, #4
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	9203      	str	r2, [sp, #12]
 8005632:	2b00      	cmp	r3, #0
 8005634:	bfb8      	it	lt
 8005636:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800563a:	9305      	str	r3, [sp, #20]
 800563c:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 80056fc <_svfiprintf_r+0x1f0>
 8005640:	2203      	movs	r2, #3
 8005642:	4650      	mov	r0, sl
 8005644:	7821      	ldrb	r1, [r4, #0]
 8005646:	f000 f9f7 	bl	8005a38 <memchr>
 800564a:	b140      	cbz	r0, 800565e <_svfiprintf_r+0x152>
 800564c:	2340      	movs	r3, #64	; 0x40
 800564e:	eba0 000a 	sub.w	r0, r0, sl
 8005652:	fa03 f000 	lsl.w	r0, r3, r0
 8005656:	9b04      	ldr	r3, [sp, #16]
 8005658:	3401      	adds	r4, #1
 800565a:	4303      	orrs	r3, r0
 800565c:	9304      	str	r3, [sp, #16]
 800565e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005662:	2206      	movs	r2, #6
 8005664:	4826      	ldr	r0, [pc, #152]	; (8005700 <_svfiprintf_r+0x1f4>)
 8005666:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800566a:	f000 f9e5 	bl	8005a38 <memchr>
 800566e:	2800      	cmp	r0, #0
 8005670:	d038      	beq.n	80056e4 <_svfiprintf_r+0x1d8>
 8005672:	4b24      	ldr	r3, [pc, #144]	; (8005704 <_svfiprintf_r+0x1f8>)
 8005674:	bb1b      	cbnz	r3, 80056be <_svfiprintf_r+0x1b2>
 8005676:	9b03      	ldr	r3, [sp, #12]
 8005678:	3307      	adds	r3, #7
 800567a:	f023 0307 	bic.w	r3, r3, #7
 800567e:	3308      	adds	r3, #8
 8005680:	9303      	str	r3, [sp, #12]
 8005682:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005684:	4433      	add	r3, r6
 8005686:	9309      	str	r3, [sp, #36]	; 0x24
 8005688:	e767      	b.n	800555a <_svfiprintf_r+0x4e>
 800568a:	460c      	mov	r4, r1
 800568c:	2001      	movs	r0, #1
 800568e:	fb0c 3202 	mla	r2, ip, r2, r3
 8005692:	e7a5      	b.n	80055e0 <_svfiprintf_r+0xd4>
 8005694:	2300      	movs	r3, #0
 8005696:	f04f 0c0a 	mov.w	ip, #10
 800569a:	4619      	mov	r1, r3
 800569c:	3401      	adds	r4, #1
 800569e:	9305      	str	r3, [sp, #20]
 80056a0:	4620      	mov	r0, r4
 80056a2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80056a6:	3a30      	subs	r2, #48	; 0x30
 80056a8:	2a09      	cmp	r2, #9
 80056aa:	d903      	bls.n	80056b4 <_svfiprintf_r+0x1a8>
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d0c5      	beq.n	800563c <_svfiprintf_r+0x130>
 80056b0:	9105      	str	r1, [sp, #20]
 80056b2:	e7c3      	b.n	800563c <_svfiprintf_r+0x130>
 80056b4:	4604      	mov	r4, r0
 80056b6:	2301      	movs	r3, #1
 80056b8:	fb0c 2101 	mla	r1, ip, r1, r2
 80056bc:	e7f0      	b.n	80056a0 <_svfiprintf_r+0x194>
 80056be:	ab03      	add	r3, sp, #12
 80056c0:	9300      	str	r3, [sp, #0]
 80056c2:	462a      	mov	r2, r5
 80056c4:	4638      	mov	r0, r7
 80056c6:	4b10      	ldr	r3, [pc, #64]	; (8005708 <_svfiprintf_r+0x1fc>)
 80056c8:	a904      	add	r1, sp, #16
 80056ca:	f3af 8000 	nop.w
 80056ce:	1c42      	adds	r2, r0, #1
 80056d0:	4606      	mov	r6, r0
 80056d2:	d1d6      	bne.n	8005682 <_svfiprintf_r+0x176>
 80056d4:	89ab      	ldrh	r3, [r5, #12]
 80056d6:	065b      	lsls	r3, r3, #25
 80056d8:	f53f af2c 	bmi.w	8005534 <_svfiprintf_r+0x28>
 80056dc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80056de:	b01d      	add	sp, #116	; 0x74
 80056e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80056e4:	ab03      	add	r3, sp, #12
 80056e6:	9300      	str	r3, [sp, #0]
 80056e8:	462a      	mov	r2, r5
 80056ea:	4638      	mov	r0, r7
 80056ec:	4b06      	ldr	r3, [pc, #24]	; (8005708 <_svfiprintf_r+0x1fc>)
 80056ee:	a904      	add	r1, sp, #16
 80056f0:	f000 f87c 	bl	80057ec <_printf_i>
 80056f4:	e7eb      	b.n	80056ce <_svfiprintf_r+0x1c2>
 80056f6:	bf00      	nop
 80056f8:	080069ac 	.word	0x080069ac
 80056fc:	080069b2 	.word	0x080069b2
 8005700:	080069b6 	.word	0x080069b6
 8005704:	00000000 	.word	0x00000000
 8005708:	08005455 	.word	0x08005455

0800570c <_printf_common>:
 800570c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005710:	4616      	mov	r6, r2
 8005712:	4699      	mov	r9, r3
 8005714:	688a      	ldr	r2, [r1, #8]
 8005716:	690b      	ldr	r3, [r1, #16]
 8005718:	4607      	mov	r7, r0
 800571a:	4293      	cmp	r3, r2
 800571c:	bfb8      	it	lt
 800571e:	4613      	movlt	r3, r2
 8005720:	6033      	str	r3, [r6, #0]
 8005722:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005726:	460c      	mov	r4, r1
 8005728:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800572c:	b10a      	cbz	r2, 8005732 <_printf_common+0x26>
 800572e:	3301      	adds	r3, #1
 8005730:	6033      	str	r3, [r6, #0]
 8005732:	6823      	ldr	r3, [r4, #0]
 8005734:	0699      	lsls	r1, r3, #26
 8005736:	bf42      	ittt	mi
 8005738:	6833      	ldrmi	r3, [r6, #0]
 800573a:	3302      	addmi	r3, #2
 800573c:	6033      	strmi	r3, [r6, #0]
 800573e:	6825      	ldr	r5, [r4, #0]
 8005740:	f015 0506 	ands.w	r5, r5, #6
 8005744:	d106      	bne.n	8005754 <_printf_common+0x48>
 8005746:	f104 0a19 	add.w	sl, r4, #25
 800574a:	68e3      	ldr	r3, [r4, #12]
 800574c:	6832      	ldr	r2, [r6, #0]
 800574e:	1a9b      	subs	r3, r3, r2
 8005750:	42ab      	cmp	r3, r5
 8005752:	dc28      	bgt.n	80057a6 <_printf_common+0x9a>
 8005754:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005758:	1e13      	subs	r3, r2, #0
 800575a:	6822      	ldr	r2, [r4, #0]
 800575c:	bf18      	it	ne
 800575e:	2301      	movne	r3, #1
 8005760:	0692      	lsls	r2, r2, #26
 8005762:	d42d      	bmi.n	80057c0 <_printf_common+0xb4>
 8005764:	4649      	mov	r1, r9
 8005766:	4638      	mov	r0, r7
 8005768:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800576c:	47c0      	blx	r8
 800576e:	3001      	adds	r0, #1
 8005770:	d020      	beq.n	80057b4 <_printf_common+0xa8>
 8005772:	6823      	ldr	r3, [r4, #0]
 8005774:	68e5      	ldr	r5, [r4, #12]
 8005776:	f003 0306 	and.w	r3, r3, #6
 800577a:	2b04      	cmp	r3, #4
 800577c:	bf18      	it	ne
 800577e:	2500      	movne	r5, #0
 8005780:	6832      	ldr	r2, [r6, #0]
 8005782:	f04f 0600 	mov.w	r6, #0
 8005786:	68a3      	ldr	r3, [r4, #8]
 8005788:	bf08      	it	eq
 800578a:	1aad      	subeq	r5, r5, r2
 800578c:	6922      	ldr	r2, [r4, #16]
 800578e:	bf08      	it	eq
 8005790:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005794:	4293      	cmp	r3, r2
 8005796:	bfc4      	itt	gt
 8005798:	1a9b      	subgt	r3, r3, r2
 800579a:	18ed      	addgt	r5, r5, r3
 800579c:	341a      	adds	r4, #26
 800579e:	42b5      	cmp	r5, r6
 80057a0:	d11a      	bne.n	80057d8 <_printf_common+0xcc>
 80057a2:	2000      	movs	r0, #0
 80057a4:	e008      	b.n	80057b8 <_printf_common+0xac>
 80057a6:	2301      	movs	r3, #1
 80057a8:	4652      	mov	r2, sl
 80057aa:	4649      	mov	r1, r9
 80057ac:	4638      	mov	r0, r7
 80057ae:	47c0      	blx	r8
 80057b0:	3001      	adds	r0, #1
 80057b2:	d103      	bne.n	80057bc <_printf_common+0xb0>
 80057b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80057b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80057bc:	3501      	adds	r5, #1
 80057be:	e7c4      	b.n	800574a <_printf_common+0x3e>
 80057c0:	2030      	movs	r0, #48	; 0x30
 80057c2:	18e1      	adds	r1, r4, r3
 80057c4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80057c8:	1c5a      	adds	r2, r3, #1
 80057ca:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80057ce:	4422      	add	r2, r4
 80057d0:	3302      	adds	r3, #2
 80057d2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80057d6:	e7c5      	b.n	8005764 <_printf_common+0x58>
 80057d8:	2301      	movs	r3, #1
 80057da:	4622      	mov	r2, r4
 80057dc:	4649      	mov	r1, r9
 80057de:	4638      	mov	r0, r7
 80057e0:	47c0      	blx	r8
 80057e2:	3001      	adds	r0, #1
 80057e4:	d0e6      	beq.n	80057b4 <_printf_common+0xa8>
 80057e6:	3601      	adds	r6, #1
 80057e8:	e7d9      	b.n	800579e <_printf_common+0x92>
	...

080057ec <_printf_i>:
 80057ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80057f0:	7e0f      	ldrb	r7, [r1, #24]
 80057f2:	4691      	mov	r9, r2
 80057f4:	2f78      	cmp	r7, #120	; 0x78
 80057f6:	4680      	mov	r8, r0
 80057f8:	460c      	mov	r4, r1
 80057fa:	469a      	mov	sl, r3
 80057fc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80057fe:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005802:	d807      	bhi.n	8005814 <_printf_i+0x28>
 8005804:	2f62      	cmp	r7, #98	; 0x62
 8005806:	d80a      	bhi.n	800581e <_printf_i+0x32>
 8005808:	2f00      	cmp	r7, #0
 800580a:	f000 80d9 	beq.w	80059c0 <_printf_i+0x1d4>
 800580e:	2f58      	cmp	r7, #88	; 0x58
 8005810:	f000 80a4 	beq.w	800595c <_printf_i+0x170>
 8005814:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005818:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800581c:	e03a      	b.n	8005894 <_printf_i+0xa8>
 800581e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005822:	2b15      	cmp	r3, #21
 8005824:	d8f6      	bhi.n	8005814 <_printf_i+0x28>
 8005826:	a101      	add	r1, pc, #4	; (adr r1, 800582c <_printf_i+0x40>)
 8005828:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800582c:	08005885 	.word	0x08005885
 8005830:	08005899 	.word	0x08005899
 8005834:	08005815 	.word	0x08005815
 8005838:	08005815 	.word	0x08005815
 800583c:	08005815 	.word	0x08005815
 8005840:	08005815 	.word	0x08005815
 8005844:	08005899 	.word	0x08005899
 8005848:	08005815 	.word	0x08005815
 800584c:	08005815 	.word	0x08005815
 8005850:	08005815 	.word	0x08005815
 8005854:	08005815 	.word	0x08005815
 8005858:	080059a7 	.word	0x080059a7
 800585c:	080058c9 	.word	0x080058c9
 8005860:	08005989 	.word	0x08005989
 8005864:	08005815 	.word	0x08005815
 8005868:	08005815 	.word	0x08005815
 800586c:	080059c9 	.word	0x080059c9
 8005870:	08005815 	.word	0x08005815
 8005874:	080058c9 	.word	0x080058c9
 8005878:	08005815 	.word	0x08005815
 800587c:	08005815 	.word	0x08005815
 8005880:	08005991 	.word	0x08005991
 8005884:	682b      	ldr	r3, [r5, #0]
 8005886:	1d1a      	adds	r2, r3, #4
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	602a      	str	r2, [r5, #0]
 800588c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005890:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005894:	2301      	movs	r3, #1
 8005896:	e0a4      	b.n	80059e2 <_printf_i+0x1f6>
 8005898:	6820      	ldr	r0, [r4, #0]
 800589a:	6829      	ldr	r1, [r5, #0]
 800589c:	0606      	lsls	r6, r0, #24
 800589e:	f101 0304 	add.w	r3, r1, #4
 80058a2:	d50a      	bpl.n	80058ba <_printf_i+0xce>
 80058a4:	680e      	ldr	r6, [r1, #0]
 80058a6:	602b      	str	r3, [r5, #0]
 80058a8:	2e00      	cmp	r6, #0
 80058aa:	da03      	bge.n	80058b4 <_printf_i+0xc8>
 80058ac:	232d      	movs	r3, #45	; 0x2d
 80058ae:	4276      	negs	r6, r6
 80058b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80058b4:	230a      	movs	r3, #10
 80058b6:	485e      	ldr	r0, [pc, #376]	; (8005a30 <_printf_i+0x244>)
 80058b8:	e019      	b.n	80058ee <_printf_i+0x102>
 80058ba:	680e      	ldr	r6, [r1, #0]
 80058bc:	f010 0f40 	tst.w	r0, #64	; 0x40
 80058c0:	602b      	str	r3, [r5, #0]
 80058c2:	bf18      	it	ne
 80058c4:	b236      	sxthne	r6, r6
 80058c6:	e7ef      	b.n	80058a8 <_printf_i+0xbc>
 80058c8:	682b      	ldr	r3, [r5, #0]
 80058ca:	6820      	ldr	r0, [r4, #0]
 80058cc:	1d19      	adds	r1, r3, #4
 80058ce:	6029      	str	r1, [r5, #0]
 80058d0:	0601      	lsls	r1, r0, #24
 80058d2:	d501      	bpl.n	80058d8 <_printf_i+0xec>
 80058d4:	681e      	ldr	r6, [r3, #0]
 80058d6:	e002      	b.n	80058de <_printf_i+0xf2>
 80058d8:	0646      	lsls	r6, r0, #25
 80058da:	d5fb      	bpl.n	80058d4 <_printf_i+0xe8>
 80058dc:	881e      	ldrh	r6, [r3, #0]
 80058de:	2f6f      	cmp	r7, #111	; 0x6f
 80058e0:	bf0c      	ite	eq
 80058e2:	2308      	moveq	r3, #8
 80058e4:	230a      	movne	r3, #10
 80058e6:	4852      	ldr	r0, [pc, #328]	; (8005a30 <_printf_i+0x244>)
 80058e8:	2100      	movs	r1, #0
 80058ea:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80058ee:	6865      	ldr	r5, [r4, #4]
 80058f0:	2d00      	cmp	r5, #0
 80058f2:	bfa8      	it	ge
 80058f4:	6821      	ldrge	r1, [r4, #0]
 80058f6:	60a5      	str	r5, [r4, #8]
 80058f8:	bfa4      	itt	ge
 80058fa:	f021 0104 	bicge.w	r1, r1, #4
 80058fe:	6021      	strge	r1, [r4, #0]
 8005900:	b90e      	cbnz	r6, 8005906 <_printf_i+0x11a>
 8005902:	2d00      	cmp	r5, #0
 8005904:	d04d      	beq.n	80059a2 <_printf_i+0x1b6>
 8005906:	4615      	mov	r5, r2
 8005908:	fbb6 f1f3 	udiv	r1, r6, r3
 800590c:	fb03 6711 	mls	r7, r3, r1, r6
 8005910:	5dc7      	ldrb	r7, [r0, r7]
 8005912:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005916:	4637      	mov	r7, r6
 8005918:	42bb      	cmp	r3, r7
 800591a:	460e      	mov	r6, r1
 800591c:	d9f4      	bls.n	8005908 <_printf_i+0x11c>
 800591e:	2b08      	cmp	r3, #8
 8005920:	d10b      	bne.n	800593a <_printf_i+0x14e>
 8005922:	6823      	ldr	r3, [r4, #0]
 8005924:	07de      	lsls	r6, r3, #31
 8005926:	d508      	bpl.n	800593a <_printf_i+0x14e>
 8005928:	6923      	ldr	r3, [r4, #16]
 800592a:	6861      	ldr	r1, [r4, #4]
 800592c:	4299      	cmp	r1, r3
 800592e:	bfde      	ittt	le
 8005930:	2330      	movle	r3, #48	; 0x30
 8005932:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005936:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800593a:	1b52      	subs	r2, r2, r5
 800593c:	6122      	str	r2, [r4, #16]
 800593e:	464b      	mov	r3, r9
 8005940:	4621      	mov	r1, r4
 8005942:	4640      	mov	r0, r8
 8005944:	f8cd a000 	str.w	sl, [sp]
 8005948:	aa03      	add	r2, sp, #12
 800594a:	f7ff fedf 	bl	800570c <_printf_common>
 800594e:	3001      	adds	r0, #1
 8005950:	d14c      	bne.n	80059ec <_printf_i+0x200>
 8005952:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005956:	b004      	add	sp, #16
 8005958:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800595c:	4834      	ldr	r0, [pc, #208]	; (8005a30 <_printf_i+0x244>)
 800595e:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005962:	6829      	ldr	r1, [r5, #0]
 8005964:	6823      	ldr	r3, [r4, #0]
 8005966:	f851 6b04 	ldr.w	r6, [r1], #4
 800596a:	6029      	str	r1, [r5, #0]
 800596c:	061d      	lsls	r5, r3, #24
 800596e:	d514      	bpl.n	800599a <_printf_i+0x1ae>
 8005970:	07df      	lsls	r7, r3, #31
 8005972:	bf44      	itt	mi
 8005974:	f043 0320 	orrmi.w	r3, r3, #32
 8005978:	6023      	strmi	r3, [r4, #0]
 800597a:	b91e      	cbnz	r6, 8005984 <_printf_i+0x198>
 800597c:	6823      	ldr	r3, [r4, #0]
 800597e:	f023 0320 	bic.w	r3, r3, #32
 8005982:	6023      	str	r3, [r4, #0]
 8005984:	2310      	movs	r3, #16
 8005986:	e7af      	b.n	80058e8 <_printf_i+0xfc>
 8005988:	6823      	ldr	r3, [r4, #0]
 800598a:	f043 0320 	orr.w	r3, r3, #32
 800598e:	6023      	str	r3, [r4, #0]
 8005990:	2378      	movs	r3, #120	; 0x78
 8005992:	4828      	ldr	r0, [pc, #160]	; (8005a34 <_printf_i+0x248>)
 8005994:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005998:	e7e3      	b.n	8005962 <_printf_i+0x176>
 800599a:	0659      	lsls	r1, r3, #25
 800599c:	bf48      	it	mi
 800599e:	b2b6      	uxthmi	r6, r6
 80059a0:	e7e6      	b.n	8005970 <_printf_i+0x184>
 80059a2:	4615      	mov	r5, r2
 80059a4:	e7bb      	b.n	800591e <_printf_i+0x132>
 80059a6:	682b      	ldr	r3, [r5, #0]
 80059a8:	6826      	ldr	r6, [r4, #0]
 80059aa:	1d18      	adds	r0, r3, #4
 80059ac:	6961      	ldr	r1, [r4, #20]
 80059ae:	6028      	str	r0, [r5, #0]
 80059b0:	0635      	lsls	r5, r6, #24
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	d501      	bpl.n	80059ba <_printf_i+0x1ce>
 80059b6:	6019      	str	r1, [r3, #0]
 80059b8:	e002      	b.n	80059c0 <_printf_i+0x1d4>
 80059ba:	0670      	lsls	r0, r6, #25
 80059bc:	d5fb      	bpl.n	80059b6 <_printf_i+0x1ca>
 80059be:	8019      	strh	r1, [r3, #0]
 80059c0:	2300      	movs	r3, #0
 80059c2:	4615      	mov	r5, r2
 80059c4:	6123      	str	r3, [r4, #16]
 80059c6:	e7ba      	b.n	800593e <_printf_i+0x152>
 80059c8:	682b      	ldr	r3, [r5, #0]
 80059ca:	2100      	movs	r1, #0
 80059cc:	1d1a      	adds	r2, r3, #4
 80059ce:	602a      	str	r2, [r5, #0]
 80059d0:	681d      	ldr	r5, [r3, #0]
 80059d2:	6862      	ldr	r2, [r4, #4]
 80059d4:	4628      	mov	r0, r5
 80059d6:	f000 f82f 	bl	8005a38 <memchr>
 80059da:	b108      	cbz	r0, 80059e0 <_printf_i+0x1f4>
 80059dc:	1b40      	subs	r0, r0, r5
 80059de:	6060      	str	r0, [r4, #4]
 80059e0:	6863      	ldr	r3, [r4, #4]
 80059e2:	6123      	str	r3, [r4, #16]
 80059e4:	2300      	movs	r3, #0
 80059e6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80059ea:	e7a8      	b.n	800593e <_printf_i+0x152>
 80059ec:	462a      	mov	r2, r5
 80059ee:	4649      	mov	r1, r9
 80059f0:	4640      	mov	r0, r8
 80059f2:	6923      	ldr	r3, [r4, #16]
 80059f4:	47d0      	blx	sl
 80059f6:	3001      	adds	r0, #1
 80059f8:	d0ab      	beq.n	8005952 <_printf_i+0x166>
 80059fa:	6823      	ldr	r3, [r4, #0]
 80059fc:	079b      	lsls	r3, r3, #30
 80059fe:	d413      	bmi.n	8005a28 <_printf_i+0x23c>
 8005a00:	68e0      	ldr	r0, [r4, #12]
 8005a02:	9b03      	ldr	r3, [sp, #12]
 8005a04:	4298      	cmp	r0, r3
 8005a06:	bfb8      	it	lt
 8005a08:	4618      	movlt	r0, r3
 8005a0a:	e7a4      	b.n	8005956 <_printf_i+0x16a>
 8005a0c:	2301      	movs	r3, #1
 8005a0e:	4632      	mov	r2, r6
 8005a10:	4649      	mov	r1, r9
 8005a12:	4640      	mov	r0, r8
 8005a14:	47d0      	blx	sl
 8005a16:	3001      	adds	r0, #1
 8005a18:	d09b      	beq.n	8005952 <_printf_i+0x166>
 8005a1a:	3501      	adds	r5, #1
 8005a1c:	68e3      	ldr	r3, [r4, #12]
 8005a1e:	9903      	ldr	r1, [sp, #12]
 8005a20:	1a5b      	subs	r3, r3, r1
 8005a22:	42ab      	cmp	r3, r5
 8005a24:	dcf2      	bgt.n	8005a0c <_printf_i+0x220>
 8005a26:	e7eb      	b.n	8005a00 <_printf_i+0x214>
 8005a28:	2500      	movs	r5, #0
 8005a2a:	f104 0619 	add.w	r6, r4, #25
 8005a2e:	e7f5      	b.n	8005a1c <_printf_i+0x230>
 8005a30:	080069bd 	.word	0x080069bd
 8005a34:	080069ce 	.word	0x080069ce

08005a38 <memchr>:
 8005a38:	4603      	mov	r3, r0
 8005a3a:	b510      	push	{r4, lr}
 8005a3c:	b2c9      	uxtb	r1, r1
 8005a3e:	4402      	add	r2, r0
 8005a40:	4293      	cmp	r3, r2
 8005a42:	4618      	mov	r0, r3
 8005a44:	d101      	bne.n	8005a4a <memchr+0x12>
 8005a46:	2000      	movs	r0, #0
 8005a48:	e003      	b.n	8005a52 <memchr+0x1a>
 8005a4a:	7804      	ldrb	r4, [r0, #0]
 8005a4c:	3301      	adds	r3, #1
 8005a4e:	428c      	cmp	r4, r1
 8005a50:	d1f6      	bne.n	8005a40 <memchr+0x8>
 8005a52:	bd10      	pop	{r4, pc}

08005a54 <memcpy>:
 8005a54:	440a      	add	r2, r1
 8005a56:	4291      	cmp	r1, r2
 8005a58:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8005a5c:	d100      	bne.n	8005a60 <memcpy+0xc>
 8005a5e:	4770      	bx	lr
 8005a60:	b510      	push	{r4, lr}
 8005a62:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005a66:	4291      	cmp	r1, r2
 8005a68:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005a6c:	d1f9      	bne.n	8005a62 <memcpy+0xe>
 8005a6e:	bd10      	pop	{r4, pc}

08005a70 <memmove>:
 8005a70:	4288      	cmp	r0, r1
 8005a72:	b510      	push	{r4, lr}
 8005a74:	eb01 0402 	add.w	r4, r1, r2
 8005a78:	d902      	bls.n	8005a80 <memmove+0x10>
 8005a7a:	4284      	cmp	r4, r0
 8005a7c:	4623      	mov	r3, r4
 8005a7e:	d807      	bhi.n	8005a90 <memmove+0x20>
 8005a80:	1e43      	subs	r3, r0, #1
 8005a82:	42a1      	cmp	r1, r4
 8005a84:	d008      	beq.n	8005a98 <memmove+0x28>
 8005a86:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005a8a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005a8e:	e7f8      	b.n	8005a82 <memmove+0x12>
 8005a90:	4601      	mov	r1, r0
 8005a92:	4402      	add	r2, r0
 8005a94:	428a      	cmp	r2, r1
 8005a96:	d100      	bne.n	8005a9a <memmove+0x2a>
 8005a98:	bd10      	pop	{r4, pc}
 8005a9a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005a9e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005aa2:	e7f7      	b.n	8005a94 <memmove+0x24>

08005aa4 <_free_r>:
 8005aa4:	b538      	push	{r3, r4, r5, lr}
 8005aa6:	4605      	mov	r5, r0
 8005aa8:	2900      	cmp	r1, #0
 8005aaa:	d040      	beq.n	8005b2e <_free_r+0x8a>
 8005aac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005ab0:	1f0c      	subs	r4, r1, #4
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	bfb8      	it	lt
 8005ab6:	18e4      	addlt	r4, r4, r3
 8005ab8:	f000 f910 	bl	8005cdc <__malloc_lock>
 8005abc:	4a1c      	ldr	r2, [pc, #112]	; (8005b30 <_free_r+0x8c>)
 8005abe:	6813      	ldr	r3, [r2, #0]
 8005ac0:	b933      	cbnz	r3, 8005ad0 <_free_r+0x2c>
 8005ac2:	6063      	str	r3, [r4, #4]
 8005ac4:	6014      	str	r4, [r2, #0]
 8005ac6:	4628      	mov	r0, r5
 8005ac8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005acc:	f000 b90c 	b.w	8005ce8 <__malloc_unlock>
 8005ad0:	42a3      	cmp	r3, r4
 8005ad2:	d908      	bls.n	8005ae6 <_free_r+0x42>
 8005ad4:	6820      	ldr	r0, [r4, #0]
 8005ad6:	1821      	adds	r1, r4, r0
 8005ad8:	428b      	cmp	r3, r1
 8005ada:	bf01      	itttt	eq
 8005adc:	6819      	ldreq	r1, [r3, #0]
 8005ade:	685b      	ldreq	r3, [r3, #4]
 8005ae0:	1809      	addeq	r1, r1, r0
 8005ae2:	6021      	streq	r1, [r4, #0]
 8005ae4:	e7ed      	b.n	8005ac2 <_free_r+0x1e>
 8005ae6:	461a      	mov	r2, r3
 8005ae8:	685b      	ldr	r3, [r3, #4]
 8005aea:	b10b      	cbz	r3, 8005af0 <_free_r+0x4c>
 8005aec:	42a3      	cmp	r3, r4
 8005aee:	d9fa      	bls.n	8005ae6 <_free_r+0x42>
 8005af0:	6811      	ldr	r1, [r2, #0]
 8005af2:	1850      	adds	r0, r2, r1
 8005af4:	42a0      	cmp	r0, r4
 8005af6:	d10b      	bne.n	8005b10 <_free_r+0x6c>
 8005af8:	6820      	ldr	r0, [r4, #0]
 8005afa:	4401      	add	r1, r0
 8005afc:	1850      	adds	r0, r2, r1
 8005afe:	4283      	cmp	r3, r0
 8005b00:	6011      	str	r1, [r2, #0]
 8005b02:	d1e0      	bne.n	8005ac6 <_free_r+0x22>
 8005b04:	6818      	ldr	r0, [r3, #0]
 8005b06:	685b      	ldr	r3, [r3, #4]
 8005b08:	4401      	add	r1, r0
 8005b0a:	6011      	str	r1, [r2, #0]
 8005b0c:	6053      	str	r3, [r2, #4]
 8005b0e:	e7da      	b.n	8005ac6 <_free_r+0x22>
 8005b10:	d902      	bls.n	8005b18 <_free_r+0x74>
 8005b12:	230c      	movs	r3, #12
 8005b14:	602b      	str	r3, [r5, #0]
 8005b16:	e7d6      	b.n	8005ac6 <_free_r+0x22>
 8005b18:	6820      	ldr	r0, [r4, #0]
 8005b1a:	1821      	adds	r1, r4, r0
 8005b1c:	428b      	cmp	r3, r1
 8005b1e:	bf01      	itttt	eq
 8005b20:	6819      	ldreq	r1, [r3, #0]
 8005b22:	685b      	ldreq	r3, [r3, #4]
 8005b24:	1809      	addeq	r1, r1, r0
 8005b26:	6021      	streq	r1, [r4, #0]
 8005b28:	6063      	str	r3, [r4, #4]
 8005b2a:	6054      	str	r4, [r2, #4]
 8005b2c:	e7cb      	b.n	8005ac6 <_free_r+0x22>
 8005b2e:	bd38      	pop	{r3, r4, r5, pc}
 8005b30:	200001d8 	.word	0x200001d8

08005b34 <sbrk_aligned>:
 8005b34:	b570      	push	{r4, r5, r6, lr}
 8005b36:	4e0e      	ldr	r6, [pc, #56]	; (8005b70 <sbrk_aligned+0x3c>)
 8005b38:	460c      	mov	r4, r1
 8005b3a:	6831      	ldr	r1, [r6, #0]
 8005b3c:	4605      	mov	r5, r0
 8005b3e:	b911      	cbnz	r1, 8005b46 <sbrk_aligned+0x12>
 8005b40:	f000 f8bc 	bl	8005cbc <_sbrk_r>
 8005b44:	6030      	str	r0, [r6, #0]
 8005b46:	4621      	mov	r1, r4
 8005b48:	4628      	mov	r0, r5
 8005b4a:	f000 f8b7 	bl	8005cbc <_sbrk_r>
 8005b4e:	1c43      	adds	r3, r0, #1
 8005b50:	d00a      	beq.n	8005b68 <sbrk_aligned+0x34>
 8005b52:	1cc4      	adds	r4, r0, #3
 8005b54:	f024 0403 	bic.w	r4, r4, #3
 8005b58:	42a0      	cmp	r0, r4
 8005b5a:	d007      	beq.n	8005b6c <sbrk_aligned+0x38>
 8005b5c:	1a21      	subs	r1, r4, r0
 8005b5e:	4628      	mov	r0, r5
 8005b60:	f000 f8ac 	bl	8005cbc <_sbrk_r>
 8005b64:	3001      	adds	r0, #1
 8005b66:	d101      	bne.n	8005b6c <sbrk_aligned+0x38>
 8005b68:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8005b6c:	4620      	mov	r0, r4
 8005b6e:	bd70      	pop	{r4, r5, r6, pc}
 8005b70:	200001dc 	.word	0x200001dc

08005b74 <_malloc_r>:
 8005b74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b78:	1ccd      	adds	r5, r1, #3
 8005b7a:	f025 0503 	bic.w	r5, r5, #3
 8005b7e:	3508      	adds	r5, #8
 8005b80:	2d0c      	cmp	r5, #12
 8005b82:	bf38      	it	cc
 8005b84:	250c      	movcc	r5, #12
 8005b86:	2d00      	cmp	r5, #0
 8005b88:	4607      	mov	r7, r0
 8005b8a:	db01      	blt.n	8005b90 <_malloc_r+0x1c>
 8005b8c:	42a9      	cmp	r1, r5
 8005b8e:	d905      	bls.n	8005b9c <_malloc_r+0x28>
 8005b90:	230c      	movs	r3, #12
 8005b92:	2600      	movs	r6, #0
 8005b94:	603b      	str	r3, [r7, #0]
 8005b96:	4630      	mov	r0, r6
 8005b98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005b9c:	4e2e      	ldr	r6, [pc, #184]	; (8005c58 <_malloc_r+0xe4>)
 8005b9e:	f000 f89d 	bl	8005cdc <__malloc_lock>
 8005ba2:	6833      	ldr	r3, [r6, #0]
 8005ba4:	461c      	mov	r4, r3
 8005ba6:	bb34      	cbnz	r4, 8005bf6 <_malloc_r+0x82>
 8005ba8:	4629      	mov	r1, r5
 8005baa:	4638      	mov	r0, r7
 8005bac:	f7ff ffc2 	bl	8005b34 <sbrk_aligned>
 8005bb0:	1c43      	adds	r3, r0, #1
 8005bb2:	4604      	mov	r4, r0
 8005bb4:	d14d      	bne.n	8005c52 <_malloc_r+0xde>
 8005bb6:	6834      	ldr	r4, [r6, #0]
 8005bb8:	4626      	mov	r6, r4
 8005bba:	2e00      	cmp	r6, #0
 8005bbc:	d140      	bne.n	8005c40 <_malloc_r+0xcc>
 8005bbe:	6823      	ldr	r3, [r4, #0]
 8005bc0:	4631      	mov	r1, r6
 8005bc2:	4638      	mov	r0, r7
 8005bc4:	eb04 0803 	add.w	r8, r4, r3
 8005bc8:	f000 f878 	bl	8005cbc <_sbrk_r>
 8005bcc:	4580      	cmp	r8, r0
 8005bce:	d13a      	bne.n	8005c46 <_malloc_r+0xd2>
 8005bd0:	6821      	ldr	r1, [r4, #0]
 8005bd2:	3503      	adds	r5, #3
 8005bd4:	1a6d      	subs	r5, r5, r1
 8005bd6:	f025 0503 	bic.w	r5, r5, #3
 8005bda:	3508      	adds	r5, #8
 8005bdc:	2d0c      	cmp	r5, #12
 8005bde:	bf38      	it	cc
 8005be0:	250c      	movcc	r5, #12
 8005be2:	4638      	mov	r0, r7
 8005be4:	4629      	mov	r1, r5
 8005be6:	f7ff ffa5 	bl	8005b34 <sbrk_aligned>
 8005bea:	3001      	adds	r0, #1
 8005bec:	d02b      	beq.n	8005c46 <_malloc_r+0xd2>
 8005bee:	6823      	ldr	r3, [r4, #0]
 8005bf0:	442b      	add	r3, r5
 8005bf2:	6023      	str	r3, [r4, #0]
 8005bf4:	e00e      	b.n	8005c14 <_malloc_r+0xa0>
 8005bf6:	6822      	ldr	r2, [r4, #0]
 8005bf8:	1b52      	subs	r2, r2, r5
 8005bfa:	d41e      	bmi.n	8005c3a <_malloc_r+0xc6>
 8005bfc:	2a0b      	cmp	r2, #11
 8005bfe:	d916      	bls.n	8005c2e <_malloc_r+0xba>
 8005c00:	1961      	adds	r1, r4, r5
 8005c02:	42a3      	cmp	r3, r4
 8005c04:	6025      	str	r5, [r4, #0]
 8005c06:	bf18      	it	ne
 8005c08:	6059      	strne	r1, [r3, #4]
 8005c0a:	6863      	ldr	r3, [r4, #4]
 8005c0c:	bf08      	it	eq
 8005c0e:	6031      	streq	r1, [r6, #0]
 8005c10:	5162      	str	r2, [r4, r5]
 8005c12:	604b      	str	r3, [r1, #4]
 8005c14:	4638      	mov	r0, r7
 8005c16:	f104 060b 	add.w	r6, r4, #11
 8005c1a:	f000 f865 	bl	8005ce8 <__malloc_unlock>
 8005c1e:	f026 0607 	bic.w	r6, r6, #7
 8005c22:	1d23      	adds	r3, r4, #4
 8005c24:	1af2      	subs	r2, r6, r3
 8005c26:	d0b6      	beq.n	8005b96 <_malloc_r+0x22>
 8005c28:	1b9b      	subs	r3, r3, r6
 8005c2a:	50a3      	str	r3, [r4, r2]
 8005c2c:	e7b3      	b.n	8005b96 <_malloc_r+0x22>
 8005c2e:	6862      	ldr	r2, [r4, #4]
 8005c30:	42a3      	cmp	r3, r4
 8005c32:	bf0c      	ite	eq
 8005c34:	6032      	streq	r2, [r6, #0]
 8005c36:	605a      	strne	r2, [r3, #4]
 8005c38:	e7ec      	b.n	8005c14 <_malloc_r+0xa0>
 8005c3a:	4623      	mov	r3, r4
 8005c3c:	6864      	ldr	r4, [r4, #4]
 8005c3e:	e7b2      	b.n	8005ba6 <_malloc_r+0x32>
 8005c40:	4634      	mov	r4, r6
 8005c42:	6876      	ldr	r6, [r6, #4]
 8005c44:	e7b9      	b.n	8005bba <_malloc_r+0x46>
 8005c46:	230c      	movs	r3, #12
 8005c48:	4638      	mov	r0, r7
 8005c4a:	603b      	str	r3, [r7, #0]
 8005c4c:	f000 f84c 	bl	8005ce8 <__malloc_unlock>
 8005c50:	e7a1      	b.n	8005b96 <_malloc_r+0x22>
 8005c52:	6025      	str	r5, [r4, #0]
 8005c54:	e7de      	b.n	8005c14 <_malloc_r+0xa0>
 8005c56:	bf00      	nop
 8005c58:	200001d8 	.word	0x200001d8

08005c5c <_realloc_r>:
 8005c5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c60:	4680      	mov	r8, r0
 8005c62:	4614      	mov	r4, r2
 8005c64:	460e      	mov	r6, r1
 8005c66:	b921      	cbnz	r1, 8005c72 <_realloc_r+0x16>
 8005c68:	4611      	mov	r1, r2
 8005c6a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005c6e:	f7ff bf81 	b.w	8005b74 <_malloc_r>
 8005c72:	b92a      	cbnz	r2, 8005c80 <_realloc_r+0x24>
 8005c74:	f7ff ff16 	bl	8005aa4 <_free_r>
 8005c78:	4625      	mov	r5, r4
 8005c7a:	4628      	mov	r0, r5
 8005c7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005c80:	f000 f838 	bl	8005cf4 <_malloc_usable_size_r>
 8005c84:	4284      	cmp	r4, r0
 8005c86:	4607      	mov	r7, r0
 8005c88:	d802      	bhi.n	8005c90 <_realloc_r+0x34>
 8005c8a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005c8e:	d812      	bhi.n	8005cb6 <_realloc_r+0x5a>
 8005c90:	4621      	mov	r1, r4
 8005c92:	4640      	mov	r0, r8
 8005c94:	f7ff ff6e 	bl	8005b74 <_malloc_r>
 8005c98:	4605      	mov	r5, r0
 8005c9a:	2800      	cmp	r0, #0
 8005c9c:	d0ed      	beq.n	8005c7a <_realloc_r+0x1e>
 8005c9e:	42bc      	cmp	r4, r7
 8005ca0:	4622      	mov	r2, r4
 8005ca2:	4631      	mov	r1, r6
 8005ca4:	bf28      	it	cs
 8005ca6:	463a      	movcs	r2, r7
 8005ca8:	f7ff fed4 	bl	8005a54 <memcpy>
 8005cac:	4631      	mov	r1, r6
 8005cae:	4640      	mov	r0, r8
 8005cb0:	f7ff fef8 	bl	8005aa4 <_free_r>
 8005cb4:	e7e1      	b.n	8005c7a <_realloc_r+0x1e>
 8005cb6:	4635      	mov	r5, r6
 8005cb8:	e7df      	b.n	8005c7a <_realloc_r+0x1e>
	...

08005cbc <_sbrk_r>:
 8005cbc:	b538      	push	{r3, r4, r5, lr}
 8005cbe:	2300      	movs	r3, #0
 8005cc0:	4d05      	ldr	r5, [pc, #20]	; (8005cd8 <_sbrk_r+0x1c>)
 8005cc2:	4604      	mov	r4, r0
 8005cc4:	4608      	mov	r0, r1
 8005cc6:	602b      	str	r3, [r5, #0]
 8005cc8:	f7fc fc2e 	bl	8002528 <_sbrk>
 8005ccc:	1c43      	adds	r3, r0, #1
 8005cce:	d102      	bne.n	8005cd6 <_sbrk_r+0x1a>
 8005cd0:	682b      	ldr	r3, [r5, #0]
 8005cd2:	b103      	cbz	r3, 8005cd6 <_sbrk_r+0x1a>
 8005cd4:	6023      	str	r3, [r4, #0]
 8005cd6:	bd38      	pop	{r3, r4, r5, pc}
 8005cd8:	200001e0 	.word	0x200001e0

08005cdc <__malloc_lock>:
 8005cdc:	4801      	ldr	r0, [pc, #4]	; (8005ce4 <__malloc_lock+0x8>)
 8005cde:	f000 b811 	b.w	8005d04 <__retarget_lock_acquire_recursive>
 8005ce2:	bf00      	nop
 8005ce4:	200001e4 	.word	0x200001e4

08005ce8 <__malloc_unlock>:
 8005ce8:	4801      	ldr	r0, [pc, #4]	; (8005cf0 <__malloc_unlock+0x8>)
 8005cea:	f000 b80c 	b.w	8005d06 <__retarget_lock_release_recursive>
 8005cee:	bf00      	nop
 8005cf0:	200001e4 	.word	0x200001e4

08005cf4 <_malloc_usable_size_r>:
 8005cf4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005cf8:	1f18      	subs	r0, r3, #4
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	bfbc      	itt	lt
 8005cfe:	580b      	ldrlt	r3, [r1, r0]
 8005d00:	18c0      	addlt	r0, r0, r3
 8005d02:	4770      	bx	lr

08005d04 <__retarget_lock_acquire_recursive>:
 8005d04:	4770      	bx	lr

08005d06 <__retarget_lock_release_recursive>:
 8005d06:	4770      	bx	lr

08005d08 <_init>:
 8005d08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d0a:	bf00      	nop
 8005d0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d0e:	bc08      	pop	{r3}
 8005d10:	469e      	mov	lr, r3
 8005d12:	4770      	bx	lr

08005d14 <_fini>:
 8005d14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d16:	bf00      	nop
 8005d18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d1a:	bc08      	pop	{r3}
 8005d1c:	469e      	mov	lr, r3
 8005d1e:	4770      	bx	lr
