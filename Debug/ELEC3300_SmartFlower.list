
ELEC3300_SmartFlower.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005014  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c00  080051fc  080051fc  000151fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005dfc  08005dfc  0002010c  2**0
                  CONTENTS
  4 .ARM          00000000  08005dfc  08005dfc  0002010c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005dfc  08005dfc  0002010c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005dfc  08005dfc  00015dfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005e00  08005e00  00015e00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000010c  20000000  08005e04  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000fc  2000010c  08005f10  0002010c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000208  08005f10  00020208  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002010c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d165  00000000  00000000  00020135  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000257b  00000000  00000000  0002d29a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e08  00000000  00000000  0002f818  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000cd0  00000000  00000000  00030620  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001bbbc  00000000  00000000  000312f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000100d4  00000000  00000000  0004ceac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a0925  00000000  00000000  0005cf80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000fd8a5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003ea0  00000000  00000000  000fd8f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	2000010c 	.word	0x2000010c
 8000204:	00000000 	.word	0x00000000
 8000208:	080051e4 	.word	0x080051e4

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	20000110 	.word	0x20000110
 8000224:	080051e4 	.word	0x080051e4

08000228 <__aeabi_dmul>:
 8000228:	b570      	push	{r4, r5, r6, lr}
 800022a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800022e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000232:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000236:	bf1d      	ittte	ne
 8000238:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800023c:	ea94 0f0c 	teqne	r4, ip
 8000240:	ea95 0f0c 	teqne	r5, ip
 8000244:	f000 f8de 	bleq	8000404 <__aeabi_dmul+0x1dc>
 8000248:	442c      	add	r4, r5
 800024a:	ea81 0603 	eor.w	r6, r1, r3
 800024e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000252:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000256:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800025a:	bf18      	it	ne
 800025c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000260:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000264:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000268:	d038      	beq.n	80002dc <__aeabi_dmul+0xb4>
 800026a:	fba0 ce02 	umull	ip, lr, r0, r2
 800026e:	f04f 0500 	mov.w	r5, #0
 8000272:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000276:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800027a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800027e:	f04f 0600 	mov.w	r6, #0
 8000282:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000286:	f09c 0f00 	teq	ip, #0
 800028a:	bf18      	it	ne
 800028c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000290:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000294:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000298:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800029c:	d204      	bcs.n	80002a8 <__aeabi_dmul+0x80>
 800029e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002a2:	416d      	adcs	r5, r5
 80002a4:	eb46 0606 	adc.w	r6, r6, r6
 80002a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80002ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80002b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80002b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80002b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80002bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80002c0:	bf88      	it	hi
 80002c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80002c6:	d81e      	bhi.n	8000306 <__aeabi_dmul+0xde>
 80002c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80002cc:	bf08      	it	eq
 80002ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80002d2:	f150 0000 	adcs.w	r0, r0, #0
 80002d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002da:	bd70      	pop	{r4, r5, r6, pc}
 80002dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80002e0:	ea46 0101 	orr.w	r1, r6, r1
 80002e4:	ea40 0002 	orr.w	r0, r0, r2
 80002e8:	ea81 0103 	eor.w	r1, r1, r3
 80002ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002f0:	bfc2      	ittt	gt
 80002f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002fa:	bd70      	popgt	{r4, r5, r6, pc}
 80002fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000300:	f04f 0e00 	mov.w	lr, #0
 8000304:	3c01      	subs	r4, #1
 8000306:	f300 80ab 	bgt.w	8000460 <__aeabi_dmul+0x238>
 800030a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800030e:	bfde      	ittt	le
 8000310:	2000      	movle	r0, #0
 8000312:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000316:	bd70      	pople	{r4, r5, r6, pc}
 8000318:	f1c4 0400 	rsb	r4, r4, #0
 800031c:	3c20      	subs	r4, #32
 800031e:	da35      	bge.n	800038c <__aeabi_dmul+0x164>
 8000320:	340c      	adds	r4, #12
 8000322:	dc1b      	bgt.n	800035c <__aeabi_dmul+0x134>
 8000324:	f104 0414 	add.w	r4, r4, #20
 8000328:	f1c4 0520 	rsb	r5, r4, #32
 800032c:	fa00 f305 	lsl.w	r3, r0, r5
 8000330:	fa20 f004 	lsr.w	r0, r0, r4
 8000334:	fa01 f205 	lsl.w	r2, r1, r5
 8000338:	ea40 0002 	orr.w	r0, r0, r2
 800033c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000340:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000344:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000348:	fa21 f604 	lsr.w	r6, r1, r4
 800034c:	eb42 0106 	adc.w	r1, r2, r6
 8000350:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000354:	bf08      	it	eq
 8000356:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800035a:	bd70      	pop	{r4, r5, r6, pc}
 800035c:	f1c4 040c 	rsb	r4, r4, #12
 8000360:	f1c4 0520 	rsb	r5, r4, #32
 8000364:	fa00 f304 	lsl.w	r3, r0, r4
 8000368:	fa20 f005 	lsr.w	r0, r0, r5
 800036c:	fa01 f204 	lsl.w	r2, r1, r4
 8000370:	ea40 0002 	orr.w	r0, r0, r2
 8000374:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000378:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000384:	bf08      	it	eq
 8000386:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800038a:	bd70      	pop	{r4, r5, r6, pc}
 800038c:	f1c4 0520 	rsb	r5, r4, #32
 8000390:	fa00 f205 	lsl.w	r2, r0, r5
 8000394:	ea4e 0e02 	orr.w	lr, lr, r2
 8000398:	fa20 f304 	lsr.w	r3, r0, r4
 800039c:	fa01 f205 	lsl.w	r2, r1, r5
 80003a0:	ea43 0302 	orr.w	r3, r3, r2
 80003a4:	fa21 f004 	lsr.w	r0, r1, r4
 80003a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003ac:	fa21 f204 	lsr.w	r2, r1, r4
 80003b0:	ea20 0002 	bic.w	r0, r0, r2
 80003b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80003b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003bc:	bf08      	it	eq
 80003be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003c2:	bd70      	pop	{r4, r5, r6, pc}
 80003c4:	f094 0f00 	teq	r4, #0
 80003c8:	d10f      	bne.n	80003ea <__aeabi_dmul+0x1c2>
 80003ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80003ce:	0040      	lsls	r0, r0, #1
 80003d0:	eb41 0101 	adc.w	r1, r1, r1
 80003d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003d8:	bf08      	it	eq
 80003da:	3c01      	subeq	r4, #1
 80003dc:	d0f7      	beq.n	80003ce <__aeabi_dmul+0x1a6>
 80003de:	ea41 0106 	orr.w	r1, r1, r6
 80003e2:	f095 0f00 	teq	r5, #0
 80003e6:	bf18      	it	ne
 80003e8:	4770      	bxne	lr
 80003ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80003ee:	0052      	lsls	r2, r2, #1
 80003f0:	eb43 0303 	adc.w	r3, r3, r3
 80003f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80003f8:	bf08      	it	eq
 80003fa:	3d01      	subeq	r5, #1
 80003fc:	d0f7      	beq.n	80003ee <__aeabi_dmul+0x1c6>
 80003fe:	ea43 0306 	orr.w	r3, r3, r6
 8000402:	4770      	bx	lr
 8000404:	ea94 0f0c 	teq	r4, ip
 8000408:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800040c:	bf18      	it	ne
 800040e:	ea95 0f0c 	teqne	r5, ip
 8000412:	d00c      	beq.n	800042e <__aeabi_dmul+0x206>
 8000414:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000418:	bf18      	it	ne
 800041a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800041e:	d1d1      	bne.n	80003c4 <__aeabi_dmul+0x19c>
 8000420:	ea81 0103 	eor.w	r1, r1, r3
 8000424:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000428:	f04f 0000 	mov.w	r0, #0
 800042c:	bd70      	pop	{r4, r5, r6, pc}
 800042e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000432:	bf06      	itte	eq
 8000434:	4610      	moveq	r0, r2
 8000436:	4619      	moveq	r1, r3
 8000438:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800043c:	d019      	beq.n	8000472 <__aeabi_dmul+0x24a>
 800043e:	ea94 0f0c 	teq	r4, ip
 8000442:	d102      	bne.n	800044a <__aeabi_dmul+0x222>
 8000444:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000448:	d113      	bne.n	8000472 <__aeabi_dmul+0x24a>
 800044a:	ea95 0f0c 	teq	r5, ip
 800044e:	d105      	bne.n	800045c <__aeabi_dmul+0x234>
 8000450:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000454:	bf1c      	itt	ne
 8000456:	4610      	movne	r0, r2
 8000458:	4619      	movne	r1, r3
 800045a:	d10a      	bne.n	8000472 <__aeabi_dmul+0x24a>
 800045c:	ea81 0103 	eor.w	r1, r1, r3
 8000460:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000464:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd70      	pop	{r4, r5, r6, pc}
 8000472:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000476:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800047a:	bd70      	pop	{r4, r5, r6, pc}

0800047c <__aeabi_drsub>:
 800047c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000480:	e002      	b.n	8000488 <__adddf3>
 8000482:	bf00      	nop

08000484 <__aeabi_dsub>:
 8000484:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000488 <__adddf3>:
 8000488:	b530      	push	{r4, r5, lr}
 800048a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800048e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000492:	ea94 0f05 	teq	r4, r5
 8000496:	bf08      	it	eq
 8000498:	ea90 0f02 	teqeq	r0, r2
 800049c:	bf1f      	itttt	ne
 800049e:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004a2:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004a6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80004aa:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004ae:	f000 80e2 	beq.w	8000676 <__adddf3+0x1ee>
 80004b2:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80004b6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80004ba:	bfb8      	it	lt
 80004bc:	426d      	neglt	r5, r5
 80004be:	dd0c      	ble.n	80004da <__adddf3+0x52>
 80004c0:	442c      	add	r4, r5
 80004c2:	ea80 0202 	eor.w	r2, r0, r2
 80004c6:	ea81 0303 	eor.w	r3, r1, r3
 80004ca:	ea82 0000 	eor.w	r0, r2, r0
 80004ce:	ea83 0101 	eor.w	r1, r3, r1
 80004d2:	ea80 0202 	eor.w	r2, r0, r2
 80004d6:	ea81 0303 	eor.w	r3, r1, r3
 80004da:	2d36      	cmp	r5, #54	; 0x36
 80004dc:	bf88      	it	hi
 80004de:	bd30      	pophi	{r4, r5, pc}
 80004e0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80004e4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004e8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80004ec:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004f0:	d002      	beq.n	80004f8 <__adddf3+0x70>
 80004f2:	4240      	negs	r0, r0
 80004f4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004f8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80004fc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000500:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000504:	d002      	beq.n	800050c <__adddf3+0x84>
 8000506:	4252      	negs	r2, r2
 8000508:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800050c:	ea94 0f05 	teq	r4, r5
 8000510:	f000 80a7 	beq.w	8000662 <__adddf3+0x1da>
 8000514:	f1a4 0401 	sub.w	r4, r4, #1
 8000518:	f1d5 0e20 	rsbs	lr, r5, #32
 800051c:	db0d      	blt.n	800053a <__adddf3+0xb2>
 800051e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000522:	fa22 f205 	lsr.w	r2, r2, r5
 8000526:	1880      	adds	r0, r0, r2
 8000528:	f141 0100 	adc.w	r1, r1, #0
 800052c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000530:	1880      	adds	r0, r0, r2
 8000532:	fa43 f305 	asr.w	r3, r3, r5
 8000536:	4159      	adcs	r1, r3
 8000538:	e00e      	b.n	8000558 <__adddf3+0xd0>
 800053a:	f1a5 0520 	sub.w	r5, r5, #32
 800053e:	f10e 0e20 	add.w	lr, lr, #32
 8000542:	2a01      	cmp	r2, #1
 8000544:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000548:	bf28      	it	cs
 800054a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800054e:	fa43 f305 	asr.w	r3, r3, r5
 8000552:	18c0      	adds	r0, r0, r3
 8000554:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000558:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800055c:	d507      	bpl.n	800056e <__adddf3+0xe6>
 800055e:	f04f 0e00 	mov.w	lr, #0
 8000562:	f1dc 0c00 	rsbs	ip, ip, #0
 8000566:	eb7e 0000 	sbcs.w	r0, lr, r0
 800056a:	eb6e 0101 	sbc.w	r1, lr, r1
 800056e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000572:	d31b      	bcc.n	80005ac <__adddf3+0x124>
 8000574:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000578:	d30c      	bcc.n	8000594 <__adddf3+0x10c>
 800057a:	0849      	lsrs	r1, r1, #1
 800057c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000580:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000584:	f104 0401 	add.w	r4, r4, #1
 8000588:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800058c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000590:	f080 809a 	bcs.w	80006c8 <__adddf3+0x240>
 8000594:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000598:	bf08      	it	eq
 800059a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800059e:	f150 0000 	adcs.w	r0, r0, #0
 80005a2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005a6:	ea41 0105 	orr.w	r1, r1, r5
 80005aa:	bd30      	pop	{r4, r5, pc}
 80005ac:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80005b0:	4140      	adcs	r0, r0
 80005b2:	eb41 0101 	adc.w	r1, r1, r1
 80005b6:	3c01      	subs	r4, #1
 80005b8:	bf28      	it	cs
 80005ba:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80005be:	d2e9      	bcs.n	8000594 <__adddf3+0x10c>
 80005c0:	f091 0f00 	teq	r1, #0
 80005c4:	bf04      	itt	eq
 80005c6:	4601      	moveq	r1, r0
 80005c8:	2000      	moveq	r0, #0
 80005ca:	fab1 f381 	clz	r3, r1
 80005ce:	bf08      	it	eq
 80005d0:	3320      	addeq	r3, #32
 80005d2:	f1a3 030b 	sub.w	r3, r3, #11
 80005d6:	f1b3 0220 	subs.w	r2, r3, #32
 80005da:	da0c      	bge.n	80005f6 <__adddf3+0x16e>
 80005dc:	320c      	adds	r2, #12
 80005de:	dd08      	ble.n	80005f2 <__adddf3+0x16a>
 80005e0:	f102 0c14 	add.w	ip, r2, #20
 80005e4:	f1c2 020c 	rsb	r2, r2, #12
 80005e8:	fa01 f00c 	lsl.w	r0, r1, ip
 80005ec:	fa21 f102 	lsr.w	r1, r1, r2
 80005f0:	e00c      	b.n	800060c <__adddf3+0x184>
 80005f2:	f102 0214 	add.w	r2, r2, #20
 80005f6:	bfd8      	it	le
 80005f8:	f1c2 0c20 	rsble	ip, r2, #32
 80005fc:	fa01 f102 	lsl.w	r1, r1, r2
 8000600:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000604:	bfdc      	itt	le
 8000606:	ea41 010c 	orrle.w	r1, r1, ip
 800060a:	4090      	lslle	r0, r2
 800060c:	1ae4      	subs	r4, r4, r3
 800060e:	bfa2      	ittt	ge
 8000610:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000614:	4329      	orrge	r1, r5
 8000616:	bd30      	popge	{r4, r5, pc}
 8000618:	ea6f 0404 	mvn.w	r4, r4
 800061c:	3c1f      	subs	r4, #31
 800061e:	da1c      	bge.n	800065a <__adddf3+0x1d2>
 8000620:	340c      	adds	r4, #12
 8000622:	dc0e      	bgt.n	8000642 <__adddf3+0x1ba>
 8000624:	f104 0414 	add.w	r4, r4, #20
 8000628:	f1c4 0220 	rsb	r2, r4, #32
 800062c:	fa20 f004 	lsr.w	r0, r0, r4
 8000630:	fa01 f302 	lsl.w	r3, r1, r2
 8000634:	ea40 0003 	orr.w	r0, r0, r3
 8000638:	fa21 f304 	lsr.w	r3, r1, r4
 800063c:	ea45 0103 	orr.w	r1, r5, r3
 8000640:	bd30      	pop	{r4, r5, pc}
 8000642:	f1c4 040c 	rsb	r4, r4, #12
 8000646:	f1c4 0220 	rsb	r2, r4, #32
 800064a:	fa20 f002 	lsr.w	r0, r0, r2
 800064e:	fa01 f304 	lsl.w	r3, r1, r4
 8000652:	ea40 0003 	orr.w	r0, r0, r3
 8000656:	4629      	mov	r1, r5
 8000658:	bd30      	pop	{r4, r5, pc}
 800065a:	fa21 f004 	lsr.w	r0, r1, r4
 800065e:	4629      	mov	r1, r5
 8000660:	bd30      	pop	{r4, r5, pc}
 8000662:	f094 0f00 	teq	r4, #0
 8000666:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800066a:	bf06      	itte	eq
 800066c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000670:	3401      	addeq	r4, #1
 8000672:	3d01      	subne	r5, #1
 8000674:	e74e      	b.n	8000514 <__adddf3+0x8c>
 8000676:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800067a:	bf18      	it	ne
 800067c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000680:	d029      	beq.n	80006d6 <__adddf3+0x24e>
 8000682:	ea94 0f05 	teq	r4, r5
 8000686:	bf08      	it	eq
 8000688:	ea90 0f02 	teqeq	r0, r2
 800068c:	d005      	beq.n	800069a <__adddf3+0x212>
 800068e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000692:	bf04      	itt	eq
 8000694:	4619      	moveq	r1, r3
 8000696:	4610      	moveq	r0, r2
 8000698:	bd30      	pop	{r4, r5, pc}
 800069a:	ea91 0f03 	teq	r1, r3
 800069e:	bf1e      	ittt	ne
 80006a0:	2100      	movne	r1, #0
 80006a2:	2000      	movne	r0, #0
 80006a4:	bd30      	popne	{r4, r5, pc}
 80006a6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80006aa:	d105      	bne.n	80006b8 <__adddf3+0x230>
 80006ac:	0040      	lsls	r0, r0, #1
 80006ae:	4149      	adcs	r1, r1
 80006b0:	bf28      	it	cs
 80006b2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80006b6:	bd30      	pop	{r4, r5, pc}
 80006b8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80006bc:	bf3c      	itt	cc
 80006be:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80006c2:	bd30      	popcc	{r4, r5, pc}
 80006c4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006c8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80006cc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80006d0:	f04f 0000 	mov.w	r0, #0
 80006d4:	bd30      	pop	{r4, r5, pc}
 80006d6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006da:	bf1a      	itte	ne
 80006dc:	4619      	movne	r1, r3
 80006de:	4610      	movne	r0, r2
 80006e0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80006e4:	bf1c      	itt	ne
 80006e6:	460b      	movne	r3, r1
 80006e8:	4602      	movne	r2, r0
 80006ea:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006ee:	bf06      	itte	eq
 80006f0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006f4:	ea91 0f03 	teqeq	r1, r3
 80006f8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80006fc:	bd30      	pop	{r4, r5, pc}
 80006fe:	bf00      	nop

08000700 <__aeabi_ui2d>:
 8000700:	f090 0f00 	teq	r0, #0
 8000704:	bf04      	itt	eq
 8000706:	2100      	moveq	r1, #0
 8000708:	4770      	bxeq	lr
 800070a:	b530      	push	{r4, r5, lr}
 800070c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000710:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000714:	f04f 0500 	mov.w	r5, #0
 8000718:	f04f 0100 	mov.w	r1, #0
 800071c:	e750      	b.n	80005c0 <__adddf3+0x138>
 800071e:	bf00      	nop

08000720 <__aeabi_i2d>:
 8000720:	f090 0f00 	teq	r0, #0
 8000724:	bf04      	itt	eq
 8000726:	2100      	moveq	r1, #0
 8000728:	4770      	bxeq	lr
 800072a:	b530      	push	{r4, r5, lr}
 800072c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000730:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000734:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000738:	bf48      	it	mi
 800073a:	4240      	negmi	r0, r0
 800073c:	f04f 0100 	mov.w	r1, #0
 8000740:	e73e      	b.n	80005c0 <__adddf3+0x138>
 8000742:	bf00      	nop

08000744 <__aeabi_f2d>:
 8000744:	0042      	lsls	r2, r0, #1
 8000746:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800074a:	ea4f 0131 	mov.w	r1, r1, rrx
 800074e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000752:	bf1f      	itttt	ne
 8000754:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000758:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800075c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000760:	4770      	bxne	lr
 8000762:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000766:	bf08      	it	eq
 8000768:	4770      	bxeq	lr
 800076a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800076e:	bf04      	itt	eq
 8000770:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000774:	4770      	bxeq	lr
 8000776:	b530      	push	{r4, r5, lr}
 8000778:	f44f 7460 	mov.w	r4, #896	; 0x380
 800077c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000780:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000784:	e71c      	b.n	80005c0 <__adddf3+0x138>
 8000786:	bf00      	nop

08000788 <__aeabi_ul2d>:
 8000788:	ea50 0201 	orrs.w	r2, r0, r1
 800078c:	bf08      	it	eq
 800078e:	4770      	bxeq	lr
 8000790:	b530      	push	{r4, r5, lr}
 8000792:	f04f 0500 	mov.w	r5, #0
 8000796:	e00a      	b.n	80007ae <__aeabi_l2d+0x16>

08000798 <__aeabi_l2d>:
 8000798:	ea50 0201 	orrs.w	r2, r0, r1
 800079c:	bf08      	it	eq
 800079e:	4770      	bxeq	lr
 80007a0:	b530      	push	{r4, r5, lr}
 80007a2:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80007a6:	d502      	bpl.n	80007ae <__aeabi_l2d+0x16>
 80007a8:	4240      	negs	r0, r0
 80007aa:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007ae:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007b2:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007b6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80007ba:	f43f aed8 	beq.w	800056e <__adddf3+0xe6>
 80007be:	f04f 0203 	mov.w	r2, #3
 80007c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007c6:	bf18      	it	ne
 80007c8:	3203      	addne	r2, #3
 80007ca:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007ce:	bf18      	it	ne
 80007d0:	3203      	addne	r2, #3
 80007d2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80007d6:	f1c2 0320 	rsb	r3, r2, #32
 80007da:	fa00 fc03 	lsl.w	ip, r0, r3
 80007de:	fa20 f002 	lsr.w	r0, r0, r2
 80007e2:	fa01 fe03 	lsl.w	lr, r1, r3
 80007e6:	ea40 000e 	orr.w	r0, r0, lr
 80007ea:	fa21 f102 	lsr.w	r1, r1, r2
 80007ee:	4414      	add	r4, r2
 80007f0:	e6bd      	b.n	800056e <__adddf3+0xe6>
 80007f2:	bf00      	nop

080007f4 <__aeabi_d2iz>:
 80007f4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80007f8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80007fc:	d215      	bcs.n	800082a <__aeabi_d2iz+0x36>
 80007fe:	d511      	bpl.n	8000824 <__aeabi_d2iz+0x30>
 8000800:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000804:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000808:	d912      	bls.n	8000830 <__aeabi_d2iz+0x3c>
 800080a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800080e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000812:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000816:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800081a:	fa23 f002 	lsr.w	r0, r3, r2
 800081e:	bf18      	it	ne
 8000820:	4240      	negne	r0, r0
 8000822:	4770      	bx	lr
 8000824:	f04f 0000 	mov.w	r0, #0
 8000828:	4770      	bx	lr
 800082a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800082e:	d105      	bne.n	800083c <__aeabi_d2iz+0x48>
 8000830:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000834:	bf08      	it	eq
 8000836:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800083a:	4770      	bx	lr
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	4770      	bx	lr
 8000842:	bf00      	nop

08000844 <__aeabi_frsub>:
 8000844:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000848:	e002      	b.n	8000850 <__addsf3>
 800084a:	bf00      	nop

0800084c <__aeabi_fsub>:
 800084c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000850 <__addsf3>:
 8000850:	0042      	lsls	r2, r0, #1
 8000852:	bf1f      	itttt	ne
 8000854:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000858:	ea92 0f03 	teqne	r2, r3
 800085c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000860:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000864:	d06a      	beq.n	800093c <__addsf3+0xec>
 8000866:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800086a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800086e:	bfc1      	itttt	gt
 8000870:	18d2      	addgt	r2, r2, r3
 8000872:	4041      	eorgt	r1, r0
 8000874:	4048      	eorgt	r0, r1
 8000876:	4041      	eorgt	r1, r0
 8000878:	bfb8      	it	lt
 800087a:	425b      	neglt	r3, r3
 800087c:	2b19      	cmp	r3, #25
 800087e:	bf88      	it	hi
 8000880:	4770      	bxhi	lr
 8000882:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000886:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800088a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 800088e:	bf18      	it	ne
 8000890:	4240      	negne	r0, r0
 8000892:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000896:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800089a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 800089e:	bf18      	it	ne
 80008a0:	4249      	negne	r1, r1
 80008a2:	ea92 0f03 	teq	r2, r3
 80008a6:	d03f      	beq.n	8000928 <__addsf3+0xd8>
 80008a8:	f1a2 0201 	sub.w	r2, r2, #1
 80008ac:	fa41 fc03 	asr.w	ip, r1, r3
 80008b0:	eb10 000c 	adds.w	r0, r0, ip
 80008b4:	f1c3 0320 	rsb	r3, r3, #32
 80008b8:	fa01 f103 	lsl.w	r1, r1, r3
 80008bc:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80008c0:	d502      	bpl.n	80008c8 <__addsf3+0x78>
 80008c2:	4249      	negs	r1, r1
 80008c4:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80008c8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80008cc:	d313      	bcc.n	80008f6 <__addsf3+0xa6>
 80008ce:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80008d2:	d306      	bcc.n	80008e2 <__addsf3+0x92>
 80008d4:	0840      	lsrs	r0, r0, #1
 80008d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80008da:	f102 0201 	add.w	r2, r2, #1
 80008de:	2afe      	cmp	r2, #254	; 0xfe
 80008e0:	d251      	bcs.n	8000986 <__addsf3+0x136>
 80008e2:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80008e6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80008ea:	bf08      	it	eq
 80008ec:	f020 0001 	biceq.w	r0, r0, #1
 80008f0:	ea40 0003 	orr.w	r0, r0, r3
 80008f4:	4770      	bx	lr
 80008f6:	0049      	lsls	r1, r1, #1
 80008f8:	eb40 0000 	adc.w	r0, r0, r0
 80008fc:	3a01      	subs	r2, #1
 80008fe:	bf28      	it	cs
 8000900:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000904:	d2ed      	bcs.n	80008e2 <__addsf3+0x92>
 8000906:	fab0 fc80 	clz	ip, r0
 800090a:	f1ac 0c08 	sub.w	ip, ip, #8
 800090e:	ebb2 020c 	subs.w	r2, r2, ip
 8000912:	fa00 f00c 	lsl.w	r0, r0, ip
 8000916:	bfaa      	itet	ge
 8000918:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 800091c:	4252      	neglt	r2, r2
 800091e:	4318      	orrge	r0, r3
 8000920:	bfbc      	itt	lt
 8000922:	40d0      	lsrlt	r0, r2
 8000924:	4318      	orrlt	r0, r3
 8000926:	4770      	bx	lr
 8000928:	f092 0f00 	teq	r2, #0
 800092c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000930:	bf06      	itte	eq
 8000932:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000936:	3201      	addeq	r2, #1
 8000938:	3b01      	subne	r3, #1
 800093a:	e7b5      	b.n	80008a8 <__addsf3+0x58>
 800093c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000940:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000944:	bf18      	it	ne
 8000946:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800094a:	d021      	beq.n	8000990 <__addsf3+0x140>
 800094c:	ea92 0f03 	teq	r2, r3
 8000950:	d004      	beq.n	800095c <__addsf3+0x10c>
 8000952:	f092 0f00 	teq	r2, #0
 8000956:	bf08      	it	eq
 8000958:	4608      	moveq	r0, r1
 800095a:	4770      	bx	lr
 800095c:	ea90 0f01 	teq	r0, r1
 8000960:	bf1c      	itt	ne
 8000962:	2000      	movne	r0, #0
 8000964:	4770      	bxne	lr
 8000966:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 800096a:	d104      	bne.n	8000976 <__addsf3+0x126>
 800096c:	0040      	lsls	r0, r0, #1
 800096e:	bf28      	it	cs
 8000970:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000974:	4770      	bx	lr
 8000976:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 800097a:	bf3c      	itt	cc
 800097c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000980:	4770      	bxcc	lr
 8000982:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000986:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 800098a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800098e:	4770      	bx	lr
 8000990:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000994:	bf16      	itet	ne
 8000996:	4608      	movne	r0, r1
 8000998:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 800099c:	4601      	movne	r1, r0
 800099e:	0242      	lsls	r2, r0, #9
 80009a0:	bf06      	itte	eq
 80009a2:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80009a6:	ea90 0f01 	teqeq	r0, r1
 80009aa:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80009ae:	4770      	bx	lr

080009b0 <__aeabi_ui2f>:
 80009b0:	f04f 0300 	mov.w	r3, #0
 80009b4:	e004      	b.n	80009c0 <__aeabi_i2f+0x8>
 80009b6:	bf00      	nop

080009b8 <__aeabi_i2f>:
 80009b8:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80009bc:	bf48      	it	mi
 80009be:	4240      	negmi	r0, r0
 80009c0:	ea5f 0c00 	movs.w	ip, r0
 80009c4:	bf08      	it	eq
 80009c6:	4770      	bxeq	lr
 80009c8:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80009cc:	4601      	mov	r1, r0
 80009ce:	f04f 0000 	mov.w	r0, #0
 80009d2:	e01c      	b.n	8000a0e <__aeabi_l2f+0x2a>

080009d4 <__aeabi_ul2f>:
 80009d4:	ea50 0201 	orrs.w	r2, r0, r1
 80009d8:	bf08      	it	eq
 80009da:	4770      	bxeq	lr
 80009dc:	f04f 0300 	mov.w	r3, #0
 80009e0:	e00a      	b.n	80009f8 <__aeabi_l2f+0x14>
 80009e2:	bf00      	nop

080009e4 <__aeabi_l2f>:
 80009e4:	ea50 0201 	orrs.w	r2, r0, r1
 80009e8:	bf08      	it	eq
 80009ea:	4770      	bxeq	lr
 80009ec:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80009f0:	d502      	bpl.n	80009f8 <__aeabi_l2f+0x14>
 80009f2:	4240      	negs	r0, r0
 80009f4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80009f8:	ea5f 0c01 	movs.w	ip, r1
 80009fc:	bf02      	ittt	eq
 80009fe:	4684      	moveq	ip, r0
 8000a00:	4601      	moveq	r1, r0
 8000a02:	2000      	moveq	r0, #0
 8000a04:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000a08:	bf08      	it	eq
 8000a0a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000a0e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000a12:	fabc f28c 	clz	r2, ip
 8000a16:	3a08      	subs	r2, #8
 8000a18:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000a1c:	db10      	blt.n	8000a40 <__aeabi_l2f+0x5c>
 8000a1e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000a22:	4463      	add	r3, ip
 8000a24:	fa00 fc02 	lsl.w	ip, r0, r2
 8000a28:	f1c2 0220 	rsb	r2, r2, #32
 8000a2c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000a30:	fa20 f202 	lsr.w	r2, r0, r2
 8000a34:	eb43 0002 	adc.w	r0, r3, r2
 8000a38:	bf08      	it	eq
 8000a3a:	f020 0001 	biceq.w	r0, r0, #1
 8000a3e:	4770      	bx	lr
 8000a40:	f102 0220 	add.w	r2, r2, #32
 8000a44:	fa01 fc02 	lsl.w	ip, r1, r2
 8000a48:	f1c2 0220 	rsb	r2, r2, #32
 8000a4c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000a50:	fa21 f202 	lsr.w	r2, r1, r2
 8000a54:	eb43 0002 	adc.w	r0, r3, r2
 8000a58:	bf08      	it	eq
 8000a5a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000a5e:	4770      	bx	lr

08000a60 <Ov7725_Init>:

/************************************************
 * Sensor_Init
 ************************************************/
ErrorStatus Ov7725_Init(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b082      	sub	sp, #8
 8000a64:	af00      	add	r7, sp, #0
	uint16_t i = 0;
 8000a66:	2300      	movs	r3, #0
 8000a68:	80fb      	strh	r3, [r7, #6]
	uint8_t Sensor_IDCode = 0;	
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	717b      	strb	r3, [r7, #5]
	
	if( 0 == SCCB_WriteByte ( 0x12, 0x80 ) ) /*reset sensor */
 8000a6e:	2180      	movs	r1, #128	; 0x80
 8000a70:	2012      	movs	r0, #18
 8000a72:	f000 f999 	bl	8000da8 <SCCB_WriteByte>
 8000a76:	4603      	mov	r3, r0
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d101      	bne.n	8000a80 <Ov7725_Init+0x20>
	{
		return ERROR ;
 8000a7c:	2301      	movs	r3, #1
 8000a7e:	e030      	b.n	8000ae2 <Ov7725_Init+0x82>
	}	

	if( 0 == SCCB_ReadByte( &Sensor_IDCode, 1, 0x0b ) )	 /* read sensor ID*/
 8000a80:	1d7b      	adds	r3, r7, #5
 8000a82:	220b      	movs	r2, #11
 8000a84:	2101      	movs	r1, #1
 8000a86:	4618      	mov	r0, r3
 8000a88:	f000 f9bd 	bl	8000e06 <SCCB_ReadByte>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d101      	bne.n	8000a96 <Ov7725_Init+0x36>
	{
		return ERROR;
 8000a92:	2301      	movs	r3, #1
 8000a94:	e025      	b.n	8000ae2 <Ov7725_Init+0x82>
	}
	//DEBUG("Sensor ID is 0x%x", Sensor_IDCode);	
	
	if(Sensor_IDCode == OV7725_ID)
 8000a96:	797b      	ldrb	r3, [r7, #5]
 8000a98:	2b21      	cmp	r3, #33	; 0x21
 8000a9a:	d11f      	bne.n	8000adc <Ov7725_Init+0x7c>
	{
		for( i = 0 ; i < OV7725_REG_NUM ; i++ )
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	80fb      	strh	r3, [r7, #6]
 8000aa0:	e015      	b.n	8000ace <Ov7725_Init+0x6e>
		{
			if( 0 == SCCB_WriteByte(Sensor_Config[i].Address, Sensor_Config[i].Value) )
 8000aa2:	88fb      	ldrh	r3, [r7, #6]
 8000aa4:	4a11      	ldr	r2, [pc, #68]	; (8000aec <Ov7725_Init+0x8c>)
 8000aa6:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8000aaa:	b29a      	uxth	r2, r3
 8000aac:	88fb      	ldrh	r3, [r7, #6]
 8000aae:	490f      	ldr	r1, [pc, #60]	; (8000aec <Ov7725_Init+0x8c>)
 8000ab0:	005b      	lsls	r3, r3, #1
 8000ab2:	440b      	add	r3, r1
 8000ab4:	785b      	ldrb	r3, [r3, #1]
 8000ab6:	4619      	mov	r1, r3
 8000ab8:	4610      	mov	r0, r2
 8000aba:	f000 f975 	bl	8000da8 <SCCB_WriteByte>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d101      	bne.n	8000ac8 <Ov7725_Init+0x68>
			{                
				return ERROR;
 8000ac4:	2301      	movs	r3, #1
 8000ac6:	e00c      	b.n	8000ae2 <Ov7725_Init+0x82>
		for( i = 0 ; i < OV7725_REG_NUM ; i++ )
 8000ac8:	88fb      	ldrh	r3, [r7, #6]
 8000aca:	3301      	adds	r3, #1
 8000acc:	80fb      	strh	r3, [r7, #6]
 8000ace:	4b08      	ldr	r3, [pc, #32]	; (8000af0 <Ov7725_Init+0x90>)
 8000ad0:	781b      	ldrb	r3, [r3, #0]
 8000ad2:	b29b      	uxth	r3, r3
 8000ad4:	88fa      	ldrh	r2, [r7, #6]
 8000ad6:	429a      	cmp	r2, r3
 8000ad8:	d3e3      	bcc.n	8000aa2 <Ov7725_Init+0x42>
 8000ada:	e001      	b.n	8000ae0 <Ov7725_Init+0x80>
			}
		}
	}
	else
	{
		return ERROR;
 8000adc:	2301      	movs	r3, #1
 8000ade:	e000      	b.n	8000ae2 <Ov7725_Init+0x82>
	}
	
	return SUCCESS;
 8000ae0:	2300      	movs	r3, #0
}
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	3708      	adds	r7, #8
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	bf00      	nop
 8000aec:	20000000 	.word	0x20000000
 8000af0:	2000009a 	.word	0x2000009a

08000af4 <ImagDisp>:

void ImagDisp(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b082      	sub	sp, #8
 8000af8:	af00      	add	r7, sp, #0
	uint16_t i, j;
	uint16_t Camera_Data;
	
	LCD_Cam_Gram();
 8000afa:	f000 fd21 	bl	8001540 <LCD_Cam_Gram>
	
	for(i = 0; i < 240; i++)
 8000afe:	2300      	movs	r3, #0
 8000b00:	80fb      	strh	r3, [r7, #6]
 8000b02:	e02c      	b.n	8000b5e <ImagDisp+0x6a>
	{
		for(j = 0; j < 320; j++)
 8000b04:	2300      	movs	r3, #0
 8000b06:	80bb      	strh	r3, [r7, #4]
 8000b08:	e022      	b.n	8000b50 <ImagDisp+0x5c>
		{
			READ_FIFO_PIXEL(Camera_Data);		
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	807b      	strh	r3, [r7, #2]
 8000b0e:	4b19      	ldr	r3, [pc, #100]	; (8000b74 <ImagDisp+0x80>)
 8000b10:	2220      	movs	r2, #32
 8000b12:	615a      	str	r2, [r3, #20]
 8000b14:	4b18      	ldr	r3, [pc, #96]	; (8000b78 <ImagDisp+0x84>)
 8000b16:	689b      	ldr	r3, [r3, #8]
 8000b18:	b29b      	uxth	r3, r3
 8000b1a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8000b1e:	807b      	strh	r3, [r7, #2]
 8000b20:	4b14      	ldr	r3, [pc, #80]	; (8000b74 <ImagDisp+0x80>)
 8000b22:	2220      	movs	r2, #32
 8000b24:	611a      	str	r2, [r3, #16]
 8000b26:	4b13      	ldr	r3, [pc, #76]	; (8000b74 <ImagDisp+0x80>)
 8000b28:	2220      	movs	r2, #32
 8000b2a:	615a      	str	r2, [r3, #20]
 8000b2c:	4b12      	ldr	r3, [pc, #72]	; (8000b78 <ImagDisp+0x84>)
 8000b2e:	689b      	ldr	r3, [r3, #8]
 8000b30:	0a1b      	lsrs	r3, r3, #8
 8000b32:	b2db      	uxtb	r3, r3
 8000b34:	b29a      	uxth	r2, r3
 8000b36:	887b      	ldrh	r3, [r7, #2]
 8000b38:	4313      	orrs	r3, r2
 8000b3a:	807b      	strh	r3, [r7, #2]
 8000b3c:	4b0d      	ldr	r3, [pc, #52]	; (8000b74 <ImagDisp+0x80>)
 8000b3e:	2220      	movs	r2, #32
 8000b40:	611a      	str	r2, [r3, #16]
			LCD_Write_Data(Camera_Data);
 8000b42:	887b      	ldrh	r3, [r7, #2]
 8000b44:	4618      	mov	r0, r3
 8000b46:	f000 fa1d 	bl	8000f84 <LCD_Write_Data>
		for(j = 0; j < 320; j++)
 8000b4a:	88bb      	ldrh	r3, [r7, #4]
 8000b4c:	3301      	adds	r3, #1
 8000b4e:	80bb      	strh	r3, [r7, #4]
 8000b50:	88bb      	ldrh	r3, [r7, #4]
 8000b52:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8000b56:	d3d8      	bcc.n	8000b0a <ImagDisp+0x16>
	for(i = 0; i < 240; i++)
 8000b58:	88fb      	ldrh	r3, [r7, #6]
 8000b5a:	3301      	adds	r3, #1
 8000b5c:	80fb      	strh	r3, [r7, #6]
 8000b5e:	88fb      	ldrh	r3, [r7, #6]
 8000b60:	2bef      	cmp	r3, #239	; 0xef
 8000b62:	d9cf      	bls.n	8000b04 <ImagDisp+0x10>
		}
	}
	HAL_Delay(1000);
 8000b64:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b68:	f001 fe18 	bl	800279c <HAL_Delay>
}
 8000b6c:	bf00      	nop
 8000b6e:	3708      	adds	r7, #8
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bd80      	pop	{r7, pc}
 8000b74:	40011000 	.word	0x40011000
 8000b78:	40010c00 	.word	0x40010c00

08000b7c <SCCB_delay>:

#define DEV_ADR  ADDR_OV7725 			 


static void SCCB_delay(void)
{	
 8000b7c:	b480      	push	{r7}
 8000b7e:	b083      	sub	sp, #12
 8000b80:	af00      	add	r7, sp, #0
   uint16_t i = 400; 
 8000b82:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000b86:	80fb      	strh	r3, [r7, #6]
   while(i) 
 8000b88:	e002      	b.n	8000b90 <SCCB_delay+0x14>
   { 
     i--; 
 8000b8a:	88fb      	ldrh	r3, [r7, #6]
 8000b8c:	3b01      	subs	r3, #1
 8000b8e:	80fb      	strh	r3, [r7, #6]
   while(i) 
 8000b90:	88fb      	ldrh	r3, [r7, #6]
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d1f9      	bne.n	8000b8a <SCCB_delay+0xe>
   } 
}
 8000b96:	bf00      	nop
 8000b98:	bf00      	nop
 8000b9a:	370c      	adds	r7, #12
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bc80      	pop	{r7}
 8000ba0:	4770      	bx	lr
	...

08000ba4 <SCCB_Start>:


static int SCCB_Start(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	af00      	add	r7, sp, #0
	SDA_H;
 8000ba8:	4b13      	ldr	r3, [pc, #76]	; (8000bf8 <SCCB_Start+0x54>)
 8000baa:	2280      	movs	r2, #128	; 0x80
 8000bac:	611a      	str	r2, [r3, #16]
	SCL_H;
 8000bae:	4b12      	ldr	r3, [pc, #72]	; (8000bf8 <SCCB_Start+0x54>)
 8000bb0:	2240      	movs	r2, #64	; 0x40
 8000bb2:	611a      	str	r2, [r3, #16]
	SCCB_delay();
 8000bb4:	f7ff ffe2 	bl	8000b7c <SCCB_delay>
	if(!SDA_read)
 8000bb8:	2180      	movs	r1, #128	; 0x80
 8000bba:	480f      	ldr	r0, [pc, #60]	; (8000bf8 <SCCB_Start+0x54>)
 8000bbc:	f002 fd9e 	bl	80036fc <HAL_GPIO_ReadPin>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d101      	bne.n	8000bca <SCCB_Start+0x26>
	return DISABLE;	
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	e013      	b.n	8000bf2 <SCCB_Start+0x4e>
	SDA_L;
 8000bca:	4b0b      	ldr	r3, [pc, #44]	; (8000bf8 <SCCB_Start+0x54>)
 8000bcc:	2280      	movs	r2, #128	; 0x80
 8000bce:	615a      	str	r2, [r3, #20]
	SCCB_delay();
 8000bd0:	f7ff ffd4 	bl	8000b7c <SCCB_delay>
	if(SDA_read) 
 8000bd4:	2180      	movs	r1, #128	; 0x80
 8000bd6:	4808      	ldr	r0, [pc, #32]	; (8000bf8 <SCCB_Start+0x54>)
 8000bd8:	f002 fd90 	bl	80036fc <HAL_GPIO_ReadPin>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d001      	beq.n	8000be6 <SCCB_Start+0x42>
	return DISABLE;	
 8000be2:	2300      	movs	r3, #0
 8000be4:	e005      	b.n	8000bf2 <SCCB_Start+0x4e>
	SDA_L;
 8000be6:	4b04      	ldr	r3, [pc, #16]	; (8000bf8 <SCCB_Start+0x54>)
 8000be8:	2280      	movs	r2, #128	; 0x80
 8000bea:	615a      	str	r2, [r3, #20]
	SCCB_delay();
 8000bec:	f7ff ffc6 	bl	8000b7c <SCCB_delay>
	return ENABLE;
 8000bf0:	2301      	movs	r3, #1
}
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	40011000 	.word	0x40011000

08000bfc <SCCB_Stop>:


static void SCCB_Stop(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	af00      	add	r7, sp, #0
	SCL_L;
 8000c00:	4b0a      	ldr	r3, [pc, #40]	; (8000c2c <SCCB_Stop+0x30>)
 8000c02:	2240      	movs	r2, #64	; 0x40
 8000c04:	615a      	str	r2, [r3, #20]
	SCCB_delay();
 8000c06:	f7ff ffb9 	bl	8000b7c <SCCB_delay>
	SDA_L;
 8000c0a:	4b08      	ldr	r3, [pc, #32]	; (8000c2c <SCCB_Stop+0x30>)
 8000c0c:	2280      	movs	r2, #128	; 0x80
 8000c0e:	615a      	str	r2, [r3, #20]
	SCCB_delay();
 8000c10:	f7ff ffb4 	bl	8000b7c <SCCB_delay>
	SCL_H;
 8000c14:	4b05      	ldr	r3, [pc, #20]	; (8000c2c <SCCB_Stop+0x30>)
 8000c16:	2240      	movs	r2, #64	; 0x40
 8000c18:	611a      	str	r2, [r3, #16]
	SCCB_delay();
 8000c1a:	f7ff ffaf 	bl	8000b7c <SCCB_delay>
	SDA_H;
 8000c1e:	4b03      	ldr	r3, [pc, #12]	; (8000c2c <SCCB_Stop+0x30>)
 8000c20:	2280      	movs	r2, #128	; 0x80
 8000c22:	611a      	str	r2, [r3, #16]
	SCCB_delay();
 8000c24:	f7ff ffaa 	bl	8000b7c <SCCB_delay>
}
 8000c28:	bf00      	nop
 8000c2a:	bd80      	pop	{r7, pc}
 8000c2c:	40011000 	.word	0x40011000

08000c30 <SCCB_Ack>:


static void SCCB_Ack(void)
{	
 8000c30:	b580      	push	{r7, lr}
 8000c32:	af00      	add	r7, sp, #0
	SCL_L;
 8000c34:	4b0a      	ldr	r3, [pc, #40]	; (8000c60 <SCCB_Ack+0x30>)
 8000c36:	2240      	movs	r2, #64	; 0x40
 8000c38:	615a      	str	r2, [r3, #20]
	SCCB_delay();
 8000c3a:	f7ff ff9f 	bl	8000b7c <SCCB_delay>
	SDA_L;
 8000c3e:	4b08      	ldr	r3, [pc, #32]	; (8000c60 <SCCB_Ack+0x30>)
 8000c40:	2280      	movs	r2, #128	; 0x80
 8000c42:	615a      	str	r2, [r3, #20]
	SCCB_delay();
 8000c44:	f7ff ff9a 	bl	8000b7c <SCCB_delay>
	SCL_H;
 8000c48:	4b05      	ldr	r3, [pc, #20]	; (8000c60 <SCCB_Ack+0x30>)
 8000c4a:	2240      	movs	r2, #64	; 0x40
 8000c4c:	611a      	str	r2, [r3, #16]
	SCCB_delay();
 8000c4e:	f7ff ff95 	bl	8000b7c <SCCB_delay>
	SCL_L;
 8000c52:	4b03      	ldr	r3, [pc, #12]	; (8000c60 <SCCB_Ack+0x30>)
 8000c54:	2240      	movs	r2, #64	; 0x40
 8000c56:	615a      	str	r2, [r3, #20]
	SCCB_delay();
 8000c58:	f7ff ff90 	bl	8000b7c <SCCB_delay>
}
 8000c5c:	bf00      	nop
 8000c5e:	bd80      	pop	{r7, pc}
 8000c60:	40011000 	.word	0x40011000

08000c64 <SCCB_NoAck>:


static void SCCB_NoAck(void)
{	
 8000c64:	b580      	push	{r7, lr}
 8000c66:	af00      	add	r7, sp, #0
	SCL_L;
 8000c68:	4b0a      	ldr	r3, [pc, #40]	; (8000c94 <SCCB_NoAck+0x30>)
 8000c6a:	2240      	movs	r2, #64	; 0x40
 8000c6c:	615a      	str	r2, [r3, #20]
	SCCB_delay();
 8000c6e:	f7ff ff85 	bl	8000b7c <SCCB_delay>
	SDA_H;
 8000c72:	4b08      	ldr	r3, [pc, #32]	; (8000c94 <SCCB_NoAck+0x30>)
 8000c74:	2280      	movs	r2, #128	; 0x80
 8000c76:	611a      	str	r2, [r3, #16]
	SCCB_delay();
 8000c78:	f7ff ff80 	bl	8000b7c <SCCB_delay>
	SCL_H;
 8000c7c:	4b05      	ldr	r3, [pc, #20]	; (8000c94 <SCCB_NoAck+0x30>)
 8000c7e:	2240      	movs	r2, #64	; 0x40
 8000c80:	611a      	str	r2, [r3, #16]
	SCCB_delay();
 8000c82:	f7ff ff7b 	bl	8000b7c <SCCB_delay>
	SCL_L;
 8000c86:	4b03      	ldr	r3, [pc, #12]	; (8000c94 <SCCB_NoAck+0x30>)
 8000c88:	2240      	movs	r2, #64	; 0x40
 8000c8a:	615a      	str	r2, [r3, #20]
	SCCB_delay();
 8000c8c:	f7ff ff76 	bl	8000b7c <SCCB_delay>
}
 8000c90:	bf00      	nop
 8000c92:	bd80      	pop	{r7, pc}
 8000c94:	40011000 	.word	0x40011000

08000c98 <SCCB_WaitAck>:


static int SCCB_WaitAck(void) 	
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	af00      	add	r7, sp, #0
	SCL_L;
 8000c9c:	4b10      	ldr	r3, [pc, #64]	; (8000ce0 <SCCB_WaitAck+0x48>)
 8000c9e:	2240      	movs	r2, #64	; 0x40
 8000ca0:	615a      	str	r2, [r3, #20]
	SCCB_delay();
 8000ca2:	f7ff ff6b 	bl	8000b7c <SCCB_delay>
	SDA_H;			
 8000ca6:	4b0e      	ldr	r3, [pc, #56]	; (8000ce0 <SCCB_WaitAck+0x48>)
 8000ca8:	2280      	movs	r2, #128	; 0x80
 8000caa:	611a      	str	r2, [r3, #16]
	SCCB_delay();
 8000cac:	f7ff ff66 	bl	8000b7c <SCCB_delay>
	SCL_H;
 8000cb0:	4b0b      	ldr	r3, [pc, #44]	; (8000ce0 <SCCB_WaitAck+0x48>)
 8000cb2:	2240      	movs	r2, #64	; 0x40
 8000cb4:	611a      	str	r2, [r3, #16]
	SCCB_delay();
 8000cb6:	f7ff ff61 	bl	8000b7c <SCCB_delay>
	if(SDA_read)
 8000cba:	2180      	movs	r1, #128	; 0x80
 8000cbc:	4808      	ldr	r0, [pc, #32]	; (8000ce0 <SCCB_WaitAck+0x48>)
 8000cbe:	f002 fd1d 	bl	80036fc <HAL_GPIO_ReadPin>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d004      	beq.n	8000cd2 <SCCB_WaitAck+0x3a>
	{
      SCL_L;
 8000cc8:	4b05      	ldr	r3, [pc, #20]	; (8000ce0 <SCCB_WaitAck+0x48>)
 8000cca:	2240      	movs	r2, #64	; 0x40
 8000ccc:	615a      	str	r2, [r3, #20]
      return DISABLE;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	e003      	b.n	8000cda <SCCB_WaitAck+0x42>
	}
	SCL_L;
 8000cd2:	4b03      	ldr	r3, [pc, #12]	; (8000ce0 <SCCB_WaitAck+0x48>)
 8000cd4:	2240      	movs	r2, #64	; 0x40
 8000cd6:	615a      	str	r2, [r3, #20]
	return ENABLE;
 8000cd8:	2301      	movs	r3, #1
}
 8000cda:	4618      	mov	r0, r3
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	40011000 	.word	0x40011000

08000ce4 <SCCB_SendByte>:


static void SCCB_SendByte(uint8_t SendByte) 
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b084      	sub	sp, #16
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	4603      	mov	r3, r0
 8000cec:	71fb      	strb	r3, [r7, #7]
    uint8_t i=8;
 8000cee:	2308      	movs	r3, #8
 8000cf0:	73fb      	strb	r3, [r7, #15]
    while(i--)
 8000cf2:	e019      	b.n	8000d28 <SCCB_SendByte+0x44>
    {
        SCL_L;
 8000cf4:	4b12      	ldr	r3, [pc, #72]	; (8000d40 <SCCB_SendByte+0x5c>)
 8000cf6:	2240      	movs	r2, #64	; 0x40
 8000cf8:	615a      	str	r2, [r3, #20]
        SCCB_delay();
 8000cfa:	f7ff ff3f 	bl	8000b7c <SCCB_delay>
      if(SendByte&0x80)
 8000cfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	da03      	bge.n	8000d0e <SCCB_SendByte+0x2a>
        SDA_H;  
 8000d06:	4b0e      	ldr	r3, [pc, #56]	; (8000d40 <SCCB_SendByte+0x5c>)
 8000d08:	2280      	movs	r2, #128	; 0x80
 8000d0a:	611a      	str	r2, [r3, #16]
 8000d0c:	e002      	b.n	8000d14 <SCCB_SendByte+0x30>
      else 
        SDA_L;   
 8000d0e:	4b0c      	ldr	r3, [pc, #48]	; (8000d40 <SCCB_SendByte+0x5c>)
 8000d10:	2280      	movs	r2, #128	; 0x80
 8000d12:	615a      	str	r2, [r3, #20]
        SendByte<<=1;
 8000d14:	79fb      	ldrb	r3, [r7, #7]
 8000d16:	005b      	lsls	r3, r3, #1
 8000d18:	71fb      	strb	r3, [r7, #7]
        SCCB_delay();
 8000d1a:	f7ff ff2f 	bl	8000b7c <SCCB_delay>
		SCL_H;
 8000d1e:	4b08      	ldr	r3, [pc, #32]	; (8000d40 <SCCB_SendByte+0x5c>)
 8000d20:	2240      	movs	r2, #64	; 0x40
 8000d22:	611a      	str	r2, [r3, #16]
        SCCB_delay();
 8000d24:	f7ff ff2a 	bl	8000b7c <SCCB_delay>
    while(i--)
 8000d28:	7bfb      	ldrb	r3, [r7, #15]
 8000d2a:	1e5a      	subs	r2, r3, #1
 8000d2c:	73fa      	strb	r2, [r7, #15]
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d1e0      	bne.n	8000cf4 <SCCB_SendByte+0x10>
    }
    SCL_L;
 8000d32:	4b03      	ldr	r3, [pc, #12]	; (8000d40 <SCCB_SendByte+0x5c>)
 8000d34:	2240      	movs	r2, #64	; 0x40
 8000d36:	615a      	str	r2, [r3, #20]
}
 8000d38:	bf00      	nop
 8000d3a:	3710      	adds	r7, #16
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bd80      	pop	{r7, pc}
 8000d40:	40011000 	.word	0x40011000

08000d44 <SCCB_ReceiveByte>:


static int SCCB_ReceiveByte(void)  
{ 
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b082      	sub	sp, #8
 8000d48:	af00      	add	r7, sp, #0
    uint8_t i=8;
 8000d4a:	2308      	movs	r3, #8
 8000d4c:	71fb      	strb	r3, [r7, #7]
    uint8_t ReceiveByte=0;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	71bb      	strb	r3, [r7, #6]

    SDA_H;				
 8000d52:	4b14      	ldr	r3, [pc, #80]	; (8000da4 <SCCB_ReceiveByte+0x60>)
 8000d54:	2280      	movs	r2, #128	; 0x80
 8000d56:	611a      	str	r2, [r3, #16]
    while(i--)
 8000d58:	e017      	b.n	8000d8a <SCCB_ReceiveByte+0x46>
    {
      ReceiveByte<<=1;      
 8000d5a:	79bb      	ldrb	r3, [r7, #6]
 8000d5c:	005b      	lsls	r3, r3, #1
 8000d5e:	71bb      	strb	r3, [r7, #6]
      SCL_L;
 8000d60:	4b10      	ldr	r3, [pc, #64]	; (8000da4 <SCCB_ReceiveByte+0x60>)
 8000d62:	2240      	movs	r2, #64	; 0x40
 8000d64:	615a      	str	r2, [r3, #20]
      SCCB_delay();
 8000d66:	f7ff ff09 	bl	8000b7c <SCCB_delay>
	  SCL_H;
 8000d6a:	4b0e      	ldr	r3, [pc, #56]	; (8000da4 <SCCB_ReceiveByte+0x60>)
 8000d6c:	2240      	movs	r2, #64	; 0x40
 8000d6e:	611a      	str	r2, [r3, #16]
      SCCB_delay();	
 8000d70:	f7ff ff04 	bl	8000b7c <SCCB_delay>
      if(SDA_read)
 8000d74:	2180      	movs	r1, #128	; 0x80
 8000d76:	480b      	ldr	r0, [pc, #44]	; (8000da4 <SCCB_ReceiveByte+0x60>)
 8000d78:	f002 fcc0 	bl	80036fc <HAL_GPIO_ReadPin>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d003      	beq.n	8000d8a <SCCB_ReceiveByte+0x46>
      {
        ReceiveByte|=0x01;
 8000d82:	79bb      	ldrb	r3, [r7, #6]
 8000d84:	f043 0301 	orr.w	r3, r3, #1
 8000d88:	71bb      	strb	r3, [r7, #6]
    while(i--)
 8000d8a:	79fb      	ldrb	r3, [r7, #7]
 8000d8c:	1e5a      	subs	r2, r3, #1
 8000d8e:	71fa      	strb	r2, [r7, #7]
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d1e2      	bne.n	8000d5a <SCCB_ReceiveByte+0x16>
      }
    }
    SCL_L;
 8000d94:	4b03      	ldr	r3, [pc, #12]	; (8000da4 <SCCB_ReceiveByte+0x60>)
 8000d96:	2240      	movs	r2, #64	; 0x40
 8000d98:	615a      	str	r2, [r3, #20]
    return ReceiveByte;
 8000d9a:	79bb      	ldrb	r3, [r7, #6]
}
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	3708      	adds	r7, #8
 8000da0:	46bd      	mov	sp, r7
 8000da2:	bd80      	pop	{r7, pc}
 8000da4:	40011000 	.word	0x40011000

08000da8 <SCCB_WriteByte>:

          
int SCCB_WriteByte( uint16_t WriteAddress , uint8_t SendByte )
{		
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b082      	sub	sp, #8
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	4603      	mov	r3, r0
 8000db0:	460a      	mov	r2, r1
 8000db2:	80fb      	strh	r3, [r7, #6]
 8000db4:	4613      	mov	r3, r2
 8000db6:	717b      	strb	r3, [r7, #5]
    if(!SCCB_Start())
 8000db8:	f7ff fef4 	bl	8000ba4 <SCCB_Start>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d101      	bne.n	8000dc6 <SCCB_WriteByte+0x1e>
	{
	    return DISABLE;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	e01b      	b.n	8000dfe <SCCB_WriteByte+0x56>
	}
    SCCB_SendByte( DEV_ADR );                
 8000dc6:	2042      	movs	r0, #66	; 0x42
 8000dc8:	f7ff ff8c 	bl	8000ce4 <SCCB_SendByte>
    if( !SCCB_WaitAck() )
 8000dcc:	f7ff ff64 	bl	8000c98 <SCCB_WaitAck>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d103      	bne.n	8000dde <SCCB_WriteByte+0x36>
	{
		SCCB_Stop(); 
 8000dd6:	f7ff ff11 	bl	8000bfc <SCCB_Stop>
		return DISABLE;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	e00f      	b.n	8000dfe <SCCB_WriteByte+0x56>
	}
    SCCB_SendByte((uint8_t)(WriteAddress & 0x00FF));  
 8000dde:	88fb      	ldrh	r3, [r7, #6]
 8000de0:	b2db      	uxtb	r3, r3
 8000de2:	4618      	mov	r0, r3
 8000de4:	f7ff ff7e 	bl	8000ce4 <SCCB_SendByte>
    SCCB_WaitAck();	
 8000de8:	f7ff ff56 	bl	8000c98 <SCCB_WaitAck>
    SCCB_SendByte(SendByte);
 8000dec:	797b      	ldrb	r3, [r7, #5]
 8000dee:	4618      	mov	r0, r3
 8000df0:	f7ff ff78 	bl	8000ce4 <SCCB_SendByte>
    SCCB_WaitAck();   
 8000df4:	f7ff ff50 	bl	8000c98 <SCCB_WaitAck>
    SCCB_Stop(); 
 8000df8:	f7ff ff00 	bl	8000bfc <SCCB_Stop>
    return ENABLE;
 8000dfc:	2301      	movs	r3, #1
}
 8000dfe:	4618      	mov	r0, r3
 8000e00:	3708      	adds	r7, #8
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}

08000e06 <SCCB_ReadByte>:

          
int SCCB_ReadByte(uint8_t* pBuffer, uint16_t length, uint8_t ReadAddress)
{	
 8000e06:	b580      	push	{r7, lr}
 8000e08:	b082      	sub	sp, #8
 8000e0a:	af00      	add	r7, sp, #0
 8000e0c:	6078      	str	r0, [r7, #4]
 8000e0e:	460b      	mov	r3, r1
 8000e10:	807b      	strh	r3, [r7, #2]
 8000e12:	4613      	mov	r3, r2
 8000e14:	707b      	strb	r3, [r7, #1]
    if(!SCCB_Start())
 8000e16:	f7ff fec5 	bl	8000ba4 <SCCB_Start>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d101      	bne.n	8000e24 <SCCB_ReadByte+0x1e>
	{
	    return DISABLE;
 8000e20:	2300      	movs	r3, #0
 8000e22:	e040      	b.n	8000ea6 <SCCB_ReadByte+0xa0>
	}
    SCCB_SendByte( DEV_ADR );       
 8000e24:	2042      	movs	r0, #66	; 0x42
 8000e26:	f7ff ff5d 	bl	8000ce4 <SCCB_SendByte>
    if( !SCCB_WaitAck() )
 8000e2a:	f7ff ff35 	bl	8000c98 <SCCB_WaitAck>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d103      	bne.n	8000e3c <SCCB_ReadByte+0x36>
	{
		SCCB_Stop(); 
 8000e34:	f7ff fee2 	bl	8000bfc <SCCB_Stop>
		return DISABLE;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	e034      	b.n	8000ea6 <SCCB_ReadByte+0xa0>
	}
    SCCB_SendByte( ReadAddress );     
 8000e3c:	787b      	ldrb	r3, [r7, #1]
 8000e3e:	4618      	mov	r0, r3
 8000e40:	f7ff ff50 	bl	8000ce4 <SCCB_SendByte>
    SCCB_WaitAck();	
 8000e44:	f7ff ff28 	bl	8000c98 <SCCB_WaitAck>
    SCCB_Stop(); 
 8000e48:	f7ff fed8 	bl	8000bfc <SCCB_Stop>
	
    if(!SCCB_Start())
 8000e4c:	f7ff feaa 	bl	8000ba4 <SCCB_Start>
 8000e50:	4603      	mov	r3, r0
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d101      	bne.n	8000e5a <SCCB_ReadByte+0x54>
	{
		return DISABLE;
 8000e56:	2300      	movs	r3, #0
 8000e58:	e025      	b.n	8000ea6 <SCCB_ReadByte+0xa0>
	}
    SCCB_SendByte( DEV_ADR + 1 );   
 8000e5a:	2043      	movs	r0, #67	; 0x43
 8000e5c:	f7ff ff42 	bl	8000ce4 <SCCB_SendByte>
    if(!SCCB_WaitAck())
 8000e60:	f7ff ff1a 	bl	8000c98 <SCCB_WaitAck>
 8000e64:	4603      	mov	r3, r0
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d117      	bne.n	8000e9a <SCCB_ReadByte+0x94>
	{
		SCCB_Stop(); 
 8000e6a:	f7ff fec7 	bl	8000bfc <SCCB_Stop>
		return DISABLE;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	e019      	b.n	8000ea6 <SCCB_ReadByte+0xa0>
	}
    while(length)
    {
      *pBuffer = SCCB_ReceiveByte();
 8000e72:	f7ff ff67 	bl	8000d44 <SCCB_ReceiveByte>
 8000e76:	4603      	mov	r3, r0
 8000e78:	b2da      	uxtb	r2, r3
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	701a      	strb	r2, [r3, #0]
      if(length == 1)
 8000e7e:	887b      	ldrh	r3, [r7, #2]
 8000e80:	2b01      	cmp	r3, #1
 8000e82:	d102      	bne.n	8000e8a <SCCB_ReadByte+0x84>
	  {
		  SCCB_NoAck();
 8000e84:	f7ff feee 	bl	8000c64 <SCCB_NoAck>
 8000e88:	e001      	b.n	8000e8e <SCCB_ReadByte+0x88>
	  }
      else
	  {
		SCCB_Ack(); 
 8000e8a:	f7ff fed1 	bl	8000c30 <SCCB_Ack>
	  }
      pBuffer++;
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	3301      	adds	r3, #1
 8000e92:	607b      	str	r3, [r7, #4]
      length--;
 8000e94:	887b      	ldrh	r3, [r7, #2]
 8000e96:	3b01      	subs	r3, #1
 8000e98:	807b      	strh	r3, [r7, #2]
    while(length)
 8000e9a:	887b      	ldrh	r3, [r7, #2]
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d1e8      	bne.n	8000e72 <SCCB_ReadByte+0x6c>
    }
    SCCB_Stop();
 8000ea0:	f7ff feac 	bl	8000bfc <SCCB_Stop>
    return ENABLE;
 8000ea4:	2301      	movs	r3, #1
}
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	3708      	adds	r7, #8
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}

08000eae <Delay>:
void		LCD_FillColor           ( uint32_t ulAmout_Point, uint16_t usColor );
uint16_t	LCD_Read_PixelData      ( void );



void Delay ( __IO uint32_t nCount ){  for ( ; nCount != 0; nCount -- );}
 8000eae:	b480      	push	{r7}
 8000eb0:	b083      	sub	sp, #12
 8000eb2:	af00      	add	r7, sp, #0
 8000eb4:	6078      	str	r0, [r7, #4]
 8000eb6:	e002      	b.n	8000ebe <Delay+0x10>
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	3b01      	subs	r3, #1
 8000ebc:	607b      	str	r3, [r7, #4]
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d1f9      	bne.n	8000eb8 <Delay+0xa>
 8000ec4:	bf00      	nop
 8000ec6:	bf00      	nop
 8000ec8:	370c      	adds	r7, #12
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bc80      	pop	{r7}
 8000ece:	4770      	bx	lr

08000ed0 <LCD_INIT>:

void LCD_INIT ( void )
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b082      	sub	sp, #8
 8000ed4:	af02      	add	r7, sp, #8
	LCD_BackLed_Control(ENABLE);      
 8000ed6:	2001      	movs	r0, #1
 8000ed8:	f000 f82a 	bl	8000f30 <LCD_BackLed_Control>
	LCD_Rst();
 8000edc:	f000 f810 	bl	8000f00 <LCD_Rst>
	LCD_REG_Config();
 8000ee0:	f000 f860 	bl	8000fa4 <LCD_REG_Config>
	LCD_Clear (0, 0, 240, 320, BACKGROUND);
 8000ee4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000ee8:	9300      	str	r3, [sp, #0]
 8000eea:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000eee:	22f0      	movs	r2, #240	; 0xf0
 8000ef0:	2100      	movs	r1, #0
 8000ef2:	2000      	movs	r0, #0
 8000ef4:	f000 f9e7 	bl	80012c6 <LCD_Clear>
}
 8000ef8:	bf00      	nop
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}
	...

08000f00 <LCD_Rst>:



void LCD_Rst ( void )
{			
 8000f00:	b580      	push	{r7, lr}
 8000f02:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RST_PORT,LCD_RST_PIN,GPIO_PIN_RESET);
 8000f04:	2200      	movs	r2, #0
 8000f06:	2102      	movs	r1, #2
 8000f08:	4807      	ldr	r0, [pc, #28]	; (8000f28 <LCD_Rst+0x28>)
 8000f0a:	f002 fc0e 	bl	800372a <HAL_GPIO_WritePin>
	Delay ( 0xAFFf<<2 ); 					   
 8000f0e:	4807      	ldr	r0, [pc, #28]	; (8000f2c <LCD_Rst+0x2c>)
 8000f10:	f7ff ffcd 	bl	8000eae <Delay>
	HAL_GPIO_WritePin(LCD_RST_PORT,LCD_RST_PIN,GPIO_PIN_SET);
 8000f14:	2201      	movs	r2, #1
 8000f16:	2102      	movs	r1, #2
 8000f18:	4803      	ldr	r0, [pc, #12]	; (8000f28 <LCD_Rst+0x28>)
 8000f1a:	f002 fc06 	bl	800372a <HAL_GPIO_WritePin>
	Delay ( 0xAFFf<<2 ); 	
 8000f1e:	4803      	ldr	r0, [pc, #12]	; (8000f2c <LCD_Rst+0x2c>)
 8000f20:	f7ff ffc5 	bl	8000eae <Delay>
}
 8000f24:	bf00      	nop
 8000f26:	bd80      	pop	{r7, pc}
 8000f28:	40011800 	.word	0x40011800
 8000f2c:	0002bffc 	.word	0x0002bffc

08000f30 <LCD_BackLed_Control>:


void LCD_BackLed_Control ( FunctionalState enumState )
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b082      	sub	sp, #8
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	4603      	mov	r3, r0
 8000f38:	71fb      	strb	r3, [r7, #7]
	if ( enumState )
 8000f3a:	79fb      	ldrb	r3, [r7, #7]
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d006      	beq.n	8000f4e <LCD_BackLed_Control+0x1e>
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_RESET);	
 8000f40:	2200      	movs	r2, #0
 8000f42:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f46:	4807      	ldr	r0, [pc, #28]	; (8000f64 <LCD_BackLed_Control+0x34>)
 8000f48:	f002 fbef 	bl	800372a <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_SET);			
}
 8000f4c:	e005      	b.n	8000f5a <LCD_BackLed_Control+0x2a>
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_SET);			
 8000f4e:	2201      	movs	r2, #1
 8000f50:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f54:	4803      	ldr	r0, [pc, #12]	; (8000f64 <LCD_BackLed_Control+0x34>)
 8000f56:	f002 fbe8 	bl	800372a <HAL_GPIO_WritePin>
}
 8000f5a:	bf00      	nop
 8000f5c:	3708      	adds	r7, #8
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	40011400 	.word	0x40011400

08000f68 <LCD_Write_Cmd>:




void LCD_Write_Cmd ( uint16_t usCmd )
{
 8000f68:	b480      	push	{r7}
 8000f6a:	b083      	sub	sp, #12
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	4603      	mov	r3, r0
 8000f70:	80fb      	strh	r3, [r7, #6]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 8000f72:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8000f76:	88fb      	ldrh	r3, [r7, #6]
 8000f78:	8013      	strh	r3, [r2, #0]
}
 8000f7a:	bf00      	nop
 8000f7c:	370c      	adds	r7, #12
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bc80      	pop	{r7}
 8000f82:	4770      	bx	lr

08000f84 <LCD_Write_Data>:




void LCD_Write_Data ( uint16_t usData )
{
 8000f84:	b480      	push	{r7}
 8000f86:	b083      	sub	sp, #12
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	80fb      	strh	r3, [r7, #6]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000f8e:	4a04      	ldr	r2, [pc, #16]	; (8000fa0 <LCD_Write_Data+0x1c>)
 8000f90:	88fb      	ldrh	r3, [r7, #6]
 8000f92:	8013      	strh	r3, [r2, #0]
}
 8000f94:	bf00      	nop
 8000f96:	370c      	adds	r7, #12
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bc80      	pop	{r7}
 8000f9c:	4770      	bx	lr
 8000f9e:	bf00      	nop
 8000fa0:	60020000 	.word	0x60020000

08000fa4 <LCD_REG_Config>:
	return ( * ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) );	
}


void LCD_REG_Config ( void )
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	af00      	add	r7, sp, #0
	/*  Power control B (CFh)  */
	DEBUG_DELAY  ();
	LCD_Write_Cmd ( 0xCF  );
 8000fa8:	20cf      	movs	r0, #207	; 0xcf
 8000faa:	f7ff ffdd 	bl	8000f68 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00  );
 8000fae:	2000      	movs	r0, #0
 8000fb0:	f7ff ffe8 	bl	8000f84 <LCD_Write_Data>
	LCD_Write_Data ( 0x81  );
 8000fb4:	2081      	movs	r0, #129	; 0x81
 8000fb6:	f7ff ffe5 	bl	8000f84 <LCD_Write_Data>
	LCD_Write_Data ( 0x30  );
 8000fba:	2030      	movs	r0, #48	; 0x30
 8000fbc:	f7ff ffe2 	bl	8000f84 <LCD_Write_Data>
	
	/*  Power on sequence control (EDh) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xED );
 8000fc0:	20ed      	movs	r0, #237	; 0xed
 8000fc2:	f7ff ffd1 	bl	8000f68 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x64 );
 8000fc6:	2064      	movs	r0, #100	; 0x64
 8000fc8:	f7ff ffdc 	bl	8000f84 <LCD_Write_Data>
	LCD_Write_Data ( 0x03 );
 8000fcc:	2003      	movs	r0, #3
 8000fce:	f7ff ffd9 	bl	8000f84 <LCD_Write_Data>
	LCD_Write_Data ( 0x12 );
 8000fd2:	2012      	movs	r0, #18
 8000fd4:	f7ff ffd6 	bl	8000f84 <LCD_Write_Data>
	LCD_Write_Data ( 0x81 );
 8000fd8:	2081      	movs	r0, #129	; 0x81
 8000fda:	f7ff ffd3 	bl	8000f84 <LCD_Write_Data>
	
	/*  Driver timing control A (E8h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xE8 );
 8000fde:	20e8      	movs	r0, #232	; 0xe8
 8000fe0:	f7ff ffc2 	bl	8000f68 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x85 );
 8000fe4:	2085      	movs	r0, #133	; 0x85
 8000fe6:	f7ff ffcd 	bl	8000f84 <LCD_Write_Data>
	LCD_Write_Data ( 0x10 );
 8000fea:	2010      	movs	r0, #16
 8000fec:	f7ff ffca 	bl	8000f84 <LCD_Write_Data>
	LCD_Write_Data ( 0x78 );
 8000ff0:	2078      	movs	r0, #120	; 0x78
 8000ff2:	f7ff ffc7 	bl	8000f84 <LCD_Write_Data>
	
	/*  Power control A (CBh) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xCB );
 8000ff6:	20cb      	movs	r0, #203	; 0xcb
 8000ff8:	f7ff ffb6 	bl	8000f68 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x39 );
 8000ffc:	2039      	movs	r0, #57	; 0x39
 8000ffe:	f7ff ffc1 	bl	8000f84 <LCD_Write_Data>
	LCD_Write_Data ( 0x2C );
 8001002:	202c      	movs	r0, #44	; 0x2c
 8001004:	f7ff ffbe 	bl	8000f84 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8001008:	2000      	movs	r0, #0
 800100a:	f7ff ffbb 	bl	8000f84 <LCD_Write_Data>
	LCD_Write_Data ( 0x34 );
 800100e:	2034      	movs	r0, #52	; 0x34
 8001010:	f7ff ffb8 	bl	8000f84 <LCD_Write_Data>
	LCD_Write_Data ( 0x02 );
 8001014:	2002      	movs	r0, #2
 8001016:	f7ff ffb5 	bl	8000f84 <LCD_Write_Data>
	
	/* Pump ratio control (F7h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xF7 );
 800101a:	20f7      	movs	r0, #247	; 0xf7
 800101c:	f7ff ffa4 	bl	8000f68 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x20 );
 8001020:	2020      	movs	r0, #32
 8001022:	f7ff ffaf 	bl	8000f84 <LCD_Write_Data>
	
	/* Driver timing control B */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xEA );
 8001026:	20ea      	movs	r0, #234	; 0xea
 8001028:	f7ff ff9e 	bl	8000f68 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 800102c:	2000      	movs	r0, #0
 800102e:	f7ff ffa9 	bl	8000f84 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8001032:	2000      	movs	r0, #0
 8001034:	f7ff ffa6 	bl	8000f84 <LCD_Write_Data>
	
	/* Frame Rate Control (In Normal Mode/Full Colors) (B1h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xB1 );
 8001038:	20b1      	movs	r0, #177	; 0xb1
 800103a:	f7ff ff95 	bl	8000f68 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 800103e:	2000      	movs	r0, #0
 8001040:	f7ff ffa0 	bl	8000f84 <LCD_Write_Data>
	LCD_Write_Data ( 0x1B );
 8001044:	201b      	movs	r0, #27
 8001046:	f7ff ff9d 	bl	8000f84 <LCD_Write_Data>
	
	/*  Display Function Control (B6h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xB6 );
 800104a:	20b6      	movs	r0, #182	; 0xb6
 800104c:	f7ff ff8c 	bl	8000f68 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x0A );
 8001050:	200a      	movs	r0, #10
 8001052:	f7ff ff97 	bl	8000f84 <LCD_Write_Data>
	LCD_Write_Data ( 0xA2 );
 8001056:	20a2      	movs	r0, #162	; 0xa2
 8001058:	f7ff ff94 	bl	8000f84 <LCD_Write_Data>
	
	/* Power Control 1 (C0h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xC0 );
 800105c:	20c0      	movs	r0, #192	; 0xc0
 800105e:	f7ff ff83 	bl	8000f68 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x35 );
 8001062:	2035      	movs	r0, #53	; 0x35
 8001064:	f7ff ff8e 	bl	8000f84 <LCD_Write_Data>
	
	/* Power Control 2 (C1h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xC1 );
 8001068:	20c1      	movs	r0, #193	; 0xc1
 800106a:	f7ff ff7d 	bl	8000f68 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x11 );
 800106e:	2011      	movs	r0, #17
 8001070:	f7ff ff88 	bl	8000f84 <LCD_Write_Data>
	
	/* VCOM Control 1 (C5h) */
	LCD_Write_Cmd ( 0xC5 );
 8001074:	20c5      	movs	r0, #197	; 0xc5
 8001076:	f7ff ff77 	bl	8000f68 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x45 );
 800107a:	2045      	movs	r0, #69	; 0x45
 800107c:	f7ff ff82 	bl	8000f84 <LCD_Write_Data>
	LCD_Write_Data ( 0x45 );
 8001080:	2045      	movs	r0, #69	; 0x45
 8001082:	f7ff ff7f 	bl	8000f84 <LCD_Write_Data>
	
	/*  VCOM Control 2 (C7h)  */
	LCD_Write_Cmd ( 0xC7 );
 8001086:	20c7      	movs	r0, #199	; 0xc7
 8001088:	f7ff ff6e 	bl	8000f68 <LCD_Write_Cmd>
	LCD_Write_Data ( 0xA2 );
 800108c:	20a2      	movs	r0, #162	; 0xa2
 800108e:	f7ff ff79 	bl	8000f84 <LCD_Write_Data>
	
	/* Enable 3G (F2h) */
	LCD_Write_Cmd ( 0xF2 );
 8001092:	20f2      	movs	r0, #242	; 0xf2
 8001094:	f7ff ff68 	bl	8000f68 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8001098:	2000      	movs	r0, #0
 800109a:	f7ff ff73 	bl	8000f84 <LCD_Write_Data>
	
	/* Gamma Set (26h) */
	LCD_Write_Cmd ( 0x26 );
 800109e:	2026      	movs	r0, #38	; 0x26
 80010a0:	f7ff ff62 	bl	8000f68 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x01 );
 80010a4:	2001      	movs	r0, #1
 80010a6:	f7ff ff6d 	bl	8000f84 <LCD_Write_Data>
	DEBUG_DELAY ();
	
	/* Positive Gamma Correction */
	LCD_Write_Cmd ( 0xE0 ); //Set Gamma
 80010aa:	20e0      	movs	r0, #224	; 0xe0
 80010ac:	f7ff ff5c 	bl	8000f68 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x0F );
 80010b0:	200f      	movs	r0, #15
 80010b2:	f7ff ff67 	bl	8000f84 <LCD_Write_Data>
	LCD_Write_Data ( 0x26 );
 80010b6:	2026      	movs	r0, #38	; 0x26
 80010b8:	f7ff ff64 	bl	8000f84 <LCD_Write_Data>
	LCD_Write_Data ( 0x24 );
 80010bc:	2024      	movs	r0, #36	; 0x24
 80010be:	f7ff ff61 	bl	8000f84 <LCD_Write_Data>
	LCD_Write_Data ( 0x0B );
 80010c2:	200b      	movs	r0, #11
 80010c4:	f7ff ff5e 	bl	8000f84 <LCD_Write_Data>
	LCD_Write_Data ( 0x0E );
 80010c8:	200e      	movs	r0, #14
 80010ca:	f7ff ff5b 	bl	8000f84 <LCD_Write_Data>
	LCD_Write_Data ( 0x09 );
 80010ce:	2009      	movs	r0, #9
 80010d0:	f7ff ff58 	bl	8000f84 <LCD_Write_Data>
	LCD_Write_Data ( 0x54 );
 80010d4:	2054      	movs	r0, #84	; 0x54
 80010d6:	f7ff ff55 	bl	8000f84 <LCD_Write_Data>
	LCD_Write_Data ( 0xA8 );
 80010da:	20a8      	movs	r0, #168	; 0xa8
 80010dc:	f7ff ff52 	bl	8000f84 <LCD_Write_Data>
	LCD_Write_Data ( 0x46 );
 80010e0:	2046      	movs	r0, #70	; 0x46
 80010e2:	f7ff ff4f 	bl	8000f84 <LCD_Write_Data>
	LCD_Write_Data ( 0x0C );
 80010e6:	200c      	movs	r0, #12
 80010e8:	f7ff ff4c 	bl	8000f84 <LCD_Write_Data>
	LCD_Write_Data ( 0x17 );
 80010ec:	2017      	movs	r0, #23
 80010ee:	f7ff ff49 	bl	8000f84 <LCD_Write_Data>
	LCD_Write_Data ( 0x09 );
 80010f2:	2009      	movs	r0, #9
 80010f4:	f7ff ff46 	bl	8000f84 <LCD_Write_Data>
	LCD_Write_Data ( 0x0F );
 80010f8:	200f      	movs	r0, #15
 80010fa:	f7ff ff43 	bl	8000f84 <LCD_Write_Data>
	LCD_Write_Data ( 0x07 );
 80010fe:	2007      	movs	r0, #7
 8001100:	f7ff ff40 	bl	8000f84 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8001104:	2000      	movs	r0, #0
 8001106:	f7ff ff3d 	bl	8000f84 <LCD_Write_Data>
	
	/* Negative Gamma Correction (E1h) */
	LCD_Write_Cmd ( 0XE1 ); //Set Gamma
 800110a:	20e1      	movs	r0, #225	; 0xe1
 800110c:	f7ff ff2c 	bl	8000f68 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8001110:	2000      	movs	r0, #0
 8001112:	f7ff ff37 	bl	8000f84 <LCD_Write_Data>
	LCD_Write_Data ( 0x19 );
 8001116:	2019      	movs	r0, #25
 8001118:	f7ff ff34 	bl	8000f84 <LCD_Write_Data>
	LCD_Write_Data ( 0x1B );
 800111c:	201b      	movs	r0, #27
 800111e:	f7ff ff31 	bl	8000f84 <LCD_Write_Data>
	LCD_Write_Data ( 0x04 );
 8001122:	2004      	movs	r0, #4
 8001124:	f7ff ff2e 	bl	8000f84 <LCD_Write_Data>
	LCD_Write_Data ( 0x10 );
 8001128:	2010      	movs	r0, #16
 800112a:	f7ff ff2b 	bl	8000f84 <LCD_Write_Data>
	LCD_Write_Data ( 0x07 );
 800112e:	2007      	movs	r0, #7
 8001130:	f7ff ff28 	bl	8000f84 <LCD_Write_Data>
	LCD_Write_Data ( 0x2A );
 8001134:	202a      	movs	r0, #42	; 0x2a
 8001136:	f7ff ff25 	bl	8000f84 <LCD_Write_Data>
	LCD_Write_Data ( 0x47 );
 800113a:	2047      	movs	r0, #71	; 0x47
 800113c:	f7ff ff22 	bl	8000f84 <LCD_Write_Data>
	LCD_Write_Data ( 0x39 );
 8001140:	2039      	movs	r0, #57	; 0x39
 8001142:	f7ff ff1f 	bl	8000f84 <LCD_Write_Data>
	LCD_Write_Data ( 0x03 );
 8001146:	2003      	movs	r0, #3
 8001148:	f7ff ff1c 	bl	8000f84 <LCD_Write_Data>
	LCD_Write_Data ( 0x06 );
 800114c:	2006      	movs	r0, #6
 800114e:	f7ff ff19 	bl	8000f84 <LCD_Write_Data>
	LCD_Write_Data ( 0x06 );
 8001152:	2006      	movs	r0, #6
 8001154:	f7ff ff16 	bl	8000f84 <LCD_Write_Data>
	LCD_Write_Data ( 0x30 );
 8001158:	2030      	movs	r0, #48	; 0x30
 800115a:	f7ff ff13 	bl	8000f84 <LCD_Write_Data>
	LCD_Write_Data ( 0x38 );
 800115e:	2038      	movs	r0, #56	; 0x38
 8001160:	f7ff ff10 	bl	8000f84 <LCD_Write_Data>
	LCD_Write_Data ( 0x0F );
 8001164:	200f      	movs	r0, #15
 8001166:	f7ff ff0d 	bl	8000f84 <LCD_Write_Data>
	
	/* memory access control set */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0x36 ); 	
 800116a:	2036      	movs	r0, #54	; 0x36
 800116c:	f7ff fefc 	bl	8000f68 <LCD_Write_Cmd>
	LCD_Write_Data ( 0xC8 );    
 8001170:	20c8      	movs	r0, #200	; 0xc8
 8001172:	f7ff ff07 	bl	8000f84 <LCD_Write_Data>
	DEBUG_DELAY ();
	
	/* column address control set */
	LCD_Write_Cmd ( CMD_Set_COLUMN ); 
 8001176:	202a      	movs	r0, #42	; 0x2a
 8001178:	f7ff fef6 	bl	8000f68 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 800117c:	2000      	movs	r0, #0
 800117e:	f7ff ff01 	bl	8000f84 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8001182:	2000      	movs	r0, #0
 8001184:	f7ff fefe 	bl	8000f84 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8001188:	2000      	movs	r0, #0
 800118a:	f7ff fefb 	bl	8000f84 <LCD_Write_Data>
	LCD_Write_Data ( 0xEF );
 800118e:	20ef      	movs	r0, #239	; 0xef
 8001190:	f7ff fef8 	bl	8000f84 <LCD_Write_Data>
	
	/* page address control set */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( CMD_Set_PAGE ); 
 8001194:	202b      	movs	r0, #43	; 0x2b
 8001196:	f7ff fee7 	bl	8000f68 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 800119a:	2000      	movs	r0, #0
 800119c:	f7ff fef2 	bl	8000f84 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 80011a0:	2000      	movs	r0, #0
 80011a2:	f7ff feef 	bl	8000f84 <LCD_Write_Data>
	LCD_Write_Data ( 0x01 );
 80011a6:	2001      	movs	r0, #1
 80011a8:	f7ff feec 	bl	8000f84 <LCD_Write_Data>
	LCD_Write_Data ( 0x3F );
 80011ac:	203f      	movs	r0, #63	; 0x3f
 80011ae:	f7ff fee9 	bl	8000f84 <LCD_Write_Data>
	
	/*  Pixel Format Set (3Ah)  */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0x3a ); 
 80011b2:	203a      	movs	r0, #58	; 0x3a
 80011b4:	f7ff fed8 	bl	8000f68 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x55 );
 80011b8:	2055      	movs	r0, #85	; 0x55
 80011ba:	f7ff fee3 	bl	8000f84 <LCD_Write_Data>
	
	/* Sleep Out (11h)  */
	LCD_Write_Cmd ( 0x11 );	
 80011be:	2011      	movs	r0, #17
 80011c0:	f7ff fed2 	bl	8000f68 <LCD_Write_Cmd>
	Delay ( 0xAFFf<<2 );
 80011c4:	4803      	ldr	r0, [pc, #12]	; (80011d4 <LCD_REG_Config+0x230>)
 80011c6:	f7ff fe72 	bl	8000eae <Delay>
	DEBUG_DELAY ();
	
	/* Display ON (29h) */
	LCD_Write_Cmd ( 0x29 ); 
 80011ca:	2029      	movs	r0, #41	; 0x29
 80011cc:	f7ff fecc 	bl	8000f68 <LCD_Write_Cmd>
	
	
}
 80011d0:	bf00      	nop
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	0002bffc 	.word	0x0002bffc

080011d8 <LCD_OpenWindow>:



void LCD_OpenWindow ( uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usWidth, uint16_t usHeight )
{	
 80011d8:	b590      	push	{r4, r7, lr}
 80011da:	b083      	sub	sp, #12
 80011dc:	af00      	add	r7, sp, #0
 80011de:	4604      	mov	r4, r0
 80011e0:	4608      	mov	r0, r1
 80011e2:	4611      	mov	r1, r2
 80011e4:	461a      	mov	r2, r3
 80011e6:	4623      	mov	r3, r4
 80011e8:	80fb      	strh	r3, [r7, #6]
 80011ea:	4603      	mov	r3, r0
 80011ec:	80bb      	strh	r3, [r7, #4]
 80011ee:	460b      	mov	r3, r1
 80011f0:	807b      	strh	r3, [r7, #2]
 80011f2:	4613      	mov	r3, r2
 80011f4:	803b      	strh	r3, [r7, #0]
	LCD_Write_Cmd ( CMD_Set_COLUMN ); 				
 80011f6:	202a      	movs	r0, #42	; 0x2a
 80011f8:	f7ff feb6 	bl	8000f68 <LCD_Write_Cmd>
	LCD_Write_Data ( usCOLUMN >> 8  );	 
 80011fc:	88fb      	ldrh	r3, [r7, #6]
 80011fe:	0a1b      	lsrs	r3, r3, #8
 8001200:	b29b      	uxth	r3, r3
 8001202:	4618      	mov	r0, r3
 8001204:	f7ff febe 	bl	8000f84 <LCD_Write_Data>
	LCD_Write_Data ( usCOLUMN & 0xff  );	 
 8001208:	88fb      	ldrh	r3, [r7, #6]
 800120a:	b2db      	uxtb	r3, r3
 800120c:	b29b      	uxth	r3, r3
 800120e:	4618      	mov	r0, r3
 8001210:	f7ff feb8 	bl	8000f84 <LCD_Write_Data>
	LCD_Write_Data ( ( usCOLUMN + usWidth - 1 ) >> 8  );
 8001214:	88fa      	ldrh	r2, [r7, #6]
 8001216:	887b      	ldrh	r3, [r7, #2]
 8001218:	4413      	add	r3, r2
 800121a:	3b01      	subs	r3, #1
 800121c:	121b      	asrs	r3, r3, #8
 800121e:	b29b      	uxth	r3, r3
 8001220:	4618      	mov	r0, r3
 8001222:	f7ff feaf 	bl	8000f84 <LCD_Write_Data>
	LCD_Write_Data ( ( usCOLUMN + usWidth - 1 ) & 0xff  );
 8001226:	88fa      	ldrh	r2, [r7, #6]
 8001228:	887b      	ldrh	r3, [r7, #2]
 800122a:	4413      	add	r3, r2
 800122c:	b29b      	uxth	r3, r3
 800122e:	3b01      	subs	r3, #1
 8001230:	b29b      	uxth	r3, r3
 8001232:	b2db      	uxtb	r3, r3
 8001234:	b29b      	uxth	r3, r3
 8001236:	4618      	mov	r0, r3
 8001238:	f7ff fea4 	bl	8000f84 <LCD_Write_Data>

	LCD_Write_Cmd ( CMD_Set_PAGE ); 			     
 800123c:	202b      	movs	r0, #43	; 0x2b
 800123e:	f7ff fe93 	bl	8000f68 <LCD_Write_Cmd>
	LCD_Write_Data ( usPAGE >> 8  );
 8001242:	88bb      	ldrh	r3, [r7, #4]
 8001244:	0a1b      	lsrs	r3, r3, #8
 8001246:	b29b      	uxth	r3, r3
 8001248:	4618      	mov	r0, r3
 800124a:	f7ff fe9b 	bl	8000f84 <LCD_Write_Data>
	LCD_Write_Data ( usPAGE & 0xff  );
 800124e:	88bb      	ldrh	r3, [r7, #4]
 8001250:	b2db      	uxtb	r3, r3
 8001252:	b29b      	uxth	r3, r3
 8001254:	4618      	mov	r0, r3
 8001256:	f7ff fe95 	bl	8000f84 <LCD_Write_Data>
	LCD_Write_Data ( ( usPAGE + usHeight - 1 ) >> 8 );
 800125a:	88ba      	ldrh	r2, [r7, #4]
 800125c:	883b      	ldrh	r3, [r7, #0]
 800125e:	4413      	add	r3, r2
 8001260:	3b01      	subs	r3, #1
 8001262:	121b      	asrs	r3, r3, #8
 8001264:	b29b      	uxth	r3, r3
 8001266:	4618      	mov	r0, r3
 8001268:	f7ff fe8c 	bl	8000f84 <LCD_Write_Data>
	LCD_Write_Data ( ( usPAGE + usHeight - 1) & 0xff );
 800126c:	88ba      	ldrh	r2, [r7, #4]
 800126e:	883b      	ldrh	r3, [r7, #0]
 8001270:	4413      	add	r3, r2
 8001272:	b29b      	uxth	r3, r3
 8001274:	3b01      	subs	r3, #1
 8001276:	b29b      	uxth	r3, r3
 8001278:	b2db      	uxtb	r3, r3
 800127a:	b29b      	uxth	r3, r3
 800127c:	4618      	mov	r0, r3
 800127e:	f7ff fe81 	bl	8000f84 <LCD_Write_Data>
	
}
 8001282:	bf00      	nop
 8001284:	370c      	adds	r7, #12
 8001286:	46bd      	mov	sp, r7
 8001288:	bd90      	pop	{r4, r7, pc}

0800128a <LCD_FillColor>:


void LCD_FillColor ( uint32_t usPoint, uint16_t usColor )
{
 800128a:	b580      	push	{r7, lr}
 800128c:	b084      	sub	sp, #16
 800128e:	af00      	add	r7, sp, #0
 8001290:	6078      	str	r0, [r7, #4]
 8001292:	460b      	mov	r3, r1
 8001294:	807b      	strh	r3, [r7, #2]
	uint32_t i = 0;
 8001296:	2300      	movs	r3, #0
 8001298:	60fb      	str	r3, [r7, #12]
	
	/* memory write */
	LCD_Write_Cmd ( CMD_SetPixel );	
 800129a:	202c      	movs	r0, #44	; 0x2c
 800129c:	f7ff fe64 	bl	8000f68 <LCD_Write_Cmd>
		
	for ( i = 0; i < usPoint; i ++ )
 80012a0:	2300      	movs	r3, #0
 80012a2:	60fb      	str	r3, [r7, #12]
 80012a4:	e006      	b.n	80012b4 <LCD_FillColor+0x2a>
		LCD_Write_Data ( usColor );
 80012a6:	887b      	ldrh	r3, [r7, #2]
 80012a8:	4618      	mov	r0, r3
 80012aa:	f7ff fe6b 	bl	8000f84 <LCD_Write_Data>
	for ( i = 0; i < usPoint; i ++ )
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	3301      	adds	r3, #1
 80012b2:	60fb      	str	r3, [r7, #12]
 80012b4:	68fa      	ldr	r2, [r7, #12]
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	429a      	cmp	r2, r3
 80012ba:	d3f4      	bcc.n	80012a6 <LCD_FillColor+0x1c>
		
}
 80012bc:	bf00      	nop
 80012be:	bf00      	nop
 80012c0:	3710      	adds	r7, #16
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}

080012c6 <LCD_Clear>:




void LCD_Clear ( uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usWidth, uint16_t usHeight, uint16_t usColor )
{
 80012c6:	b590      	push	{r4, r7, lr}
 80012c8:	b083      	sub	sp, #12
 80012ca:	af00      	add	r7, sp, #0
 80012cc:	4604      	mov	r4, r0
 80012ce:	4608      	mov	r0, r1
 80012d0:	4611      	mov	r1, r2
 80012d2:	461a      	mov	r2, r3
 80012d4:	4623      	mov	r3, r4
 80012d6:	80fb      	strh	r3, [r7, #6]
 80012d8:	4603      	mov	r3, r0
 80012da:	80bb      	strh	r3, [r7, #4]
 80012dc:	460b      	mov	r3, r1
 80012de:	807b      	strh	r3, [r7, #2]
 80012e0:	4613      	mov	r3, r2
 80012e2:	803b      	strh	r3, [r7, #0]
	LCD_OpenWindow ( usCOLUMN, usPAGE, usWidth, usHeight );
 80012e4:	883b      	ldrh	r3, [r7, #0]
 80012e6:	887a      	ldrh	r2, [r7, #2]
 80012e8:	88b9      	ldrh	r1, [r7, #4]
 80012ea:	88f8      	ldrh	r0, [r7, #6]
 80012ec:	f7ff ff74 	bl	80011d8 <LCD_OpenWindow>

	LCD_FillColor ( usWidth * usHeight, usColor );		
 80012f0:	887b      	ldrh	r3, [r7, #2]
 80012f2:	883a      	ldrh	r2, [r7, #0]
 80012f4:	fb02 f303 	mul.w	r3, r2, r3
 80012f8:	461a      	mov	r2, r3
 80012fa:	8b3b      	ldrh	r3, [r7, #24]
 80012fc:	4619      	mov	r1, r3
 80012fe:	4610      	mov	r0, r2
 8001300:	f7ff ffc3 	bl	800128a <LCD_FillColor>
	
}
 8001304:	bf00      	nop
 8001306:	370c      	adds	r7, #12
 8001308:	46bd      	mov	sp, r7
 800130a:	bd90      	pop	{r4, r7, pc}

0800130c <LCD_DrawLine>:
}



void LCD_DrawLine ( uint16_t usC1, uint16_t usP1, uint16_t usC2, uint16_t usP2, uint16_t usColor )
{
 800130c:	b590      	push	{r4, r7, lr}
 800130e:	b08d      	sub	sp, #52	; 0x34
 8001310:	af00      	add	r7, sp, #0
 8001312:	4604      	mov	r4, r0
 8001314:	4608      	mov	r0, r1
 8001316:	4611      	mov	r1, r2
 8001318:	461a      	mov	r2, r3
 800131a:	4623      	mov	r3, r4
 800131c:	80fb      	strh	r3, [r7, #6]
 800131e:	4603      	mov	r3, r0
 8001320:	80bb      	strh	r3, [r7, #4]
 8001322:	460b      	mov	r3, r1
 8001324:	807b      	strh	r3, [r7, #2]
 8001326:	4613      	mov	r3, r2
 8001328:	803b      	strh	r3, [r7, #0]
	uint16_t us; 
	uint16_t usC_Current, usP_Current;
	
	int32_t lError_C = 0, lError_P = 0, lDelta_C, lDelta_P, lDistance; 
 800132a:	2300      	movs	r3, #0
 800132c:	627b      	str	r3, [r7, #36]	; 0x24
 800132e:	2300      	movs	r3, #0
 8001330:	623b      	str	r3, [r7, #32]
	int32_t lIncrease_C, lIncrease_P; 	
	
	
	lDelta_C = usC2 - usC1;
 8001332:	887a      	ldrh	r2, [r7, #2]
 8001334:	88fb      	ldrh	r3, [r7, #6]
 8001336:	1ad3      	subs	r3, r2, r3
 8001338:	61fb      	str	r3, [r7, #28]
	lDelta_P = usP2 - usP1; 
 800133a:	883a      	ldrh	r2, [r7, #0]
 800133c:	88bb      	ldrh	r3, [r7, #4]
 800133e:	1ad3      	subs	r3, r2, r3
 8001340:	61bb      	str	r3, [r7, #24]
	
	usC_Current = usC1; 
 8001342:	88fb      	ldrh	r3, [r7, #6]
 8001344:	85bb      	strh	r3, [r7, #44]	; 0x2c
	usP_Current = usP1; 
 8001346:	88bb      	ldrh	r3, [r7, #4]
 8001348:	857b      	strh	r3, [r7, #42]	; 0x2a
	
	
	if ( lDelta_C > 0 ) 
 800134a:	69fb      	ldr	r3, [r7, #28]
 800134c:	2b00      	cmp	r3, #0
 800134e:	dd02      	ble.n	8001356 <LCD_DrawLine+0x4a>
		lIncrease_C = 1;  
 8001350:	2301      	movs	r3, #1
 8001352:	613b      	str	r3, [r7, #16]
 8001354:	e00b      	b.n	800136e <LCD_DrawLine+0x62>
	
	else if ( lDelta_C == 0 ) 
 8001356:	69fb      	ldr	r3, [r7, #28]
 8001358:	2b00      	cmp	r3, #0
 800135a:	d102      	bne.n	8001362 <LCD_DrawLine+0x56>
		lIncrease_C = 0;
 800135c:	2300      	movs	r3, #0
 800135e:	613b      	str	r3, [r7, #16]
 8001360:	e005      	b.n	800136e <LCD_DrawLine+0x62>
	
	else 
  	{ 
    		lIncrease_C = -1;
 8001362:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001366:	613b      	str	r3, [r7, #16]
    		lDelta_C = - lDelta_C;
 8001368:	69fb      	ldr	r3, [r7, #28]
 800136a:	425b      	negs	r3, r3
 800136c:	61fb      	str	r3, [r7, #28]
  	} 

	
	if ( lDelta_P > 0 )
 800136e:	69bb      	ldr	r3, [r7, #24]
 8001370:	2b00      	cmp	r3, #0
 8001372:	dd02      	ble.n	800137a <LCD_DrawLine+0x6e>
		lIncrease_P = 1; 
 8001374:	2301      	movs	r3, #1
 8001376:	60fb      	str	r3, [r7, #12]
 8001378:	e00b      	b.n	8001392 <LCD_DrawLine+0x86>
	
	else if ( lDelta_P == 0 )
 800137a:	69bb      	ldr	r3, [r7, #24]
 800137c:	2b00      	cmp	r3, #0
 800137e:	d102      	bne.n	8001386 <LCD_DrawLine+0x7a>
		lIncrease_P = 0;
 8001380:	2300      	movs	r3, #0
 8001382:	60fb      	str	r3, [r7, #12]
 8001384:	e005      	b.n	8001392 <LCD_DrawLine+0x86>
	else 
	{
  		lIncrease_P = -1;
 8001386:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800138a:	60fb      	str	r3, [r7, #12]
    		lDelta_P = - lDelta_P;
 800138c:	69bb      	ldr	r3, [r7, #24]
 800138e:	425b      	negs	r3, r3
 8001390:	61bb      	str	r3, [r7, #24]
 	} 

	if (  lDelta_C > lDelta_P )
 8001392:	69fa      	ldr	r2, [r7, #28]
 8001394:	69bb      	ldr	r3, [r7, #24]
 8001396:	429a      	cmp	r2, r3
 8001398:	dd02      	ble.n	80013a0 <LCD_DrawLine+0x94>
		lDistance = lDelta_C; 
 800139a:	69fb      	ldr	r3, [r7, #28]
 800139c:	617b      	str	r3, [r7, #20]
 800139e:	e001      	b.n	80013a4 <LCD_DrawLine+0x98>
	
	else 
		lDistance = lDelta_P; 
 80013a0:	69bb      	ldr	r3, [r7, #24]
 80013a2:	617b      	str	r3, [r7, #20]
	
	
	for ( us = 0; us <= lDistance + 1; us ++ ) 
 80013a4:	2300      	movs	r3, #0
 80013a6:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80013a8:	e02b      	b.n	8001402 <LCD_DrawLine+0xf6>
	{  
		LCD_DrawDot ( usC_Current, usP_Current, usColor );
 80013aa:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80013ae:	8d79      	ldrh	r1, [r7, #42]	; 0x2a
 80013b0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80013b2:	4618      	mov	r0, r3
 80013b4:	f000 f8a5 	bl	8001502 <LCD_DrawDot>
		
		lError_C += lDelta_C ; 
 80013b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013ba:	69fb      	ldr	r3, [r7, #28]
 80013bc:	4413      	add	r3, r2
 80013be:	627b      	str	r3, [r7, #36]	; 0x24
		lError_P += lDelta_P ; 
 80013c0:	6a3a      	ldr	r2, [r7, #32]
 80013c2:	69bb      	ldr	r3, [r7, #24]
 80013c4:	4413      	add	r3, r2
 80013c6:	623b      	str	r3, [r7, #32]
		
		if ( lError_C > lDistance ) 
 80013c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013ca:	697b      	ldr	r3, [r7, #20]
 80013cc:	429a      	cmp	r2, r3
 80013ce:	dd08      	ble.n	80013e2 <LCD_DrawLine+0xd6>
		{ 
			lError_C -= lDistance; 
 80013d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013d2:	697b      	ldr	r3, [r7, #20]
 80013d4:	1ad3      	subs	r3, r2, r3
 80013d6:	627b      	str	r3, [r7, #36]	; 0x24
			usC_Current += lIncrease_C; 
 80013d8:	693b      	ldr	r3, [r7, #16]
 80013da:	b29a      	uxth	r2, r3
 80013dc:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80013de:	4413      	add	r3, r2
 80013e0:	85bb      	strh	r3, [r7, #44]	; 0x2c
		}  
		
		if ( lError_P > lDistance ) 
 80013e2:	6a3a      	ldr	r2, [r7, #32]
 80013e4:	697b      	ldr	r3, [r7, #20]
 80013e6:	429a      	cmp	r2, r3
 80013e8:	dd08      	ble.n	80013fc <LCD_DrawLine+0xf0>
		{ 
			lError_P -= lDistance; 
 80013ea:	6a3a      	ldr	r2, [r7, #32]
 80013ec:	697b      	ldr	r3, [r7, #20]
 80013ee:	1ad3      	subs	r3, r2, r3
 80013f0:	623b      	str	r3, [r7, #32]
			usP_Current += lIncrease_P; 
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	b29a      	uxth	r2, r3
 80013f6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80013f8:	4413      	add	r3, r2
 80013fa:	857b      	strh	r3, [r7, #42]	; 0x2a
	for ( us = 0; us <= lDistance + 1; us ++ ) 
 80013fc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80013fe:	3301      	adds	r3, #1
 8001400:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8001402:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8001404:	697b      	ldr	r3, [r7, #20]
 8001406:	3301      	adds	r3, #1
 8001408:	429a      	cmp	r2, r3
 800140a:	ddce      	ble.n	80013aa <LCD_DrawLine+0x9e>
		} 
		
	}  
	
	
}   
 800140c:	bf00      	nop
 800140e:	bf00      	nop
 8001410:	3734      	adds	r7, #52	; 0x34
 8001412:	46bd      	mov	sp, r7
 8001414:	bd90      	pop	{r4, r7, pc}
	...

08001418 <LCD_DrawChar>:


void LCD_DrawChar ( uint16_t usC, uint16_t usP, uint8_t cChar )
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b084      	sub	sp, #16
 800141c:	af00      	add	r7, sp, #0
 800141e:	4603      	mov	r3, r0
 8001420:	80fb      	strh	r3, [r7, #6]
 8001422:	460b      	mov	r3, r1
 8001424:	80bb      	strh	r3, [r7, #4]
 8001426:	4613      	mov	r3, r2
 8001428:	70fb      	strb	r3, [r7, #3]
	uint8_t ucTemp, ucRelativePositon, ucPage, ucColumn;

	
	ucRelativePositon = cChar - ' ';
 800142a:	78fb      	ldrb	r3, [r7, #3]
 800142c:	3b20      	subs	r3, #32
 800142e:	733b      	strb	r3, [r7, #12]
	
	LCD_OpenWindow ( usC, usP, WIDTH_EN_CHAR, HEIGHT_EN_CHAR );
 8001430:	88b9      	ldrh	r1, [r7, #4]
 8001432:	88f8      	ldrh	r0, [r7, #6]
 8001434:	2310      	movs	r3, #16
 8001436:	2208      	movs	r2, #8
 8001438:	f7ff fece 	bl	80011d8 <LCD_OpenWindow>
	
	LCD_Write_Cmd ( CMD_SetPixel );	
 800143c:	202c      	movs	r0, #44	; 0x2c
 800143e:	f7ff fd93 	bl	8000f68 <LCD_Write_Cmd>
	
	for ( ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage ++ )
 8001442:	2300      	movs	r3, #0
 8001444:	73bb      	strb	r3, [r7, #14]
 8001446:	e023      	b.n	8001490 <LCD_DrawChar+0x78>
	{
		ucTemp = ucAscii_1608 [ ucRelativePositon ] [ ucPage ];
 8001448:	7b3a      	ldrb	r2, [r7, #12]
 800144a:	7bbb      	ldrb	r3, [r7, #14]
 800144c:	4914      	ldr	r1, [pc, #80]	; (80014a0 <LCD_DrawChar+0x88>)
 800144e:	0112      	lsls	r2, r2, #4
 8001450:	440a      	add	r2, r1
 8001452:	4413      	add	r3, r2
 8001454:	781b      	ldrb	r3, [r3, #0]
 8001456:	73fb      	strb	r3, [r7, #15]
		
		for ( ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn ++ )
 8001458:	2300      	movs	r3, #0
 800145a:	737b      	strb	r3, [r7, #13]
 800145c:	e012      	b.n	8001484 <LCD_DrawChar+0x6c>
		{
			if ( ucTemp & 0x01 )
 800145e:	7bfb      	ldrb	r3, [r7, #15]
 8001460:	f003 0301 	and.w	r3, r3, #1
 8001464:	2b00      	cmp	r3, #0
 8001466:	d003      	beq.n	8001470 <LCD_DrawChar+0x58>
				LCD_Write_Data ( 0x001F );
 8001468:	201f      	movs	r0, #31
 800146a:	f7ff fd8b 	bl	8000f84 <LCD_Write_Data>
 800146e:	e003      	b.n	8001478 <LCD_DrawChar+0x60>
			
			else
				LCD_Write_Data (  0xFFFF );								
 8001470:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001474:	f7ff fd86 	bl	8000f84 <LCD_Write_Data>
			
			ucTemp >>= 1;		
 8001478:	7bfb      	ldrb	r3, [r7, #15]
 800147a:	085b      	lsrs	r3, r3, #1
 800147c:	73fb      	strb	r3, [r7, #15]
		for ( ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn ++ )
 800147e:	7b7b      	ldrb	r3, [r7, #13]
 8001480:	3301      	adds	r3, #1
 8001482:	737b      	strb	r3, [r7, #13]
 8001484:	7b7b      	ldrb	r3, [r7, #13]
 8001486:	2b07      	cmp	r3, #7
 8001488:	d9e9      	bls.n	800145e <LCD_DrawChar+0x46>
	for ( ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage ++ )
 800148a:	7bbb      	ldrb	r3, [r7, #14]
 800148c:	3301      	adds	r3, #1
 800148e:	73bb      	strb	r3, [r7, #14]
 8001490:	7bbb      	ldrb	r3, [r7, #14]
 8001492:	2b0f      	cmp	r3, #15
 8001494:	d9d8      	bls.n	8001448 <LCD_DrawChar+0x30>
			
		}
		
	}
	
}
 8001496:	bf00      	nop
 8001498:	bf00      	nop
 800149a:	3710      	adds	r7, #16
 800149c:	46bd      	mov	sp, r7
 800149e:	bd80      	pop	{r7, pc}
 80014a0:	080052c8 	.word	0x080052c8

080014a4 <LCD_DrawString>:




void LCD_DrawString ( uint16_t usC, uint16_t usP, const char * pStr )
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b082      	sub	sp, #8
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	4603      	mov	r3, r0
 80014ac:	603a      	str	r2, [r7, #0]
 80014ae:	80fb      	strh	r3, [r7, #6]
 80014b0:	460b      	mov	r3, r1
 80014b2:	80bb      	strh	r3, [r7, #4]
	while ( * pStr != '\0' )
 80014b4:	e01c      	b.n	80014f0 <LCD_DrawString+0x4c>
	{
		if ( ( usC - LCD_DispWindow_Start_COLUMN + WIDTH_EN_CHAR ) > LCD_DispWindow_COLUMN )
 80014b6:	88fb      	ldrh	r3, [r7, #6]
 80014b8:	2be8      	cmp	r3, #232	; 0xe8
 80014ba:	d904      	bls.n	80014c6 <LCD_DrawString+0x22>
		{
			usC = LCD_DispWindow_Start_COLUMN;
 80014bc:	2300      	movs	r3, #0
 80014be:	80fb      	strh	r3, [r7, #6]
			usP += HEIGHT_EN_CHAR;
 80014c0:	88bb      	ldrh	r3, [r7, #4]
 80014c2:	3310      	adds	r3, #16
 80014c4:	80bb      	strh	r3, [r7, #4]
		}
		
		if ( ( usP - LCD_DispWindow_Start_PAGE + HEIGHT_EN_CHAR ) > LCD_DispWindow_PAGE )
 80014c6:	88bb      	ldrh	r3, [r7, #4]
 80014c8:	f5b3 7f98 	cmp.w	r3, #304	; 0x130
 80014cc:	d903      	bls.n	80014d6 <LCD_DrawString+0x32>
		{
			usC = LCD_DispWindow_Start_COLUMN;
 80014ce:	2300      	movs	r3, #0
 80014d0:	80fb      	strh	r3, [r7, #6]
			usP = LCD_DispWindow_Start_PAGE;
 80014d2:	2300      	movs	r3, #0
 80014d4:	80bb      	strh	r3, [r7, #4]
		}
		
		LCD_DrawChar ( usC, usP, * pStr );
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	781a      	ldrb	r2, [r3, #0]
 80014da:	88b9      	ldrh	r1, [r7, #4]
 80014dc:	88fb      	ldrh	r3, [r7, #6]
 80014de:	4618      	mov	r0, r3
 80014e0:	f7ff ff9a 	bl	8001418 <LCD_DrawChar>
		
		pStr ++;
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	3301      	adds	r3, #1
 80014e8:	603b      	str	r3, [r7, #0]
		
		usC += WIDTH_EN_CHAR;
 80014ea:	88fb      	ldrh	r3, [r7, #6]
 80014ec:	3308      	adds	r3, #8
 80014ee:	80fb      	strh	r3, [r7, #6]
	while ( * pStr != '\0' )
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	781b      	ldrb	r3, [r3, #0]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d1de      	bne.n	80014b6 <LCD_DrawString+0x12>
		
	}
	
}
 80014f8:	bf00      	nop
 80014fa:	bf00      	nop
 80014fc:	3708      	adds	r7, #8
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}

08001502 <LCD_DrawDot>:


//Task 2
void LCD_DrawDot(uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usColor)	
{	
 8001502:	b580      	push	{r7, lr}
 8001504:	b082      	sub	sp, #8
 8001506:	af00      	add	r7, sp, #0
 8001508:	4603      	mov	r3, r0
 800150a:	80fb      	strh	r3, [r7, #6]
 800150c:	460b      	mov	r3, r1
 800150e:	80bb      	strh	r3, [r7, #4]
 8001510:	4613      	mov	r3, r2
 8001512:	807b      	strh	r3, [r7, #2]
	if (( usCOLUMN < LCD_DispWindow_COLUMN ) && ( usPAGE < LCD_DispWindow_PAGE ))
 8001514:	88fb      	ldrh	r3, [r7, #6]
 8001516:	2bef      	cmp	r3, #239	; 0xef
 8001518:	d809      	bhi.n	800152e <LCD_DrawDot+0x2c>
 800151a:	88bb      	ldrh	r3, [r7, #4]
 800151c:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8001520:	d205      	bcs.n	800152e <LCD_DrawDot+0x2c>
	LCD_OpenWindow ( usCOLUMN, usPAGE, 1, 1 );
 8001522:	88b9      	ldrh	r1, [r7, #4]
 8001524:	88f8      	ldrh	r0, [r7, #6]
 8001526:	2301      	movs	r3, #1
 8001528:	2201      	movs	r2, #1
 800152a:	f7ff fe55 	bl	80011d8 <LCD_OpenWindow>
	LCD_FillColor (1, usColor);
 800152e:	887b      	ldrh	r3, [r7, #2]
 8001530:	4619      	mov	r1, r3
 8001532:	2001      	movs	r0, #1
 8001534:	f7ff fea9 	bl	800128a <LCD_FillColor>
}
 8001538:	bf00      	nop
 800153a:	3708      	adds	r7, #8
 800153c:	46bd      	mov	sp, r7
 800153e:	bd80      	pop	{r7, pc}

08001540 <LCD_Cam_Gram>:
		LCD_DrawDot(x, y, usColor);
	}
}

void LCD_Cam_Gram()
{
 8001540:	b580      	push	{r7, lr}
 8001542:	af00      	add	r7, sp, #0
	/* memory access control set */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0x36 ); 	
 8001544:	2036      	movs	r0, #54	; 0x36
 8001546:	f7ff fd0f 	bl	8000f68 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x68 );    
 800154a:	2068      	movs	r0, #104	; 0x68
 800154c:	f7ff fd1a 	bl	8000f84 <LCD_Write_Data>
	DEBUG_DELAY ();
	
	/* column address control set */
	LCD_Write_Cmd ( CMD_Set_COLUMN ); 
 8001550:	202a      	movs	r0, #42	; 0x2a
 8001552:	f7ff fd09 	bl	8000f68 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8001556:	2000      	movs	r0, #0
 8001558:	f7ff fd14 	bl	8000f84 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 800155c:	2000      	movs	r0, #0
 800155e:	f7ff fd11 	bl	8000f84 <LCD_Write_Data>
	LCD_Write_Data ( 0x01 );
 8001562:	2001      	movs	r0, #1
 8001564:	f7ff fd0e 	bl	8000f84 <LCD_Write_Data>
	LCD_Write_Data ( 0x3F );
 8001568:	203f      	movs	r0, #63	; 0x3f
 800156a:	f7ff fd0b 	bl	8000f84 <LCD_Write_Data>
	
	/* page address control set */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( CMD_Set_PAGE ); 
 800156e:	202b      	movs	r0, #43	; 0x2b
 8001570:	f7ff fcfa 	bl	8000f68 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8001574:	2000      	movs	r0, #0
 8001576:	f7ff fd05 	bl	8000f84 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 800157a:	2000      	movs	r0, #0
 800157c:	f7ff fd02 	bl	8000f84 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8001580:	2000      	movs	r0, #0
 8001582:	f7ff fcff 	bl	8000f84 <LCD_Write_Data>
	LCD_Write_Data ( 0xEF );
 8001586:	20ef      	movs	r0, #239	; 0xef
 8001588:	f7ff fcfc 	bl	8000f84 <LCD_Write_Data>
	
	LCD_Write_Cmd ( 0x2C );
 800158c:	202c      	movs	r0, #44	; 0x2c
 800158e:	f7ff fceb 	bl	8000f68 <LCD_Write_Cmd>

}
 8001592:	bf00      	nop
 8001594:	bd80      	pop	{r7, pc}

08001596 <LCD_Draw_Num>:


void LCD_Draw_Num ( uint16_t usC, uint16_t usP, const uint8_t arr[96] )
{
 8001596:	b580      	push	{r7, lr}
 8001598:	b084      	sub	sp, #16
 800159a:	af00      	add	r7, sp, #0
 800159c:	4603      	mov	r3, r0
 800159e:	603a      	str	r2, [r7, #0]
 80015a0:	80fb      	strh	r3, [r7, #6]
 80015a2:	460b      	mov	r3, r1
 80015a4:	80bb      	strh	r3, [r7, #4]
	uint8_t ucTemp, ucPage, ucColumn;



		LCD_OpenWindow ( usC, usP, 24, 32 );
 80015a6:	88b9      	ldrh	r1, [r7, #4]
 80015a8:	88f8      	ldrh	r0, [r7, #6]
 80015aa:	2320      	movs	r3, #32
 80015ac:	2218      	movs	r2, #24
 80015ae:	f7ff fe13 	bl	80011d8 <LCD_OpenWindow>

		LCD_Write_Cmd ( CMD_SetPixel );
 80015b2:	202c      	movs	r0, #44	; 0x2c
 80015b4:	f7ff fcd8 	bl	8000f68 <LCD_Write_Cmd>

		for ( ucPage = 0; ucPage < 96; ucPage ++ )
 80015b8:	2300      	movs	r3, #0
 80015ba:	73bb      	strb	r3, [r7, #14]
 80015bc:	e020      	b.n	8001600 <LCD_Draw_Num+0x6a>
		{
			ucTemp = arr[ ucPage ];
 80015be:	7bbb      	ldrb	r3, [r7, #14]
 80015c0:	683a      	ldr	r2, [r7, #0]
 80015c2:	4413      	add	r3, r2
 80015c4:	781b      	ldrb	r3, [r3, #0]
 80015c6:	73fb      	strb	r3, [r7, #15]

			for ( ucColumn = 0; ucColumn < 8; ucColumn ++ )
 80015c8:	2300      	movs	r3, #0
 80015ca:	737b      	strb	r3, [r7, #13]
 80015cc:	e012      	b.n	80015f4 <LCD_Draw_Num+0x5e>
			{
				if ( ucTemp & 0x01 )
 80015ce:	7bfb      	ldrb	r3, [r7, #15]
 80015d0:	f003 0301 	and.w	r3, r3, #1
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d003      	beq.n	80015e0 <LCD_Draw_Num+0x4a>
					LCD_Write_Data ( 0x001F );
 80015d8:	201f      	movs	r0, #31
 80015da:	f7ff fcd3 	bl	8000f84 <LCD_Write_Data>
 80015de:	e003      	b.n	80015e8 <LCD_Draw_Num+0x52>

				else
					LCD_Write_Data (  0xFFFF );
 80015e0:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80015e4:	f7ff fcce 	bl	8000f84 <LCD_Write_Data>

				ucTemp >>= 1;
 80015e8:	7bfb      	ldrb	r3, [r7, #15]
 80015ea:	085b      	lsrs	r3, r3, #1
 80015ec:	73fb      	strb	r3, [r7, #15]
			for ( ucColumn = 0; ucColumn < 8; ucColumn ++ )
 80015ee:	7b7b      	ldrb	r3, [r7, #13]
 80015f0:	3301      	adds	r3, #1
 80015f2:	737b      	strb	r3, [r7, #13]
 80015f4:	7b7b      	ldrb	r3, [r7, #13]
 80015f6:	2b07      	cmp	r3, #7
 80015f8:	d9e9      	bls.n	80015ce <LCD_Draw_Num+0x38>
		for ( ucPage = 0; ucPage < 96; ucPage ++ )
 80015fa:	7bbb      	ldrb	r3, [r7, #14]
 80015fc:	3301      	adds	r3, #1
 80015fe:	73bb      	strb	r3, [r7, #14]
 8001600:	7bbb      	ldrb	r3, [r7, #14]
 8001602:	2b5f      	cmp	r3, #95	; 0x5f
 8001604:	d9db      	bls.n	80015be <LCD_Draw_Num+0x28>

			}

		}
}
 8001606:	bf00      	nop
 8001608:	bf00      	nop
 800160a:	3710      	adds	r7, #16
 800160c:	46bd      	mov	sp, r7
 800160e:	bd80      	pop	{r7, pc}

08001610 <LCD_Draw_24sqr>:

void LCD_Draw_24sqr ( uint16_t usC, uint16_t usP, const uint8_t arr[72] )
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b084      	sub	sp, #16
 8001614:	af00      	add	r7, sp, #0
 8001616:	4603      	mov	r3, r0
 8001618:	603a      	str	r2, [r7, #0]
 800161a:	80fb      	strh	r3, [r7, #6]
 800161c:	460b      	mov	r3, r1
 800161e:	80bb      	strh	r3, [r7, #4]
	uint8_t ucTemp, ucPage, ucColumn;



		LCD_OpenWindow ( usC, usP, 24, 24 );
 8001620:	88b9      	ldrh	r1, [r7, #4]
 8001622:	88f8      	ldrh	r0, [r7, #6]
 8001624:	2318      	movs	r3, #24
 8001626:	2218      	movs	r2, #24
 8001628:	f7ff fdd6 	bl	80011d8 <LCD_OpenWindow>

		LCD_Write_Cmd ( CMD_SetPixel );
 800162c:	202c      	movs	r0, #44	; 0x2c
 800162e:	f7ff fc9b 	bl	8000f68 <LCD_Write_Cmd>

		for ( ucPage = 0; ucPage < 72; ucPage ++ )
 8001632:	2300      	movs	r3, #0
 8001634:	73bb      	strb	r3, [r7, #14]
 8001636:	e020      	b.n	800167a <LCD_Draw_24sqr+0x6a>
		{
			ucTemp = arr[ ucPage ];
 8001638:	7bbb      	ldrb	r3, [r7, #14]
 800163a:	683a      	ldr	r2, [r7, #0]
 800163c:	4413      	add	r3, r2
 800163e:	781b      	ldrb	r3, [r3, #0]
 8001640:	73fb      	strb	r3, [r7, #15]

			for ( ucColumn = 0; ucColumn < 8; ucColumn ++ )
 8001642:	2300      	movs	r3, #0
 8001644:	737b      	strb	r3, [r7, #13]
 8001646:	e012      	b.n	800166e <LCD_Draw_24sqr+0x5e>
			{
				if ( ucTemp & 0x01 )
 8001648:	7bfb      	ldrb	r3, [r7, #15]
 800164a:	f003 0301 	and.w	r3, r3, #1
 800164e:	2b00      	cmp	r3, #0
 8001650:	d003      	beq.n	800165a <LCD_Draw_24sqr+0x4a>
					LCD_Write_Data ( 0x001F );
 8001652:	201f      	movs	r0, #31
 8001654:	f7ff fc96 	bl	8000f84 <LCD_Write_Data>
 8001658:	e003      	b.n	8001662 <LCD_Draw_24sqr+0x52>

				else
					LCD_Write_Data (  0xFFFF );
 800165a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800165e:	f7ff fc91 	bl	8000f84 <LCD_Write_Data>

				ucTemp >>= 1;
 8001662:	7bfb      	ldrb	r3, [r7, #15]
 8001664:	085b      	lsrs	r3, r3, #1
 8001666:	73fb      	strb	r3, [r7, #15]
			for ( ucColumn = 0; ucColumn < 8; ucColumn ++ )
 8001668:	7b7b      	ldrb	r3, [r7, #13]
 800166a:	3301      	adds	r3, #1
 800166c:	737b      	strb	r3, [r7, #13]
 800166e:	7b7b      	ldrb	r3, [r7, #13]
 8001670:	2b07      	cmp	r3, #7
 8001672:	d9e9      	bls.n	8001648 <LCD_Draw_24sqr+0x38>
		for ( ucPage = 0; ucPage < 72; ucPage ++ )
 8001674:	7bbb      	ldrb	r3, [r7, #14]
 8001676:	3301      	adds	r3, #1
 8001678:	73bb      	strb	r3, [r7, #14]
 800167a:	7bbb      	ldrb	r3, [r7, #14]
 800167c:	2b47      	cmp	r3, #71	; 0x47
 800167e:	d9db      	bls.n	8001638 <LCD_Draw_24sqr+0x28>

			}

		}
}
 8001680:	bf00      	nop
 8001682:	bf00      	nop
 8001684:	3710      	adds	r7, #16
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}
	...

0800168c <delay>:
#include "main.h"
#include "stdio.h"

TIM_HandleTypeDef htim6;

void delay (uint16_t time_us){
 800168c:	b580      	push	{r7, lr}
 800168e:	b082      	sub	sp, #8
 8001690:	af00      	add	r7, sp, #0
 8001692:	4603      	mov	r3, r0
 8001694:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim6, 0);
 8001696:	4b0a      	ldr	r3, [pc, #40]	; (80016c0 <delay+0x34>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	2200      	movs	r2, #0
 800169c:	625a      	str	r2, [r3, #36]	; 0x24
	HAL_TIM_Base_Start(&htim6);
 800169e:	4808      	ldr	r0, [pc, #32]	; (80016c0 <delay+0x34>)
 80016a0:	f002 feba 	bl	8004418 <HAL_TIM_Base_Start>
	while(__HAL_TIM_GET_COUNTER(&htim6)<=time_us);
 80016a4:	bf00      	nop
 80016a6:	4b06      	ldr	r3, [pc, #24]	; (80016c0 <delay+0x34>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80016ac:	88fb      	ldrh	r3, [r7, #6]
 80016ae:	429a      	cmp	r2, r3
 80016b0:	d9f9      	bls.n	80016a6 <delay+0x1a>
	HAL_TIM_Base_Stop(&htim6);
 80016b2:	4803      	ldr	r0, [pc, #12]	; (80016c0 <delay+0x34>)
 80016b4:	f002 ff08 	bl	80044c8 <HAL_TIM_Base_Stop>
}
 80016b8:	bf00      	nop
 80016ba:	3708      	adds	r7, #8
 80016bc:	46bd      	mov	sp, r7
 80016be:	bd80      	pop	{r7, pc}
 80016c0:	20000128 	.word	0x20000128

080016c4 <Set_Pin_Output>:

void Set_Pin_Output(GPIO_TypeDef* port, uint16_t pin){
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b086      	sub	sp, #24
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
 80016cc:	460b      	mov	r3, r1
 80016ce:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef  GPIO_InitStruct = {0};
 80016d0:	f107 0308 	add.w	r3, r7, #8
 80016d4:	2200      	movs	r2, #0
 80016d6:	601a      	str	r2, [r3, #0]
 80016d8:	605a      	str	r2, [r3, #4]
 80016da:	609a      	str	r2, [r3, #8]
 80016dc:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = pin;
 80016de:	887b      	ldrh	r3, [r7, #2]
 80016e0:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016e2:	2301      	movs	r3, #1
 80016e4:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016e6:	2303      	movs	r3, #3
 80016e8:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(port, &GPIO_InitStruct);
 80016ea:	f107 0308 	add.w	r3, r7, #8
 80016ee:	4619      	mov	r1, r3
 80016f0:	6878      	ldr	r0, [r7, #4]
 80016f2:	f001 fe6f 	bl	80033d4 <HAL_GPIO_Init>
}
 80016f6:	bf00      	nop
 80016f8:	3718      	adds	r7, #24
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}

080016fe <Set_Pin_Input>:

void Set_Pin_Input(GPIO_TypeDef* port, uint16_t pin){
 80016fe:	b580      	push	{r7, lr}
 8001700:	b086      	sub	sp, #24
 8001702:	af00      	add	r7, sp, #0
 8001704:	6078      	str	r0, [r7, #4]
 8001706:	460b      	mov	r3, r1
 8001708:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef  GPIO_InitStruct = {0};
 800170a:	f107 0308 	add.w	r3, r7, #8
 800170e:	2200      	movs	r2, #0
 8001710:	601a      	str	r2, [r3, #0]
 8001712:	605a      	str	r2, [r3, #4]
 8001714:	609a      	str	r2, [r3, #8]
 8001716:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = pin;
 8001718:	887b      	ldrh	r3, [r7, #2]
 800171a:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800171c:	2300      	movs	r3, #0
 800171e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001720:	2300      	movs	r3, #0
 8001722:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(port, &GPIO_InitStruct);
 8001724:	f107 0308 	add.w	r3, r7, #8
 8001728:	4619      	mov	r1, r3
 800172a:	6878      	ldr	r0, [r7, #4]
 800172c:	f001 fe52 	bl	80033d4 <HAL_GPIO_Init>
}
 8001730:	bf00      	nop
 8001732:	3718      	adds	r7, #24
 8001734:	46bd      	mov	sp, r7
 8001736:	bd80      	pop	{r7, pc}

08001738 <DHT11_Start>:

void DHT11_Start (void)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	af00      	add	r7, sp, #0

	Set_Pin_Output (DHT11_PORT, DHT11_PIN);  // set the pin as output
 800173c:	2140      	movs	r1, #64	; 0x40
 800173e:	4808      	ldr	r0, [pc, #32]	; (8001760 <DHT11_Start+0x28>)
 8001740:	f7ff ffc0 	bl	80016c4 <Set_Pin_Output>
	HAL_GPIO_WritePin (DHT11_PORT, DHT11_PIN, 0);   // pull the pin low
 8001744:	2200      	movs	r2, #0
 8001746:	2140      	movs	r1, #64	; 0x40
 8001748:	4805      	ldr	r0, [pc, #20]	; (8001760 <DHT11_Start+0x28>)
 800174a:	f001 ffee 	bl	800372a <HAL_GPIO_WritePin>
	HAL_Delay(18);  // wait for 18ms
 800174e:	2012      	movs	r0, #18
 8001750:	f001 f824 	bl	800279c <HAL_Delay>
	Set_Pin_Input(DHT11_PORT, DHT11_PIN);    // set as input
 8001754:	2140      	movs	r1, #64	; 0x40
 8001756:	4802      	ldr	r0, [pc, #8]	; (8001760 <DHT11_Start+0x28>)
 8001758:	f7ff ffd1 	bl	80016fe <Set_Pin_Input>


}
 800175c:	bf00      	nop
 800175e:	bd80      	pop	{r7, pc}
 8001760:	40011800 	.word	0x40011800

08001764 <Check_Response>:

uint8_t Check_Response (void)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b082      	sub	sp, #8
 8001768:	af00      	add	r7, sp, #0
	uint8_t Response = 0;
 800176a:	2300      	movs	r3, #0
 800176c:	71fb      	strb	r3, [r7, #7]
	char str[4];
	delay (60);
 800176e:	203c      	movs	r0, #60	; 0x3c
 8001770:	f7ff ff8c 	bl	800168c <delay>
	if (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)))
 8001774:	2140      	movs	r1, #64	; 0x40
 8001776:	4819      	ldr	r0, [pc, #100]	; (80017dc <Check_Response+0x78>)
 8001778:	f001 ffc0 	bl	80036fc <HAL_GPIO_ReadPin>
 800177c:	4603      	mov	r3, r0
 800177e:	2b00      	cmp	r3, #0
 8001780:	d10e      	bne.n	80017a0 <Check_Response+0x3c>
	{
		delay (80);
 8001782:	2050      	movs	r0, #80	; 0x50
 8001784:	f7ff ff82 	bl	800168c <delay>
		if ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN))) Response = 1;
 8001788:	2140      	movs	r1, #64	; 0x40
 800178a:	4814      	ldr	r0, [pc, #80]	; (80017dc <Check_Response+0x78>)
 800178c:	f001 ffb6 	bl	80036fc <HAL_GPIO_ReadPin>
 8001790:	4603      	mov	r3, r0
 8001792:	2b00      	cmp	r3, #0
 8001794:	d002      	beq.n	800179c <Check_Response+0x38>
 8001796:	2301      	movs	r3, #1
 8001798:	71fb      	strb	r3, [r7, #7]
 800179a:	e001      	b.n	80017a0 <Check_Response+0x3c>
		else Response = -1;
 800179c:	23ff      	movs	r3, #255	; 0xff
 800179e:	71fb      	strb	r3, [r7, #7]
	}
	sprintf(str, "%d", Response);
 80017a0:	79fa      	ldrb	r2, [r7, #7]
 80017a2:	463b      	mov	r3, r7
 80017a4:	490e      	ldr	r1, [pc, #56]	; (80017e0 <Check_Response+0x7c>)
 80017a6:	4618      	mov	r0, r3
 80017a8:	f003 f8a2 	bl	80048f0 <siprintf>
	LCD_DrawString(10, 10, str);
 80017ac:	463b      	mov	r3, r7
 80017ae:	461a      	mov	r2, r3
 80017b0:	210a      	movs	r1, #10
 80017b2:	200a      	movs	r0, #10
 80017b4:	f7ff fe76 	bl	80014a4 <LCD_DrawString>
	while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)));   // wait for the pin to go low
 80017b8:	bf00      	nop
 80017ba:	2140      	movs	r1, #64	; 0x40
 80017bc:	4807      	ldr	r0, [pc, #28]	; (80017dc <Check_Response+0x78>)
 80017be:	f001 ff9d 	bl	80036fc <HAL_GPIO_ReadPin>
 80017c2:	4603      	mov	r3, r0
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d1f8      	bne.n	80017ba <Check_Response+0x56>
	LCD_DrawString(10, 10, "Fucking IDK!");
 80017c8:	4a06      	ldr	r2, [pc, #24]	; (80017e4 <Check_Response+0x80>)
 80017ca:	210a      	movs	r1, #10
 80017cc:	200a      	movs	r0, #10
 80017ce:	f7ff fe69 	bl	80014a4 <LCD_DrawString>
	return Response;
 80017d2:	79fb      	ldrb	r3, [r7, #7]
}
 80017d4:	4618      	mov	r0, r3
 80017d6:	3708      	adds	r7, #8
 80017d8:	46bd      	mov	sp, r7
 80017da:	bd80      	pop	{r7, pc}
 80017dc:	40011800 	.word	0x40011800
 80017e0:	080051fc 	.word	0x080051fc
 80017e4:	08005200 	.word	0x08005200

080017e8 <DHT11_Read>:

uint8_t DHT11_Read (void)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b082      	sub	sp, #8
 80017ec:	af00      	add	r7, sp, #0
	uint8_t i,j;
	for (j=0;j<8;j++)
 80017ee:	2300      	movs	r3, #0
 80017f0:	71bb      	strb	r3, [r7, #6]
 80017f2:	e037      	b.n	8001864 <DHT11_Read+0x7c>
	{
		while (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)));   // wait for the pin to go high
 80017f4:	bf00      	nop
 80017f6:	2140      	movs	r1, #64	; 0x40
 80017f8:	481e      	ldr	r0, [pc, #120]	; (8001874 <DHT11_Read+0x8c>)
 80017fa:	f001 ff7f 	bl	80036fc <HAL_GPIO_ReadPin>
 80017fe:	4603      	mov	r3, r0
 8001800:	2b00      	cmp	r3, #0
 8001802:	d0f8      	beq.n	80017f6 <DHT11_Read+0xe>
		delay (50);   // wait for 40 us
 8001804:	2032      	movs	r0, #50	; 0x32
 8001806:	f7ff ff41 	bl	800168c <delay>
		if (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)))   // if the pin is low
 800180a:	2140      	movs	r1, #64	; 0x40
 800180c:	4819      	ldr	r0, [pc, #100]	; (8001874 <DHT11_Read+0x8c>)
 800180e:	f001 ff75 	bl	80036fc <HAL_GPIO_ReadPin>
 8001812:	4603      	mov	r3, r0
 8001814:	2b00      	cmp	r3, #0
 8001816:	d10e      	bne.n	8001836 <DHT11_Read+0x4e>
		{
			i&= ~(1<<(7-j));   // write 0
 8001818:	79bb      	ldrb	r3, [r7, #6]
 800181a:	f1c3 0307 	rsb	r3, r3, #7
 800181e:	2201      	movs	r2, #1
 8001820:	fa02 f303 	lsl.w	r3, r2, r3
 8001824:	b25b      	sxtb	r3, r3
 8001826:	43db      	mvns	r3, r3
 8001828:	b25a      	sxtb	r2, r3
 800182a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800182e:	4013      	ands	r3, r2
 8001830:	b25b      	sxtb	r3, r3
 8001832:	71fb      	strb	r3, [r7, #7]
 8001834:	e00b      	b.n	800184e <DHT11_Read+0x66>
		}
		else i|= (1<<(7-j));  // if the pin is high, write 1
 8001836:	79bb      	ldrb	r3, [r7, #6]
 8001838:	f1c3 0307 	rsb	r3, r3, #7
 800183c:	2201      	movs	r2, #1
 800183e:	fa02 f303 	lsl.w	r3, r2, r3
 8001842:	b25a      	sxtb	r2, r3
 8001844:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001848:	4313      	orrs	r3, r2
 800184a:	b25b      	sxtb	r3, r3
 800184c:	71fb      	strb	r3, [r7, #7]
		while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)));  // wait for the pin to go low
 800184e:	bf00      	nop
 8001850:	2140      	movs	r1, #64	; 0x40
 8001852:	4808      	ldr	r0, [pc, #32]	; (8001874 <DHT11_Read+0x8c>)
 8001854:	f001 ff52 	bl	80036fc <HAL_GPIO_ReadPin>
 8001858:	4603      	mov	r3, r0
 800185a:	2b00      	cmp	r3, #0
 800185c:	d1f8      	bne.n	8001850 <DHT11_Read+0x68>
	for (j=0;j<8;j++)
 800185e:	79bb      	ldrb	r3, [r7, #6]
 8001860:	3301      	adds	r3, #1
 8001862:	71bb      	strb	r3, [r7, #6]
 8001864:	79bb      	ldrb	r3, [r7, #6]
 8001866:	2b07      	cmp	r3, #7
 8001868:	d9c4      	bls.n	80017f4 <DHT11_Read+0xc>
	}
	return i;
 800186a:	79fb      	ldrb	r3, [r7, #7]
}
 800186c:	4618      	mov	r0, r3
 800186e:	3708      	adds	r7, #8
 8001870:	46bd      	mov	sp, r7
 8001872:	bd80      	pop	{r7, pc}
 8001874:	40011800 	.word	0x40011800

08001878 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001878:	b5f0      	push	{r4, r5, r6, r7, lr}
 800187a:	b0b1      	sub	sp, #196	; 0xc4
 800187c:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
  int32_t adc1_value = 0, adc2_value = 0;
 800187e:	2300      	movs	r3, #0
 8001880:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8001884:	2300      	movs	r3, #0
 8001886:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  char adc1_value_display [4], adc2_value_display [4], watering_time_display[48];
  char temperature_value_display [16], humidity_value_display [16];
  char watering_time [2][32] = {{"00:00"},{"00:00"}};
 800188a:	4bd3      	ldr	r3, [pc, #844]	; (8001bd8 <main+0x360>)
 800188c:	1d3c      	adds	r4, r7, #4
 800188e:	461d      	mov	r5, r3
 8001890:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001892:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001894:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001896:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001898:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800189a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800189c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80018a0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint8_t hr = 0;
 80018a4:	2300      	movs	r3, #0
 80018a6:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
  uint8_t min = 0;
 80018aa:	2300      	movs	r3, #0
 80018ac:	f887 30b6 	strb.w	r3, [r7, #182]	; 0xb6
  uint8_t Humidity_B1, Humidity_B2, Temp_B1, Temp_B2;
  uint16_t SUM, HU, TEMP;
  float temperature_dht11 = 0;
 80018b0:	f04f 0300 	mov.w	r3, #0
 80018b4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  float humidity_dht11 = 0;
 80018b8:	f04f 0300 	mov.w	r3, #0
 80018bc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint8_t presence = 0;
 80018c0:	2300      	movs	r3, #0
 80018c2:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80018c6:	f000 ff07 	bl	80026d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80018ca:	f000 fb0d 	bl	8001ee8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80018ce:	f000 fbdd 	bl	800208c <MX_GPIO_Init>
  MX_FSMC_Init();
 80018d2:	f000 fcc9 	bl	8002268 <MX_FSMC_Init>
  MX_ADC1_Init();
 80018d6:	f000 fb65 	bl	8001fa4 <MX_ADC1_Init>
  MX_TIM6_Init();
 80018da:	f000 fba1 	bl	8002020 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  LCD_INIT();
 80018de:	f7ff faf7 	bl	8000ed0 <LCD_INIT>
  HAL_ADCEx_Calibration_Start(&hadc1);
 80018e2:	48be      	ldr	r0, [pc, #760]	; (8001bdc <main+0x364>)
 80018e4:	f001 fbbc 	bl	8003060 <HAL_ADCEx_Calibration_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	
	while(Ov7725_Init() != SUCCESS);
 80018e8:	bf00      	nop
 80018ea:	f7ff f8b9 	bl	8000a60 <Ov7725_Init>
 80018ee:	4603      	mov	r3, r0
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d1fa      	bne.n	80018ea <main+0x72>
	Ov7725_vsync = 0;
 80018f4:	4bba      	ldr	r3, [pc, #744]	; (8001be0 <main+0x368>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	701a      	strb	r2, [r3, #0]
	
  while (1)
  {
	if (Ov7725_vsync == 2 && HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13)==GPIO_PIN_SET)
 80018fa:	4bb9      	ldr	r3, [pc, #740]	; (8001be0 <main+0x368>)
 80018fc:	781b      	ldrb	r3, [r3, #0]
 80018fe:	b2db      	uxtb	r3, r3
 8001900:	2b02      	cmp	r3, #2
 8001902:	d128      	bne.n	8001956 <main+0xde>
 8001904:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001908:	48b6      	ldr	r0, [pc, #728]	; (8001be4 <main+0x36c>)
 800190a:	f001 fef7 	bl	80036fc <HAL_GPIO_ReadPin>
 800190e:	4603      	mov	r3, r0
 8001910:	2b01      	cmp	r3, #1
 8001912:	d120      	bne.n	8001956 <main+0xde>
	{
		FIFO_PREPARE;
 8001914:	4bb4      	ldr	r3, [pc, #720]	; (8001be8 <main+0x370>)
 8001916:	2204      	movs	r2, #4
 8001918:	615a      	str	r2, [r3, #20]
 800191a:	4bb2      	ldr	r3, [pc, #712]	; (8001be4 <main+0x36c>)
 800191c:	2220      	movs	r2, #32
 800191e:	615a      	str	r2, [r3, #20]
 8001920:	4bb0      	ldr	r3, [pc, #704]	; (8001be4 <main+0x36c>)
 8001922:	2220      	movs	r2, #32
 8001924:	611a      	str	r2, [r3, #16]
 8001926:	4bb0      	ldr	r3, [pc, #704]	; (8001be8 <main+0x370>)
 8001928:	2204      	movs	r2, #4
 800192a:	611a      	str	r2, [r3, #16]
 800192c:	4bad      	ldr	r3, [pc, #692]	; (8001be4 <main+0x36c>)
 800192e:	2220      	movs	r2, #32
 8001930:	615a      	str	r2, [r3, #20]
 8001932:	4bac      	ldr	r3, [pc, #688]	; (8001be4 <main+0x36c>)
 8001934:	2220      	movs	r2, #32
 8001936:	611a      	str	r2, [r3, #16]
		ImagDisp();
 8001938:	f7ff f8dc 	bl	8000af4 <ImagDisp>
		Ov7725_vsync = 0;
 800193c:	4ba8      	ldr	r3, [pc, #672]	; (8001be0 <main+0x368>)
 800193e:	2200      	movs	r2, #0
 8001940:	701a      	strb	r2, [r3, #0]
		LCD_Clear(0, 0, 320, 240, 0xffff);
 8001942:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001946:	9300      	str	r3, [sp, #0]
 8001948:	23f0      	movs	r3, #240	; 0xf0
 800194a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800194e:	2100      	movs	r1, #0
 8001950:	2000      	movs	r0, #0
 8001952:	f7ff fcb8 	bl	80012c6 <LCD_Clear>
	}

		
	HAL_ADC_Start(&hadc1);
 8001956:	48a1      	ldr	r0, [pc, #644]	; (8001bdc <main+0x364>)
 8001958:	f001 f82e 	bl	80029b8 <HAL_ADC_Start>
	LCD_Clear (145, 210, 70, 50, 0xffff);
 800195c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001960:	9300      	str	r3, [sp, #0]
 8001962:	2332      	movs	r3, #50	; 0x32
 8001964:	2246      	movs	r2, #70	; 0x46
 8001966:	21d2      	movs	r1, #210	; 0xd2
 8001968:	2091      	movs	r0, #145	; 0x91
 800196a:	f7ff fcac 	bl	80012c6 <LCD_Clear>
    HAL_ADC_PollForConversion(&hadc1, 1000);
 800196e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001972:	489a      	ldr	r0, [pc, #616]	; (8001bdc <main+0x364>)
 8001974:	f001 f8ce 	bl	8002b14 <HAL_ADC_PollForConversion>
	adc1_value = HAL_ADC_GetValue(&hadc1);
 8001978:	4898      	ldr	r0, [pc, #608]	; (8001bdc <main+0x364>)
 800197a:	f001 f9d1 	bl	8002d20 <HAL_ADC_GetValue>
 800197e:	4603      	mov	r3, r0
 8001980:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
	sprintf(adc1_value_display, "%d", adc1_value);
 8001984:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001988:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800198c:	4997      	ldr	r1, [pc, #604]	; (8001bec <main+0x374>)
 800198e:	4618      	mov	r0, r3
 8001990:	f002 ffae 	bl	80048f0 <siprintf>
	LCD_Clear(140, 160, 100, 20, 0xffff);
 8001994:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001998:	9300      	str	r3, [sp, #0]
 800199a:	2314      	movs	r3, #20
 800199c:	2264      	movs	r2, #100	; 0x64
 800199e:	21a0      	movs	r1, #160	; 0xa0
 80019a0:	208c      	movs	r0, #140	; 0x8c
 80019a2:	f7ff fc90 	bl	80012c6 <LCD_Clear>
	adc1_value *= 0.02;
 80019a6:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 80019aa:	f7fe feb9 	bl	8000720 <__aeabi_i2d>
 80019ae:	a388      	add	r3, pc, #544	; (adr r3, 8001bd0 <main+0x358>)
 80019b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019b4:	f7fe fc38 	bl	8000228 <__aeabi_dmul>
 80019b8:	4602      	mov	r2, r0
 80019ba:	460b      	mov	r3, r1
 80019bc:	4610      	mov	r0, r2
 80019be:	4619      	mov	r1, r3
 80019c0:	f7fe ff18 	bl	80007f4 <__aeabi_d2iz>
 80019c4:	4603      	mov	r3, r0
 80019c6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
	LCD_DrawString(140, 160, adc1_value_display);
 80019ca:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80019ce:	461a      	mov	r2, r3
 80019d0:	21a0      	movs	r1, #160	; 0xa0
 80019d2:	208c      	movs	r0, #140	; 0x8c
 80019d4:	f7ff fd66 	bl	80014a4 <LCD_DrawString>
	LCD_Clear(140, 180, 100, 20, 0xffff);
 80019d8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80019dc:	9300      	str	r3, [sp, #0]
 80019de:	2314      	movs	r3, #20
 80019e0:	2264      	movs	r2, #100	; 0x64
 80019e2:	21b4      	movs	r1, #180	; 0xb4
 80019e4:	208c      	movs	r0, #140	; 0x8c
 80019e6:	f7ff fc6e 	bl	80012c6 <LCD_Clear>
	LCD_DrawString(140, 180, "Water level");
 80019ea:	4a81      	ldr	r2, [pc, #516]	; (8001bf0 <main+0x378>)
 80019ec:	21b4      	movs	r1, #180	; 0xb4
 80019ee:	208c      	movs	r0, #140	; 0x8c
 80019f0:	f7ff fd58 	bl	80014a4 <LCD_DrawString>
    LCD_DrawLine(140, 206, 140, 266, 0x0);
 80019f4:	2300      	movs	r3, #0
 80019f6:	9300      	str	r3, [sp, #0]
 80019f8:	f44f 7385 	mov.w	r3, #266	; 0x10a
 80019fc:	228c      	movs	r2, #140	; 0x8c
 80019fe:	21ce      	movs	r1, #206	; 0xce
 8001a00:	208c      	movs	r0, #140	; 0x8c
 8001a02:	f7ff fc83 	bl	800130c <LCD_DrawLine>
    LCD_DrawLine(220, 206, 220, 266, 0x0);
 8001a06:	2300      	movs	r3, #0
 8001a08:	9300      	str	r3, [sp, #0]
 8001a0a:	f44f 7385 	mov.w	r3, #266	; 0x10a
 8001a0e:	22dc      	movs	r2, #220	; 0xdc
 8001a10:	21ce      	movs	r1, #206	; 0xce
 8001a12:	20dc      	movs	r0, #220	; 0xdc
 8001a14:	f7ff fc7a 	bl	800130c <LCD_DrawLine>
	LCD_DrawLine(140, 266, 220, 266, 0x0);
 8001a18:	2300      	movs	r3, #0
 8001a1a:	9300      	str	r3, [sp, #0]
 8001a1c:	f44f 7385 	mov.w	r3, #266	; 0x10a
 8001a20:	22dc      	movs	r2, #220	; 0xdc
 8001a22:	f44f 7185 	mov.w	r1, #266	; 0x10a
 8001a26:	208c      	movs	r0, #140	; 0x8c
 8001a28:	f7ff fc70 	bl	800130c <LCD_DrawLine>
	LCD_Clear (145, 210, 70, adc1_value, 0x001f);
 8001a2c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001a30:	b29b      	uxth	r3, r3
 8001a32:	221f      	movs	r2, #31
 8001a34:	9200      	str	r2, [sp, #0]
 8001a36:	2246      	movs	r2, #70	; 0x46
 8001a38:	21d2      	movs	r1, #210	; 0xd2
 8001a3a:	2091      	movs	r0, #145	; 0x91
 8001a3c:	f7ff fc43 	bl	80012c6 <LCD_Clear>

	if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_SET){
 8001a40:	2101      	movs	r1, #1
 8001a42:	4869      	ldr	r0, [pc, #420]	; (8001be8 <main+0x370>)
 8001a44:	f001 fe5a 	bl	80036fc <HAL_GPIO_ReadPin>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	2b01      	cmp	r3, #1
 8001a4c:	f040 8129 	bne.w	8001ca2 <main+0x42a>
		LCD_Clear(0, 0, 240, 320, 0xffff);
 8001a50:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001a54:	9300      	str	r3, [sp, #0]
 8001a56:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001a5a:	22f0      	movs	r2, #240	; 0xf0
 8001a5c:	2100      	movs	r1, #0
 8001a5e:	2000      	movs	r0, #0
 8001a60:	f7ff fc31 	bl	80012c6 <LCD_Clear>
		LCD_DrawString(40, 15, "Set the watering time:");
 8001a64:	4a63      	ldr	r2, [pc, #396]	; (8001bf4 <main+0x37c>)
 8001a66:	210f      	movs	r1, #15
 8001a68:	2028      	movs	r0, #40	; 0x28
 8001a6a:	f7ff fd1b 	bl	80014a4 <LCD_DrawString>
		LCD_Draw_Num(48, 60, num[0]);
 8001a6e:	4a62      	ldr	r2, [pc, #392]	; (8001bf8 <main+0x380>)
 8001a70:	213c      	movs	r1, #60	; 0x3c
 8001a72:	2030      	movs	r0, #48	; 0x30
 8001a74:	f7ff fd8f 	bl	8001596 <LCD_Draw_Num>
		LCD_Draw_Num(82, 60, num[0]);
 8001a78:	4a5f      	ldr	r2, [pc, #380]	; (8001bf8 <main+0x380>)
 8001a7a:	213c      	movs	r1, #60	; 0x3c
 8001a7c:	2052      	movs	r0, #82	; 0x52
 8001a7e:	f7ff fd8a 	bl	8001596 <LCD_Draw_Num>
		LCD_Draw_Num(108, 60, num[10]);
 8001a82:	4a5e      	ldr	r2, [pc, #376]	; (8001bfc <main+0x384>)
 8001a84:	213c      	movs	r1, #60	; 0x3c
 8001a86:	206c      	movs	r0, #108	; 0x6c
 8001a88:	f7ff fd85 	bl	8001596 <LCD_Draw_Num>
		LCD_Draw_Num(134, 60, num[0]);
 8001a8c:	4a5a      	ldr	r2, [pc, #360]	; (8001bf8 <main+0x380>)
 8001a8e:	213c      	movs	r1, #60	; 0x3c
 8001a90:	2086      	movs	r0, #134	; 0x86
 8001a92:	f7ff fd80 	bl	8001596 <LCD_Draw_Num>
		LCD_Draw_Num(168, 60, num[0]);
 8001a96:	4a58      	ldr	r2, [pc, #352]	; (8001bf8 <main+0x380>)
 8001a98:	213c      	movs	r1, #60	; 0x3c
 8001a9a:	20a8      	movs	r0, #168	; 0xa8
 8001a9c:	f7ff fd7b 	bl	8001596 <LCD_Draw_Num>
		while(1){
		  hr += (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_SET);
 8001aa0:	2101      	movs	r1, #1
 8001aa2:	4851      	ldr	r0, [pc, #324]	; (8001be8 <main+0x370>)
 8001aa4:	f001 fe2a 	bl	80036fc <HAL_GPIO_ReadPin>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	2b01      	cmp	r3, #1
 8001aac:	bf0c      	ite	eq
 8001aae:	2301      	moveq	r3, #1
 8001ab0:	2300      	movne	r3, #0
 8001ab2:	b2db      	uxtb	r3, r3
 8001ab4:	b2da      	uxtb	r2, r3
 8001ab6:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 8001aba:	4413      	add	r3, r2
 8001abc:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
		  min += (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_SET);
 8001ac0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001ac4:	4847      	ldr	r0, [pc, #284]	; (8001be4 <main+0x36c>)
 8001ac6:	f001 fe19 	bl	80036fc <HAL_GPIO_ReadPin>
 8001aca:	4603      	mov	r3, r0
 8001acc:	2b01      	cmp	r3, #1
 8001ace:	bf0c      	ite	eq
 8001ad0:	2301      	moveq	r3, #1
 8001ad2:	2300      	movne	r3, #0
 8001ad4:	b2db      	uxtb	r3, r3
 8001ad6:	b2da      	uxtb	r2, r3
 8001ad8:	f897 30b6 	ldrb.w	r3, [r7, #182]	; 0xb6
 8001adc:	4413      	add	r3, r2
 8001ade:	f887 30b6 	strb.w	r3, [r7, #182]	; 0xb6
		  if(hr == 24) hr = 0;
 8001ae2:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 8001ae6:	2b18      	cmp	r3, #24
 8001ae8:	d102      	bne.n	8001af0 <main+0x278>
 8001aea:	2300      	movs	r3, #0
 8001aec:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
		  if(min == 60) min = 0;
 8001af0:	f897 30b6 	ldrb.w	r3, [r7, #182]	; 0xb6
 8001af4:	2b3c      	cmp	r3, #60	; 0x3c
 8001af6:	d102      	bne.n	8001afe <main+0x286>
 8001af8:	2300      	movs	r3, #0
 8001afa:	f887 30b6 	strb.w	r3, [r7, #182]	; 0xb6
		  LCD_Draw_Num(48, 60, num[hr/10]);
 8001afe:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 8001b02:	4a3f      	ldr	r2, [pc, #252]	; (8001c00 <main+0x388>)
 8001b04:	fba2 2303 	umull	r2, r3, r2, r3
 8001b08:	08db      	lsrs	r3, r3, #3
 8001b0a:	b2db      	uxtb	r3, r3
 8001b0c:	461a      	mov	r2, r3
 8001b0e:	4613      	mov	r3, r2
 8001b10:	005b      	lsls	r3, r3, #1
 8001b12:	4413      	add	r3, r2
 8001b14:	015b      	lsls	r3, r3, #5
 8001b16:	4a38      	ldr	r2, [pc, #224]	; (8001bf8 <main+0x380>)
 8001b18:	4413      	add	r3, r2
 8001b1a:	461a      	mov	r2, r3
 8001b1c:	213c      	movs	r1, #60	; 0x3c
 8001b1e:	2030      	movs	r0, #48	; 0x30
 8001b20:	f7ff fd39 	bl	8001596 <LCD_Draw_Num>
		  LCD_Draw_Num(82, 60, num[hr%10]);
 8001b24:	f897 20b7 	ldrb.w	r2, [r7, #183]	; 0xb7
 8001b28:	4b35      	ldr	r3, [pc, #212]	; (8001c00 <main+0x388>)
 8001b2a:	fba3 1302 	umull	r1, r3, r3, r2
 8001b2e:	08d9      	lsrs	r1, r3, #3
 8001b30:	460b      	mov	r3, r1
 8001b32:	009b      	lsls	r3, r3, #2
 8001b34:	440b      	add	r3, r1
 8001b36:	005b      	lsls	r3, r3, #1
 8001b38:	1ad3      	subs	r3, r2, r3
 8001b3a:	b2db      	uxtb	r3, r3
 8001b3c:	461a      	mov	r2, r3
 8001b3e:	4613      	mov	r3, r2
 8001b40:	005b      	lsls	r3, r3, #1
 8001b42:	4413      	add	r3, r2
 8001b44:	015b      	lsls	r3, r3, #5
 8001b46:	4a2c      	ldr	r2, [pc, #176]	; (8001bf8 <main+0x380>)
 8001b48:	4413      	add	r3, r2
 8001b4a:	461a      	mov	r2, r3
 8001b4c:	213c      	movs	r1, #60	; 0x3c
 8001b4e:	2052      	movs	r0, #82	; 0x52
 8001b50:	f7ff fd21 	bl	8001596 <LCD_Draw_Num>
		  LCD_Draw_Num(108, 60, num[10]);
 8001b54:	4a29      	ldr	r2, [pc, #164]	; (8001bfc <main+0x384>)
 8001b56:	213c      	movs	r1, #60	; 0x3c
 8001b58:	206c      	movs	r0, #108	; 0x6c
 8001b5a:	f7ff fd1c 	bl	8001596 <LCD_Draw_Num>
		  LCD_Draw_Num(134, 60, num[min/10]);
 8001b5e:	f897 30b6 	ldrb.w	r3, [r7, #182]	; 0xb6
 8001b62:	4a27      	ldr	r2, [pc, #156]	; (8001c00 <main+0x388>)
 8001b64:	fba2 2303 	umull	r2, r3, r2, r3
 8001b68:	08db      	lsrs	r3, r3, #3
 8001b6a:	b2db      	uxtb	r3, r3
 8001b6c:	461a      	mov	r2, r3
 8001b6e:	4613      	mov	r3, r2
 8001b70:	005b      	lsls	r3, r3, #1
 8001b72:	4413      	add	r3, r2
 8001b74:	015b      	lsls	r3, r3, #5
 8001b76:	4a20      	ldr	r2, [pc, #128]	; (8001bf8 <main+0x380>)
 8001b78:	4413      	add	r3, r2
 8001b7a:	461a      	mov	r2, r3
 8001b7c:	213c      	movs	r1, #60	; 0x3c
 8001b7e:	2086      	movs	r0, #134	; 0x86
 8001b80:	f7ff fd09 	bl	8001596 <LCD_Draw_Num>
		  LCD_Draw_Num(168, 60, num[min%10]);
 8001b84:	f897 20b6 	ldrb.w	r2, [r7, #182]	; 0xb6
 8001b88:	4b1d      	ldr	r3, [pc, #116]	; (8001c00 <main+0x388>)
 8001b8a:	fba3 1302 	umull	r1, r3, r3, r2
 8001b8e:	08d9      	lsrs	r1, r3, #3
 8001b90:	460b      	mov	r3, r1
 8001b92:	009b      	lsls	r3, r3, #2
 8001b94:	440b      	add	r3, r1
 8001b96:	005b      	lsls	r3, r3, #1
 8001b98:	1ad3      	subs	r3, r2, r3
 8001b9a:	b2db      	uxtb	r3, r3
 8001b9c:	461a      	mov	r2, r3
 8001b9e:	4613      	mov	r3, r2
 8001ba0:	005b      	lsls	r3, r3, #1
 8001ba2:	4413      	add	r3, r2
 8001ba4:	015b      	lsls	r3, r3, #5
 8001ba6:	4a14      	ldr	r2, [pc, #80]	; (8001bf8 <main+0x380>)
 8001ba8:	4413      	add	r3, r2
 8001baa:	461a      	mov	r2, r3
 8001bac:	213c      	movs	r1, #60	; 0x3c
 8001bae:	20a8      	movs	r0, #168	; 0xa8
 8001bb0:	f7ff fcf1 	bl	8001596 <LCD_Draw_Num>
		  HAL_Delay(300);
 8001bb4:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001bb8:	f000 fdf0 	bl	800279c <HAL_Delay>
		  LCD_Clear(48, 60, 192, 92, 0xffff);
 8001bbc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001bc0:	9300      	str	r3, [sp, #0]
 8001bc2:	235c      	movs	r3, #92	; 0x5c
 8001bc4:	22c0      	movs	r2, #192	; 0xc0
 8001bc6:	213c      	movs	r1, #60	; 0x3c
 8001bc8:	2030      	movs	r0, #48	; 0x30
 8001bca:	e01b      	b.n	8001c04 <main+0x38c>
 8001bcc:	f3af 8000 	nop.w
 8001bd0:	47ae147b 	.word	0x47ae147b
 8001bd4:	3f947ae1 	.word	0x3f947ae1
 8001bd8:	08005268 	.word	0x08005268
 8001bdc:	20000170 	.word	0x20000170
 8001be0:	200001e8 	.word	0x200001e8
 8001be4:	40011000 	.word	0x40011000
 8001be8:	40010800 	.word	0x40010800
 8001bec:	080051fc 	.word	0x080051fc
 8001bf0:	08005210 	.word	0x08005210
 8001bf4:	0800521c 	.word	0x0800521c
 8001bf8:	080058b8 	.word	0x080058b8
 8001bfc:	08005c78 	.word	0x08005c78
 8001c00:	cccccccd 	.word	0xcccccccd
 8001c04:	f7ff fb5f 	bl	80012c6 <LCD_Clear>
		  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_SET && HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_SET) break;
 8001c08:	2101      	movs	r1, #1
 8001c0a:	48a8      	ldr	r0, [pc, #672]	; (8001eac <main+0x634>)
 8001c0c:	f001 fd76 	bl	80036fc <HAL_GPIO_ReadPin>
 8001c10:	4603      	mov	r3, r0
 8001c12:	2b01      	cmp	r3, #1
 8001c14:	f47f af44 	bne.w	8001aa0 <main+0x228>
 8001c18:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001c1c:	48a4      	ldr	r0, [pc, #656]	; (8001eb0 <main+0x638>)
 8001c1e:	f001 fd6d 	bl	80036fc <HAL_GPIO_ReadPin>
 8001c22:	4603      	mov	r3, r0
 8001c24:	2b01      	cmp	r3, #1
 8001c26:	d000      	beq.n	8001c2a <main+0x3b2>
		  hr += (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_SET);
 8001c28:	e73a      	b.n	8001aa0 <main+0x228>
		  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_SET && HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_SET) break;
 8001c2a:	bf00      	nop
		}
	    LCD_Clear(0, 0, 240, 320, 0xffff);
 8001c2c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c30:	9300      	str	r3, [sp, #0]
 8001c32:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001c36:	22f0      	movs	r2, #240	; 0xf0
 8001c38:	2100      	movs	r1, #0
 8001c3a:	2000      	movs	r0, #0
 8001c3c:	f7ff fb43 	bl	80012c6 <LCD_Clear>
		sprintf(watering_time, "%d%d:%d%d", hr/10, hr%10, min/10, min%10);
 8001c40:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 8001c44:	4a9b      	ldr	r2, [pc, #620]	; (8001eb4 <main+0x63c>)
 8001c46:	fba2 2303 	umull	r2, r3, r2, r3
 8001c4a:	08db      	lsrs	r3, r3, #3
 8001c4c:	b2db      	uxtb	r3, r3
 8001c4e:	461d      	mov	r5, r3
 8001c50:	f897 20b7 	ldrb.w	r2, [r7, #183]	; 0xb7
 8001c54:	4b97      	ldr	r3, [pc, #604]	; (8001eb4 <main+0x63c>)
 8001c56:	fba3 1302 	umull	r1, r3, r3, r2
 8001c5a:	08d9      	lsrs	r1, r3, #3
 8001c5c:	460b      	mov	r3, r1
 8001c5e:	009b      	lsls	r3, r3, #2
 8001c60:	440b      	add	r3, r1
 8001c62:	005b      	lsls	r3, r3, #1
 8001c64:	1ad3      	subs	r3, r2, r3
 8001c66:	b2db      	uxtb	r3, r3
 8001c68:	461e      	mov	r6, r3
 8001c6a:	f897 30b6 	ldrb.w	r3, [r7, #182]	; 0xb6
 8001c6e:	4a91      	ldr	r2, [pc, #580]	; (8001eb4 <main+0x63c>)
 8001c70:	fba2 2303 	umull	r2, r3, r2, r3
 8001c74:	08db      	lsrs	r3, r3, #3
 8001c76:	b2db      	uxtb	r3, r3
 8001c78:	461c      	mov	r4, r3
 8001c7a:	f897 20b6 	ldrb.w	r2, [r7, #182]	; 0xb6
 8001c7e:	4b8d      	ldr	r3, [pc, #564]	; (8001eb4 <main+0x63c>)
 8001c80:	fba3 1302 	umull	r1, r3, r3, r2
 8001c84:	08d9      	lsrs	r1, r3, #3
 8001c86:	460b      	mov	r3, r1
 8001c88:	009b      	lsls	r3, r3, #2
 8001c8a:	440b      	add	r3, r1
 8001c8c:	005b      	lsls	r3, r3, #1
 8001c8e:	1ad3      	subs	r3, r2, r3
 8001c90:	b2db      	uxtb	r3, r3
 8001c92:	1d38      	adds	r0, r7, #4
 8001c94:	9301      	str	r3, [sp, #4]
 8001c96:	9400      	str	r4, [sp, #0]
 8001c98:	4633      	mov	r3, r6
 8001c9a:	462a      	mov	r2, r5
 8001c9c:	4986      	ldr	r1, [pc, #536]	; (8001eb8 <main+0x640>)
 8001c9e:	f002 fe27 	bl	80048f0 <siprintf>
	}

	LCD_Draw_Num(48, 60, num[1]);
 8001ca2:	4a86      	ldr	r2, [pc, #536]	; (8001ebc <main+0x644>)
 8001ca4:	213c      	movs	r1, #60	; 0x3c
 8001ca6:	2030      	movs	r0, #48	; 0x30
 8001ca8:	f7ff fc75 	bl	8001596 <LCD_Draw_Num>
	LCD_Draw_Num(82, 60, num[2]);
 8001cac:	4a84      	ldr	r2, [pc, #528]	; (8001ec0 <main+0x648>)
 8001cae:	213c      	movs	r1, #60	; 0x3c
 8001cb0:	2052      	movs	r0, #82	; 0x52
 8001cb2:	f7ff fc70 	bl	8001596 <LCD_Draw_Num>
	LCD_Draw_Num(108, 60, num[10]);
 8001cb6:	4a83      	ldr	r2, [pc, #524]	; (8001ec4 <main+0x64c>)
 8001cb8:	213c      	movs	r1, #60	; 0x3c
 8001cba:	206c      	movs	r0, #108	; 0x6c
 8001cbc:	f7ff fc6b 	bl	8001596 <LCD_Draw_Num>
	LCD_Draw_Num(134, 60, num[0]);
 8001cc0:	4a81      	ldr	r2, [pc, #516]	; (8001ec8 <main+0x650>)
 8001cc2:	213c      	movs	r1, #60	; 0x3c
 8001cc4:	2086      	movs	r0, #134	; 0x86
 8001cc6:	f7ff fc66 	bl	8001596 <LCD_Draw_Num>
	LCD_Draw_Num(168, 60, num[8]);
 8001cca:	4a80      	ldr	r2, [pc, #512]	; (8001ecc <main+0x654>)
 8001ccc:	213c      	movs	r1, #60	; 0x3c
 8001cce:	20a8      	movs	r0, #168	; 0xa8
 8001cd0:	f7ff fc61 	bl	8001596 <LCD_Draw_Num>

    sprintf(watering_time_display, "Next watering time: %s", watering_time[0]);
 8001cd4:	1d3a      	adds	r2, r7, #4
 8001cd6:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001cda:	497d      	ldr	r1, [pc, #500]	; (8001ed0 <main+0x658>)
 8001cdc:	4618      	mov	r0, r3
 8001cde:	f002 fe07 	bl	80048f0 <siprintf>
	LCD_DrawString(30, 135, watering_time_display);
 8001ce2:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001ce6:	461a      	mov	r2, r3
 8001ce8:	2187      	movs	r1, #135	; 0x87
 8001cea:	201e      	movs	r0, #30
 8001cec:	f7ff fbda 	bl	80014a4 <LCD_DrawString>

	LCD_DrawLine(0, 152, 240, 152, 0x0);
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	9300      	str	r3, [sp, #0]
 8001cf4:	2398      	movs	r3, #152	; 0x98
 8001cf6:	22f0      	movs	r2, #240	; 0xf0
 8001cf8:	2198      	movs	r1, #152	; 0x98
 8001cfa:	2000      	movs	r0, #0
 8001cfc:	f7ff fb06 	bl	800130c <LCD_DrawLine>

	DHT11_Start();
 8001d00:	f7ff fd1a 	bl	8001738 <DHT11_Start>
	presence = Check_Response();
 8001d04:	f7ff fd2e 	bl	8001764 <Check_Response>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
	Humidity_B1 = DHT11_Read();
 8001d0e:	f7ff fd6b 	bl	80017e8 <DHT11_Read>
 8001d12:	4603      	mov	r3, r0
 8001d14:	f887 30a2 	strb.w	r3, [r7, #162]	; 0xa2
	Humidity_B2 = DHT11_Read();
 8001d18:	f7ff fd66 	bl	80017e8 <DHT11_Read>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	f887 30a1 	strb.w	r3, [r7, #161]	; 0xa1
	Temp_B1 = DHT11_Read();
 8001d22:	f7ff fd61 	bl	80017e8 <DHT11_Read>
 8001d26:	4603      	mov	r3, r0
 8001d28:	f887 30a0 	strb.w	r3, [r7, #160]	; 0xa0
	Temp_B2 = DHT11_Read();
 8001d2c:	f7ff fd5c 	bl	80017e8 <DHT11_Read>
 8001d30:	4603      	mov	r3, r0
 8001d32:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
	SUM = DHT11_Read();
 8001d36:	f7ff fd57 	bl	80017e8 <DHT11_Read>
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c

	temperature_dht11 = Temp_B1;
 8001d40:	f897 30a0 	ldrb.w	r3, [r7, #160]	; 0xa0
 8001d44:	4618      	mov	r0, r3
 8001d46:	f7fe fe33 	bl	80009b0 <__aeabi_ui2f>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
	humidity_dht11 = Humidity_B1;
 8001d50:	f897 30a2 	ldrb.w	r3, [r7, #162]	; 0xa2
 8001d54:	4618      	mov	r0, r3
 8001d56:	f7fe fe2b 	bl	80009b0 <__aeabi_ui2f>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

	sprintf(temperature_value_display, "T: %.2f", temperature_dht11);
 8001d60:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 8001d64:	f7fe fcee 	bl	8000744 <__aeabi_f2d>
 8001d68:	4602      	mov	r2, r0
 8001d6a:	460b      	mov	r3, r1
 8001d6c:	f107 0054 	add.w	r0, r7, #84	; 0x54
 8001d70:	4958      	ldr	r1, [pc, #352]	; (8001ed4 <main+0x65c>)
 8001d72:	f002 fdbd 	bl	80048f0 <siprintf>
	sprintf(humidity_value_display, "H: %.2f", humidity_dht11);
 8001d76:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8001d7a:	f7fe fce3 	bl	8000744 <__aeabi_f2d>
 8001d7e:	4602      	mov	r2, r0
 8001d80:	460b      	mov	r3, r1
 8001d82:	f107 0044 	add.w	r0, r7, #68	; 0x44
 8001d86:	4954      	ldr	r1, [pc, #336]	; (8001ed8 <main+0x660>)
 8001d88:	f002 fdb2 	bl	80048f0 <siprintf>


			  //DHT11 Temperature Value and Display
    LCD_Draw_24sqr(20, 166, temperature);
 8001d8c:	4a53      	ldr	r2, [pc, #332]	; (8001edc <main+0x664>)
 8001d8e:	21a6      	movs	r1, #166	; 0xa6
 8001d90:	2014      	movs	r0, #20
 8001d92:	f7ff fc3d 	bl	8001610 <LCD_Draw_24sqr>
	LCD_DrawString(51, 167, temperature_value_display);
 8001d96:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001d9a:	461a      	mov	r2, r3
 8001d9c:	21a7      	movs	r1, #167	; 0xa7
 8001d9e:	2033      	movs	r0, #51	; 0x33
 8001da0:	f7ff fb80 	bl	80014a4 <LCD_DrawString>
	LCD_DrawLine(50, 166 ,100, 166, 0x0);
 8001da4:	2300      	movs	r3, #0
 8001da6:	9300      	str	r3, [sp, #0]
 8001da8:	23a6      	movs	r3, #166	; 0xa6
 8001daa:	2264      	movs	r2, #100	; 0x64
 8001dac:	21a6      	movs	r1, #166	; 0xa6
 8001dae:	2032      	movs	r0, #50	; 0x32
 8001db0:	f7ff faac 	bl	800130c <LCD_DrawLine>
	LCD_DrawLine(50, 186 ,100, 186, 0x0);
 8001db4:	2300      	movs	r3, #0
 8001db6:	9300      	str	r3, [sp, #0]
 8001db8:	23ba      	movs	r3, #186	; 0xba
 8001dba:	2264      	movs	r2, #100	; 0x64
 8001dbc:	21ba      	movs	r1, #186	; 0xba
 8001dbe:	2032      	movs	r0, #50	; 0x32
 8001dc0:	f7ff faa4 	bl	800130c <LCD_DrawLine>
	LCD_DrawLine(50, 166 ,50, 186, 0x0);
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	9300      	str	r3, [sp, #0]
 8001dc8:	23ba      	movs	r3, #186	; 0xba
 8001dca:	2232      	movs	r2, #50	; 0x32
 8001dcc:	21a6      	movs	r1, #166	; 0xa6
 8001dce:	2032      	movs	r0, #50	; 0x32
 8001dd0:	f7ff fa9c 	bl	800130c <LCD_DrawLine>
	LCD_DrawLine(100, 166 ,100, 186, 0x0);
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	9300      	str	r3, [sp, #0]
 8001dd8:	23ba      	movs	r3, #186	; 0xba
 8001dda:	2264      	movs	r2, #100	; 0x64
 8001ddc:	21a6      	movs	r1, #166	; 0xa6
 8001dde:	2064      	movs	r0, #100	; 0x64
 8001de0:	f7ff fa94 	bl	800130c <LCD_DrawLine>

			  //DHT11 Humidity Value and Display
	LCD_Draw_24sqr(20, 206, dew);
 8001de4:	4a3e      	ldr	r2, [pc, #248]	; (8001ee0 <main+0x668>)
 8001de6:	21ce      	movs	r1, #206	; 0xce
 8001de8:	2014      	movs	r0, #20
 8001dea:	f7ff fc11 	bl	8001610 <LCD_Draw_24sqr>
//	LCD_DrawString(51, 207, humidity_value_display);
	LCD_DrawLine(50, 206 ,100, 206, 0x0);
 8001dee:	2300      	movs	r3, #0
 8001df0:	9300      	str	r3, [sp, #0]
 8001df2:	23ce      	movs	r3, #206	; 0xce
 8001df4:	2264      	movs	r2, #100	; 0x64
 8001df6:	21ce      	movs	r1, #206	; 0xce
 8001df8:	2032      	movs	r0, #50	; 0x32
 8001dfa:	f7ff fa87 	bl	800130c <LCD_DrawLine>
	LCD_DrawLine(50, 226 ,100, 226, 0x0);
 8001dfe:	2300      	movs	r3, #0
 8001e00:	9300      	str	r3, [sp, #0]
 8001e02:	23e2      	movs	r3, #226	; 0xe2
 8001e04:	2264      	movs	r2, #100	; 0x64
 8001e06:	21e2      	movs	r1, #226	; 0xe2
 8001e08:	2032      	movs	r0, #50	; 0x32
 8001e0a:	f7ff fa7f 	bl	800130c <LCD_DrawLine>
	LCD_DrawLine(50, 206 ,50, 226, 0x0);
 8001e0e:	2300      	movs	r3, #0
 8001e10:	9300      	str	r3, [sp, #0]
 8001e12:	23e2      	movs	r3, #226	; 0xe2
 8001e14:	2232      	movs	r2, #50	; 0x32
 8001e16:	21ce      	movs	r1, #206	; 0xce
 8001e18:	2032      	movs	r0, #50	; 0x32
 8001e1a:	f7ff fa77 	bl	800130c <LCD_DrawLine>
	LCD_DrawLine(100, 206 ,100, 226, 0x0);
 8001e1e:	2300      	movs	r3, #0
 8001e20:	9300      	str	r3, [sp, #0]
 8001e22:	23e2      	movs	r3, #226	; 0xe2
 8001e24:	2264      	movs	r2, #100	; 0x64
 8001e26:	21ce      	movs	r1, #206	; 0xce
 8001e28:	2064      	movs	r0, #100	; 0x64
 8001e2a:	f7ff fa6f 	bl	800130c <LCD_DrawLine>

			  //LDR Sensor Value and Display
		//	  HAL_ADC_PollForConversion(&hadc2, 1000);
		//	  adc2_value = HAL_ADC_GetValue(&hadc2);
		//	  sprintf(adc2_value_display, "%d", adc2_value);
	LCD_Clear(51, 247, 32, 16, 0xffff);
 8001e2e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001e32:	9300      	str	r3, [sp, #0]
 8001e34:	2310      	movs	r3, #16
 8001e36:	2220      	movs	r2, #32
 8001e38:	21f7      	movs	r1, #247	; 0xf7
 8001e3a:	2033      	movs	r0, #51	; 0x33
 8001e3c:	f7ff fa43 	bl	80012c6 <LCD_Clear>
			  LCD_DrawString(51, 247, adc2_value_display);
 8001e40:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001e44:	461a      	mov	r2, r3
 8001e46:	21f7      	movs	r1, #247	; 0xf7
 8001e48:	2033      	movs	r0, #51	; 0x33
 8001e4a:	f7ff fb2b 	bl	80014a4 <LCD_DrawString>
	LCD_Draw_24sqr(20, 246, light);
 8001e4e:	4a25      	ldr	r2, [pc, #148]	; (8001ee4 <main+0x66c>)
 8001e50:	21f6      	movs	r1, #246	; 0xf6
 8001e52:	2014      	movs	r0, #20
 8001e54:	f7ff fbdc 	bl	8001610 <LCD_Draw_24sqr>
	LCD_DrawLine(50, 246 ,100, 246, 0x0);
 8001e58:	2300      	movs	r3, #0
 8001e5a:	9300      	str	r3, [sp, #0]
 8001e5c:	23f6      	movs	r3, #246	; 0xf6
 8001e5e:	2264      	movs	r2, #100	; 0x64
 8001e60:	21f6      	movs	r1, #246	; 0xf6
 8001e62:	2032      	movs	r0, #50	; 0x32
 8001e64:	f7ff fa52 	bl	800130c <LCD_DrawLine>
	LCD_DrawLine(50, 266 ,100, 266, 0x0);
 8001e68:	2300      	movs	r3, #0
 8001e6a:	9300      	str	r3, [sp, #0]
 8001e6c:	f44f 7385 	mov.w	r3, #266	; 0x10a
 8001e70:	2264      	movs	r2, #100	; 0x64
 8001e72:	f44f 7185 	mov.w	r1, #266	; 0x10a
 8001e76:	2032      	movs	r0, #50	; 0x32
 8001e78:	f7ff fa48 	bl	800130c <LCD_DrawLine>
	LCD_DrawLine(50, 246 ,50, 266, 0x0);
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	9300      	str	r3, [sp, #0]
 8001e80:	f44f 7385 	mov.w	r3, #266	; 0x10a
 8001e84:	2232      	movs	r2, #50	; 0x32
 8001e86:	21f6      	movs	r1, #246	; 0xf6
 8001e88:	2032      	movs	r0, #50	; 0x32
 8001e8a:	f7ff fa3f 	bl	800130c <LCD_DrawLine>
    LCD_DrawLine(100, 246 ,100, 266, 0x0);
 8001e8e:	2300      	movs	r3, #0
 8001e90:	9300      	str	r3, [sp, #0]
 8001e92:	f44f 7385 	mov.w	r3, #266	; 0x10a
 8001e96:	2264      	movs	r2, #100	; 0x64
 8001e98:	21f6      	movs	r1, #246	; 0xf6
 8001e9a:	2064      	movs	r0, #100	; 0x64
 8001e9c:	f7ff fa36 	bl	800130c <LCD_DrawLine>
	HAL_Delay(2000);
 8001ea0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001ea4:	f000 fc7a 	bl	800279c <HAL_Delay>
	if (Ov7725_vsync == 2 && HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13)==GPIO_PIN_SET)
 8001ea8:	e527      	b.n	80018fa <main+0x82>
 8001eaa:	bf00      	nop
 8001eac:	40010800 	.word	0x40010800
 8001eb0:	40011000 	.word	0x40011000
 8001eb4:	cccccccd 	.word	0xcccccccd
 8001eb8:	08005234 	.word	0x08005234
 8001ebc:	08005918 	.word	0x08005918
 8001ec0:	08005978 	.word	0x08005978
 8001ec4:	08005c78 	.word	0x08005c78
 8001ec8:	080058b8 	.word	0x080058b8
 8001ecc:	08005bb8 	.word	0x08005bb8
 8001ed0:	08005240 	.word	0x08005240
 8001ed4:	08005258 	.word	0x08005258
 8001ed8:	08005260 	.word	0x08005260
 8001edc:	08005d20 	.word	0x08005d20
 8001ee0:	08005cd8 	.word	0x08005cd8
 8001ee4:	08005d68 	.word	0x08005d68

08001ee8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b096      	sub	sp, #88	; 0x58
 8001eec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001eee:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001ef2:	2228      	movs	r2, #40	; 0x28
 8001ef4:	2100      	movs	r1, #0
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	f002 fcf2 	bl	80048e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001efc:	f107 031c 	add.w	r3, r7, #28
 8001f00:	2200      	movs	r2, #0
 8001f02:	601a      	str	r2, [r3, #0]
 8001f04:	605a      	str	r2, [r3, #4]
 8001f06:	609a      	str	r2, [r3, #8]
 8001f08:	60da      	str	r2, [r3, #12]
 8001f0a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001f0c:	1d3b      	adds	r3, r7, #4
 8001f0e:	2200      	movs	r2, #0
 8001f10:	601a      	str	r2, [r3, #0]
 8001f12:	605a      	str	r2, [r3, #4]
 8001f14:	609a      	str	r2, [r3, #8]
 8001f16:	60da      	str	r2, [r3, #12]
 8001f18:	611a      	str	r2, [r3, #16]
 8001f1a:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001f20:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001f24:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001f26:	2300      	movs	r3, #0
 8001f28:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001f2e:	2302      	movs	r3, #2
 8001f30:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001f32:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001f36:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001f38:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001f3c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f3e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001f42:	4618      	mov	r0, r3
 8001f44:	f001 fc2c 	bl	80037a0 <HAL_RCC_OscConfig>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d001      	beq.n	8001f52 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8001f4e:	f000 f9ef 	bl	8002330 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f52:	230f      	movs	r3, #15
 8001f54:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001f56:	2302      	movs	r3, #2
 8001f58:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001f5e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f62:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001f64:	2300      	movs	r3, #0
 8001f66:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001f68:	f107 031c 	add.w	r3, r7, #28
 8001f6c:	2102      	movs	r1, #2
 8001f6e:	4618      	mov	r0, r3
 8001f70:	f001 fe98 	bl	8003ca4 <HAL_RCC_ClockConfig>
 8001f74:	4603      	mov	r3, r0
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d001      	beq.n	8001f7e <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001f7a:	f000 f9d9 	bl	8002330 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001f7e:	2302      	movs	r3, #2
 8001f80:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001f82:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001f86:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001f88:	1d3b      	adds	r3, r7, #4
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	f002 f80e 	bl	8003fac <HAL_RCCEx_PeriphCLKConfig>
 8001f90:	4603      	mov	r3, r0
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d001      	beq.n	8001f9a <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8001f96:	f000 f9cb 	bl	8002330 <Error_Handler>
  }
}
 8001f9a:	bf00      	nop
 8001f9c:	3758      	adds	r7, #88	; 0x58
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd80      	pop	{r7, pc}
	...

08001fa4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b084      	sub	sp, #16
 8001fa8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001faa:	1d3b      	adds	r3, r7, #4
 8001fac:	2200      	movs	r2, #0
 8001fae:	601a      	str	r2, [r3, #0]
 8001fb0:	605a      	str	r2, [r3, #4]
 8001fb2:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001fb4:	4b18      	ldr	r3, [pc, #96]	; (8002018 <MX_ADC1_Init+0x74>)
 8001fb6:	4a19      	ldr	r2, [pc, #100]	; (800201c <MX_ADC1_Init+0x78>)
 8001fb8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001fba:	4b17      	ldr	r3, [pc, #92]	; (8002018 <MX_ADC1_Init+0x74>)
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001fc0:	4b15      	ldr	r3, [pc, #84]	; (8002018 <MX_ADC1_Init+0x74>)
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001fc6:	4b14      	ldr	r3, [pc, #80]	; (8002018 <MX_ADC1_Init+0x74>)
 8001fc8:	2200      	movs	r2, #0
 8001fca:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001fcc:	4b12      	ldr	r3, [pc, #72]	; (8002018 <MX_ADC1_Init+0x74>)
 8001fce:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001fd2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001fd4:	4b10      	ldr	r3, [pc, #64]	; (8002018 <MX_ADC1_Init+0x74>)
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8001fda:	4b0f      	ldr	r3, [pc, #60]	; (8002018 <MX_ADC1_Init+0x74>)
 8001fdc:	2201      	movs	r2, #1
 8001fde:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001fe0:	480d      	ldr	r0, [pc, #52]	; (8002018 <MX_ADC1_Init+0x74>)
 8001fe2:	f000 fbff 	bl	80027e4 <HAL_ADC_Init>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d001      	beq.n	8001ff0 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8001fec:	f000 f9a0 	bl	8002330 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001ff0:	2305      	movs	r3, #5
 8001ff2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001ff4:	2301      	movs	r3, #1
 8001ff6:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001ffc:	1d3b      	adds	r3, r7, #4
 8001ffe:	4619      	mov	r1, r3
 8002000:	4805      	ldr	r0, [pc, #20]	; (8002018 <MX_ADC1_Init+0x74>)
 8002002:	f000 fe99 	bl	8002d38 <HAL_ADC_ConfigChannel>
 8002006:	4603      	mov	r3, r0
 8002008:	2b00      	cmp	r3, #0
 800200a:	d001      	beq.n	8002010 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 800200c:	f000 f990 	bl	8002330 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002010:	bf00      	nop
 8002012:	3710      	adds	r7, #16
 8002014:	46bd      	mov	sp, r7
 8002016:	bd80      	pop	{r7, pc}
 8002018:	20000170 	.word	0x20000170
 800201c:	40012400 	.word	0x40012400

08002020 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b082      	sub	sp, #8
 8002024:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002026:	463b      	mov	r3, r7
 8002028:	2200      	movs	r2, #0
 800202a:	601a      	str	r2, [r3, #0]
 800202c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800202e:	4b15      	ldr	r3, [pc, #84]	; (8002084 <MX_TIM6_Init+0x64>)
 8002030:	4a15      	ldr	r2, [pc, #84]	; (8002088 <MX_TIM6_Init+0x68>)
 8002032:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 71;
 8002034:	4b13      	ldr	r3, [pc, #76]	; (8002084 <MX_TIM6_Init+0x64>)
 8002036:	2247      	movs	r2, #71	; 0x47
 8002038:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800203a:	4b12      	ldr	r3, [pc, #72]	; (8002084 <MX_TIM6_Init+0x64>)
 800203c:	2200      	movs	r2, #0
 800203e:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8002040:	4b10      	ldr	r3, [pc, #64]	; (8002084 <MX_TIM6_Init+0x64>)
 8002042:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002046:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002048:	4b0e      	ldr	r3, [pc, #56]	; (8002084 <MX_TIM6_Init+0x64>)
 800204a:	2200      	movs	r2, #0
 800204c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800204e:	480d      	ldr	r0, [pc, #52]	; (8002084 <MX_TIM6_Init+0x64>)
 8002050:	f002 f993 	bl	800437a <HAL_TIM_Base_Init>
 8002054:	4603      	mov	r3, r0
 8002056:	2b00      	cmp	r3, #0
 8002058:	d001      	beq.n	800205e <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 800205a:	f000 f969 	bl	8002330 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800205e:	2300      	movs	r3, #0
 8002060:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002062:	2300      	movs	r3, #0
 8002064:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002066:	463b      	mov	r3, r7
 8002068:	4619      	mov	r1, r3
 800206a:	4806      	ldr	r0, [pc, #24]	; (8002084 <MX_TIM6_Init+0x64>)
 800206c:	f002 facc 	bl	8004608 <HAL_TIMEx_MasterConfigSynchronization>
 8002070:	4603      	mov	r3, r0
 8002072:	2b00      	cmp	r3, #0
 8002074:	d001      	beq.n	800207a <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8002076:	f000 f95b 	bl	8002330 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800207a:	bf00      	nop
 800207c:	3708      	adds	r7, #8
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}
 8002082:	bf00      	nop
 8002084:	20000128 	.word	0x20000128
 8002088:	40001000 	.word	0x40001000

0800208c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b08a      	sub	sp, #40	; 0x28
 8002090:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002092:	f107 0318 	add.w	r3, r7, #24
 8002096:	2200      	movs	r2, #0
 8002098:	601a      	str	r2, [r3, #0]
 800209a:	605a      	str	r2, [r3, #4]
 800209c:	609a      	str	r2, [r3, #8]
 800209e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80020a0:	4b6a      	ldr	r3, [pc, #424]	; (800224c <MX_GPIO_Init+0x1c0>)
 80020a2:	699b      	ldr	r3, [r3, #24]
 80020a4:	4a69      	ldr	r2, [pc, #420]	; (800224c <MX_GPIO_Init+0x1c0>)
 80020a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80020aa:	6193      	str	r3, [r2, #24]
 80020ac:	4b67      	ldr	r3, [pc, #412]	; (800224c <MX_GPIO_Init+0x1c0>)
 80020ae:	699b      	ldr	r3, [r3, #24]
 80020b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020b4:	617b      	str	r3, [r7, #20]
 80020b6:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80020b8:	4b64      	ldr	r3, [pc, #400]	; (800224c <MX_GPIO_Init+0x1c0>)
 80020ba:	699b      	ldr	r3, [r3, #24]
 80020bc:	4a63      	ldr	r2, [pc, #396]	; (800224c <MX_GPIO_Init+0x1c0>)
 80020be:	f043 0310 	orr.w	r3, r3, #16
 80020c2:	6193      	str	r3, [r2, #24]
 80020c4:	4b61      	ldr	r3, [pc, #388]	; (800224c <MX_GPIO_Init+0x1c0>)
 80020c6:	699b      	ldr	r3, [r3, #24]
 80020c8:	f003 0310 	and.w	r3, r3, #16
 80020cc:	613b      	str	r3, [r7, #16]
 80020ce:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80020d0:	4b5e      	ldr	r3, [pc, #376]	; (800224c <MX_GPIO_Init+0x1c0>)
 80020d2:	699b      	ldr	r3, [r3, #24]
 80020d4:	4a5d      	ldr	r2, [pc, #372]	; (800224c <MX_GPIO_Init+0x1c0>)
 80020d6:	f043 0304 	orr.w	r3, r3, #4
 80020da:	6193      	str	r3, [r2, #24]
 80020dc:	4b5b      	ldr	r3, [pc, #364]	; (800224c <MX_GPIO_Init+0x1c0>)
 80020de:	699b      	ldr	r3, [r3, #24]
 80020e0:	f003 0304 	and.w	r3, r3, #4
 80020e4:	60fb      	str	r3, [r7, #12]
 80020e6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80020e8:	4b58      	ldr	r3, [pc, #352]	; (800224c <MX_GPIO_Init+0x1c0>)
 80020ea:	699b      	ldr	r3, [r3, #24]
 80020ec:	4a57      	ldr	r2, [pc, #348]	; (800224c <MX_GPIO_Init+0x1c0>)
 80020ee:	f043 0308 	orr.w	r3, r3, #8
 80020f2:	6193      	str	r3, [r2, #24]
 80020f4:	4b55      	ldr	r3, [pc, #340]	; (800224c <MX_GPIO_Init+0x1c0>)
 80020f6:	699b      	ldr	r3, [r3, #24]
 80020f8:	f003 0308 	and.w	r3, r3, #8
 80020fc:	60bb      	str	r3, [r7, #8]
 80020fe:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002100:	4b52      	ldr	r3, [pc, #328]	; (800224c <MX_GPIO_Init+0x1c0>)
 8002102:	699b      	ldr	r3, [r3, #24]
 8002104:	4a51      	ldr	r2, [pc, #324]	; (800224c <MX_GPIO_Init+0x1c0>)
 8002106:	f043 0320 	orr.w	r3, r3, #32
 800210a:	6193      	str	r3, [r2, #24]
 800210c:	4b4f      	ldr	r3, [pc, #316]	; (800224c <MX_GPIO_Init+0x1c0>)
 800210e:	699b      	ldr	r3, [r3, #24]
 8002110:	f003 0320 	and.w	r3, r3, #32
 8002114:	607b      	str	r3, [r7, #4]
 8002116:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_6|GPIO_PIN_1, GPIO_PIN_RESET);
 8002118:	2200      	movs	r2, #0
 800211a:	2142      	movs	r1, #66	; 0x42
 800211c:	484c      	ldr	r0, [pc, #304]	; (8002250 <MX_GPIO_Init+0x1c4>)
 800211e:	f001 fb04 	bl	800372a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 8002122:	2200      	movs	r2, #0
 8002124:	210c      	movs	r1, #12
 8002126:	484b      	ldr	r0, [pc, #300]	; (8002254 <MX_GPIO_Init+0x1c8>)
 8002128:	f001 faff 	bl	800372a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 800212c:	2200      	movs	r2, #0
 800212e:	21f0      	movs	r1, #240	; 0xf0
 8002130:	4849      	ldr	r0, [pc, #292]	; (8002258 <MX_GPIO_Init+0x1cc>)
 8002132:	f001 fafa 	bl	800372a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_3, GPIO_PIN_RESET);
 8002136:	2200      	movs	r2, #0
 8002138:	f241 0108 	movw	r1, #4104	; 0x1008
 800213c:	4847      	ldr	r0, [pc, #284]	; (800225c <MX_GPIO_Init+0x1d0>)
 800213e:	f001 faf4 	bl	800372a <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE6 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_1;
 8002142:	2342      	movs	r3, #66	; 0x42
 8002144:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002146:	2301      	movs	r3, #1
 8002148:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800214a:	2300      	movs	r3, #0
 800214c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800214e:	2303      	movs	r3, #3
 8002150:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002152:	f107 0318 	add.w	r3, r7, #24
 8002156:	4619      	mov	r1, r3
 8002158:	483d      	ldr	r0, [pc, #244]	; (8002250 <MX_GPIO_Init+0x1c4>)
 800215a:	f001 f93b 	bl	80033d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800215e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002162:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002164:	2300      	movs	r3, #0
 8002166:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002168:	2300      	movs	r3, #0
 800216a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800216c:	f107 0318 	add.w	r3, r7, #24
 8002170:	4619      	mov	r1, r3
 8002172:	4839      	ldr	r0, [pc, #228]	; (8002258 <MX_GPIO_Init+0x1cc>)
 8002174:	f001 f92e 	bl	80033d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002178:	2308      	movs	r3, #8
 800217a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800217c:	4b38      	ldr	r3, [pc, #224]	; (8002260 <MX_GPIO_Init+0x1d4>)
 800217e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002180:	2300      	movs	r3, #0
 8002182:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002184:	f107 0318 	add.w	r3, r7, #24
 8002188:	4619      	mov	r1, r3
 800218a:	4833      	ldr	r0, [pc, #204]	; (8002258 <MX_GPIO_Init+0x1cc>)
 800218c:	f001 f922 	bl	80033d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002190:	2301      	movs	r3, #1
 8002192:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002194:	2300      	movs	r3, #0
 8002196:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002198:	2300      	movs	r3, #0
 800219a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800219c:	f107 0318 	add.w	r3, r7, #24
 80021a0:	4619      	mov	r1, r3
 80021a2:	482c      	ldr	r0, [pc, #176]	; (8002254 <MX_GPIO_Init+0x1c8>)
 80021a4:	f001 f916 	bl	80033d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80021a8:	230c      	movs	r3, #12
 80021aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021ac:	2301      	movs	r3, #1
 80021ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021b0:	2300      	movs	r3, #0
 80021b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80021b4:	2303      	movs	r3, #3
 80021b6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021b8:	f107 0318 	add.w	r3, r7, #24
 80021bc:	4619      	mov	r1, r3
 80021be:	4825      	ldr	r0, [pc, #148]	; (8002254 <MX_GPIO_Init+0x1c8>)
 80021c0:	f001 f908 	bl	80033d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80021c4:	2330      	movs	r3, #48	; 0x30
 80021c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021c8:	2301      	movs	r3, #1
 80021ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021cc:	2300      	movs	r3, #0
 80021ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80021d0:	2303      	movs	r3, #3
 80021d2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021d4:	f107 0318 	add.w	r3, r7, #24
 80021d8:	4619      	mov	r1, r3
 80021da:	481f      	ldr	r0, [pc, #124]	; (8002258 <MX_GPIO_Init+0x1cc>)
 80021dc:	f001 f8fa 	bl	80033d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB11 PB12 PB13
                           PB14 PB15 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 80021e0:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 80021e4:	61bb      	str	r3, [r7, #24]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80021e6:	2300      	movs	r3, #0
 80021e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ea:	2300      	movs	r3, #0
 80021ec:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021ee:	f107 0318 	add.w	r3, r7, #24
 80021f2:	4619      	mov	r1, r3
 80021f4:	481b      	ldr	r0, [pc, #108]	; (8002264 <MX_GPIO_Init+0x1d8>)
 80021f6:	f001 f8ed 	bl	80033d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD3 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_3;
 80021fa:	f241 0308 	movw	r3, #4104	; 0x1008
 80021fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002200:	2301      	movs	r3, #1
 8002202:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002204:	2300      	movs	r3, #0
 8002206:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002208:	2303      	movs	r3, #3
 800220a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800220c:	f107 0318 	add.w	r3, r7, #24
 8002210:	4619      	mov	r1, r3
 8002212:	4812      	ldr	r0, [pc, #72]	; (800225c <MX_GPIO_Init+0x1d0>)
 8002214:	f001 f8de 	bl	80033d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002218:	23c0      	movs	r3, #192	; 0xc0
 800221a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800221c:	2311      	movs	r3, #17
 800221e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002220:	2300      	movs	r3, #0
 8002222:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002224:	2303      	movs	r3, #3
 8002226:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002228:	f107 0318 	add.w	r3, r7, #24
 800222c:	4619      	mov	r1, r3
 800222e:	480a      	ldr	r0, [pc, #40]	; (8002258 <MX_GPIO_Init+0x1cc>)
 8002230:	f001 f8d0 	bl	80033d4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8002234:	2200      	movs	r2, #0
 8002236:	2100      	movs	r1, #0
 8002238:	2009      	movs	r0, #9
 800223a:	f001 f894 	bl	8003366 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 800223e:	2009      	movs	r0, #9
 8002240:	f001 f8ad 	bl	800339e <HAL_NVIC_EnableIRQ>

}
 8002244:	bf00      	nop
 8002246:	3728      	adds	r7, #40	; 0x28
 8002248:	46bd      	mov	sp, r7
 800224a:	bd80      	pop	{r7, pc}
 800224c:	40021000 	.word	0x40021000
 8002250:	40011800 	.word	0x40011800
 8002254:	40010800 	.word	0x40010800
 8002258:	40011000 	.word	0x40011000
 800225c:	40011400 	.word	0x40011400
 8002260:	10210000 	.word	0x10210000
 8002264:	40010c00 	.word	0x40010c00

08002268 <MX_FSMC_Init>:

/* FSMC initialization function */
static void MX_FSMC_Init(void)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b088      	sub	sp, #32
 800226c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 800226e:	1d3b      	adds	r3, r7, #4
 8002270:	2200      	movs	r2, #0
 8002272:	601a      	str	r2, [r3, #0]
 8002274:	605a      	str	r2, [r3, #4]
 8002276:	609a      	str	r2, [r3, #8]
 8002278:	60da      	str	r2, [r3, #12]
 800227a:	611a      	str	r2, [r3, #16]
 800227c:	615a      	str	r2, [r3, #20]
 800227e:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8002280:	4b28      	ldr	r3, [pc, #160]	; (8002324 <MX_FSMC_Init+0xbc>)
 8002282:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8002286:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8002288:	4b26      	ldr	r3, [pc, #152]	; (8002324 <MX_FSMC_Init+0xbc>)
 800228a:	4a27      	ldr	r2, [pc, #156]	; (8002328 <MX_FSMC_Init+0xc0>)
 800228c:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 800228e:	4b25      	ldr	r3, [pc, #148]	; (8002324 <MX_FSMC_Init+0xbc>)
 8002290:	2200      	movs	r2, #0
 8002292:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8002294:	4b23      	ldr	r3, [pc, #140]	; (8002324 <MX_FSMC_Init+0xbc>)
 8002296:	2200      	movs	r2, #0
 8002298:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 800229a:	4b22      	ldr	r3, [pc, #136]	; (8002324 <MX_FSMC_Init+0xbc>)
 800229c:	2200      	movs	r2, #0
 800229e:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 80022a0:	4b20      	ldr	r3, [pc, #128]	; (8002324 <MX_FSMC_Init+0xbc>)
 80022a2:	2210      	movs	r2, #16
 80022a4:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 80022a6:	4b1f      	ldr	r3, [pc, #124]	; (8002324 <MX_FSMC_Init+0xbc>)
 80022a8:	2200      	movs	r2, #0
 80022aa:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 80022ac:	4b1d      	ldr	r3, [pc, #116]	; (8002324 <MX_FSMC_Init+0xbc>)
 80022ae:	2200      	movs	r2, #0
 80022b0:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 80022b2:	4b1c      	ldr	r3, [pc, #112]	; (8002324 <MX_FSMC_Init+0xbc>)
 80022b4:	2200      	movs	r2, #0
 80022b6:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 80022b8:	4b1a      	ldr	r3, [pc, #104]	; (8002324 <MX_FSMC_Init+0xbc>)
 80022ba:	2200      	movs	r2, #0
 80022bc:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 80022be:	4b19      	ldr	r3, [pc, #100]	; (8002324 <MX_FSMC_Init+0xbc>)
 80022c0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80022c4:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 80022c6:	4b17      	ldr	r3, [pc, #92]	; (8002324 <MX_FSMC_Init+0xbc>)
 80022c8:	2200      	movs	r2, #0
 80022ca:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 80022cc:	4b15      	ldr	r3, [pc, #84]	; (8002324 <MX_FSMC_Init+0xbc>)
 80022ce:	2200      	movs	r2, #0
 80022d0:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 80022d2:	4b14      	ldr	r3, [pc, #80]	; (8002324 <MX_FSMC_Init+0xbc>)
 80022d4:	2200      	movs	r2, #0
 80022d6:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 80022d8:	4b12      	ldr	r3, [pc, #72]	; (8002324 <MX_FSMC_Init+0xbc>)
 80022da:	2200      	movs	r2, #0
 80022dc:	639a      	str	r2, [r3, #56]	; 0x38
  /* Timing */
  Timing.AddressSetupTime = 15;
 80022de:	230f      	movs	r3, #15
 80022e0:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 80022e2:	230f      	movs	r3, #15
 80022e4:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 80022e6:	23ff      	movs	r3, #255	; 0xff
 80022e8:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 80022ea:	230f      	movs	r3, #15
 80022ec:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 80022ee:	2310      	movs	r3, #16
 80022f0:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 80022f2:	2311      	movs	r3, #17
 80022f4:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 80022f6:	2300      	movs	r3, #0
 80022f8:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 80022fa:	1d3b      	adds	r3, r7, #4
 80022fc:	2200      	movs	r2, #0
 80022fe:	4619      	mov	r1, r3
 8002300:	4808      	ldr	r0, [pc, #32]	; (8002324 <MX_FSMC_Init+0xbc>)
 8002302:	f001 ffed 	bl	80042e0 <HAL_SRAM_Init>
 8002306:	4603      	mov	r3, r0
 8002308:	2b00      	cmp	r3, #0
 800230a:	d001      	beq.n	8002310 <MX_FSMC_Init+0xa8>
  {
    Error_Handler( );
 800230c:	f000 f810 	bl	8002330 <Error_Handler>
  }

  /** Disconnect NADV
  */

  __HAL_AFIO_FSMCNADV_DISCONNECTED();
 8002310:	4b06      	ldr	r3, [pc, #24]	; (800232c <MX_FSMC_Init+0xc4>)
 8002312:	69db      	ldr	r3, [r3, #28]
 8002314:	4a05      	ldr	r2, [pc, #20]	; (800232c <MX_FSMC_Init+0xc4>)
 8002316:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800231a:	61d3      	str	r3, [r2, #28]

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 800231c:	bf00      	nop
 800231e:	3720      	adds	r7, #32
 8002320:	46bd      	mov	sp, r7
 8002322:	bd80      	pop	{r7, pc}
 8002324:	200001a0 	.word	0x200001a0
 8002328:	a0000104 	.word	0xa0000104
 800232c:	40010000 	.word	0x40010000

08002330 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002330:	b480      	push	{r7}
 8002332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002334:	bf00      	nop
 8002336:	46bd      	mov	sp, r7
 8002338:	bc80      	pop	{r7}
 800233a:	4770      	bx	lr

0800233c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800233c:	b480      	push	{r7}
 800233e:	b085      	sub	sp, #20
 8002340:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002342:	4b15      	ldr	r3, [pc, #84]	; (8002398 <HAL_MspInit+0x5c>)
 8002344:	699b      	ldr	r3, [r3, #24]
 8002346:	4a14      	ldr	r2, [pc, #80]	; (8002398 <HAL_MspInit+0x5c>)
 8002348:	f043 0301 	orr.w	r3, r3, #1
 800234c:	6193      	str	r3, [r2, #24]
 800234e:	4b12      	ldr	r3, [pc, #72]	; (8002398 <HAL_MspInit+0x5c>)
 8002350:	699b      	ldr	r3, [r3, #24]
 8002352:	f003 0301 	and.w	r3, r3, #1
 8002356:	60bb      	str	r3, [r7, #8]
 8002358:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800235a:	4b0f      	ldr	r3, [pc, #60]	; (8002398 <HAL_MspInit+0x5c>)
 800235c:	69db      	ldr	r3, [r3, #28]
 800235e:	4a0e      	ldr	r2, [pc, #56]	; (8002398 <HAL_MspInit+0x5c>)
 8002360:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002364:	61d3      	str	r3, [r2, #28]
 8002366:	4b0c      	ldr	r3, [pc, #48]	; (8002398 <HAL_MspInit+0x5c>)
 8002368:	69db      	ldr	r3, [r3, #28]
 800236a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800236e:	607b      	str	r3, [r7, #4]
 8002370:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002372:	4b0a      	ldr	r3, [pc, #40]	; (800239c <HAL_MspInit+0x60>)
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	60fb      	str	r3, [r7, #12]
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800237e:	60fb      	str	r3, [r7, #12]
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002386:	60fb      	str	r3, [r7, #12]
 8002388:	4a04      	ldr	r2, [pc, #16]	; (800239c <HAL_MspInit+0x60>)
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800238e:	bf00      	nop
 8002390:	3714      	adds	r7, #20
 8002392:	46bd      	mov	sp, r7
 8002394:	bc80      	pop	{r7}
 8002396:	4770      	bx	lr
 8002398:	40021000 	.word	0x40021000
 800239c:	40010000 	.word	0x40010000

080023a0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b088      	sub	sp, #32
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023a8:	f107 0310 	add.w	r3, r7, #16
 80023ac:	2200      	movs	r2, #0
 80023ae:	601a      	str	r2, [r3, #0]
 80023b0:	605a      	str	r2, [r3, #4]
 80023b2:	609a      	str	r2, [r3, #8]
 80023b4:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4a14      	ldr	r2, [pc, #80]	; (800240c <HAL_ADC_MspInit+0x6c>)
 80023bc:	4293      	cmp	r3, r2
 80023be:	d121      	bne.n	8002404 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80023c0:	4b13      	ldr	r3, [pc, #76]	; (8002410 <HAL_ADC_MspInit+0x70>)
 80023c2:	699b      	ldr	r3, [r3, #24]
 80023c4:	4a12      	ldr	r2, [pc, #72]	; (8002410 <HAL_ADC_MspInit+0x70>)
 80023c6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80023ca:	6193      	str	r3, [r2, #24]
 80023cc:	4b10      	ldr	r3, [pc, #64]	; (8002410 <HAL_ADC_MspInit+0x70>)
 80023ce:	699b      	ldr	r3, [r3, #24]
 80023d0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80023d4:	60fb      	str	r3, [r7, #12]
 80023d6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023d8:	4b0d      	ldr	r3, [pc, #52]	; (8002410 <HAL_ADC_MspInit+0x70>)
 80023da:	699b      	ldr	r3, [r3, #24]
 80023dc:	4a0c      	ldr	r2, [pc, #48]	; (8002410 <HAL_ADC_MspInit+0x70>)
 80023de:	f043 0304 	orr.w	r3, r3, #4
 80023e2:	6193      	str	r3, [r2, #24]
 80023e4:	4b0a      	ldr	r3, [pc, #40]	; (8002410 <HAL_ADC_MspInit+0x70>)
 80023e6:	699b      	ldr	r3, [r3, #24]
 80023e8:	f003 0304 	and.w	r3, r3, #4
 80023ec:	60bb      	str	r3, [r7, #8]
 80023ee:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80023f0:	2320      	movs	r3, #32
 80023f2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80023f4:	2303      	movs	r3, #3
 80023f6:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023f8:	f107 0310 	add.w	r3, r7, #16
 80023fc:	4619      	mov	r1, r3
 80023fe:	4805      	ldr	r0, [pc, #20]	; (8002414 <HAL_ADC_MspInit+0x74>)
 8002400:	f000 ffe8 	bl	80033d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002404:	bf00      	nop
 8002406:	3720      	adds	r7, #32
 8002408:	46bd      	mov	sp, r7
 800240a:	bd80      	pop	{r7, pc}
 800240c:	40012400 	.word	0x40012400
 8002410:	40021000 	.word	0x40021000
 8002414:	40010800 	.word	0x40010800

08002418 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002418:	b480      	push	{r7}
 800241a:	b085      	sub	sp, #20
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4a09      	ldr	r2, [pc, #36]	; (800244c <HAL_TIM_Base_MspInit+0x34>)
 8002426:	4293      	cmp	r3, r2
 8002428:	d10b      	bne.n	8002442 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800242a:	4b09      	ldr	r3, [pc, #36]	; (8002450 <HAL_TIM_Base_MspInit+0x38>)
 800242c:	69db      	ldr	r3, [r3, #28]
 800242e:	4a08      	ldr	r2, [pc, #32]	; (8002450 <HAL_TIM_Base_MspInit+0x38>)
 8002430:	f043 0310 	orr.w	r3, r3, #16
 8002434:	61d3      	str	r3, [r2, #28]
 8002436:	4b06      	ldr	r3, [pc, #24]	; (8002450 <HAL_TIM_Base_MspInit+0x38>)
 8002438:	69db      	ldr	r3, [r3, #28]
 800243a:	f003 0310 	and.w	r3, r3, #16
 800243e:	60fb      	str	r3, [r7, #12]
 8002440:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8002442:	bf00      	nop
 8002444:	3714      	adds	r7, #20
 8002446:	46bd      	mov	sp, r7
 8002448:	bc80      	pop	{r7}
 800244a:	4770      	bx	lr
 800244c:	40001000 	.word	0x40001000
 8002450:	40021000 	.word	0x40021000

08002454 <HAL_FSMC_MspInit>:

}

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8002454:	b580      	push	{r7, lr}
 8002456:	b086      	sub	sp, #24
 8002458:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800245a:	f107 0308 	add.w	r3, r7, #8
 800245e:	2200      	movs	r2, #0
 8002460:	601a      	str	r2, [r3, #0]
 8002462:	605a      	str	r2, [r3, #4]
 8002464:	609a      	str	r2, [r3, #8]
 8002466:	60da      	str	r2, [r3, #12]
  if (FSMC_Initialized) {
 8002468:	4b18      	ldr	r3, [pc, #96]	; (80024cc <HAL_FSMC_MspInit+0x78>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	2b00      	cmp	r3, #0
 800246e:	d129      	bne.n	80024c4 <HAL_FSMC_MspInit+0x70>
    return;
  }
  FSMC_Initialized = 1;
 8002470:	4b16      	ldr	r3, [pc, #88]	; (80024cc <HAL_FSMC_MspInit+0x78>)
 8002472:	2201      	movs	r2, #1
 8002474:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8002476:	4b16      	ldr	r3, [pc, #88]	; (80024d0 <HAL_FSMC_MspInit+0x7c>)
 8002478:	695b      	ldr	r3, [r3, #20]
 800247a:	4a15      	ldr	r2, [pc, #84]	; (80024d0 <HAL_FSMC_MspInit+0x7c>)
 800247c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002480:	6153      	str	r3, [r2, #20]
 8002482:	4b13      	ldr	r3, [pc, #76]	; (80024d0 <HAL_FSMC_MspInit+0x7c>)
 8002484:	695b      	ldr	r3, [r3, #20]
 8002486:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800248a:	607b      	str	r3, [r7, #4]
 800248c:	687b      	ldr	r3, [r7, #4]
  PD1   ------> FSMC_D3
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 800248e:	f64f 7380 	movw	r3, #65408	; 0xff80
 8002492:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002494:	2302      	movs	r3, #2
 8002496:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002498:	2303      	movs	r3, #3
 800249a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800249c:	f107 0308 	add.w	r3, r7, #8
 80024a0:	4619      	mov	r1, r3
 80024a2:	480c      	ldr	r0, [pc, #48]	; (80024d4 <HAL_FSMC_MspInit+0x80>)
 80024a4:	f000 ff96 	bl	80033d4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80024a8:	f64c 73b3 	movw	r3, #53171	; 0xcfb3
 80024ac:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024ae:	2302      	movs	r3, #2
 80024b0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80024b2:	2303      	movs	r3, #3
 80024b4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80024b6:	f107 0308 	add.w	r3, r7, #8
 80024ba:	4619      	mov	r1, r3
 80024bc:	4806      	ldr	r0, [pc, #24]	; (80024d8 <HAL_FSMC_MspInit+0x84>)
 80024be:	f000 ff89 	bl	80033d4 <HAL_GPIO_Init>
 80024c2:	e000      	b.n	80024c6 <HAL_FSMC_MspInit+0x72>
    return;
 80024c4:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 80024c6:	3718      	adds	r7, #24
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bd80      	pop	{r7, pc}
 80024cc:	200001ec 	.word	0x200001ec
 80024d0:	40021000 	.word	0x40021000
 80024d4:	40011800 	.word	0x40011800
 80024d8:	40011400 	.word	0x40011400

080024dc <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 80024dc:	b580      	push	{r7, lr}
 80024de:	b082      	sub	sp, #8
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 80024e4:	f7ff ffb6 	bl	8002454 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 80024e8:	bf00      	nop
 80024ea:	3708      	adds	r7, #8
 80024ec:	46bd      	mov	sp, r7
 80024ee:	bd80      	pop	{r7, pc}

080024f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80024f0:	b480      	push	{r7}
 80024f2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80024f4:	bf00      	nop
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bc80      	pop	{r7}
 80024fa:	4770      	bx	lr

080024fc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80024fc:	b480      	push	{r7}
 80024fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002500:	e7fe      	b.n	8002500 <HardFault_Handler+0x4>

08002502 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002502:	b480      	push	{r7}
 8002504:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002506:	e7fe      	b.n	8002506 <MemManage_Handler+0x4>

08002508 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002508:	b480      	push	{r7}
 800250a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800250c:	e7fe      	b.n	800250c <BusFault_Handler+0x4>

0800250e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800250e:	b480      	push	{r7}
 8002510:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002512:	e7fe      	b.n	8002512 <UsageFault_Handler+0x4>

08002514 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002514:	b480      	push	{r7}
 8002516:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002518:	bf00      	nop
 800251a:	46bd      	mov	sp, r7
 800251c:	bc80      	pop	{r7}
 800251e:	4770      	bx	lr

08002520 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002520:	b480      	push	{r7}
 8002522:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002524:	bf00      	nop
 8002526:	46bd      	mov	sp, r7
 8002528:	bc80      	pop	{r7}
 800252a:	4770      	bx	lr

0800252c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800252c:	b480      	push	{r7}
 800252e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002530:	bf00      	nop
 8002532:	46bd      	mov	sp, r7
 8002534:	bc80      	pop	{r7}
 8002536:	4770      	bx	lr

08002538 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800253c:	f000 f912 	bl	8002764 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002540:	bf00      	nop
 8002542:	bd80      	pop	{r7, pc}

08002544 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_3) != RESET)
 8002548:	4b17      	ldr	r3, [pc, #92]	; (80025a8 <EXTI3_IRQHandler+0x64>)
 800254a:	695b      	ldr	r3, [r3, #20]
 800254c:	f003 0308 	and.w	r3, r3, #8
 8002550:	2b00      	cmp	r3, #0
 8002552:	d023      	beq.n	800259c <EXTI3_IRQHandler+0x58>
  {
		if( Ov7725_vsync == 0 )
 8002554:	4b15      	ldr	r3, [pc, #84]	; (80025ac <EXTI3_IRQHandler+0x68>)
 8002556:	781b      	ldrb	r3, [r3, #0]
 8002558:	2b00      	cmp	r3, #0
 800255a:	d10f      	bne.n	800257c <EXTI3_IRQHandler+0x38>
    {
				FIFO_WRST_L(); 	                      
 800255c:	4b14      	ldr	r3, [pc, #80]	; (80025b0 <EXTI3_IRQHandler+0x6c>)
 800255e:	2210      	movs	r2, #16
 8002560:	615a      	str	r2, [r3, #20]
        FIFO_WE_H();	                      
 8002562:	4b14      	ldr	r3, [pc, #80]	; (80025b4 <EXTI3_IRQHandler+0x70>)
 8002564:	2208      	movs	r2, #8
 8002566:	611a      	str	r2, [r3, #16]
            
        Ov7725_vsync = 1;	   	
 8002568:	4b10      	ldr	r3, [pc, #64]	; (80025ac <EXTI3_IRQHandler+0x68>)
 800256a:	2201      	movs	r2, #1
 800256c:	701a      	strb	r2, [r3, #0]
        FIFO_WE_H();                         
 800256e:	4b11      	ldr	r3, [pc, #68]	; (80025b4 <EXTI3_IRQHandler+0x70>)
 8002570:	2208      	movs	r2, #8
 8002572:	611a      	str	r2, [r3, #16]
        FIFO_WRST_H();                     
 8002574:	4b0e      	ldr	r3, [pc, #56]	; (80025b0 <EXTI3_IRQHandler+0x6c>)
 8002576:	2210      	movs	r2, #16
 8002578:	611a      	str	r2, [r3, #16]
 800257a:	e009      	b.n	8002590 <EXTI3_IRQHandler+0x4c>
    }
    else if( Ov7725_vsync == 1 )
 800257c:	4b0b      	ldr	r3, [pc, #44]	; (80025ac <EXTI3_IRQHandler+0x68>)
 800257e:	781b      	ldrb	r3, [r3, #0]
 8002580:	2b01      	cmp	r3, #1
 8002582:	d105      	bne.n	8002590 <EXTI3_IRQHandler+0x4c>
    {
        FIFO_WE_L();                       
 8002584:	4b0b      	ldr	r3, [pc, #44]	; (80025b4 <EXTI3_IRQHandler+0x70>)
 8002586:	2208      	movs	r2, #8
 8002588:	615a      	str	r2, [r3, #20]
        Ov7725_vsync = 2;
 800258a:	4b08      	ldr	r3, [pc, #32]	; (80025ac <EXTI3_IRQHandler+0x68>)
 800258c:	2202      	movs	r2, #2
 800258e:	701a      	strb	r2, [r3, #0]
    }        
				
		
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_3);
 8002590:	4b05      	ldr	r3, [pc, #20]	; (80025a8 <EXTI3_IRQHandler+0x64>)
 8002592:	2208      	movs	r2, #8
 8002594:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_PIN_3);
 8002596:	2008      	movs	r0, #8
 8002598:	f001 f8f8 	bl	800378c <HAL_GPIO_EXTI_Callback>
  }

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 800259c:	2008      	movs	r0, #8
 800259e:	f001 f8dd 	bl	800375c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 80025a2:	bf00      	nop
 80025a4:	bd80      	pop	{r7, pc}
 80025a6:	bf00      	nop
 80025a8:	40010400 	.word	0x40010400
 80025ac:	200001e8 	.word	0x200001e8
 80025b0:	40011000 	.word	0x40011000
 80025b4:	40011400 	.word	0x40011400

080025b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b086      	sub	sp, #24
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80025c0:	4a14      	ldr	r2, [pc, #80]	; (8002614 <_sbrk+0x5c>)
 80025c2:	4b15      	ldr	r3, [pc, #84]	; (8002618 <_sbrk+0x60>)
 80025c4:	1ad3      	subs	r3, r2, r3
 80025c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80025c8:	697b      	ldr	r3, [r7, #20]
 80025ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80025cc:	4b13      	ldr	r3, [pc, #76]	; (800261c <_sbrk+0x64>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d102      	bne.n	80025da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80025d4:	4b11      	ldr	r3, [pc, #68]	; (800261c <_sbrk+0x64>)
 80025d6:	4a12      	ldr	r2, [pc, #72]	; (8002620 <_sbrk+0x68>)
 80025d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80025da:	4b10      	ldr	r3, [pc, #64]	; (800261c <_sbrk+0x64>)
 80025dc:	681a      	ldr	r2, [r3, #0]
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	4413      	add	r3, r2
 80025e2:	693a      	ldr	r2, [r7, #16]
 80025e4:	429a      	cmp	r2, r3
 80025e6:	d207      	bcs.n	80025f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80025e8:	f002 f950 	bl	800488c <__errno>
 80025ec:	4603      	mov	r3, r0
 80025ee:	220c      	movs	r2, #12
 80025f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80025f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80025f6:	e009      	b.n	800260c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80025f8:	4b08      	ldr	r3, [pc, #32]	; (800261c <_sbrk+0x64>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80025fe:	4b07      	ldr	r3, [pc, #28]	; (800261c <_sbrk+0x64>)
 8002600:	681a      	ldr	r2, [r3, #0]
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	4413      	add	r3, r2
 8002606:	4a05      	ldr	r2, [pc, #20]	; (800261c <_sbrk+0x64>)
 8002608:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800260a:	68fb      	ldr	r3, [r7, #12]
}
 800260c:	4618      	mov	r0, r3
 800260e:	3718      	adds	r7, #24
 8002610:	46bd      	mov	sp, r7
 8002612:	bd80      	pop	{r7, pc}
 8002614:	20010000 	.word	0x20010000
 8002618:	00000400 	.word	0x00000400
 800261c:	200001f0 	.word	0x200001f0
 8002620:	20000208 	.word	0x20000208

08002624 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002624:	b480      	push	{r7}
 8002626:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8002628:	4b15      	ldr	r3, [pc, #84]	; (8002680 <SystemInit+0x5c>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4a14      	ldr	r2, [pc, #80]	; (8002680 <SystemInit+0x5c>)
 800262e:	f043 0301 	orr.w	r3, r3, #1
 8002632:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8002634:	4b12      	ldr	r3, [pc, #72]	; (8002680 <SystemInit+0x5c>)
 8002636:	685a      	ldr	r2, [r3, #4]
 8002638:	4911      	ldr	r1, [pc, #68]	; (8002680 <SystemInit+0x5c>)
 800263a:	4b12      	ldr	r3, [pc, #72]	; (8002684 <SystemInit+0x60>)
 800263c:	4013      	ands	r3, r2
 800263e:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8002640:	4b0f      	ldr	r3, [pc, #60]	; (8002680 <SystemInit+0x5c>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4a0e      	ldr	r2, [pc, #56]	; (8002680 <SystemInit+0x5c>)
 8002646:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800264a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800264e:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002650:	4b0b      	ldr	r3, [pc, #44]	; (8002680 <SystemInit+0x5c>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4a0a      	ldr	r2, [pc, #40]	; (8002680 <SystemInit+0x5c>)
 8002656:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800265a:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 800265c:	4b08      	ldr	r3, [pc, #32]	; (8002680 <SystemInit+0x5c>)
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	4a07      	ldr	r2, [pc, #28]	; (8002680 <SystemInit+0x5c>)
 8002662:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8002666:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8002668:	4b05      	ldr	r3, [pc, #20]	; (8002680 <SystemInit+0x5c>)
 800266a:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800266e:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8002670:	4b05      	ldr	r3, [pc, #20]	; (8002688 <SystemInit+0x64>)
 8002672:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002676:	609a      	str	r2, [r3, #8]
#endif 
}
 8002678:	bf00      	nop
 800267a:	46bd      	mov	sp, r7
 800267c:	bc80      	pop	{r7}
 800267e:	4770      	bx	lr
 8002680:	40021000 	.word	0x40021000
 8002684:	f8ff0000 	.word	0xf8ff0000
 8002688:	e000ed00 	.word	0xe000ed00

0800268c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800268c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800268e:	e003      	b.n	8002698 <LoopCopyDataInit>

08002690 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002690:	4b0b      	ldr	r3, [pc, #44]	; (80026c0 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8002692:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002694:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8002696:	3104      	adds	r1, #4

08002698 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002698:	480a      	ldr	r0, [pc, #40]	; (80026c4 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800269a:	4b0b      	ldr	r3, [pc, #44]	; (80026c8 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800269c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800269e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80026a0:	d3f6      	bcc.n	8002690 <CopyDataInit>
  ldr r2, =_sbss
 80026a2:	4a0a      	ldr	r2, [pc, #40]	; (80026cc <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80026a4:	e002      	b.n	80026ac <LoopFillZerobss>

080026a6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80026a6:	2300      	movs	r3, #0
  str r3, [r2], #4
 80026a8:	f842 3b04 	str.w	r3, [r2], #4

080026ac <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80026ac:	4b08      	ldr	r3, [pc, #32]	; (80026d0 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80026ae:	429a      	cmp	r2, r3
  bcc FillZerobss
 80026b0:	d3f9      	bcc.n	80026a6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80026b2:	f7ff ffb7 	bl	8002624 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80026b6:	f002 f8ef 	bl	8004898 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80026ba:	f7ff f8dd 	bl	8001878 <main>
  bx lr
 80026be:	4770      	bx	lr
  ldr r3, =_sidata
 80026c0:	08005e04 	.word	0x08005e04
  ldr r0, =_sdata
 80026c4:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80026c8:	2000010c 	.word	0x2000010c
  ldr r2, =_sbss
 80026cc:	2000010c 	.word	0x2000010c
  ldr r3, = _ebss
 80026d0:	20000208 	.word	0x20000208

080026d4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80026d4:	e7fe      	b.n	80026d4 <ADC1_2_IRQHandler>
	...

080026d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80026dc:	4b08      	ldr	r3, [pc, #32]	; (8002700 <HAL_Init+0x28>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4a07      	ldr	r2, [pc, #28]	; (8002700 <HAL_Init+0x28>)
 80026e2:	f043 0310 	orr.w	r3, r3, #16
 80026e6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80026e8:	2003      	movs	r0, #3
 80026ea:	f000 fe31 	bl	8003350 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80026ee:	2000      	movs	r0, #0
 80026f0:	f000 f808 	bl	8002704 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80026f4:	f7ff fe22 	bl	800233c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80026f8:	2300      	movs	r3, #0
}
 80026fa:	4618      	mov	r0, r3
 80026fc:	bd80      	pop	{r7, pc}
 80026fe:	bf00      	nop
 8002700:	40022000 	.word	0x40022000

08002704 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b082      	sub	sp, #8
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800270c:	4b12      	ldr	r3, [pc, #72]	; (8002758 <HAL_InitTick+0x54>)
 800270e:	681a      	ldr	r2, [r3, #0]
 8002710:	4b12      	ldr	r3, [pc, #72]	; (800275c <HAL_InitTick+0x58>)
 8002712:	781b      	ldrb	r3, [r3, #0]
 8002714:	4619      	mov	r1, r3
 8002716:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800271a:	fbb3 f3f1 	udiv	r3, r3, r1
 800271e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002722:	4618      	mov	r0, r3
 8002724:	f000 fe49 	bl	80033ba <HAL_SYSTICK_Config>
 8002728:	4603      	mov	r3, r0
 800272a:	2b00      	cmp	r3, #0
 800272c:	d001      	beq.n	8002732 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800272e:	2301      	movs	r3, #1
 8002730:	e00e      	b.n	8002750 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	2b0f      	cmp	r3, #15
 8002736:	d80a      	bhi.n	800274e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002738:	2200      	movs	r2, #0
 800273a:	6879      	ldr	r1, [r7, #4]
 800273c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002740:	f000 fe11 	bl	8003366 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002744:	4a06      	ldr	r2, [pc, #24]	; (8002760 <HAL_InitTick+0x5c>)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800274a:	2300      	movs	r3, #0
 800274c:	e000      	b.n	8002750 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800274e:	2301      	movs	r3, #1
}
 8002750:	4618      	mov	r0, r3
 8002752:	3708      	adds	r7, #8
 8002754:	46bd      	mov	sp, r7
 8002756:	bd80      	pop	{r7, pc}
 8002758:	2000009c 	.word	0x2000009c
 800275c:	200000a4 	.word	0x200000a4
 8002760:	200000a0 	.word	0x200000a0

08002764 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002764:	b480      	push	{r7}
 8002766:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002768:	4b05      	ldr	r3, [pc, #20]	; (8002780 <HAL_IncTick+0x1c>)
 800276a:	781b      	ldrb	r3, [r3, #0]
 800276c:	461a      	mov	r2, r3
 800276e:	4b05      	ldr	r3, [pc, #20]	; (8002784 <HAL_IncTick+0x20>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4413      	add	r3, r2
 8002774:	4a03      	ldr	r2, [pc, #12]	; (8002784 <HAL_IncTick+0x20>)
 8002776:	6013      	str	r3, [r2, #0]
}
 8002778:	bf00      	nop
 800277a:	46bd      	mov	sp, r7
 800277c:	bc80      	pop	{r7}
 800277e:	4770      	bx	lr
 8002780:	200000a4 	.word	0x200000a4
 8002784:	200001f4 	.word	0x200001f4

08002788 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002788:	b480      	push	{r7}
 800278a:	af00      	add	r7, sp, #0
  return uwTick;
 800278c:	4b02      	ldr	r3, [pc, #8]	; (8002798 <HAL_GetTick+0x10>)
 800278e:	681b      	ldr	r3, [r3, #0]
}
 8002790:	4618      	mov	r0, r3
 8002792:	46bd      	mov	sp, r7
 8002794:	bc80      	pop	{r7}
 8002796:	4770      	bx	lr
 8002798:	200001f4 	.word	0x200001f4

0800279c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b084      	sub	sp, #16
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80027a4:	f7ff fff0 	bl	8002788 <HAL_GetTick>
 80027a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80027b4:	d005      	beq.n	80027c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80027b6:	4b0a      	ldr	r3, [pc, #40]	; (80027e0 <HAL_Delay+0x44>)
 80027b8:	781b      	ldrb	r3, [r3, #0]
 80027ba:	461a      	mov	r2, r3
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	4413      	add	r3, r2
 80027c0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80027c2:	bf00      	nop
 80027c4:	f7ff ffe0 	bl	8002788 <HAL_GetTick>
 80027c8:	4602      	mov	r2, r0
 80027ca:	68bb      	ldr	r3, [r7, #8]
 80027cc:	1ad3      	subs	r3, r2, r3
 80027ce:	68fa      	ldr	r2, [r7, #12]
 80027d0:	429a      	cmp	r2, r3
 80027d2:	d8f7      	bhi.n	80027c4 <HAL_Delay+0x28>
  {
  }
}
 80027d4:	bf00      	nop
 80027d6:	bf00      	nop
 80027d8:	3710      	adds	r7, #16
 80027da:	46bd      	mov	sp, r7
 80027dc:	bd80      	pop	{r7, pc}
 80027de:	bf00      	nop
 80027e0:	200000a4 	.word	0x200000a4

080027e4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b086      	sub	sp, #24
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80027ec:	2300      	movs	r3, #0
 80027ee:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80027f0:	2300      	movs	r3, #0
 80027f2:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80027f4:	2300      	movs	r3, #0
 80027f6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80027f8:	2300      	movs	r3, #0
 80027fa:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d101      	bne.n	8002806 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002802:	2301      	movs	r3, #1
 8002804:	e0ce      	b.n	80029a4 <HAL_ADC_Init+0x1c0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	689b      	ldr	r3, [r3, #8]
 800280a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002810:	2b00      	cmp	r3, #0
 8002812:	d109      	bne.n	8002828 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2200      	movs	r2, #0
 8002818:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2200      	movs	r2, #0
 800281e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002822:	6878      	ldr	r0, [r7, #4]
 8002824:	f7ff fdbc 	bl	80023a0 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002828:	6878      	ldr	r0, [r7, #4]
 800282a:	f000 fbd7 	bl	8002fdc <ADC_ConversionStop_Disable>
 800282e:	4603      	mov	r3, r0
 8002830:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002836:	f003 0310 	and.w	r3, r3, #16
 800283a:	2b00      	cmp	r3, #0
 800283c:	f040 80a9 	bne.w	8002992 <HAL_ADC_Init+0x1ae>
 8002840:	7dfb      	ldrb	r3, [r7, #23]
 8002842:	2b00      	cmp	r3, #0
 8002844:	f040 80a5 	bne.w	8002992 <HAL_ADC_Init+0x1ae>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800284c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002850:	f023 0302 	bic.w	r3, r3, #2
 8002854:	f043 0202 	orr.w	r2, r3, #2
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4951      	ldr	r1, [pc, #324]	; (80029ac <HAL_ADC_Init+0x1c8>)
 8002866:	428b      	cmp	r3, r1
 8002868:	d10a      	bne.n	8002880 <HAL_ADC_Init+0x9c>
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	69db      	ldr	r3, [r3, #28]
 800286e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002872:	d002      	beq.n	800287a <HAL_ADC_Init+0x96>
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	69db      	ldr	r3, [r3, #28]
 8002878:	e004      	b.n	8002884 <HAL_ADC_Init+0xa0>
 800287a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800287e:	e001      	b.n	8002884 <HAL_ADC_Init+0xa0>
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002884:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	7b1b      	ldrb	r3, [r3, #12]
 800288a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800288c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800288e:	68ba      	ldr	r2, [r7, #8]
 8002890:	4313      	orrs	r3, r2
 8002892:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	689b      	ldr	r3, [r3, #8]
 8002898:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800289c:	d003      	beq.n	80028a6 <HAL_ADC_Init+0xc2>
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	689b      	ldr	r3, [r3, #8]
 80028a2:	2b01      	cmp	r3, #1
 80028a4:	d102      	bne.n	80028ac <HAL_ADC_Init+0xc8>
 80028a6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80028aa:	e000      	b.n	80028ae <HAL_ADC_Init+0xca>
 80028ac:	2300      	movs	r3, #0
 80028ae:	693a      	ldr	r2, [r7, #16]
 80028b0:	4313      	orrs	r3, r2
 80028b2:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	7d1b      	ldrb	r3, [r3, #20]
 80028b8:	2b01      	cmp	r3, #1
 80028ba:	d119      	bne.n	80028f0 <HAL_ADC_Init+0x10c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	7b1b      	ldrb	r3, [r3, #12]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d109      	bne.n	80028d8 <HAL_ADC_Init+0xf4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	699b      	ldr	r3, [r3, #24]
 80028c8:	3b01      	subs	r3, #1
 80028ca:	035a      	lsls	r2, r3, #13
 80028cc:	693b      	ldr	r3, [r7, #16]
 80028ce:	4313      	orrs	r3, r2
 80028d0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80028d4:	613b      	str	r3, [r7, #16]
 80028d6:	e00b      	b.n	80028f0 <HAL_ADC_Init+0x10c>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028dc:	f043 0220 	orr.w	r2, r3, #32
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028e8:	f043 0201 	orr.w	r2, r3, #1
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	693a      	ldr	r2, [r7, #16]
 8002900:	430a      	orrs	r2, r1
 8002902:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	689a      	ldr	r2, [r3, #8]
 800290a:	4b29      	ldr	r3, [pc, #164]	; (80029b0 <HAL_ADC_Init+0x1cc>)
 800290c:	4013      	ands	r3, r2
 800290e:	687a      	ldr	r2, [r7, #4]
 8002910:	6812      	ldr	r2, [r2, #0]
 8002912:	68b9      	ldr	r1, [r7, #8]
 8002914:	430b      	orrs	r3, r1
 8002916:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	689b      	ldr	r3, [r3, #8]
 800291c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002920:	d003      	beq.n	800292a <HAL_ADC_Init+0x146>
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	689b      	ldr	r3, [r3, #8]
 8002926:	2b01      	cmp	r3, #1
 8002928:	d104      	bne.n	8002934 <HAL_ADC_Init+0x150>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	691b      	ldr	r3, [r3, #16]
 800292e:	3b01      	subs	r3, #1
 8002930:	051b      	lsls	r3, r3, #20
 8002932:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800293a:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	68fa      	ldr	r2, [r7, #12]
 8002944:	430a      	orrs	r2, r1
 8002946:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	689a      	ldr	r2, [r3, #8]
 800294e:	4b19      	ldr	r3, [pc, #100]	; (80029b4 <HAL_ADC_Init+0x1d0>)
 8002950:	4013      	ands	r3, r2
 8002952:	68ba      	ldr	r2, [r7, #8]
 8002954:	429a      	cmp	r2, r3
 8002956:	d10b      	bne.n	8002970 <HAL_ADC_Init+0x18c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2200      	movs	r2, #0
 800295c:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002962:	f023 0303 	bic.w	r3, r3, #3
 8002966:	f043 0201 	orr.w	r2, r3, #1
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800296e:	e018      	b.n	80029a2 <HAL_ADC_Init+0x1be>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002974:	f023 0312 	bic.w	r3, r3, #18
 8002978:	f043 0210 	orr.w	r2, r3, #16
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002984:	f043 0201 	orr.w	r2, r3, #1
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 800298c:	2301      	movs	r3, #1
 800298e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002990:	e007      	b.n	80029a2 <HAL_ADC_Init+0x1be>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002996:	f043 0210 	orr.w	r2, r3, #16
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 800299e:	2301      	movs	r3, #1
 80029a0:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80029a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80029a4:	4618      	mov	r0, r3
 80029a6:	3718      	adds	r7, #24
 80029a8:	46bd      	mov	sp, r7
 80029aa:	bd80      	pop	{r7, pc}
 80029ac:	40013c00 	.word	0x40013c00
 80029b0:	ffe1f7fd 	.word	0xffe1f7fd
 80029b4:	ff1f0efe 	.word	0xff1f0efe

080029b8 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b084      	sub	sp, #16
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80029c0:	2300      	movs	r3, #0
 80029c2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80029ca:	2b01      	cmp	r3, #1
 80029cc:	d101      	bne.n	80029d2 <HAL_ADC_Start+0x1a>
 80029ce:	2302      	movs	r3, #2
 80029d0:	e098      	b.n	8002b04 <HAL_ADC_Start+0x14c>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2201      	movs	r2, #1
 80029d6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 80029da:	6878      	ldr	r0, [r7, #4]
 80029dc:	f000 faa4 	bl	8002f28 <ADC_Enable>
 80029e0:	4603      	mov	r3, r0
 80029e2:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 80029e4:	7bfb      	ldrb	r3, [r7, #15]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	f040 8087 	bne.w	8002afa <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029f4:	f023 0301 	bic.w	r3, r3, #1
 80029f8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4a41      	ldr	r2, [pc, #260]	; (8002b0c <HAL_ADC_Start+0x154>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d105      	bne.n	8002a16 <HAL_ADC_Start+0x5e>
 8002a0a:	4b41      	ldr	r3, [pc, #260]	; (8002b10 <HAL_ADC_Start+0x158>)
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d115      	bne.n	8002a42 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a1a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d026      	beq.n	8002a7e <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a34:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002a38:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002a40:	e01d      	b.n	8002a7e <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a46:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4a2f      	ldr	r2, [pc, #188]	; (8002b10 <HAL_ADC_Start+0x158>)
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d004      	beq.n	8002a62 <HAL_ADC_Start+0xaa>
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4a2b      	ldr	r2, [pc, #172]	; (8002b0c <HAL_ADC_Start+0x154>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d10d      	bne.n	8002a7e <HAL_ADC_Start+0xc6>
 8002a62:	4b2b      	ldr	r3, [pc, #172]	; (8002b10 <HAL_ADC_Start+0x158>)
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d007      	beq.n	8002a7e <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a72:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002a76:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a82:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d006      	beq.n	8002a98 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a8e:	f023 0206 	bic.w	r2, r3, #6
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	62da      	str	r2, [r3, #44]	; 0x2c
 8002a96:	e002      	b.n	8002a9e <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f06f 0202 	mvn.w	r2, #2
 8002aae:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	689b      	ldr	r3, [r3, #8]
 8002ab6:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002aba:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002abe:	d113      	bne.n	8002ae8 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002ac4:	4a11      	ldr	r2, [pc, #68]	; (8002b0c <HAL_ADC_Start+0x154>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d105      	bne.n	8002ad6 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002aca:	4b11      	ldr	r3, [pc, #68]	; (8002b10 <HAL_ADC_Start+0x158>)
 8002acc:	685b      	ldr	r3, [r3, #4]
 8002ace:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d108      	bne.n	8002ae8 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	689a      	ldr	r2, [r3, #8]
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8002ae4:	609a      	str	r2, [r3, #8]
 8002ae6:	e00c      	b.n	8002b02 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	689a      	ldr	r2, [r3, #8]
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002af6:	609a      	str	r2, [r3, #8]
 8002af8:	e003      	b.n	8002b02 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2200      	movs	r2, #0
 8002afe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8002b02:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b04:	4618      	mov	r0, r3
 8002b06:	3710      	adds	r7, #16
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	bd80      	pop	{r7, pc}
 8002b0c:	40012800 	.word	0x40012800
 8002b10:	40012400 	.word	0x40012400

08002b14 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002b14:	b590      	push	{r4, r7, lr}
 8002b16:	b087      	sub	sp, #28
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
 8002b1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002b1e:	2300      	movs	r3, #0
 8002b20:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8002b22:	2300      	movs	r3, #0
 8002b24:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8002b26:	2300      	movs	r3, #0
 8002b28:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8002b2a:	f7ff fe2d 	bl	8002788 <HAL_GetTick>
 8002b2e:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	689b      	ldr	r3, [r3, #8]
 8002b36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d00b      	beq.n	8002b56 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b42:	f043 0220 	orr.w	r2, r3, #32
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8002b52:	2301      	movs	r3, #1
 8002b54:	e0d3      	b.n	8002cfe <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	685b      	ldr	r3, [r3, #4]
 8002b5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d131      	bne.n	8002bc8 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b6a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d12a      	bne.n	8002bc8 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002b72:	e021      	b.n	8002bb8 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002b7a:	d01d      	beq.n	8002bb8 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d007      	beq.n	8002b92 <HAL_ADC_PollForConversion+0x7e>
 8002b82:	f7ff fe01 	bl	8002788 <HAL_GetTick>
 8002b86:	4602      	mov	r2, r0
 8002b88:	697b      	ldr	r3, [r7, #20]
 8002b8a:	1ad3      	subs	r3, r2, r3
 8002b8c:	683a      	ldr	r2, [r7, #0]
 8002b8e:	429a      	cmp	r2, r3
 8002b90:	d212      	bcs.n	8002bb8 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f003 0302 	and.w	r3, r3, #2
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d10b      	bne.n	8002bb8 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ba4:	f043 0204 	orr.w	r2, r3, #4
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2200      	movs	r2, #0
 8002bb0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 8002bb4:	2303      	movs	r3, #3
 8002bb6:	e0a2      	b.n	8002cfe <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f003 0302 	and.w	r3, r3, #2
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d0d6      	beq.n	8002b74 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002bc6:	e070      	b.n	8002caa <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8002bc8:	4b4f      	ldr	r3, [pc, #316]	; (8002d08 <HAL_ADC_PollForConversion+0x1f4>)
 8002bca:	681c      	ldr	r4, [r3, #0]
 8002bcc:	2002      	movs	r0, #2
 8002bce:	f001 faa3 	bl	8004118 <HAL_RCCEx_GetPeriphCLKFreq>
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	6919      	ldr	r1, [r3, #16]
 8002bde:	4b4b      	ldr	r3, [pc, #300]	; (8002d0c <HAL_ADC_PollForConversion+0x1f8>)
 8002be0:	400b      	ands	r3, r1
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d118      	bne.n	8002c18 <HAL_ADC_PollForConversion+0x104>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	68d9      	ldr	r1, [r3, #12]
 8002bec:	4b48      	ldr	r3, [pc, #288]	; (8002d10 <HAL_ADC_PollForConversion+0x1fc>)
 8002bee:	400b      	ands	r3, r1
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d111      	bne.n	8002c18 <HAL_ADC_PollForConversion+0x104>
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	6919      	ldr	r1, [r3, #16]
 8002bfa:	4b46      	ldr	r3, [pc, #280]	; (8002d14 <HAL_ADC_PollForConversion+0x200>)
 8002bfc:	400b      	ands	r3, r1
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d108      	bne.n	8002c14 <HAL_ADC_PollForConversion+0x100>
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	68d9      	ldr	r1, [r3, #12]
 8002c08:	4b43      	ldr	r3, [pc, #268]	; (8002d18 <HAL_ADC_PollForConversion+0x204>)
 8002c0a:	400b      	ands	r3, r1
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d101      	bne.n	8002c14 <HAL_ADC_PollForConversion+0x100>
 8002c10:	2314      	movs	r3, #20
 8002c12:	e020      	b.n	8002c56 <HAL_ADC_PollForConversion+0x142>
 8002c14:	2329      	movs	r3, #41	; 0x29
 8002c16:	e01e      	b.n	8002c56 <HAL_ADC_PollForConversion+0x142>
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	6919      	ldr	r1, [r3, #16]
 8002c1e:	4b3d      	ldr	r3, [pc, #244]	; (8002d14 <HAL_ADC_PollForConversion+0x200>)
 8002c20:	400b      	ands	r3, r1
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d106      	bne.n	8002c34 <HAL_ADC_PollForConversion+0x120>
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	68d9      	ldr	r1, [r3, #12]
 8002c2c:	4b3a      	ldr	r3, [pc, #232]	; (8002d18 <HAL_ADC_PollForConversion+0x204>)
 8002c2e:	400b      	ands	r3, r1
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d00d      	beq.n	8002c50 <HAL_ADC_PollForConversion+0x13c>
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	6919      	ldr	r1, [r3, #16]
 8002c3a:	4b38      	ldr	r3, [pc, #224]	; (8002d1c <HAL_ADC_PollForConversion+0x208>)
 8002c3c:	400b      	ands	r3, r1
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d108      	bne.n	8002c54 <HAL_ADC_PollForConversion+0x140>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	68d9      	ldr	r1, [r3, #12]
 8002c48:	4b34      	ldr	r3, [pc, #208]	; (8002d1c <HAL_ADC_PollForConversion+0x208>)
 8002c4a:	400b      	ands	r3, r1
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d101      	bne.n	8002c54 <HAL_ADC_PollForConversion+0x140>
 8002c50:	2354      	movs	r3, #84	; 0x54
 8002c52:	e000      	b.n	8002c56 <HAL_ADC_PollForConversion+0x142>
 8002c54:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8002c56:	fb02 f303 	mul.w	r3, r2, r3
 8002c5a:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002c5c:	e021      	b.n	8002ca2 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002c64:	d01a      	beq.n	8002c9c <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d007      	beq.n	8002c7c <HAL_ADC_PollForConversion+0x168>
 8002c6c:	f7ff fd8c 	bl	8002788 <HAL_GetTick>
 8002c70:	4602      	mov	r2, r0
 8002c72:	697b      	ldr	r3, [r7, #20]
 8002c74:	1ad3      	subs	r3, r2, r3
 8002c76:	683a      	ldr	r2, [r7, #0]
 8002c78:	429a      	cmp	r2, r3
 8002c7a:	d20f      	bcs.n	8002c9c <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	693a      	ldr	r2, [r7, #16]
 8002c80:	429a      	cmp	r2, r3
 8002c82:	d90b      	bls.n	8002c9c <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c88:	f043 0204 	orr.w	r2, r3, #4
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2200      	movs	r2, #0
 8002c94:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 8002c98:	2303      	movs	r3, #3
 8002c9a:	e030      	b.n	8002cfe <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	3301      	adds	r3, #1
 8002ca0:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	693a      	ldr	r2, [r7, #16]
 8002ca6:	429a      	cmp	r2, r3
 8002ca8:	d8d9      	bhi.n	8002c5e <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f06f 0212 	mvn.w	r2, #18
 8002cb2:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cb8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	689b      	ldr	r3, [r3, #8]
 8002cc6:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002cca:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002cce:	d115      	bne.n	8002cfc <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d111      	bne.n	8002cfc <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cdc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ce8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d105      	bne.n	8002cfc <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cf4:	f043 0201 	orr.w	r2, r3, #1
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002cfc:	2300      	movs	r3, #0
}
 8002cfe:	4618      	mov	r0, r3
 8002d00:	371c      	adds	r7, #28
 8002d02:	46bd      	mov	sp, r7
 8002d04:	bd90      	pop	{r4, r7, pc}
 8002d06:	bf00      	nop
 8002d08:	2000009c 	.word	0x2000009c
 8002d0c:	24924924 	.word	0x24924924
 8002d10:	00924924 	.word	0x00924924
 8002d14:	12492492 	.word	0x12492492
 8002d18:	00492492 	.word	0x00492492
 8002d1c:	00249249 	.word	0x00249249

08002d20 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002d20:	b480      	push	{r7}
 8002d22:	b083      	sub	sp, #12
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002d2e:	4618      	mov	r0, r3
 8002d30:	370c      	adds	r7, #12
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bc80      	pop	{r7}
 8002d36:	4770      	bx	lr

08002d38 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002d38:	b480      	push	{r7}
 8002d3a:	b085      	sub	sp, #20
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
 8002d40:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d42:	2300      	movs	r3, #0
 8002d44:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002d46:	2300      	movs	r3, #0
 8002d48:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002d50:	2b01      	cmp	r3, #1
 8002d52:	d101      	bne.n	8002d58 <HAL_ADC_ConfigChannel+0x20>
 8002d54:	2302      	movs	r3, #2
 8002d56:	e0dc      	b.n	8002f12 <HAL_ADC_ConfigChannel+0x1da>
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2201      	movs	r2, #1
 8002d5c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	2b06      	cmp	r3, #6
 8002d66:	d81c      	bhi.n	8002da2 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	685a      	ldr	r2, [r3, #4]
 8002d72:	4613      	mov	r3, r2
 8002d74:	009b      	lsls	r3, r3, #2
 8002d76:	4413      	add	r3, r2
 8002d78:	3b05      	subs	r3, #5
 8002d7a:	221f      	movs	r2, #31
 8002d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d80:	43db      	mvns	r3, r3
 8002d82:	4019      	ands	r1, r3
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	6818      	ldr	r0, [r3, #0]
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	685a      	ldr	r2, [r3, #4]
 8002d8c:	4613      	mov	r3, r2
 8002d8e:	009b      	lsls	r3, r3, #2
 8002d90:	4413      	add	r3, r2
 8002d92:	3b05      	subs	r3, #5
 8002d94:	fa00 f203 	lsl.w	r2, r0, r3
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	430a      	orrs	r2, r1
 8002d9e:	635a      	str	r2, [r3, #52]	; 0x34
 8002da0:	e03c      	b.n	8002e1c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	685b      	ldr	r3, [r3, #4]
 8002da6:	2b0c      	cmp	r3, #12
 8002da8:	d81c      	bhi.n	8002de4 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	685a      	ldr	r2, [r3, #4]
 8002db4:	4613      	mov	r3, r2
 8002db6:	009b      	lsls	r3, r3, #2
 8002db8:	4413      	add	r3, r2
 8002dba:	3b23      	subs	r3, #35	; 0x23
 8002dbc:	221f      	movs	r2, #31
 8002dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc2:	43db      	mvns	r3, r3
 8002dc4:	4019      	ands	r1, r3
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	6818      	ldr	r0, [r3, #0]
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	685a      	ldr	r2, [r3, #4]
 8002dce:	4613      	mov	r3, r2
 8002dd0:	009b      	lsls	r3, r3, #2
 8002dd2:	4413      	add	r3, r2
 8002dd4:	3b23      	subs	r3, #35	; 0x23
 8002dd6:	fa00 f203 	lsl.w	r2, r0, r3
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	430a      	orrs	r2, r1
 8002de0:	631a      	str	r2, [r3, #48]	; 0x30
 8002de2:	e01b      	b.n	8002e1c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	685a      	ldr	r2, [r3, #4]
 8002dee:	4613      	mov	r3, r2
 8002df0:	009b      	lsls	r3, r3, #2
 8002df2:	4413      	add	r3, r2
 8002df4:	3b41      	subs	r3, #65	; 0x41
 8002df6:	221f      	movs	r2, #31
 8002df8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dfc:	43db      	mvns	r3, r3
 8002dfe:	4019      	ands	r1, r3
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	6818      	ldr	r0, [r3, #0]
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	685a      	ldr	r2, [r3, #4]
 8002e08:	4613      	mov	r3, r2
 8002e0a:	009b      	lsls	r3, r3, #2
 8002e0c:	4413      	add	r3, r2
 8002e0e:	3b41      	subs	r3, #65	; 0x41
 8002e10:	fa00 f203 	lsl.w	r2, r0, r3
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	430a      	orrs	r2, r1
 8002e1a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	2b09      	cmp	r3, #9
 8002e22:	d91c      	bls.n	8002e5e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	68d9      	ldr	r1, [r3, #12]
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	681a      	ldr	r2, [r3, #0]
 8002e2e:	4613      	mov	r3, r2
 8002e30:	005b      	lsls	r3, r3, #1
 8002e32:	4413      	add	r3, r2
 8002e34:	3b1e      	subs	r3, #30
 8002e36:	2207      	movs	r2, #7
 8002e38:	fa02 f303 	lsl.w	r3, r2, r3
 8002e3c:	43db      	mvns	r3, r3
 8002e3e:	4019      	ands	r1, r3
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	6898      	ldr	r0, [r3, #8]
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	681a      	ldr	r2, [r3, #0]
 8002e48:	4613      	mov	r3, r2
 8002e4a:	005b      	lsls	r3, r3, #1
 8002e4c:	4413      	add	r3, r2
 8002e4e:	3b1e      	subs	r3, #30
 8002e50:	fa00 f203 	lsl.w	r2, r0, r3
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	430a      	orrs	r2, r1
 8002e5a:	60da      	str	r2, [r3, #12]
 8002e5c:	e019      	b.n	8002e92 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	6919      	ldr	r1, [r3, #16]
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	681a      	ldr	r2, [r3, #0]
 8002e68:	4613      	mov	r3, r2
 8002e6a:	005b      	lsls	r3, r3, #1
 8002e6c:	4413      	add	r3, r2
 8002e6e:	2207      	movs	r2, #7
 8002e70:	fa02 f303 	lsl.w	r3, r2, r3
 8002e74:	43db      	mvns	r3, r3
 8002e76:	4019      	ands	r1, r3
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	6898      	ldr	r0, [r3, #8]
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	681a      	ldr	r2, [r3, #0]
 8002e80:	4613      	mov	r3, r2
 8002e82:	005b      	lsls	r3, r3, #1
 8002e84:	4413      	add	r3, r2
 8002e86:	fa00 f203 	lsl.w	r2, r0, r3
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	430a      	orrs	r2, r1
 8002e90:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	2b10      	cmp	r3, #16
 8002e98:	d003      	beq.n	8002ea2 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002e9e:	2b11      	cmp	r3, #17
 8002ea0:	d132      	bne.n	8002f08 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4a1d      	ldr	r2, [pc, #116]	; (8002f1c <HAL_ADC_ConfigChannel+0x1e4>)
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	d125      	bne.n	8002ef8 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	689b      	ldr	r3, [r3, #8]
 8002eb2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d126      	bne.n	8002f08 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	689a      	ldr	r2, [r3, #8]
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002ec8:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	2b10      	cmp	r3, #16
 8002ed0:	d11a      	bne.n	8002f08 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002ed2:	4b13      	ldr	r3, [pc, #76]	; (8002f20 <HAL_ADC_ConfigChannel+0x1e8>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4a13      	ldr	r2, [pc, #76]	; (8002f24 <HAL_ADC_ConfigChannel+0x1ec>)
 8002ed8:	fba2 2303 	umull	r2, r3, r2, r3
 8002edc:	0c9a      	lsrs	r2, r3, #18
 8002ede:	4613      	mov	r3, r2
 8002ee0:	009b      	lsls	r3, r3, #2
 8002ee2:	4413      	add	r3, r2
 8002ee4:	005b      	lsls	r3, r3, #1
 8002ee6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002ee8:	e002      	b.n	8002ef0 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002eea:	68bb      	ldr	r3, [r7, #8]
 8002eec:	3b01      	subs	r3, #1
 8002eee:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002ef0:	68bb      	ldr	r3, [r7, #8]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d1f9      	bne.n	8002eea <HAL_ADC_ConfigChannel+0x1b2>
 8002ef6:	e007      	b.n	8002f08 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002efc:	f043 0220 	orr.w	r2, r3, #32
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002f04:	2301      	movs	r3, #1
 8002f06:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002f10:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f12:	4618      	mov	r0, r3
 8002f14:	3714      	adds	r7, #20
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bc80      	pop	{r7}
 8002f1a:	4770      	bx	lr
 8002f1c:	40012400 	.word	0x40012400
 8002f20:	2000009c 	.word	0x2000009c
 8002f24:	431bde83 	.word	0x431bde83

08002f28 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b084      	sub	sp, #16
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002f30:	2300      	movs	r3, #0
 8002f32:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002f34:	2300      	movs	r3, #0
 8002f36:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	689b      	ldr	r3, [r3, #8]
 8002f3e:	f003 0301 	and.w	r3, r3, #1
 8002f42:	2b01      	cmp	r3, #1
 8002f44:	d040      	beq.n	8002fc8 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	689a      	ldr	r2, [r3, #8]
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f042 0201 	orr.w	r2, r2, #1
 8002f54:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002f56:	4b1f      	ldr	r3, [pc, #124]	; (8002fd4 <ADC_Enable+0xac>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4a1f      	ldr	r2, [pc, #124]	; (8002fd8 <ADC_Enable+0xb0>)
 8002f5c:	fba2 2303 	umull	r2, r3, r2, r3
 8002f60:	0c9b      	lsrs	r3, r3, #18
 8002f62:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002f64:	e002      	b.n	8002f6c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002f66:	68bb      	ldr	r3, [r7, #8]
 8002f68:	3b01      	subs	r3, #1
 8002f6a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002f6c:	68bb      	ldr	r3, [r7, #8]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d1f9      	bne.n	8002f66 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002f72:	f7ff fc09 	bl	8002788 <HAL_GetTick>
 8002f76:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002f78:	e01f      	b.n	8002fba <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002f7a:	f7ff fc05 	bl	8002788 <HAL_GetTick>
 8002f7e:	4602      	mov	r2, r0
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	1ad3      	subs	r3, r2, r3
 8002f84:	2b02      	cmp	r3, #2
 8002f86:	d918      	bls.n	8002fba <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	689b      	ldr	r3, [r3, #8]
 8002f8e:	f003 0301 	and.w	r3, r3, #1
 8002f92:	2b01      	cmp	r3, #1
 8002f94:	d011      	beq.n	8002fba <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f9a:	f043 0210 	orr.w	r2, r3, #16
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fa6:	f043 0201 	orr.w	r2, r3, #1
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	e007      	b.n	8002fca <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	689b      	ldr	r3, [r3, #8]
 8002fc0:	f003 0301 	and.w	r3, r3, #1
 8002fc4:	2b01      	cmp	r3, #1
 8002fc6:	d1d8      	bne.n	8002f7a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002fc8:	2300      	movs	r3, #0
}
 8002fca:	4618      	mov	r0, r3
 8002fcc:	3710      	adds	r7, #16
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bd80      	pop	{r7, pc}
 8002fd2:	bf00      	nop
 8002fd4:	2000009c 	.word	0x2000009c
 8002fd8:	431bde83 	.word	0x431bde83

08002fdc <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b084      	sub	sp, #16
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	689b      	ldr	r3, [r3, #8]
 8002fee:	f003 0301 	and.w	r3, r3, #1
 8002ff2:	2b01      	cmp	r3, #1
 8002ff4:	d12e      	bne.n	8003054 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	689a      	ldr	r2, [r3, #8]
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f022 0201 	bic.w	r2, r2, #1
 8003004:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003006:	f7ff fbbf 	bl	8002788 <HAL_GetTick>
 800300a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 800300c:	e01b      	b.n	8003046 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800300e:	f7ff fbbb 	bl	8002788 <HAL_GetTick>
 8003012:	4602      	mov	r2, r0
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	1ad3      	subs	r3, r2, r3
 8003018:	2b02      	cmp	r3, #2
 800301a:	d914      	bls.n	8003046 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	689b      	ldr	r3, [r3, #8]
 8003022:	f003 0301 	and.w	r3, r3, #1
 8003026:	2b01      	cmp	r3, #1
 8003028:	d10d      	bne.n	8003046 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800302e:	f043 0210 	orr.w	r2, r3, #16
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800303a:	f043 0201 	orr.w	r2, r3, #1
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8003042:	2301      	movs	r3, #1
 8003044:	e007      	b.n	8003056 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	689b      	ldr	r3, [r3, #8]
 800304c:	f003 0301 	and.w	r3, r3, #1
 8003050:	2b01      	cmp	r3, #1
 8003052:	d0dc      	beq.n	800300e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003054:	2300      	movs	r3, #0
}
 8003056:	4618      	mov	r0, r3
 8003058:	3710      	adds	r7, #16
 800305a:	46bd      	mov	sp, r7
 800305c:	bd80      	pop	{r7, pc}
	...

08003060 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8003060:	b590      	push	{r4, r7, lr}
 8003062:	b087      	sub	sp, #28
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003068:	2300      	movs	r3, #0
 800306a:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 800306c:	2300      	movs	r3, #0
 800306e:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003076:	2b01      	cmp	r3, #1
 8003078:	d101      	bne.n	800307e <HAL_ADCEx_Calibration_Start+0x1e>
 800307a:	2302      	movs	r3, #2
 800307c:	e095      	b.n	80031aa <HAL_ADCEx_Calibration_Start+0x14a>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2201      	movs	r2, #1
 8003082:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  /* 1. Calibration prerequisite:                                             */
  /*    - ADC must be disabled for at least two ADC clock cycles in disable   */
  /*      mode before ADC enable                                              */
  /* Stop potential conversion on going, on regular and injected groups       */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8003086:	6878      	ldr	r0, [r7, #4]
 8003088:	f7ff ffa8 	bl	8002fdc <ADC_ConversionStop_Disable>
 800308c:	4603      	mov	r3, r0
 800308e:	75fb      	strb	r3, [r7, #23]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8003090:	7dfb      	ldrb	r3, [r7, #23]
 8003092:	2b00      	cmp	r3, #0
 8003094:	f040 8084 	bne.w	80031a0 <HAL_ADCEx_Calibration_Start+0x140>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800309c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80030a0:	f023 0302 	bic.w	r3, r3, #2
 80030a4:	f043 0202 	orr.w	r2, r3, #2
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80030ac:	4b41      	ldr	r3, [pc, #260]	; (80031b4 <HAL_ADCEx_Calibration_Start+0x154>)
 80030ae:	681c      	ldr	r4, [r3, #0]
 80030b0:	2002      	movs	r0, #2
 80030b2:	f001 f831 	bl	8004118 <HAL_RCCEx_GetPeriphCLKFreq>
 80030b6:	4603      	mov	r3, r0
 80030b8:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 80030bc:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 80030be:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 80030c0:	e002      	b.n	80030c8 <HAL_ADCEx_Calibration_Start+0x68>
    {
      wait_loop_index--;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	3b01      	subs	r3, #1
 80030c6:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d1f9      	bne.n	80030c2 <HAL_ADCEx_Calibration_Start+0x62>
    }
    
    /* 2. Enable the ADC peripheral */
    ADC_Enable(hadc);
 80030ce:	6878      	ldr	r0, [r7, #4]
 80030d0:	f7ff ff2a 	bl	8002f28 <ADC_Enable>
    
    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	689a      	ldr	r2, [r3, #8]
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f042 0208 	orr.w	r2, r2, #8
 80030e2:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 80030e4:	f7ff fb50 	bl	8002788 <HAL_GetTick>
 80030e8:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80030ea:	e01b      	b.n	8003124 <HAL_ADCEx_Calibration_Start+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80030ec:	f7ff fb4c 	bl	8002788 <HAL_GetTick>
 80030f0:	4602      	mov	r2, r0
 80030f2:	693b      	ldr	r3, [r7, #16]
 80030f4:	1ad3      	subs	r3, r2, r3
 80030f6:	2b0a      	cmp	r3, #10
 80030f8:	d914      	bls.n	8003124 <HAL_ADCEx_Calibration_Start+0xc4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	689b      	ldr	r3, [r3, #8]
 8003100:	f003 0308 	and.w	r3, r3, #8
 8003104:	2b00      	cmp	r3, #0
 8003106:	d00d      	beq.n	8003124 <HAL_ADCEx_Calibration_Start+0xc4>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800310c:	f023 0312 	bic.w	r3, r3, #18
 8003110:	f043 0210 	orr.w	r2, r3, #16
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2200      	movs	r2, #0
 800311c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8003120:	2301      	movs	r3, #1
 8003122:	e042      	b.n	80031aa <HAL_ADCEx_Calibration_Start+0x14a>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	689b      	ldr	r3, [r3, #8]
 800312a:	f003 0308 	and.w	r3, r3, #8
 800312e:	2b00      	cmp	r3, #0
 8003130:	d1dc      	bne.n	80030ec <HAL_ADCEx_Calibration_Start+0x8c>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	689a      	ldr	r2, [r3, #8]
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f042 0204 	orr.w	r2, r2, #4
 8003140:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8003142:	f7ff fb21 	bl	8002788 <HAL_GetTick>
 8003146:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8003148:	e01b      	b.n	8003182 <HAL_ADCEx_Calibration_Start+0x122>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 800314a:	f7ff fb1d 	bl	8002788 <HAL_GetTick>
 800314e:	4602      	mov	r2, r0
 8003150:	693b      	ldr	r3, [r7, #16]
 8003152:	1ad3      	subs	r3, r2, r3
 8003154:	2b0a      	cmp	r3, #10
 8003156:	d914      	bls.n	8003182 <HAL_ADCEx_Calibration_Start+0x122>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	689b      	ldr	r3, [r3, #8]
 800315e:	f003 0304 	and.w	r3, r3, #4
 8003162:	2b00      	cmp	r3, #0
 8003164:	d00d      	beq.n	8003182 <HAL_ADCEx_Calibration_Start+0x122>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800316a:	f023 0312 	bic.w	r3, r3, #18
 800316e:	f043 0210 	orr.w	r2, r3, #16
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2200      	movs	r2, #0
 800317a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 800317e:	2301      	movs	r3, #1
 8003180:	e013      	b.n	80031aa <HAL_ADCEx_Calibration_Start+0x14a>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	689b      	ldr	r3, [r3, #8]
 8003188:	f003 0304 	and.w	r3, r3, #4
 800318c:	2b00      	cmp	r3, #0
 800318e:	d1dc      	bne.n	800314a <HAL_ADCEx_Calibration_Start+0xea>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003194:	f023 0303 	bic.w	r3, r3, #3
 8003198:	f043 0201 	orr.w	r2, r3, #1
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2200      	movs	r2, #0
 80031a4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80031a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80031aa:	4618      	mov	r0, r3
 80031ac:	371c      	adds	r7, #28
 80031ae:	46bd      	mov	sp, r7
 80031b0:	bd90      	pop	{r4, r7, pc}
 80031b2:	bf00      	nop
 80031b4:	2000009c 	.word	0x2000009c

080031b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031b8:	b480      	push	{r7}
 80031ba:	b085      	sub	sp, #20
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	f003 0307 	and.w	r3, r3, #7
 80031c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80031c8:	4b0c      	ldr	r3, [pc, #48]	; (80031fc <__NVIC_SetPriorityGrouping+0x44>)
 80031ca:	68db      	ldr	r3, [r3, #12]
 80031cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80031ce:	68ba      	ldr	r2, [r7, #8]
 80031d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80031d4:	4013      	ands	r3, r2
 80031d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80031dc:	68bb      	ldr	r3, [r7, #8]
 80031de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80031e0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80031e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80031e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80031ea:	4a04      	ldr	r2, [pc, #16]	; (80031fc <__NVIC_SetPriorityGrouping+0x44>)
 80031ec:	68bb      	ldr	r3, [r7, #8]
 80031ee:	60d3      	str	r3, [r2, #12]
}
 80031f0:	bf00      	nop
 80031f2:	3714      	adds	r7, #20
 80031f4:	46bd      	mov	sp, r7
 80031f6:	bc80      	pop	{r7}
 80031f8:	4770      	bx	lr
 80031fa:	bf00      	nop
 80031fc:	e000ed00 	.word	0xe000ed00

08003200 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003200:	b480      	push	{r7}
 8003202:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003204:	4b04      	ldr	r3, [pc, #16]	; (8003218 <__NVIC_GetPriorityGrouping+0x18>)
 8003206:	68db      	ldr	r3, [r3, #12]
 8003208:	0a1b      	lsrs	r3, r3, #8
 800320a:	f003 0307 	and.w	r3, r3, #7
}
 800320e:	4618      	mov	r0, r3
 8003210:	46bd      	mov	sp, r7
 8003212:	bc80      	pop	{r7}
 8003214:	4770      	bx	lr
 8003216:	bf00      	nop
 8003218:	e000ed00 	.word	0xe000ed00

0800321c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800321c:	b480      	push	{r7}
 800321e:	b083      	sub	sp, #12
 8003220:	af00      	add	r7, sp, #0
 8003222:	4603      	mov	r3, r0
 8003224:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003226:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800322a:	2b00      	cmp	r3, #0
 800322c:	db0b      	blt.n	8003246 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800322e:	79fb      	ldrb	r3, [r7, #7]
 8003230:	f003 021f 	and.w	r2, r3, #31
 8003234:	4906      	ldr	r1, [pc, #24]	; (8003250 <__NVIC_EnableIRQ+0x34>)
 8003236:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800323a:	095b      	lsrs	r3, r3, #5
 800323c:	2001      	movs	r0, #1
 800323e:	fa00 f202 	lsl.w	r2, r0, r2
 8003242:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003246:	bf00      	nop
 8003248:	370c      	adds	r7, #12
 800324a:	46bd      	mov	sp, r7
 800324c:	bc80      	pop	{r7}
 800324e:	4770      	bx	lr
 8003250:	e000e100 	.word	0xe000e100

08003254 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003254:	b480      	push	{r7}
 8003256:	b083      	sub	sp, #12
 8003258:	af00      	add	r7, sp, #0
 800325a:	4603      	mov	r3, r0
 800325c:	6039      	str	r1, [r7, #0]
 800325e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003260:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003264:	2b00      	cmp	r3, #0
 8003266:	db0a      	blt.n	800327e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	b2da      	uxtb	r2, r3
 800326c:	490c      	ldr	r1, [pc, #48]	; (80032a0 <__NVIC_SetPriority+0x4c>)
 800326e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003272:	0112      	lsls	r2, r2, #4
 8003274:	b2d2      	uxtb	r2, r2
 8003276:	440b      	add	r3, r1
 8003278:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800327c:	e00a      	b.n	8003294 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	b2da      	uxtb	r2, r3
 8003282:	4908      	ldr	r1, [pc, #32]	; (80032a4 <__NVIC_SetPriority+0x50>)
 8003284:	79fb      	ldrb	r3, [r7, #7]
 8003286:	f003 030f 	and.w	r3, r3, #15
 800328a:	3b04      	subs	r3, #4
 800328c:	0112      	lsls	r2, r2, #4
 800328e:	b2d2      	uxtb	r2, r2
 8003290:	440b      	add	r3, r1
 8003292:	761a      	strb	r2, [r3, #24]
}
 8003294:	bf00      	nop
 8003296:	370c      	adds	r7, #12
 8003298:	46bd      	mov	sp, r7
 800329a:	bc80      	pop	{r7}
 800329c:	4770      	bx	lr
 800329e:	bf00      	nop
 80032a0:	e000e100 	.word	0xe000e100
 80032a4:	e000ed00 	.word	0xe000ed00

080032a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80032a8:	b480      	push	{r7}
 80032aa:	b089      	sub	sp, #36	; 0x24
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	60f8      	str	r0, [r7, #12]
 80032b0:	60b9      	str	r1, [r7, #8]
 80032b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	f003 0307 	and.w	r3, r3, #7
 80032ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80032bc:	69fb      	ldr	r3, [r7, #28]
 80032be:	f1c3 0307 	rsb	r3, r3, #7
 80032c2:	2b04      	cmp	r3, #4
 80032c4:	bf28      	it	cs
 80032c6:	2304      	movcs	r3, #4
 80032c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80032ca:	69fb      	ldr	r3, [r7, #28]
 80032cc:	3304      	adds	r3, #4
 80032ce:	2b06      	cmp	r3, #6
 80032d0:	d902      	bls.n	80032d8 <NVIC_EncodePriority+0x30>
 80032d2:	69fb      	ldr	r3, [r7, #28]
 80032d4:	3b03      	subs	r3, #3
 80032d6:	e000      	b.n	80032da <NVIC_EncodePriority+0x32>
 80032d8:	2300      	movs	r3, #0
 80032da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032dc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80032e0:	69bb      	ldr	r3, [r7, #24]
 80032e2:	fa02 f303 	lsl.w	r3, r2, r3
 80032e6:	43da      	mvns	r2, r3
 80032e8:	68bb      	ldr	r3, [r7, #8]
 80032ea:	401a      	ands	r2, r3
 80032ec:	697b      	ldr	r3, [r7, #20]
 80032ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80032f0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80032f4:	697b      	ldr	r3, [r7, #20]
 80032f6:	fa01 f303 	lsl.w	r3, r1, r3
 80032fa:	43d9      	mvns	r1, r3
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003300:	4313      	orrs	r3, r2
         );
}
 8003302:	4618      	mov	r0, r3
 8003304:	3724      	adds	r7, #36	; 0x24
 8003306:	46bd      	mov	sp, r7
 8003308:	bc80      	pop	{r7}
 800330a:	4770      	bx	lr

0800330c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b082      	sub	sp, #8
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	3b01      	subs	r3, #1
 8003318:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800331c:	d301      	bcc.n	8003322 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800331e:	2301      	movs	r3, #1
 8003320:	e00f      	b.n	8003342 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003322:	4a0a      	ldr	r2, [pc, #40]	; (800334c <SysTick_Config+0x40>)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	3b01      	subs	r3, #1
 8003328:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800332a:	210f      	movs	r1, #15
 800332c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003330:	f7ff ff90 	bl	8003254 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003334:	4b05      	ldr	r3, [pc, #20]	; (800334c <SysTick_Config+0x40>)
 8003336:	2200      	movs	r2, #0
 8003338:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800333a:	4b04      	ldr	r3, [pc, #16]	; (800334c <SysTick_Config+0x40>)
 800333c:	2207      	movs	r2, #7
 800333e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003340:	2300      	movs	r3, #0
}
 8003342:	4618      	mov	r0, r3
 8003344:	3708      	adds	r7, #8
 8003346:	46bd      	mov	sp, r7
 8003348:	bd80      	pop	{r7, pc}
 800334a:	bf00      	nop
 800334c:	e000e010 	.word	0xe000e010

08003350 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b082      	sub	sp, #8
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003358:	6878      	ldr	r0, [r7, #4]
 800335a:	f7ff ff2d 	bl	80031b8 <__NVIC_SetPriorityGrouping>
}
 800335e:	bf00      	nop
 8003360:	3708      	adds	r7, #8
 8003362:	46bd      	mov	sp, r7
 8003364:	bd80      	pop	{r7, pc}

08003366 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003366:	b580      	push	{r7, lr}
 8003368:	b086      	sub	sp, #24
 800336a:	af00      	add	r7, sp, #0
 800336c:	4603      	mov	r3, r0
 800336e:	60b9      	str	r1, [r7, #8]
 8003370:	607a      	str	r2, [r7, #4]
 8003372:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003374:	2300      	movs	r3, #0
 8003376:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003378:	f7ff ff42 	bl	8003200 <__NVIC_GetPriorityGrouping>
 800337c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800337e:	687a      	ldr	r2, [r7, #4]
 8003380:	68b9      	ldr	r1, [r7, #8]
 8003382:	6978      	ldr	r0, [r7, #20]
 8003384:	f7ff ff90 	bl	80032a8 <NVIC_EncodePriority>
 8003388:	4602      	mov	r2, r0
 800338a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800338e:	4611      	mov	r1, r2
 8003390:	4618      	mov	r0, r3
 8003392:	f7ff ff5f 	bl	8003254 <__NVIC_SetPriority>
}
 8003396:	bf00      	nop
 8003398:	3718      	adds	r7, #24
 800339a:	46bd      	mov	sp, r7
 800339c:	bd80      	pop	{r7, pc}

0800339e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800339e:	b580      	push	{r7, lr}
 80033a0:	b082      	sub	sp, #8
 80033a2:	af00      	add	r7, sp, #0
 80033a4:	4603      	mov	r3, r0
 80033a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80033a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033ac:	4618      	mov	r0, r3
 80033ae:	f7ff ff35 	bl	800321c <__NVIC_EnableIRQ>
}
 80033b2:	bf00      	nop
 80033b4:	3708      	adds	r7, #8
 80033b6:	46bd      	mov	sp, r7
 80033b8:	bd80      	pop	{r7, pc}

080033ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80033ba:	b580      	push	{r7, lr}
 80033bc:	b082      	sub	sp, #8
 80033be:	af00      	add	r7, sp, #0
 80033c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80033c2:	6878      	ldr	r0, [r7, #4]
 80033c4:	f7ff ffa2 	bl	800330c <SysTick_Config>
 80033c8:	4603      	mov	r3, r0
}
 80033ca:	4618      	mov	r0, r3
 80033cc:	3708      	adds	r7, #8
 80033ce:	46bd      	mov	sp, r7
 80033d0:	bd80      	pop	{r7, pc}
	...

080033d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80033d4:	b480      	push	{r7}
 80033d6:	b08b      	sub	sp, #44	; 0x2c
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
 80033dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80033de:	2300      	movs	r3, #0
 80033e0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80033e2:	2300      	movs	r3, #0
 80033e4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80033e6:	e179      	b.n	80036dc <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80033e8:	2201      	movs	r2, #1
 80033ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ec:	fa02 f303 	lsl.w	r3, r2, r3
 80033f0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	69fa      	ldr	r2, [r7, #28]
 80033f8:	4013      	ands	r3, r2
 80033fa:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80033fc:	69ba      	ldr	r2, [r7, #24]
 80033fe:	69fb      	ldr	r3, [r7, #28]
 8003400:	429a      	cmp	r2, r3
 8003402:	f040 8168 	bne.w	80036d6 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	4a96      	ldr	r2, [pc, #600]	; (8003664 <HAL_GPIO_Init+0x290>)
 800340c:	4293      	cmp	r3, r2
 800340e:	d05e      	beq.n	80034ce <HAL_GPIO_Init+0xfa>
 8003410:	4a94      	ldr	r2, [pc, #592]	; (8003664 <HAL_GPIO_Init+0x290>)
 8003412:	4293      	cmp	r3, r2
 8003414:	d875      	bhi.n	8003502 <HAL_GPIO_Init+0x12e>
 8003416:	4a94      	ldr	r2, [pc, #592]	; (8003668 <HAL_GPIO_Init+0x294>)
 8003418:	4293      	cmp	r3, r2
 800341a:	d058      	beq.n	80034ce <HAL_GPIO_Init+0xfa>
 800341c:	4a92      	ldr	r2, [pc, #584]	; (8003668 <HAL_GPIO_Init+0x294>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d86f      	bhi.n	8003502 <HAL_GPIO_Init+0x12e>
 8003422:	4a92      	ldr	r2, [pc, #584]	; (800366c <HAL_GPIO_Init+0x298>)
 8003424:	4293      	cmp	r3, r2
 8003426:	d052      	beq.n	80034ce <HAL_GPIO_Init+0xfa>
 8003428:	4a90      	ldr	r2, [pc, #576]	; (800366c <HAL_GPIO_Init+0x298>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d869      	bhi.n	8003502 <HAL_GPIO_Init+0x12e>
 800342e:	4a90      	ldr	r2, [pc, #576]	; (8003670 <HAL_GPIO_Init+0x29c>)
 8003430:	4293      	cmp	r3, r2
 8003432:	d04c      	beq.n	80034ce <HAL_GPIO_Init+0xfa>
 8003434:	4a8e      	ldr	r2, [pc, #568]	; (8003670 <HAL_GPIO_Init+0x29c>)
 8003436:	4293      	cmp	r3, r2
 8003438:	d863      	bhi.n	8003502 <HAL_GPIO_Init+0x12e>
 800343a:	4a8e      	ldr	r2, [pc, #568]	; (8003674 <HAL_GPIO_Init+0x2a0>)
 800343c:	4293      	cmp	r3, r2
 800343e:	d046      	beq.n	80034ce <HAL_GPIO_Init+0xfa>
 8003440:	4a8c      	ldr	r2, [pc, #560]	; (8003674 <HAL_GPIO_Init+0x2a0>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d85d      	bhi.n	8003502 <HAL_GPIO_Init+0x12e>
 8003446:	2b12      	cmp	r3, #18
 8003448:	d82a      	bhi.n	80034a0 <HAL_GPIO_Init+0xcc>
 800344a:	2b12      	cmp	r3, #18
 800344c:	d859      	bhi.n	8003502 <HAL_GPIO_Init+0x12e>
 800344e:	a201      	add	r2, pc, #4	; (adr r2, 8003454 <HAL_GPIO_Init+0x80>)
 8003450:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003454:	080034cf 	.word	0x080034cf
 8003458:	080034a9 	.word	0x080034a9
 800345c:	080034bb 	.word	0x080034bb
 8003460:	080034fd 	.word	0x080034fd
 8003464:	08003503 	.word	0x08003503
 8003468:	08003503 	.word	0x08003503
 800346c:	08003503 	.word	0x08003503
 8003470:	08003503 	.word	0x08003503
 8003474:	08003503 	.word	0x08003503
 8003478:	08003503 	.word	0x08003503
 800347c:	08003503 	.word	0x08003503
 8003480:	08003503 	.word	0x08003503
 8003484:	08003503 	.word	0x08003503
 8003488:	08003503 	.word	0x08003503
 800348c:	08003503 	.word	0x08003503
 8003490:	08003503 	.word	0x08003503
 8003494:	08003503 	.word	0x08003503
 8003498:	080034b1 	.word	0x080034b1
 800349c:	080034c5 	.word	0x080034c5
 80034a0:	4a75      	ldr	r2, [pc, #468]	; (8003678 <HAL_GPIO_Init+0x2a4>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d013      	beq.n	80034ce <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80034a6:	e02c      	b.n	8003502 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	68db      	ldr	r3, [r3, #12]
 80034ac:	623b      	str	r3, [r7, #32]
          break;
 80034ae:	e029      	b.n	8003504 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	68db      	ldr	r3, [r3, #12]
 80034b4:	3304      	adds	r3, #4
 80034b6:	623b      	str	r3, [r7, #32]
          break;
 80034b8:	e024      	b.n	8003504 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	68db      	ldr	r3, [r3, #12]
 80034be:	3308      	adds	r3, #8
 80034c0:	623b      	str	r3, [r7, #32]
          break;
 80034c2:	e01f      	b.n	8003504 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	68db      	ldr	r3, [r3, #12]
 80034c8:	330c      	adds	r3, #12
 80034ca:	623b      	str	r3, [r7, #32]
          break;
 80034cc:	e01a      	b.n	8003504 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	689b      	ldr	r3, [r3, #8]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d102      	bne.n	80034dc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80034d6:	2304      	movs	r3, #4
 80034d8:	623b      	str	r3, [r7, #32]
          break;
 80034da:	e013      	b.n	8003504 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	689b      	ldr	r3, [r3, #8]
 80034e0:	2b01      	cmp	r3, #1
 80034e2:	d105      	bne.n	80034f0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80034e4:	2308      	movs	r3, #8
 80034e6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	69fa      	ldr	r2, [r7, #28]
 80034ec:	611a      	str	r2, [r3, #16]
          break;
 80034ee:	e009      	b.n	8003504 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80034f0:	2308      	movs	r3, #8
 80034f2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	69fa      	ldr	r2, [r7, #28]
 80034f8:	615a      	str	r2, [r3, #20]
          break;
 80034fa:	e003      	b.n	8003504 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80034fc:	2300      	movs	r3, #0
 80034fe:	623b      	str	r3, [r7, #32]
          break;
 8003500:	e000      	b.n	8003504 <HAL_GPIO_Init+0x130>
          break;
 8003502:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003504:	69bb      	ldr	r3, [r7, #24]
 8003506:	2bff      	cmp	r3, #255	; 0xff
 8003508:	d801      	bhi.n	800350e <HAL_GPIO_Init+0x13a>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	e001      	b.n	8003512 <HAL_GPIO_Init+0x13e>
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	3304      	adds	r3, #4
 8003512:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003514:	69bb      	ldr	r3, [r7, #24]
 8003516:	2bff      	cmp	r3, #255	; 0xff
 8003518:	d802      	bhi.n	8003520 <HAL_GPIO_Init+0x14c>
 800351a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800351c:	009b      	lsls	r3, r3, #2
 800351e:	e002      	b.n	8003526 <HAL_GPIO_Init+0x152>
 8003520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003522:	3b08      	subs	r3, #8
 8003524:	009b      	lsls	r3, r3, #2
 8003526:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003528:	697b      	ldr	r3, [r7, #20]
 800352a:	681a      	ldr	r2, [r3, #0]
 800352c:	210f      	movs	r1, #15
 800352e:	693b      	ldr	r3, [r7, #16]
 8003530:	fa01 f303 	lsl.w	r3, r1, r3
 8003534:	43db      	mvns	r3, r3
 8003536:	401a      	ands	r2, r3
 8003538:	6a39      	ldr	r1, [r7, #32]
 800353a:	693b      	ldr	r3, [r7, #16]
 800353c:	fa01 f303 	lsl.w	r3, r1, r3
 8003540:	431a      	orrs	r2, r3
 8003542:	697b      	ldr	r3, [r7, #20]
 8003544:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	685b      	ldr	r3, [r3, #4]
 800354a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800354e:	2b00      	cmp	r3, #0
 8003550:	f000 80c1 	beq.w	80036d6 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003554:	4b49      	ldr	r3, [pc, #292]	; (800367c <HAL_GPIO_Init+0x2a8>)
 8003556:	699b      	ldr	r3, [r3, #24]
 8003558:	4a48      	ldr	r2, [pc, #288]	; (800367c <HAL_GPIO_Init+0x2a8>)
 800355a:	f043 0301 	orr.w	r3, r3, #1
 800355e:	6193      	str	r3, [r2, #24]
 8003560:	4b46      	ldr	r3, [pc, #280]	; (800367c <HAL_GPIO_Init+0x2a8>)
 8003562:	699b      	ldr	r3, [r3, #24]
 8003564:	f003 0301 	and.w	r3, r3, #1
 8003568:	60bb      	str	r3, [r7, #8]
 800356a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800356c:	4a44      	ldr	r2, [pc, #272]	; (8003680 <HAL_GPIO_Init+0x2ac>)
 800356e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003570:	089b      	lsrs	r3, r3, #2
 8003572:	3302      	adds	r3, #2
 8003574:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003578:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800357a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800357c:	f003 0303 	and.w	r3, r3, #3
 8003580:	009b      	lsls	r3, r3, #2
 8003582:	220f      	movs	r2, #15
 8003584:	fa02 f303 	lsl.w	r3, r2, r3
 8003588:	43db      	mvns	r3, r3
 800358a:	68fa      	ldr	r2, [r7, #12]
 800358c:	4013      	ands	r3, r2
 800358e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	4a3c      	ldr	r2, [pc, #240]	; (8003684 <HAL_GPIO_Init+0x2b0>)
 8003594:	4293      	cmp	r3, r2
 8003596:	d01f      	beq.n	80035d8 <HAL_GPIO_Init+0x204>
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	4a3b      	ldr	r2, [pc, #236]	; (8003688 <HAL_GPIO_Init+0x2b4>)
 800359c:	4293      	cmp	r3, r2
 800359e:	d019      	beq.n	80035d4 <HAL_GPIO_Init+0x200>
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	4a3a      	ldr	r2, [pc, #232]	; (800368c <HAL_GPIO_Init+0x2b8>)
 80035a4:	4293      	cmp	r3, r2
 80035a6:	d013      	beq.n	80035d0 <HAL_GPIO_Init+0x1fc>
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	4a39      	ldr	r2, [pc, #228]	; (8003690 <HAL_GPIO_Init+0x2bc>)
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d00d      	beq.n	80035cc <HAL_GPIO_Init+0x1f8>
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	4a38      	ldr	r2, [pc, #224]	; (8003694 <HAL_GPIO_Init+0x2c0>)
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d007      	beq.n	80035c8 <HAL_GPIO_Init+0x1f4>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	4a37      	ldr	r2, [pc, #220]	; (8003698 <HAL_GPIO_Init+0x2c4>)
 80035bc:	4293      	cmp	r3, r2
 80035be:	d101      	bne.n	80035c4 <HAL_GPIO_Init+0x1f0>
 80035c0:	2305      	movs	r3, #5
 80035c2:	e00a      	b.n	80035da <HAL_GPIO_Init+0x206>
 80035c4:	2306      	movs	r3, #6
 80035c6:	e008      	b.n	80035da <HAL_GPIO_Init+0x206>
 80035c8:	2304      	movs	r3, #4
 80035ca:	e006      	b.n	80035da <HAL_GPIO_Init+0x206>
 80035cc:	2303      	movs	r3, #3
 80035ce:	e004      	b.n	80035da <HAL_GPIO_Init+0x206>
 80035d0:	2302      	movs	r3, #2
 80035d2:	e002      	b.n	80035da <HAL_GPIO_Init+0x206>
 80035d4:	2301      	movs	r3, #1
 80035d6:	e000      	b.n	80035da <HAL_GPIO_Init+0x206>
 80035d8:	2300      	movs	r3, #0
 80035da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035dc:	f002 0203 	and.w	r2, r2, #3
 80035e0:	0092      	lsls	r2, r2, #2
 80035e2:	4093      	lsls	r3, r2
 80035e4:	68fa      	ldr	r2, [r7, #12]
 80035e6:	4313      	orrs	r3, r2
 80035e8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80035ea:	4925      	ldr	r1, [pc, #148]	; (8003680 <HAL_GPIO_Init+0x2ac>)
 80035ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ee:	089b      	lsrs	r3, r3, #2
 80035f0:	3302      	adds	r3, #2
 80035f2:	68fa      	ldr	r2, [r7, #12]
 80035f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	685b      	ldr	r3, [r3, #4]
 80035fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003600:	2b00      	cmp	r3, #0
 8003602:	d006      	beq.n	8003612 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003604:	4b25      	ldr	r3, [pc, #148]	; (800369c <HAL_GPIO_Init+0x2c8>)
 8003606:	681a      	ldr	r2, [r3, #0]
 8003608:	4924      	ldr	r1, [pc, #144]	; (800369c <HAL_GPIO_Init+0x2c8>)
 800360a:	69bb      	ldr	r3, [r7, #24]
 800360c:	4313      	orrs	r3, r2
 800360e:	600b      	str	r3, [r1, #0]
 8003610:	e006      	b.n	8003620 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003612:	4b22      	ldr	r3, [pc, #136]	; (800369c <HAL_GPIO_Init+0x2c8>)
 8003614:	681a      	ldr	r2, [r3, #0]
 8003616:	69bb      	ldr	r3, [r7, #24]
 8003618:	43db      	mvns	r3, r3
 800361a:	4920      	ldr	r1, [pc, #128]	; (800369c <HAL_GPIO_Init+0x2c8>)
 800361c:	4013      	ands	r3, r2
 800361e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	685b      	ldr	r3, [r3, #4]
 8003624:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003628:	2b00      	cmp	r3, #0
 800362a:	d006      	beq.n	800363a <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800362c:	4b1b      	ldr	r3, [pc, #108]	; (800369c <HAL_GPIO_Init+0x2c8>)
 800362e:	685a      	ldr	r2, [r3, #4]
 8003630:	491a      	ldr	r1, [pc, #104]	; (800369c <HAL_GPIO_Init+0x2c8>)
 8003632:	69bb      	ldr	r3, [r7, #24]
 8003634:	4313      	orrs	r3, r2
 8003636:	604b      	str	r3, [r1, #4]
 8003638:	e006      	b.n	8003648 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800363a:	4b18      	ldr	r3, [pc, #96]	; (800369c <HAL_GPIO_Init+0x2c8>)
 800363c:	685a      	ldr	r2, [r3, #4]
 800363e:	69bb      	ldr	r3, [r7, #24]
 8003640:	43db      	mvns	r3, r3
 8003642:	4916      	ldr	r1, [pc, #88]	; (800369c <HAL_GPIO_Init+0x2c8>)
 8003644:	4013      	ands	r3, r2
 8003646:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	685b      	ldr	r3, [r3, #4]
 800364c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003650:	2b00      	cmp	r3, #0
 8003652:	d025      	beq.n	80036a0 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003654:	4b11      	ldr	r3, [pc, #68]	; (800369c <HAL_GPIO_Init+0x2c8>)
 8003656:	689a      	ldr	r2, [r3, #8]
 8003658:	4910      	ldr	r1, [pc, #64]	; (800369c <HAL_GPIO_Init+0x2c8>)
 800365a:	69bb      	ldr	r3, [r7, #24]
 800365c:	4313      	orrs	r3, r2
 800365e:	608b      	str	r3, [r1, #8]
 8003660:	e025      	b.n	80036ae <HAL_GPIO_Init+0x2da>
 8003662:	bf00      	nop
 8003664:	10320000 	.word	0x10320000
 8003668:	10310000 	.word	0x10310000
 800366c:	10220000 	.word	0x10220000
 8003670:	10210000 	.word	0x10210000
 8003674:	10120000 	.word	0x10120000
 8003678:	10110000 	.word	0x10110000
 800367c:	40021000 	.word	0x40021000
 8003680:	40010000 	.word	0x40010000
 8003684:	40010800 	.word	0x40010800
 8003688:	40010c00 	.word	0x40010c00
 800368c:	40011000 	.word	0x40011000
 8003690:	40011400 	.word	0x40011400
 8003694:	40011800 	.word	0x40011800
 8003698:	40011c00 	.word	0x40011c00
 800369c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80036a0:	4b15      	ldr	r3, [pc, #84]	; (80036f8 <HAL_GPIO_Init+0x324>)
 80036a2:	689a      	ldr	r2, [r3, #8]
 80036a4:	69bb      	ldr	r3, [r7, #24]
 80036a6:	43db      	mvns	r3, r3
 80036a8:	4913      	ldr	r1, [pc, #76]	; (80036f8 <HAL_GPIO_Init+0x324>)
 80036aa:	4013      	ands	r3, r2
 80036ac:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	685b      	ldr	r3, [r3, #4]
 80036b2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d006      	beq.n	80036c8 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80036ba:	4b0f      	ldr	r3, [pc, #60]	; (80036f8 <HAL_GPIO_Init+0x324>)
 80036bc:	68da      	ldr	r2, [r3, #12]
 80036be:	490e      	ldr	r1, [pc, #56]	; (80036f8 <HAL_GPIO_Init+0x324>)
 80036c0:	69bb      	ldr	r3, [r7, #24]
 80036c2:	4313      	orrs	r3, r2
 80036c4:	60cb      	str	r3, [r1, #12]
 80036c6:	e006      	b.n	80036d6 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80036c8:	4b0b      	ldr	r3, [pc, #44]	; (80036f8 <HAL_GPIO_Init+0x324>)
 80036ca:	68da      	ldr	r2, [r3, #12]
 80036cc:	69bb      	ldr	r3, [r7, #24]
 80036ce:	43db      	mvns	r3, r3
 80036d0:	4909      	ldr	r1, [pc, #36]	; (80036f8 <HAL_GPIO_Init+0x324>)
 80036d2:	4013      	ands	r3, r2
 80036d4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80036d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036d8:	3301      	adds	r3, #1
 80036da:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	681a      	ldr	r2, [r3, #0]
 80036e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036e2:	fa22 f303 	lsr.w	r3, r2, r3
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	f47f ae7e 	bne.w	80033e8 <HAL_GPIO_Init+0x14>
  }
}
 80036ec:	bf00      	nop
 80036ee:	bf00      	nop
 80036f0:	372c      	adds	r7, #44	; 0x2c
 80036f2:	46bd      	mov	sp, r7
 80036f4:	bc80      	pop	{r7}
 80036f6:	4770      	bx	lr
 80036f8:	40010400 	.word	0x40010400

080036fc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80036fc:	b480      	push	{r7}
 80036fe:	b085      	sub	sp, #20
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
 8003704:	460b      	mov	r3, r1
 8003706:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	689a      	ldr	r2, [r3, #8]
 800370c:	887b      	ldrh	r3, [r7, #2]
 800370e:	4013      	ands	r3, r2
 8003710:	2b00      	cmp	r3, #0
 8003712:	d002      	beq.n	800371a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003714:	2301      	movs	r3, #1
 8003716:	73fb      	strb	r3, [r7, #15]
 8003718:	e001      	b.n	800371e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800371a:	2300      	movs	r3, #0
 800371c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800371e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003720:	4618      	mov	r0, r3
 8003722:	3714      	adds	r7, #20
 8003724:	46bd      	mov	sp, r7
 8003726:	bc80      	pop	{r7}
 8003728:	4770      	bx	lr

0800372a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800372a:	b480      	push	{r7}
 800372c:	b083      	sub	sp, #12
 800372e:	af00      	add	r7, sp, #0
 8003730:	6078      	str	r0, [r7, #4]
 8003732:	460b      	mov	r3, r1
 8003734:	807b      	strh	r3, [r7, #2]
 8003736:	4613      	mov	r3, r2
 8003738:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800373a:	787b      	ldrb	r3, [r7, #1]
 800373c:	2b00      	cmp	r3, #0
 800373e:	d003      	beq.n	8003748 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003740:	887a      	ldrh	r2, [r7, #2]
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003746:	e003      	b.n	8003750 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003748:	887b      	ldrh	r3, [r7, #2]
 800374a:	041a      	lsls	r2, r3, #16
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	611a      	str	r2, [r3, #16]
}
 8003750:	bf00      	nop
 8003752:	370c      	adds	r7, #12
 8003754:	46bd      	mov	sp, r7
 8003756:	bc80      	pop	{r7}
 8003758:	4770      	bx	lr
	...

0800375c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b082      	sub	sp, #8
 8003760:	af00      	add	r7, sp, #0
 8003762:	4603      	mov	r3, r0
 8003764:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003766:	4b08      	ldr	r3, [pc, #32]	; (8003788 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003768:	695a      	ldr	r2, [r3, #20]
 800376a:	88fb      	ldrh	r3, [r7, #6]
 800376c:	4013      	ands	r3, r2
 800376e:	2b00      	cmp	r3, #0
 8003770:	d006      	beq.n	8003780 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003772:	4a05      	ldr	r2, [pc, #20]	; (8003788 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003774:	88fb      	ldrh	r3, [r7, #6]
 8003776:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003778:	88fb      	ldrh	r3, [r7, #6]
 800377a:	4618      	mov	r0, r3
 800377c:	f000 f806 	bl	800378c <HAL_GPIO_EXTI_Callback>
  }
}
 8003780:	bf00      	nop
 8003782:	3708      	adds	r7, #8
 8003784:	46bd      	mov	sp, r7
 8003786:	bd80      	pop	{r7, pc}
 8003788:	40010400 	.word	0x40010400

0800378c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800378c:	b480      	push	{r7}
 800378e:	b083      	sub	sp, #12
 8003790:	af00      	add	r7, sp, #0
 8003792:	4603      	mov	r3, r0
 8003794:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003796:	bf00      	nop
 8003798:	370c      	adds	r7, #12
 800379a:	46bd      	mov	sp, r7
 800379c:	bc80      	pop	{r7}
 800379e:	4770      	bx	lr

080037a0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b086      	sub	sp, #24
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d101      	bne.n	80037b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80037ae:	2301      	movs	r3, #1
 80037b0:	e272      	b.n	8003c98 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f003 0301 	and.w	r3, r3, #1
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	f000 8087 	beq.w	80038ce <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80037c0:	4b92      	ldr	r3, [pc, #584]	; (8003a0c <HAL_RCC_OscConfig+0x26c>)
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	f003 030c 	and.w	r3, r3, #12
 80037c8:	2b04      	cmp	r3, #4
 80037ca:	d00c      	beq.n	80037e6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80037cc:	4b8f      	ldr	r3, [pc, #572]	; (8003a0c <HAL_RCC_OscConfig+0x26c>)
 80037ce:	685b      	ldr	r3, [r3, #4]
 80037d0:	f003 030c 	and.w	r3, r3, #12
 80037d4:	2b08      	cmp	r3, #8
 80037d6:	d112      	bne.n	80037fe <HAL_RCC_OscConfig+0x5e>
 80037d8:	4b8c      	ldr	r3, [pc, #560]	; (8003a0c <HAL_RCC_OscConfig+0x26c>)
 80037da:	685b      	ldr	r3, [r3, #4]
 80037dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037e4:	d10b      	bne.n	80037fe <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037e6:	4b89      	ldr	r3, [pc, #548]	; (8003a0c <HAL_RCC_OscConfig+0x26c>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d06c      	beq.n	80038cc <HAL_RCC_OscConfig+0x12c>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	685b      	ldr	r3, [r3, #4]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d168      	bne.n	80038cc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80037fa:	2301      	movs	r3, #1
 80037fc:	e24c      	b.n	8003c98 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	685b      	ldr	r3, [r3, #4]
 8003802:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003806:	d106      	bne.n	8003816 <HAL_RCC_OscConfig+0x76>
 8003808:	4b80      	ldr	r3, [pc, #512]	; (8003a0c <HAL_RCC_OscConfig+0x26c>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	4a7f      	ldr	r2, [pc, #508]	; (8003a0c <HAL_RCC_OscConfig+0x26c>)
 800380e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003812:	6013      	str	r3, [r2, #0]
 8003814:	e02e      	b.n	8003874 <HAL_RCC_OscConfig+0xd4>
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	685b      	ldr	r3, [r3, #4]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d10c      	bne.n	8003838 <HAL_RCC_OscConfig+0x98>
 800381e:	4b7b      	ldr	r3, [pc, #492]	; (8003a0c <HAL_RCC_OscConfig+0x26c>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4a7a      	ldr	r2, [pc, #488]	; (8003a0c <HAL_RCC_OscConfig+0x26c>)
 8003824:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003828:	6013      	str	r3, [r2, #0]
 800382a:	4b78      	ldr	r3, [pc, #480]	; (8003a0c <HAL_RCC_OscConfig+0x26c>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	4a77      	ldr	r2, [pc, #476]	; (8003a0c <HAL_RCC_OscConfig+0x26c>)
 8003830:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003834:	6013      	str	r3, [r2, #0]
 8003836:	e01d      	b.n	8003874 <HAL_RCC_OscConfig+0xd4>
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003840:	d10c      	bne.n	800385c <HAL_RCC_OscConfig+0xbc>
 8003842:	4b72      	ldr	r3, [pc, #456]	; (8003a0c <HAL_RCC_OscConfig+0x26c>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4a71      	ldr	r2, [pc, #452]	; (8003a0c <HAL_RCC_OscConfig+0x26c>)
 8003848:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800384c:	6013      	str	r3, [r2, #0]
 800384e:	4b6f      	ldr	r3, [pc, #444]	; (8003a0c <HAL_RCC_OscConfig+0x26c>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	4a6e      	ldr	r2, [pc, #440]	; (8003a0c <HAL_RCC_OscConfig+0x26c>)
 8003854:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003858:	6013      	str	r3, [r2, #0]
 800385a:	e00b      	b.n	8003874 <HAL_RCC_OscConfig+0xd4>
 800385c:	4b6b      	ldr	r3, [pc, #428]	; (8003a0c <HAL_RCC_OscConfig+0x26c>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	4a6a      	ldr	r2, [pc, #424]	; (8003a0c <HAL_RCC_OscConfig+0x26c>)
 8003862:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003866:	6013      	str	r3, [r2, #0]
 8003868:	4b68      	ldr	r3, [pc, #416]	; (8003a0c <HAL_RCC_OscConfig+0x26c>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4a67      	ldr	r2, [pc, #412]	; (8003a0c <HAL_RCC_OscConfig+0x26c>)
 800386e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003872:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	685b      	ldr	r3, [r3, #4]
 8003878:	2b00      	cmp	r3, #0
 800387a:	d013      	beq.n	80038a4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800387c:	f7fe ff84 	bl	8002788 <HAL_GetTick>
 8003880:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003882:	e008      	b.n	8003896 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003884:	f7fe ff80 	bl	8002788 <HAL_GetTick>
 8003888:	4602      	mov	r2, r0
 800388a:	693b      	ldr	r3, [r7, #16]
 800388c:	1ad3      	subs	r3, r2, r3
 800388e:	2b64      	cmp	r3, #100	; 0x64
 8003890:	d901      	bls.n	8003896 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003892:	2303      	movs	r3, #3
 8003894:	e200      	b.n	8003c98 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003896:	4b5d      	ldr	r3, [pc, #372]	; (8003a0c <HAL_RCC_OscConfig+0x26c>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d0f0      	beq.n	8003884 <HAL_RCC_OscConfig+0xe4>
 80038a2:	e014      	b.n	80038ce <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038a4:	f7fe ff70 	bl	8002788 <HAL_GetTick>
 80038a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038aa:	e008      	b.n	80038be <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80038ac:	f7fe ff6c 	bl	8002788 <HAL_GetTick>
 80038b0:	4602      	mov	r2, r0
 80038b2:	693b      	ldr	r3, [r7, #16]
 80038b4:	1ad3      	subs	r3, r2, r3
 80038b6:	2b64      	cmp	r3, #100	; 0x64
 80038b8:	d901      	bls.n	80038be <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80038ba:	2303      	movs	r3, #3
 80038bc:	e1ec      	b.n	8003c98 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038be:	4b53      	ldr	r3, [pc, #332]	; (8003a0c <HAL_RCC_OscConfig+0x26c>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d1f0      	bne.n	80038ac <HAL_RCC_OscConfig+0x10c>
 80038ca:	e000      	b.n	80038ce <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f003 0302 	and.w	r3, r3, #2
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d063      	beq.n	80039a2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80038da:	4b4c      	ldr	r3, [pc, #304]	; (8003a0c <HAL_RCC_OscConfig+0x26c>)
 80038dc:	685b      	ldr	r3, [r3, #4]
 80038de:	f003 030c 	and.w	r3, r3, #12
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d00b      	beq.n	80038fe <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80038e6:	4b49      	ldr	r3, [pc, #292]	; (8003a0c <HAL_RCC_OscConfig+0x26c>)
 80038e8:	685b      	ldr	r3, [r3, #4]
 80038ea:	f003 030c 	and.w	r3, r3, #12
 80038ee:	2b08      	cmp	r3, #8
 80038f0:	d11c      	bne.n	800392c <HAL_RCC_OscConfig+0x18c>
 80038f2:	4b46      	ldr	r3, [pc, #280]	; (8003a0c <HAL_RCC_OscConfig+0x26c>)
 80038f4:	685b      	ldr	r3, [r3, #4]
 80038f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d116      	bne.n	800392c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038fe:	4b43      	ldr	r3, [pc, #268]	; (8003a0c <HAL_RCC_OscConfig+0x26c>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f003 0302 	and.w	r3, r3, #2
 8003906:	2b00      	cmp	r3, #0
 8003908:	d005      	beq.n	8003916 <HAL_RCC_OscConfig+0x176>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	691b      	ldr	r3, [r3, #16]
 800390e:	2b01      	cmp	r3, #1
 8003910:	d001      	beq.n	8003916 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003912:	2301      	movs	r3, #1
 8003914:	e1c0      	b.n	8003c98 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003916:	4b3d      	ldr	r3, [pc, #244]	; (8003a0c <HAL_RCC_OscConfig+0x26c>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	695b      	ldr	r3, [r3, #20]
 8003922:	00db      	lsls	r3, r3, #3
 8003924:	4939      	ldr	r1, [pc, #228]	; (8003a0c <HAL_RCC_OscConfig+0x26c>)
 8003926:	4313      	orrs	r3, r2
 8003928:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800392a:	e03a      	b.n	80039a2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	691b      	ldr	r3, [r3, #16]
 8003930:	2b00      	cmp	r3, #0
 8003932:	d020      	beq.n	8003976 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003934:	4b36      	ldr	r3, [pc, #216]	; (8003a10 <HAL_RCC_OscConfig+0x270>)
 8003936:	2201      	movs	r2, #1
 8003938:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800393a:	f7fe ff25 	bl	8002788 <HAL_GetTick>
 800393e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003940:	e008      	b.n	8003954 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003942:	f7fe ff21 	bl	8002788 <HAL_GetTick>
 8003946:	4602      	mov	r2, r0
 8003948:	693b      	ldr	r3, [r7, #16]
 800394a:	1ad3      	subs	r3, r2, r3
 800394c:	2b02      	cmp	r3, #2
 800394e:	d901      	bls.n	8003954 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003950:	2303      	movs	r3, #3
 8003952:	e1a1      	b.n	8003c98 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003954:	4b2d      	ldr	r3, [pc, #180]	; (8003a0c <HAL_RCC_OscConfig+0x26c>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f003 0302 	and.w	r3, r3, #2
 800395c:	2b00      	cmp	r3, #0
 800395e:	d0f0      	beq.n	8003942 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003960:	4b2a      	ldr	r3, [pc, #168]	; (8003a0c <HAL_RCC_OscConfig+0x26c>)
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	695b      	ldr	r3, [r3, #20]
 800396c:	00db      	lsls	r3, r3, #3
 800396e:	4927      	ldr	r1, [pc, #156]	; (8003a0c <HAL_RCC_OscConfig+0x26c>)
 8003970:	4313      	orrs	r3, r2
 8003972:	600b      	str	r3, [r1, #0]
 8003974:	e015      	b.n	80039a2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003976:	4b26      	ldr	r3, [pc, #152]	; (8003a10 <HAL_RCC_OscConfig+0x270>)
 8003978:	2200      	movs	r2, #0
 800397a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800397c:	f7fe ff04 	bl	8002788 <HAL_GetTick>
 8003980:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003982:	e008      	b.n	8003996 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003984:	f7fe ff00 	bl	8002788 <HAL_GetTick>
 8003988:	4602      	mov	r2, r0
 800398a:	693b      	ldr	r3, [r7, #16]
 800398c:	1ad3      	subs	r3, r2, r3
 800398e:	2b02      	cmp	r3, #2
 8003990:	d901      	bls.n	8003996 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003992:	2303      	movs	r3, #3
 8003994:	e180      	b.n	8003c98 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003996:	4b1d      	ldr	r3, [pc, #116]	; (8003a0c <HAL_RCC_OscConfig+0x26c>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f003 0302 	and.w	r3, r3, #2
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d1f0      	bne.n	8003984 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f003 0308 	and.w	r3, r3, #8
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d03a      	beq.n	8003a24 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	699b      	ldr	r3, [r3, #24]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d019      	beq.n	80039ea <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80039b6:	4b17      	ldr	r3, [pc, #92]	; (8003a14 <HAL_RCC_OscConfig+0x274>)
 80039b8:	2201      	movs	r2, #1
 80039ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039bc:	f7fe fee4 	bl	8002788 <HAL_GetTick>
 80039c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80039c2:	e008      	b.n	80039d6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80039c4:	f7fe fee0 	bl	8002788 <HAL_GetTick>
 80039c8:	4602      	mov	r2, r0
 80039ca:	693b      	ldr	r3, [r7, #16]
 80039cc:	1ad3      	subs	r3, r2, r3
 80039ce:	2b02      	cmp	r3, #2
 80039d0:	d901      	bls.n	80039d6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80039d2:	2303      	movs	r3, #3
 80039d4:	e160      	b.n	8003c98 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80039d6:	4b0d      	ldr	r3, [pc, #52]	; (8003a0c <HAL_RCC_OscConfig+0x26c>)
 80039d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039da:	f003 0302 	and.w	r3, r3, #2
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d0f0      	beq.n	80039c4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80039e2:	2001      	movs	r0, #1
 80039e4:	f000 fac4 	bl	8003f70 <RCC_Delay>
 80039e8:	e01c      	b.n	8003a24 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80039ea:	4b0a      	ldr	r3, [pc, #40]	; (8003a14 <HAL_RCC_OscConfig+0x274>)
 80039ec:	2200      	movs	r2, #0
 80039ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039f0:	f7fe feca 	bl	8002788 <HAL_GetTick>
 80039f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039f6:	e00f      	b.n	8003a18 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80039f8:	f7fe fec6 	bl	8002788 <HAL_GetTick>
 80039fc:	4602      	mov	r2, r0
 80039fe:	693b      	ldr	r3, [r7, #16]
 8003a00:	1ad3      	subs	r3, r2, r3
 8003a02:	2b02      	cmp	r3, #2
 8003a04:	d908      	bls.n	8003a18 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003a06:	2303      	movs	r3, #3
 8003a08:	e146      	b.n	8003c98 <HAL_RCC_OscConfig+0x4f8>
 8003a0a:	bf00      	nop
 8003a0c:	40021000 	.word	0x40021000
 8003a10:	42420000 	.word	0x42420000
 8003a14:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a18:	4b92      	ldr	r3, [pc, #584]	; (8003c64 <HAL_RCC_OscConfig+0x4c4>)
 8003a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a1c:	f003 0302 	and.w	r3, r3, #2
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d1e9      	bne.n	80039f8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f003 0304 	and.w	r3, r3, #4
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	f000 80a6 	beq.w	8003b7e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a32:	2300      	movs	r3, #0
 8003a34:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a36:	4b8b      	ldr	r3, [pc, #556]	; (8003c64 <HAL_RCC_OscConfig+0x4c4>)
 8003a38:	69db      	ldr	r3, [r3, #28]
 8003a3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d10d      	bne.n	8003a5e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a42:	4b88      	ldr	r3, [pc, #544]	; (8003c64 <HAL_RCC_OscConfig+0x4c4>)
 8003a44:	69db      	ldr	r3, [r3, #28]
 8003a46:	4a87      	ldr	r2, [pc, #540]	; (8003c64 <HAL_RCC_OscConfig+0x4c4>)
 8003a48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a4c:	61d3      	str	r3, [r2, #28]
 8003a4e:	4b85      	ldr	r3, [pc, #532]	; (8003c64 <HAL_RCC_OscConfig+0x4c4>)
 8003a50:	69db      	ldr	r3, [r3, #28]
 8003a52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a56:	60bb      	str	r3, [r7, #8]
 8003a58:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a5e:	4b82      	ldr	r3, [pc, #520]	; (8003c68 <HAL_RCC_OscConfig+0x4c8>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d118      	bne.n	8003a9c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a6a:	4b7f      	ldr	r3, [pc, #508]	; (8003c68 <HAL_RCC_OscConfig+0x4c8>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	4a7e      	ldr	r2, [pc, #504]	; (8003c68 <HAL_RCC_OscConfig+0x4c8>)
 8003a70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a74:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a76:	f7fe fe87 	bl	8002788 <HAL_GetTick>
 8003a7a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a7c:	e008      	b.n	8003a90 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a7e:	f7fe fe83 	bl	8002788 <HAL_GetTick>
 8003a82:	4602      	mov	r2, r0
 8003a84:	693b      	ldr	r3, [r7, #16]
 8003a86:	1ad3      	subs	r3, r2, r3
 8003a88:	2b64      	cmp	r3, #100	; 0x64
 8003a8a:	d901      	bls.n	8003a90 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003a8c:	2303      	movs	r3, #3
 8003a8e:	e103      	b.n	8003c98 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a90:	4b75      	ldr	r3, [pc, #468]	; (8003c68 <HAL_RCC_OscConfig+0x4c8>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d0f0      	beq.n	8003a7e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	68db      	ldr	r3, [r3, #12]
 8003aa0:	2b01      	cmp	r3, #1
 8003aa2:	d106      	bne.n	8003ab2 <HAL_RCC_OscConfig+0x312>
 8003aa4:	4b6f      	ldr	r3, [pc, #444]	; (8003c64 <HAL_RCC_OscConfig+0x4c4>)
 8003aa6:	6a1b      	ldr	r3, [r3, #32]
 8003aa8:	4a6e      	ldr	r2, [pc, #440]	; (8003c64 <HAL_RCC_OscConfig+0x4c4>)
 8003aaa:	f043 0301 	orr.w	r3, r3, #1
 8003aae:	6213      	str	r3, [r2, #32]
 8003ab0:	e02d      	b.n	8003b0e <HAL_RCC_OscConfig+0x36e>
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	68db      	ldr	r3, [r3, #12]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d10c      	bne.n	8003ad4 <HAL_RCC_OscConfig+0x334>
 8003aba:	4b6a      	ldr	r3, [pc, #424]	; (8003c64 <HAL_RCC_OscConfig+0x4c4>)
 8003abc:	6a1b      	ldr	r3, [r3, #32]
 8003abe:	4a69      	ldr	r2, [pc, #420]	; (8003c64 <HAL_RCC_OscConfig+0x4c4>)
 8003ac0:	f023 0301 	bic.w	r3, r3, #1
 8003ac4:	6213      	str	r3, [r2, #32]
 8003ac6:	4b67      	ldr	r3, [pc, #412]	; (8003c64 <HAL_RCC_OscConfig+0x4c4>)
 8003ac8:	6a1b      	ldr	r3, [r3, #32]
 8003aca:	4a66      	ldr	r2, [pc, #408]	; (8003c64 <HAL_RCC_OscConfig+0x4c4>)
 8003acc:	f023 0304 	bic.w	r3, r3, #4
 8003ad0:	6213      	str	r3, [r2, #32]
 8003ad2:	e01c      	b.n	8003b0e <HAL_RCC_OscConfig+0x36e>
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	68db      	ldr	r3, [r3, #12]
 8003ad8:	2b05      	cmp	r3, #5
 8003ada:	d10c      	bne.n	8003af6 <HAL_RCC_OscConfig+0x356>
 8003adc:	4b61      	ldr	r3, [pc, #388]	; (8003c64 <HAL_RCC_OscConfig+0x4c4>)
 8003ade:	6a1b      	ldr	r3, [r3, #32]
 8003ae0:	4a60      	ldr	r2, [pc, #384]	; (8003c64 <HAL_RCC_OscConfig+0x4c4>)
 8003ae2:	f043 0304 	orr.w	r3, r3, #4
 8003ae6:	6213      	str	r3, [r2, #32]
 8003ae8:	4b5e      	ldr	r3, [pc, #376]	; (8003c64 <HAL_RCC_OscConfig+0x4c4>)
 8003aea:	6a1b      	ldr	r3, [r3, #32]
 8003aec:	4a5d      	ldr	r2, [pc, #372]	; (8003c64 <HAL_RCC_OscConfig+0x4c4>)
 8003aee:	f043 0301 	orr.w	r3, r3, #1
 8003af2:	6213      	str	r3, [r2, #32]
 8003af4:	e00b      	b.n	8003b0e <HAL_RCC_OscConfig+0x36e>
 8003af6:	4b5b      	ldr	r3, [pc, #364]	; (8003c64 <HAL_RCC_OscConfig+0x4c4>)
 8003af8:	6a1b      	ldr	r3, [r3, #32]
 8003afa:	4a5a      	ldr	r2, [pc, #360]	; (8003c64 <HAL_RCC_OscConfig+0x4c4>)
 8003afc:	f023 0301 	bic.w	r3, r3, #1
 8003b00:	6213      	str	r3, [r2, #32]
 8003b02:	4b58      	ldr	r3, [pc, #352]	; (8003c64 <HAL_RCC_OscConfig+0x4c4>)
 8003b04:	6a1b      	ldr	r3, [r3, #32]
 8003b06:	4a57      	ldr	r2, [pc, #348]	; (8003c64 <HAL_RCC_OscConfig+0x4c4>)
 8003b08:	f023 0304 	bic.w	r3, r3, #4
 8003b0c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	68db      	ldr	r3, [r3, #12]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d015      	beq.n	8003b42 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b16:	f7fe fe37 	bl	8002788 <HAL_GetTick>
 8003b1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b1c:	e00a      	b.n	8003b34 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b1e:	f7fe fe33 	bl	8002788 <HAL_GetTick>
 8003b22:	4602      	mov	r2, r0
 8003b24:	693b      	ldr	r3, [r7, #16]
 8003b26:	1ad3      	subs	r3, r2, r3
 8003b28:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	d901      	bls.n	8003b34 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003b30:	2303      	movs	r3, #3
 8003b32:	e0b1      	b.n	8003c98 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b34:	4b4b      	ldr	r3, [pc, #300]	; (8003c64 <HAL_RCC_OscConfig+0x4c4>)
 8003b36:	6a1b      	ldr	r3, [r3, #32]
 8003b38:	f003 0302 	and.w	r3, r3, #2
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d0ee      	beq.n	8003b1e <HAL_RCC_OscConfig+0x37e>
 8003b40:	e014      	b.n	8003b6c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b42:	f7fe fe21 	bl	8002788 <HAL_GetTick>
 8003b46:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b48:	e00a      	b.n	8003b60 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b4a:	f7fe fe1d 	bl	8002788 <HAL_GetTick>
 8003b4e:	4602      	mov	r2, r0
 8003b50:	693b      	ldr	r3, [r7, #16]
 8003b52:	1ad3      	subs	r3, r2, r3
 8003b54:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d901      	bls.n	8003b60 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003b5c:	2303      	movs	r3, #3
 8003b5e:	e09b      	b.n	8003c98 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b60:	4b40      	ldr	r3, [pc, #256]	; (8003c64 <HAL_RCC_OscConfig+0x4c4>)
 8003b62:	6a1b      	ldr	r3, [r3, #32]
 8003b64:	f003 0302 	and.w	r3, r3, #2
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d1ee      	bne.n	8003b4a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003b6c:	7dfb      	ldrb	r3, [r7, #23]
 8003b6e:	2b01      	cmp	r3, #1
 8003b70:	d105      	bne.n	8003b7e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b72:	4b3c      	ldr	r3, [pc, #240]	; (8003c64 <HAL_RCC_OscConfig+0x4c4>)
 8003b74:	69db      	ldr	r3, [r3, #28]
 8003b76:	4a3b      	ldr	r2, [pc, #236]	; (8003c64 <HAL_RCC_OscConfig+0x4c4>)
 8003b78:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b7c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	69db      	ldr	r3, [r3, #28]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	f000 8087 	beq.w	8003c96 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003b88:	4b36      	ldr	r3, [pc, #216]	; (8003c64 <HAL_RCC_OscConfig+0x4c4>)
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	f003 030c 	and.w	r3, r3, #12
 8003b90:	2b08      	cmp	r3, #8
 8003b92:	d061      	beq.n	8003c58 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	69db      	ldr	r3, [r3, #28]
 8003b98:	2b02      	cmp	r3, #2
 8003b9a:	d146      	bne.n	8003c2a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b9c:	4b33      	ldr	r3, [pc, #204]	; (8003c6c <HAL_RCC_OscConfig+0x4cc>)
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ba2:	f7fe fdf1 	bl	8002788 <HAL_GetTick>
 8003ba6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ba8:	e008      	b.n	8003bbc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003baa:	f7fe fded 	bl	8002788 <HAL_GetTick>
 8003bae:	4602      	mov	r2, r0
 8003bb0:	693b      	ldr	r3, [r7, #16]
 8003bb2:	1ad3      	subs	r3, r2, r3
 8003bb4:	2b02      	cmp	r3, #2
 8003bb6:	d901      	bls.n	8003bbc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003bb8:	2303      	movs	r3, #3
 8003bba:	e06d      	b.n	8003c98 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003bbc:	4b29      	ldr	r3, [pc, #164]	; (8003c64 <HAL_RCC_OscConfig+0x4c4>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d1f0      	bne.n	8003baa <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6a1b      	ldr	r3, [r3, #32]
 8003bcc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bd0:	d108      	bne.n	8003be4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003bd2:	4b24      	ldr	r3, [pc, #144]	; (8003c64 <HAL_RCC_OscConfig+0x4c4>)
 8003bd4:	685b      	ldr	r3, [r3, #4]
 8003bd6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	689b      	ldr	r3, [r3, #8]
 8003bde:	4921      	ldr	r1, [pc, #132]	; (8003c64 <HAL_RCC_OscConfig+0x4c4>)
 8003be0:	4313      	orrs	r3, r2
 8003be2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003be4:	4b1f      	ldr	r3, [pc, #124]	; (8003c64 <HAL_RCC_OscConfig+0x4c4>)
 8003be6:	685b      	ldr	r3, [r3, #4]
 8003be8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6a19      	ldr	r1, [r3, #32]
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bf4:	430b      	orrs	r3, r1
 8003bf6:	491b      	ldr	r1, [pc, #108]	; (8003c64 <HAL_RCC_OscConfig+0x4c4>)
 8003bf8:	4313      	orrs	r3, r2
 8003bfa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003bfc:	4b1b      	ldr	r3, [pc, #108]	; (8003c6c <HAL_RCC_OscConfig+0x4cc>)
 8003bfe:	2201      	movs	r2, #1
 8003c00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c02:	f7fe fdc1 	bl	8002788 <HAL_GetTick>
 8003c06:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003c08:	e008      	b.n	8003c1c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c0a:	f7fe fdbd 	bl	8002788 <HAL_GetTick>
 8003c0e:	4602      	mov	r2, r0
 8003c10:	693b      	ldr	r3, [r7, #16]
 8003c12:	1ad3      	subs	r3, r2, r3
 8003c14:	2b02      	cmp	r3, #2
 8003c16:	d901      	bls.n	8003c1c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003c18:	2303      	movs	r3, #3
 8003c1a:	e03d      	b.n	8003c98 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003c1c:	4b11      	ldr	r3, [pc, #68]	; (8003c64 <HAL_RCC_OscConfig+0x4c4>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d0f0      	beq.n	8003c0a <HAL_RCC_OscConfig+0x46a>
 8003c28:	e035      	b.n	8003c96 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c2a:	4b10      	ldr	r3, [pc, #64]	; (8003c6c <HAL_RCC_OscConfig+0x4cc>)
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c30:	f7fe fdaa 	bl	8002788 <HAL_GetTick>
 8003c34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c36:	e008      	b.n	8003c4a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c38:	f7fe fda6 	bl	8002788 <HAL_GetTick>
 8003c3c:	4602      	mov	r2, r0
 8003c3e:	693b      	ldr	r3, [r7, #16]
 8003c40:	1ad3      	subs	r3, r2, r3
 8003c42:	2b02      	cmp	r3, #2
 8003c44:	d901      	bls.n	8003c4a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003c46:	2303      	movs	r3, #3
 8003c48:	e026      	b.n	8003c98 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c4a:	4b06      	ldr	r3, [pc, #24]	; (8003c64 <HAL_RCC_OscConfig+0x4c4>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d1f0      	bne.n	8003c38 <HAL_RCC_OscConfig+0x498>
 8003c56:	e01e      	b.n	8003c96 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	69db      	ldr	r3, [r3, #28]
 8003c5c:	2b01      	cmp	r3, #1
 8003c5e:	d107      	bne.n	8003c70 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003c60:	2301      	movs	r3, #1
 8003c62:	e019      	b.n	8003c98 <HAL_RCC_OscConfig+0x4f8>
 8003c64:	40021000 	.word	0x40021000
 8003c68:	40007000 	.word	0x40007000
 8003c6c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003c70:	4b0b      	ldr	r3, [pc, #44]	; (8003ca0 <HAL_RCC_OscConfig+0x500>)
 8003c72:	685b      	ldr	r3, [r3, #4]
 8003c74:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6a1b      	ldr	r3, [r3, #32]
 8003c80:	429a      	cmp	r2, r3
 8003c82:	d106      	bne.n	8003c92 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c8e:	429a      	cmp	r2, r3
 8003c90:	d001      	beq.n	8003c96 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003c92:	2301      	movs	r3, #1
 8003c94:	e000      	b.n	8003c98 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003c96:	2300      	movs	r3, #0
}
 8003c98:	4618      	mov	r0, r3
 8003c9a:	3718      	adds	r7, #24
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	bd80      	pop	{r7, pc}
 8003ca0:	40021000 	.word	0x40021000

08003ca4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b084      	sub	sp, #16
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
 8003cac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d101      	bne.n	8003cb8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003cb4:	2301      	movs	r3, #1
 8003cb6:	e0d0      	b.n	8003e5a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003cb8:	4b6a      	ldr	r3, [pc, #424]	; (8003e64 <HAL_RCC_ClockConfig+0x1c0>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f003 0307 	and.w	r3, r3, #7
 8003cc0:	683a      	ldr	r2, [r7, #0]
 8003cc2:	429a      	cmp	r2, r3
 8003cc4:	d910      	bls.n	8003ce8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cc6:	4b67      	ldr	r3, [pc, #412]	; (8003e64 <HAL_RCC_ClockConfig+0x1c0>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f023 0207 	bic.w	r2, r3, #7
 8003cce:	4965      	ldr	r1, [pc, #404]	; (8003e64 <HAL_RCC_ClockConfig+0x1c0>)
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	4313      	orrs	r3, r2
 8003cd4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cd6:	4b63      	ldr	r3, [pc, #396]	; (8003e64 <HAL_RCC_ClockConfig+0x1c0>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f003 0307 	and.w	r3, r3, #7
 8003cde:	683a      	ldr	r2, [r7, #0]
 8003ce0:	429a      	cmp	r2, r3
 8003ce2:	d001      	beq.n	8003ce8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003ce4:	2301      	movs	r3, #1
 8003ce6:	e0b8      	b.n	8003e5a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f003 0302 	and.w	r3, r3, #2
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d020      	beq.n	8003d36 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f003 0304 	and.w	r3, r3, #4
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d005      	beq.n	8003d0c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003d00:	4b59      	ldr	r3, [pc, #356]	; (8003e68 <HAL_RCC_ClockConfig+0x1c4>)
 8003d02:	685b      	ldr	r3, [r3, #4]
 8003d04:	4a58      	ldr	r2, [pc, #352]	; (8003e68 <HAL_RCC_ClockConfig+0x1c4>)
 8003d06:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003d0a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f003 0308 	and.w	r3, r3, #8
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d005      	beq.n	8003d24 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003d18:	4b53      	ldr	r3, [pc, #332]	; (8003e68 <HAL_RCC_ClockConfig+0x1c4>)
 8003d1a:	685b      	ldr	r3, [r3, #4]
 8003d1c:	4a52      	ldr	r2, [pc, #328]	; (8003e68 <HAL_RCC_ClockConfig+0x1c4>)
 8003d1e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003d22:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d24:	4b50      	ldr	r3, [pc, #320]	; (8003e68 <HAL_RCC_ClockConfig+0x1c4>)
 8003d26:	685b      	ldr	r3, [r3, #4]
 8003d28:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	689b      	ldr	r3, [r3, #8]
 8003d30:	494d      	ldr	r1, [pc, #308]	; (8003e68 <HAL_RCC_ClockConfig+0x1c4>)
 8003d32:	4313      	orrs	r3, r2
 8003d34:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f003 0301 	and.w	r3, r3, #1
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d040      	beq.n	8003dc4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	685b      	ldr	r3, [r3, #4]
 8003d46:	2b01      	cmp	r3, #1
 8003d48:	d107      	bne.n	8003d5a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d4a:	4b47      	ldr	r3, [pc, #284]	; (8003e68 <HAL_RCC_ClockConfig+0x1c4>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d115      	bne.n	8003d82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d56:	2301      	movs	r3, #1
 8003d58:	e07f      	b.n	8003e5a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	685b      	ldr	r3, [r3, #4]
 8003d5e:	2b02      	cmp	r3, #2
 8003d60:	d107      	bne.n	8003d72 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d62:	4b41      	ldr	r3, [pc, #260]	; (8003e68 <HAL_RCC_ClockConfig+0x1c4>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d109      	bne.n	8003d82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d6e:	2301      	movs	r3, #1
 8003d70:	e073      	b.n	8003e5a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d72:	4b3d      	ldr	r3, [pc, #244]	; (8003e68 <HAL_RCC_ClockConfig+0x1c4>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f003 0302 	and.w	r3, r3, #2
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d101      	bne.n	8003d82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d7e:	2301      	movs	r3, #1
 8003d80:	e06b      	b.n	8003e5a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003d82:	4b39      	ldr	r3, [pc, #228]	; (8003e68 <HAL_RCC_ClockConfig+0x1c4>)
 8003d84:	685b      	ldr	r3, [r3, #4]
 8003d86:	f023 0203 	bic.w	r2, r3, #3
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	685b      	ldr	r3, [r3, #4]
 8003d8e:	4936      	ldr	r1, [pc, #216]	; (8003e68 <HAL_RCC_ClockConfig+0x1c4>)
 8003d90:	4313      	orrs	r3, r2
 8003d92:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003d94:	f7fe fcf8 	bl	8002788 <HAL_GetTick>
 8003d98:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d9a:	e00a      	b.n	8003db2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d9c:	f7fe fcf4 	bl	8002788 <HAL_GetTick>
 8003da0:	4602      	mov	r2, r0
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	1ad3      	subs	r3, r2, r3
 8003da6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d901      	bls.n	8003db2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003dae:	2303      	movs	r3, #3
 8003db0:	e053      	b.n	8003e5a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003db2:	4b2d      	ldr	r3, [pc, #180]	; (8003e68 <HAL_RCC_ClockConfig+0x1c4>)
 8003db4:	685b      	ldr	r3, [r3, #4]
 8003db6:	f003 020c 	and.w	r2, r3, #12
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	685b      	ldr	r3, [r3, #4]
 8003dbe:	009b      	lsls	r3, r3, #2
 8003dc0:	429a      	cmp	r2, r3
 8003dc2:	d1eb      	bne.n	8003d9c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003dc4:	4b27      	ldr	r3, [pc, #156]	; (8003e64 <HAL_RCC_ClockConfig+0x1c0>)
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f003 0307 	and.w	r3, r3, #7
 8003dcc:	683a      	ldr	r2, [r7, #0]
 8003dce:	429a      	cmp	r2, r3
 8003dd0:	d210      	bcs.n	8003df4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003dd2:	4b24      	ldr	r3, [pc, #144]	; (8003e64 <HAL_RCC_ClockConfig+0x1c0>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f023 0207 	bic.w	r2, r3, #7
 8003dda:	4922      	ldr	r1, [pc, #136]	; (8003e64 <HAL_RCC_ClockConfig+0x1c0>)
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	4313      	orrs	r3, r2
 8003de0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003de2:	4b20      	ldr	r3, [pc, #128]	; (8003e64 <HAL_RCC_ClockConfig+0x1c0>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f003 0307 	and.w	r3, r3, #7
 8003dea:	683a      	ldr	r2, [r7, #0]
 8003dec:	429a      	cmp	r2, r3
 8003dee:	d001      	beq.n	8003df4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003df0:	2301      	movs	r3, #1
 8003df2:	e032      	b.n	8003e5a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f003 0304 	and.w	r3, r3, #4
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d008      	beq.n	8003e12 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e00:	4b19      	ldr	r3, [pc, #100]	; (8003e68 <HAL_RCC_ClockConfig+0x1c4>)
 8003e02:	685b      	ldr	r3, [r3, #4]
 8003e04:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	68db      	ldr	r3, [r3, #12]
 8003e0c:	4916      	ldr	r1, [pc, #88]	; (8003e68 <HAL_RCC_ClockConfig+0x1c4>)
 8003e0e:	4313      	orrs	r3, r2
 8003e10:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f003 0308 	and.w	r3, r3, #8
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d009      	beq.n	8003e32 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003e1e:	4b12      	ldr	r3, [pc, #72]	; (8003e68 <HAL_RCC_ClockConfig+0x1c4>)
 8003e20:	685b      	ldr	r3, [r3, #4]
 8003e22:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	691b      	ldr	r3, [r3, #16]
 8003e2a:	00db      	lsls	r3, r3, #3
 8003e2c:	490e      	ldr	r1, [pc, #56]	; (8003e68 <HAL_RCC_ClockConfig+0x1c4>)
 8003e2e:	4313      	orrs	r3, r2
 8003e30:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003e32:	f000 f821 	bl	8003e78 <HAL_RCC_GetSysClockFreq>
 8003e36:	4602      	mov	r2, r0
 8003e38:	4b0b      	ldr	r3, [pc, #44]	; (8003e68 <HAL_RCC_ClockConfig+0x1c4>)
 8003e3a:	685b      	ldr	r3, [r3, #4]
 8003e3c:	091b      	lsrs	r3, r3, #4
 8003e3e:	f003 030f 	and.w	r3, r3, #15
 8003e42:	490a      	ldr	r1, [pc, #40]	; (8003e6c <HAL_RCC_ClockConfig+0x1c8>)
 8003e44:	5ccb      	ldrb	r3, [r1, r3]
 8003e46:	fa22 f303 	lsr.w	r3, r2, r3
 8003e4a:	4a09      	ldr	r2, [pc, #36]	; (8003e70 <HAL_RCC_ClockConfig+0x1cc>)
 8003e4c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003e4e:	4b09      	ldr	r3, [pc, #36]	; (8003e74 <HAL_RCC_ClockConfig+0x1d0>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4618      	mov	r0, r3
 8003e54:	f7fe fc56 	bl	8002704 <HAL_InitTick>

  return HAL_OK;
 8003e58:	2300      	movs	r3, #0
}
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	3710      	adds	r7, #16
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	bd80      	pop	{r7, pc}
 8003e62:	bf00      	nop
 8003e64:	40022000 	.word	0x40022000
 8003e68:	40021000 	.word	0x40021000
 8003e6c:	08005db0 	.word	0x08005db0
 8003e70:	2000009c 	.word	0x2000009c
 8003e74:	200000a0 	.word	0x200000a0

08003e78 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e78:	b490      	push	{r4, r7}
 8003e7a:	b08a      	sub	sp, #40	; 0x28
 8003e7c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003e7e:	4b29      	ldr	r3, [pc, #164]	; (8003f24 <HAL_RCC_GetSysClockFreq+0xac>)
 8003e80:	1d3c      	adds	r4, r7, #4
 8003e82:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003e84:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003e88:	f240 2301 	movw	r3, #513	; 0x201
 8003e8c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003e8e:	2300      	movs	r3, #0
 8003e90:	61fb      	str	r3, [r7, #28]
 8003e92:	2300      	movs	r3, #0
 8003e94:	61bb      	str	r3, [r7, #24]
 8003e96:	2300      	movs	r3, #0
 8003e98:	627b      	str	r3, [r7, #36]	; 0x24
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003ea2:	4b21      	ldr	r3, [pc, #132]	; (8003f28 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003ea4:	685b      	ldr	r3, [r3, #4]
 8003ea6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003ea8:	69fb      	ldr	r3, [r7, #28]
 8003eaa:	f003 030c 	and.w	r3, r3, #12
 8003eae:	2b04      	cmp	r3, #4
 8003eb0:	d002      	beq.n	8003eb8 <HAL_RCC_GetSysClockFreq+0x40>
 8003eb2:	2b08      	cmp	r3, #8
 8003eb4:	d003      	beq.n	8003ebe <HAL_RCC_GetSysClockFreq+0x46>
 8003eb6:	e02b      	b.n	8003f10 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003eb8:	4b1c      	ldr	r3, [pc, #112]	; (8003f2c <HAL_RCC_GetSysClockFreq+0xb4>)
 8003eba:	623b      	str	r3, [r7, #32]
      break;
 8003ebc:	e02b      	b.n	8003f16 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003ebe:	69fb      	ldr	r3, [r7, #28]
 8003ec0:	0c9b      	lsrs	r3, r3, #18
 8003ec2:	f003 030f 	and.w	r3, r3, #15
 8003ec6:	3328      	adds	r3, #40	; 0x28
 8003ec8:	443b      	add	r3, r7
 8003eca:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003ece:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003ed0:	69fb      	ldr	r3, [r7, #28]
 8003ed2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d012      	beq.n	8003f00 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003eda:	4b13      	ldr	r3, [pc, #76]	; (8003f28 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003edc:	685b      	ldr	r3, [r3, #4]
 8003ede:	0c5b      	lsrs	r3, r3, #17
 8003ee0:	f003 0301 	and.w	r3, r3, #1
 8003ee4:	3328      	adds	r3, #40	; 0x28
 8003ee6:	443b      	add	r3, r7
 8003ee8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003eec:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003eee:	697b      	ldr	r3, [r7, #20]
 8003ef0:	4a0e      	ldr	r2, [pc, #56]	; (8003f2c <HAL_RCC_GetSysClockFreq+0xb4>)
 8003ef2:	fb03 f202 	mul.w	r2, r3, r2
 8003ef6:	69bb      	ldr	r3, [r7, #24]
 8003ef8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003efc:	627b      	str	r3, [r7, #36]	; 0x24
 8003efe:	e004      	b.n	8003f0a <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003f00:	697b      	ldr	r3, [r7, #20]
 8003f02:	4a0b      	ldr	r2, [pc, #44]	; (8003f30 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003f04:	fb02 f303 	mul.w	r3, r2, r3
 8003f08:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f0c:	623b      	str	r3, [r7, #32]
      break;
 8003f0e:	e002      	b.n	8003f16 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003f10:	4b06      	ldr	r3, [pc, #24]	; (8003f2c <HAL_RCC_GetSysClockFreq+0xb4>)
 8003f12:	623b      	str	r3, [r7, #32]
      break;
 8003f14:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003f16:	6a3b      	ldr	r3, [r7, #32]
}
 8003f18:	4618      	mov	r0, r3
 8003f1a:	3728      	adds	r7, #40	; 0x28
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	bc90      	pop	{r4, r7}
 8003f20:	4770      	bx	lr
 8003f22:	bf00      	nop
 8003f24:	080052a8 	.word	0x080052a8
 8003f28:	40021000 	.word	0x40021000
 8003f2c:	007a1200 	.word	0x007a1200
 8003f30:	003d0900 	.word	0x003d0900

08003f34 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003f34:	b480      	push	{r7}
 8003f36:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003f38:	4b02      	ldr	r3, [pc, #8]	; (8003f44 <HAL_RCC_GetHCLKFreq+0x10>)
 8003f3a:	681b      	ldr	r3, [r3, #0]
}
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	bc80      	pop	{r7}
 8003f42:	4770      	bx	lr
 8003f44:	2000009c 	.word	0x2000009c

08003f48 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003f4c:	f7ff fff2 	bl	8003f34 <HAL_RCC_GetHCLKFreq>
 8003f50:	4602      	mov	r2, r0
 8003f52:	4b05      	ldr	r3, [pc, #20]	; (8003f68 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003f54:	685b      	ldr	r3, [r3, #4]
 8003f56:	0adb      	lsrs	r3, r3, #11
 8003f58:	f003 0307 	and.w	r3, r3, #7
 8003f5c:	4903      	ldr	r1, [pc, #12]	; (8003f6c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003f5e:	5ccb      	ldrb	r3, [r1, r3]
 8003f60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f64:	4618      	mov	r0, r3
 8003f66:	bd80      	pop	{r7, pc}
 8003f68:	40021000 	.word	0x40021000
 8003f6c:	08005dc0 	.word	0x08005dc0

08003f70 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003f70:	b480      	push	{r7}
 8003f72:	b085      	sub	sp, #20
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003f78:	4b0a      	ldr	r3, [pc, #40]	; (8003fa4 <RCC_Delay+0x34>)
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	4a0a      	ldr	r2, [pc, #40]	; (8003fa8 <RCC_Delay+0x38>)
 8003f7e:	fba2 2303 	umull	r2, r3, r2, r3
 8003f82:	0a5b      	lsrs	r3, r3, #9
 8003f84:	687a      	ldr	r2, [r7, #4]
 8003f86:	fb02 f303 	mul.w	r3, r2, r3
 8003f8a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003f8c:	bf00      	nop
  }
  while (Delay --);
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	1e5a      	subs	r2, r3, #1
 8003f92:	60fa      	str	r2, [r7, #12]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d1f9      	bne.n	8003f8c <RCC_Delay+0x1c>
}
 8003f98:	bf00      	nop
 8003f9a:	bf00      	nop
 8003f9c:	3714      	adds	r7, #20
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	bc80      	pop	{r7}
 8003fa2:	4770      	bx	lr
 8003fa4:	2000009c 	.word	0x2000009c
 8003fa8:	10624dd3 	.word	0x10624dd3

08003fac <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b086      	sub	sp, #24
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	613b      	str	r3, [r7, #16]
 8003fb8:	2300      	movs	r3, #0
 8003fba:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f003 0301 	and.w	r3, r3, #1
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d07d      	beq.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003fc8:	2300      	movs	r3, #0
 8003fca:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003fcc:	4b4f      	ldr	r3, [pc, #316]	; (800410c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003fce:	69db      	ldr	r3, [r3, #28]
 8003fd0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d10d      	bne.n	8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003fd8:	4b4c      	ldr	r3, [pc, #304]	; (800410c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003fda:	69db      	ldr	r3, [r3, #28]
 8003fdc:	4a4b      	ldr	r2, [pc, #300]	; (800410c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003fde:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fe2:	61d3      	str	r3, [r2, #28]
 8003fe4:	4b49      	ldr	r3, [pc, #292]	; (800410c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003fe6:	69db      	ldr	r3, [r3, #28]
 8003fe8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fec:	60bb      	str	r3, [r7, #8]
 8003fee:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ff0:	2301      	movs	r3, #1
 8003ff2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ff4:	4b46      	ldr	r3, [pc, #280]	; (8004110 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d118      	bne.n	8004032 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004000:	4b43      	ldr	r3, [pc, #268]	; (8004110 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	4a42      	ldr	r2, [pc, #264]	; (8004110 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004006:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800400a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800400c:	f7fe fbbc 	bl	8002788 <HAL_GetTick>
 8004010:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004012:	e008      	b.n	8004026 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004014:	f7fe fbb8 	bl	8002788 <HAL_GetTick>
 8004018:	4602      	mov	r2, r0
 800401a:	693b      	ldr	r3, [r7, #16]
 800401c:	1ad3      	subs	r3, r2, r3
 800401e:	2b64      	cmp	r3, #100	; 0x64
 8004020:	d901      	bls.n	8004026 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004022:	2303      	movs	r3, #3
 8004024:	e06d      	b.n	8004102 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004026:	4b3a      	ldr	r3, [pc, #232]	; (8004110 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800402e:	2b00      	cmp	r3, #0
 8004030:	d0f0      	beq.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004032:	4b36      	ldr	r3, [pc, #216]	; (800410c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004034:	6a1b      	ldr	r3, [r3, #32]
 8004036:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800403a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d02e      	beq.n	80040a0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	685b      	ldr	r3, [r3, #4]
 8004046:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800404a:	68fa      	ldr	r2, [r7, #12]
 800404c:	429a      	cmp	r2, r3
 800404e:	d027      	beq.n	80040a0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004050:	4b2e      	ldr	r3, [pc, #184]	; (800410c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004052:	6a1b      	ldr	r3, [r3, #32]
 8004054:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004058:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800405a:	4b2e      	ldr	r3, [pc, #184]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800405c:	2201      	movs	r2, #1
 800405e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004060:	4b2c      	ldr	r3, [pc, #176]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004062:	2200      	movs	r2, #0
 8004064:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004066:	4a29      	ldr	r2, [pc, #164]	; (800410c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	f003 0301 	and.w	r3, r3, #1
 8004072:	2b00      	cmp	r3, #0
 8004074:	d014      	beq.n	80040a0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004076:	f7fe fb87 	bl	8002788 <HAL_GetTick>
 800407a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800407c:	e00a      	b.n	8004094 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800407e:	f7fe fb83 	bl	8002788 <HAL_GetTick>
 8004082:	4602      	mov	r2, r0
 8004084:	693b      	ldr	r3, [r7, #16]
 8004086:	1ad3      	subs	r3, r2, r3
 8004088:	f241 3288 	movw	r2, #5000	; 0x1388
 800408c:	4293      	cmp	r3, r2
 800408e:	d901      	bls.n	8004094 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004090:	2303      	movs	r3, #3
 8004092:	e036      	b.n	8004102 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004094:	4b1d      	ldr	r3, [pc, #116]	; (800410c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004096:	6a1b      	ldr	r3, [r3, #32]
 8004098:	f003 0302 	and.w	r3, r3, #2
 800409c:	2b00      	cmp	r3, #0
 800409e:	d0ee      	beq.n	800407e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80040a0:	4b1a      	ldr	r3, [pc, #104]	; (800410c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040a2:	6a1b      	ldr	r3, [r3, #32]
 80040a4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	685b      	ldr	r3, [r3, #4]
 80040ac:	4917      	ldr	r1, [pc, #92]	; (800410c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040ae:	4313      	orrs	r3, r2
 80040b0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80040b2:	7dfb      	ldrb	r3, [r7, #23]
 80040b4:	2b01      	cmp	r3, #1
 80040b6:	d105      	bne.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80040b8:	4b14      	ldr	r3, [pc, #80]	; (800410c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040ba:	69db      	ldr	r3, [r3, #28]
 80040bc:	4a13      	ldr	r2, [pc, #76]	; (800410c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80040c2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f003 0302 	and.w	r3, r3, #2
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d008      	beq.n	80040e2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80040d0:	4b0e      	ldr	r3, [pc, #56]	; (800410c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040d2:	685b      	ldr	r3, [r3, #4]
 80040d4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	689b      	ldr	r3, [r3, #8]
 80040dc:	490b      	ldr	r1, [pc, #44]	; (800410c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040de:	4313      	orrs	r3, r2
 80040e0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f003 0310 	and.w	r3, r3, #16
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d008      	beq.n	8004100 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80040ee:	4b07      	ldr	r3, [pc, #28]	; (800410c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040f0:	685b      	ldr	r3, [r3, #4]
 80040f2:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	695b      	ldr	r3, [r3, #20]
 80040fa:	4904      	ldr	r1, [pc, #16]	; (800410c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040fc:	4313      	orrs	r3, r2
 80040fe:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004100:	2300      	movs	r3, #0
}
 8004102:	4618      	mov	r0, r3
 8004104:	3718      	adds	r7, #24
 8004106:	46bd      	mov	sp, r7
 8004108:	bd80      	pop	{r7, pc}
 800410a:	bf00      	nop
 800410c:	40021000 	.word	0x40021000
 8004110:	40007000 	.word	0x40007000
 8004114:	42420440 	.word	0x42420440

08004118 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004118:	b590      	push	{r4, r7, lr}
 800411a:	b08d      	sub	sp, #52	; 0x34
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004120:	4b6a      	ldr	r3, [pc, #424]	; (80042cc <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>)
 8004122:	f107 040c 	add.w	r4, r7, #12
 8004126:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004128:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800412c:	f240 2301 	movw	r3, #513	; 0x201
 8004130:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8004132:	2300      	movs	r3, #0
 8004134:	627b      	str	r3, [r7, #36]	; 0x24
 8004136:	2300      	movs	r3, #0
 8004138:	62fb      	str	r3, [r7, #44]	; 0x2c
 800413a:	2300      	movs	r3, #0
 800413c:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 800413e:	2300      	movs	r3, #0
 8004140:	61fb      	str	r3, [r7, #28]
 8004142:	2300      	movs	r3, #0
 8004144:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	3b01      	subs	r3, #1
 800414a:	2b0f      	cmp	r3, #15
 800414c:	f200 80b4 	bhi.w	80042b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a0>
 8004150:	a201      	add	r2, pc, #4	; (adr r2, 8004158 <HAL_RCCEx_GetPeriphCLKFreq+0x40>)
 8004152:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004156:	bf00      	nop
 8004158:	08004237 	.word	0x08004237
 800415c:	0800429d 	.word	0x0800429d
 8004160:	080042b9 	.word	0x080042b9
 8004164:	08004227 	.word	0x08004227
 8004168:	080042b9 	.word	0x080042b9
 800416c:	080042b9 	.word	0x080042b9
 8004170:	080042b9 	.word	0x080042b9
 8004174:	0800422f 	.word	0x0800422f
 8004178:	080042b9 	.word	0x080042b9
 800417c:	080042b9 	.word	0x080042b9
 8004180:	080042b9 	.word	0x080042b9
 8004184:	080042b9 	.word	0x080042b9
 8004188:	080042b9 	.word	0x080042b9
 800418c:	080042b9 	.word	0x080042b9
 8004190:	080042b9 	.word	0x080042b9
 8004194:	08004199 	.word	0x08004199
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_USB:
    {
      /* Get RCC configuration ------------------------------------------------------*/
      temp_reg = RCC->CFGR;
 8004198:	4b4d      	ldr	r3, [pc, #308]	; (80042d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 800419a:	685b      	ldr	r3, [r3, #4]
 800419c:	61fb      	str	r3, [r7, #28]

      /* Check if PLL is enabled */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 800419e:	4b4c      	ldr	r3, [pc, #304]	; (80042d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	f000 8088 	beq.w	80042bc <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
      {
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80041ac:	69fb      	ldr	r3, [r7, #28]
 80041ae:	0c9b      	lsrs	r3, r3, #18
 80041b0:	f003 030f 	and.w	r3, r3, #15
 80041b4:	3330      	adds	r3, #48	; 0x30
 80041b6:	443b      	add	r3, r7
 80041b8:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80041bc:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80041be:	69fb      	ldr	r3, [r7, #28]
 80041c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d017      	beq.n	80041f8 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        {
#if defined(STM32F105xC) || defined(STM32F107xC) || defined(STM32F100xB)\
 || defined(STM32F100xE)
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80041c8:	4b41      	ldr	r3, [pc, #260]	; (80042d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 80041ca:	685b      	ldr	r3, [r3, #4]
 80041cc:	0c5b      	lsrs	r3, r3, #17
 80041ce:	f003 0301 	and.w	r3, r3, #1
 80041d2:	3330      	adds	r3, #48	; 0x30
 80041d4:	443b      	add	r3, r7
 80041d6:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80041da:	627b      	str	r3, [r7, #36]	; 0x24
          if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
          {
            pllclk = pllclk / 2;
          }
#else
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80041dc:	69fb      	ldr	r3, [r7, #28]
 80041de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d00d      	beq.n	8004202 <HAL_RCCEx_GetPeriphCLKFreq+0xea>
          {
            /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80041e6:	4a3b      	ldr	r2, [pc, #236]	; (80042d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>)
 80041e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ea:	fbb2 f2f3 	udiv	r2, r2, r3
 80041ee:	6a3b      	ldr	r3, [r7, #32]
 80041f0:	fb02 f303 	mul.w	r3, r2, r3
 80041f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80041f6:	e004      	b.n	8004202 <HAL_RCCEx_GetPeriphCLKFreq+0xea>
#endif /* STM32F105xC || STM32F107xC */
        }
        else
        {
          /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80041f8:	6a3b      	ldr	r3, [r7, #32]
 80041fa:	4a37      	ldr	r2, [pc, #220]	; (80042d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>)
 80041fc:	fb02 f303 	mul.w	r3, r2, r3
 8004200:	62fb      	str	r3, [r7, #44]	; 0x2c
          /* Prescaler of 3 selected for USB */
          frequency = (2 * pllclk) / 3;
        }
#else
        /* USBCLK = PLLCLK / USB prescaler */
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8004202:	4b33      	ldr	r3, [pc, #204]	; (80042d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 8004204:	685b      	ldr	r3, [r3, #4]
 8004206:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800420a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800420e:	d102      	bne.n	8004216 <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
        {
          /* No prescaler selected for USB */
          frequency = pllclk;
 8004210:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004212:	62bb      	str	r3, [r7, #40]	; 0x28
          /* Prescaler of 1.5 selected for USB */
          frequency = (pllclk * 2) / 3;
        }
#endif
      }
      break;
 8004214:	e052      	b.n	80042bc <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
          frequency = (pllclk * 2) / 3;
 8004216:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004218:	005b      	lsls	r3, r3, #1
 800421a:	4a30      	ldr	r2, [pc, #192]	; (80042dc <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>)
 800421c:	fba2 2303 	umull	r2, r3, r2, r3
 8004220:	085b      	lsrs	r3, r3, #1
 8004222:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8004224:	e04a      	b.n	80042bc <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
#if defined(STM32F103xE) || defined(STM32F103xG) || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_I2S2:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S2 */
      frequency = HAL_RCC_GetSysClockFreq();
 8004226:	f7ff fe27 	bl	8003e78 <HAL_RCC_GetSysClockFreq>
 800422a:	62b8      	str	r0, [r7, #40]	; 0x28
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 800422c:	e049      	b.n	80042c2 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
    }
    case RCC_PERIPHCLK_I2S3:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S3 */
      frequency = HAL_RCC_GetSysClockFreq();
 800422e:	f7ff fe23 	bl	8003e78 <HAL_RCC_GetSysClockFreq>
 8004232:	62b8      	str	r0, [r7, #40]	; 0x28
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 8004234:	e045      	b.n	80042c2 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
    }
#endif /* STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */
    case RCC_PERIPHCLK_RTC:
    {
      /* Get RCC BDCR configuration ------------------------------------------------------*/
      temp_reg = RCC->BDCR;
 8004236:	4b26      	ldr	r3, [pc, #152]	; (80042d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 8004238:	6a1b      	ldr	r3, [r3, #32]
 800423a:	61fb      	str	r3, [r7, #28]

      /* Check if LSE is ready if RTC clock selection is LSE */
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 800423c:	69fb      	ldr	r3, [r7, #28]
 800423e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004242:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004246:	d108      	bne.n	800425a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
 8004248:	69fb      	ldr	r3, [r7, #28]
 800424a:	f003 0302 	and.w	r3, r3, #2
 800424e:	2b00      	cmp	r3, #0
 8004250:	d003      	beq.n	800425a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      {
        frequency = LSE_VALUE;
 8004252:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004256:	62bb      	str	r3, [r7, #40]	; 0x28
 8004258:	e01f      	b.n	800429a <HAL_RCCEx_GetPeriphCLKFreq+0x182>
      }
      /* Check if LSI is ready if RTC clock selection is LSI */
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800425a:	69fb      	ldr	r3, [r7, #28]
 800425c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004260:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004264:	d109      	bne.n	800427a <HAL_RCCEx_GetPeriphCLKFreq+0x162>
 8004266:	4b1a      	ldr	r3, [pc, #104]	; (80042d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 8004268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800426a:	f003 0302 	and.w	r3, r3, #2
 800426e:	2b00      	cmp	r3, #0
 8004270:	d003      	beq.n	800427a <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      {
        frequency = LSI_VALUE;
 8004272:	f649 4340 	movw	r3, #40000	; 0x9c40
 8004276:	62bb      	str	r3, [r7, #40]	; 0x28
 8004278:	e00f      	b.n	800429a <HAL_RCCEx_GetPeriphCLKFreq+0x182>
      }
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 800427a:	69fb      	ldr	r3, [r7, #28]
 800427c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004280:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004284:	d11c      	bne.n	80042c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
 8004286:	4b12      	ldr	r3, [pc, #72]	; (80042d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800428e:	2b00      	cmp	r3, #0
 8004290:	d016      	beq.n	80042c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
      {
        frequency = HSE_VALUE / 128U;
 8004292:	f24f 4324 	movw	r3, #62500	; 0xf424
 8004296:	62bb      	str	r3, [r7, #40]	; 0x28
      /* Clock not enabled for RTC*/
      else
      {
        /* nothing to do: frequency already initialized to 0U */
      }
      break;
 8004298:	e012      	b.n	80042c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
 800429a:	e011      	b.n	80042c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
    }
    case RCC_PERIPHCLK_ADC:
    {
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800429c:	f7ff fe54 	bl	8003f48 <HAL_RCC_GetPCLK2Freq>
 80042a0:	4602      	mov	r2, r0
 80042a2:	4b0b      	ldr	r3, [pc, #44]	; (80042d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 80042a4:	685b      	ldr	r3, [r3, #4]
 80042a6:	0b9b      	lsrs	r3, r3, #14
 80042a8:	f003 0303 	and.w	r3, r3, #3
 80042ac:	3301      	adds	r3, #1
 80042ae:	005b      	lsls	r3, r3, #1
 80042b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80042b4:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80042b6:	e004      	b.n	80042c2 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
    }
    default:
    {
      break;
 80042b8:	bf00      	nop
 80042ba:	e002      	b.n	80042c2 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
      break;
 80042bc:	bf00      	nop
 80042be:	e000      	b.n	80042c2 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
      break;
 80042c0:	bf00      	nop
    }
  }
  return (frequency);
 80042c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 80042c4:	4618      	mov	r0, r3
 80042c6:	3734      	adds	r7, #52	; 0x34
 80042c8:	46bd      	mov	sp, r7
 80042ca:	bd90      	pop	{r4, r7, pc}
 80042cc:	080052b8 	.word	0x080052b8
 80042d0:	40021000 	.word	0x40021000
 80042d4:	007a1200 	.word	0x007a1200
 80042d8:	003d0900 	.word	0x003d0900
 80042dc:	aaaaaaab 	.word	0xaaaaaaab

080042e0 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FSMC_NORSRAM_TimingTypeDef *Timing,
                                FSMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b084      	sub	sp, #16
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	60f8      	str	r0, [r7, #12]
 80042e8:	60b9      	str	r1, [r7, #8]
 80042ea:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if ((hsram == NULL) || (hsram->Init.BurstAccessMode == FSMC_BURST_ACCESS_MODE_ENABLE))
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d004      	beq.n	80042fc <HAL_SRAM_Init+0x1c>
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	699b      	ldr	r3, [r3, #24]
 80042f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80042fa:	d101      	bne.n	8004300 <HAL_SRAM_Init+0x20>
  {
    return HAL_ERROR;
 80042fc:	2301      	movs	r3, #1
 80042fe:	e038      	b.n	8004372 <HAL_SRAM_Init+0x92>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004306:	b2db      	uxtb	r3, r3
 8004308:	2b00      	cmp	r3, #0
 800430a:	d106      	bne.n	800431a <HAL_SRAM_Init+0x3a>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	2200      	movs	r2, #0
 8004310:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8004314:	68f8      	ldr	r0, [r7, #12]
 8004316:	f7fe f8e1 	bl	80024dc <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FSMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	681a      	ldr	r2, [r3, #0]
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	3308      	adds	r3, #8
 8004322:	4619      	mov	r1, r3
 8004324:	4610      	mov	r0, r2
 8004326:	f000 f9db 	bl	80046e0 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FSMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	6818      	ldr	r0, [r3, #0]
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	689b      	ldr	r3, [r3, #8]
 8004332:	461a      	mov	r2, r3
 8004334:	68b9      	ldr	r1, [r7, #8]
 8004336:	f000 fa3d 	bl	80047b4 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FSMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	6858      	ldr	r0, [r3, #4]
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	689a      	ldr	r2, [r3, #8]
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004346:	6879      	ldr	r1, [r7, #4]
 8004348:	f000 fa68 	bl	800481c <FSMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FSMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	68fa      	ldr	r2, [r7, #12]
 8004352:	6892      	ldr	r2, [r2, #8]
 8004354:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	68fa      	ldr	r2, [r7, #12]
 800435e:	6892      	ldr	r2, [r2, #8]
 8004360:	f041 0101 	orr.w	r1, r1, #1
 8004364:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	2201      	movs	r2, #1
 800436c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8004370:	2300      	movs	r3, #0
}
 8004372:	4618      	mov	r0, r3
 8004374:	3710      	adds	r7, #16
 8004376:	46bd      	mov	sp, r7
 8004378:	bd80      	pop	{r7, pc}

0800437a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800437a:	b580      	push	{r7, lr}
 800437c:	b082      	sub	sp, #8
 800437e:	af00      	add	r7, sp, #0
 8004380:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	2b00      	cmp	r3, #0
 8004386:	d101      	bne.n	800438c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004388:	2301      	movs	r3, #1
 800438a:	e041      	b.n	8004410 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004392:	b2db      	uxtb	r3, r3
 8004394:	2b00      	cmp	r3, #0
 8004396:	d106      	bne.n	80043a6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2200      	movs	r2, #0
 800439c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80043a0:	6878      	ldr	r0, [r7, #4]
 80043a2:	f7fe f839 	bl	8002418 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2202      	movs	r2, #2
 80043aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681a      	ldr	r2, [r3, #0]
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	3304      	adds	r3, #4
 80043b6:	4619      	mov	r1, r3
 80043b8:	4610      	mov	r0, r2
 80043ba:	f000 f8ab 	bl	8004514 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	2201      	movs	r2, #1
 80043c2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	2201      	movs	r2, #1
 80043ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	2201      	movs	r2, #1
 80043d2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	2201      	movs	r2, #1
 80043da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2201      	movs	r2, #1
 80043e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2201      	movs	r2, #1
 80043ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2201      	movs	r2, #1
 80043f2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2201      	movs	r2, #1
 80043fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2201      	movs	r2, #1
 8004402:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	2201      	movs	r2, #1
 800440a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800440e:	2300      	movs	r3, #0
}
 8004410:	4618      	mov	r0, r3
 8004412:	3708      	adds	r7, #8
 8004414:	46bd      	mov	sp, r7
 8004416:	bd80      	pop	{r7, pc}

08004418 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004418:	b480      	push	{r7}
 800441a:	b085      	sub	sp, #20
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004426:	b2db      	uxtb	r3, r3
 8004428:	2b01      	cmp	r3, #1
 800442a:	d001      	beq.n	8004430 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800442c:	2301      	movs	r3, #1
 800442e:	e03c      	b.n	80044aa <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2202      	movs	r2, #2
 8004434:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	4a1d      	ldr	r2, [pc, #116]	; (80044b4 <HAL_TIM_Base_Start+0x9c>)
 800443e:	4293      	cmp	r3, r2
 8004440:	d018      	beq.n	8004474 <HAL_TIM_Base_Start+0x5c>
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	4a1c      	ldr	r2, [pc, #112]	; (80044b8 <HAL_TIM_Base_Start+0xa0>)
 8004448:	4293      	cmp	r3, r2
 800444a:	d013      	beq.n	8004474 <HAL_TIM_Base_Start+0x5c>
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004454:	d00e      	beq.n	8004474 <HAL_TIM_Base_Start+0x5c>
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	4a18      	ldr	r2, [pc, #96]	; (80044bc <HAL_TIM_Base_Start+0xa4>)
 800445c:	4293      	cmp	r3, r2
 800445e:	d009      	beq.n	8004474 <HAL_TIM_Base_Start+0x5c>
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	4a16      	ldr	r2, [pc, #88]	; (80044c0 <HAL_TIM_Base_Start+0xa8>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d004      	beq.n	8004474 <HAL_TIM_Base_Start+0x5c>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	4a15      	ldr	r2, [pc, #84]	; (80044c4 <HAL_TIM_Base_Start+0xac>)
 8004470:	4293      	cmp	r3, r2
 8004472:	d111      	bne.n	8004498 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	689b      	ldr	r3, [r3, #8]
 800447a:	f003 0307 	and.w	r3, r3, #7
 800447e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	2b06      	cmp	r3, #6
 8004484:	d010      	beq.n	80044a8 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	681a      	ldr	r2, [r3, #0]
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f042 0201 	orr.w	r2, r2, #1
 8004494:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004496:	e007      	b.n	80044a8 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	681a      	ldr	r2, [r3, #0]
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f042 0201 	orr.w	r2, r2, #1
 80044a6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80044a8:	2300      	movs	r3, #0
}
 80044aa:	4618      	mov	r0, r3
 80044ac:	3714      	adds	r7, #20
 80044ae:	46bd      	mov	sp, r7
 80044b0:	bc80      	pop	{r7}
 80044b2:	4770      	bx	lr
 80044b4:	40012c00 	.word	0x40012c00
 80044b8:	40013400 	.word	0x40013400
 80044bc:	40000400 	.word	0x40000400
 80044c0:	40000800 	.word	0x40000800
 80044c4:	40000c00 	.word	0x40000c00

080044c8 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 80044c8:	b480      	push	{r7}
 80044ca:	b083      	sub	sp, #12
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	6a1a      	ldr	r2, [r3, #32]
 80044d6:	f241 1311 	movw	r3, #4369	; 0x1111
 80044da:	4013      	ands	r3, r2
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d10f      	bne.n	8004500 <HAL_TIM_Base_Stop+0x38>
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	6a1a      	ldr	r2, [r3, #32]
 80044e6:	f240 4344 	movw	r3, #1092	; 0x444
 80044ea:	4013      	ands	r3, r2
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d107      	bne.n	8004500 <HAL_TIM_Base_Stop+0x38>
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	681a      	ldr	r2, [r3, #0]
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f022 0201 	bic.w	r2, r2, #1
 80044fe:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2201      	movs	r2, #1
 8004504:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8004508:	2300      	movs	r3, #0
}
 800450a:	4618      	mov	r0, r3
 800450c:	370c      	adds	r7, #12
 800450e:	46bd      	mov	sp, r7
 8004510:	bc80      	pop	{r7}
 8004512:	4770      	bx	lr

08004514 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004514:	b480      	push	{r7}
 8004516:	b085      	sub	sp, #20
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
 800451c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	4a33      	ldr	r2, [pc, #204]	; (80045f4 <TIM_Base_SetConfig+0xe0>)
 8004528:	4293      	cmp	r3, r2
 800452a:	d013      	beq.n	8004554 <TIM_Base_SetConfig+0x40>
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	4a32      	ldr	r2, [pc, #200]	; (80045f8 <TIM_Base_SetConfig+0xe4>)
 8004530:	4293      	cmp	r3, r2
 8004532:	d00f      	beq.n	8004554 <TIM_Base_SetConfig+0x40>
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800453a:	d00b      	beq.n	8004554 <TIM_Base_SetConfig+0x40>
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	4a2f      	ldr	r2, [pc, #188]	; (80045fc <TIM_Base_SetConfig+0xe8>)
 8004540:	4293      	cmp	r3, r2
 8004542:	d007      	beq.n	8004554 <TIM_Base_SetConfig+0x40>
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	4a2e      	ldr	r2, [pc, #184]	; (8004600 <TIM_Base_SetConfig+0xec>)
 8004548:	4293      	cmp	r3, r2
 800454a:	d003      	beq.n	8004554 <TIM_Base_SetConfig+0x40>
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	4a2d      	ldr	r2, [pc, #180]	; (8004604 <TIM_Base_SetConfig+0xf0>)
 8004550:	4293      	cmp	r3, r2
 8004552:	d108      	bne.n	8004566 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800455a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	685b      	ldr	r3, [r3, #4]
 8004560:	68fa      	ldr	r2, [r7, #12]
 8004562:	4313      	orrs	r3, r2
 8004564:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	4a22      	ldr	r2, [pc, #136]	; (80045f4 <TIM_Base_SetConfig+0xe0>)
 800456a:	4293      	cmp	r3, r2
 800456c:	d013      	beq.n	8004596 <TIM_Base_SetConfig+0x82>
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	4a21      	ldr	r2, [pc, #132]	; (80045f8 <TIM_Base_SetConfig+0xe4>)
 8004572:	4293      	cmp	r3, r2
 8004574:	d00f      	beq.n	8004596 <TIM_Base_SetConfig+0x82>
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800457c:	d00b      	beq.n	8004596 <TIM_Base_SetConfig+0x82>
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	4a1e      	ldr	r2, [pc, #120]	; (80045fc <TIM_Base_SetConfig+0xe8>)
 8004582:	4293      	cmp	r3, r2
 8004584:	d007      	beq.n	8004596 <TIM_Base_SetConfig+0x82>
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	4a1d      	ldr	r2, [pc, #116]	; (8004600 <TIM_Base_SetConfig+0xec>)
 800458a:	4293      	cmp	r3, r2
 800458c:	d003      	beq.n	8004596 <TIM_Base_SetConfig+0x82>
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	4a1c      	ldr	r2, [pc, #112]	; (8004604 <TIM_Base_SetConfig+0xf0>)
 8004592:	4293      	cmp	r3, r2
 8004594:	d108      	bne.n	80045a8 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800459c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	68db      	ldr	r3, [r3, #12]
 80045a2:	68fa      	ldr	r2, [r7, #12]
 80045a4:	4313      	orrs	r3, r2
 80045a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	695b      	ldr	r3, [r3, #20]
 80045b2:	4313      	orrs	r3, r2
 80045b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	68fa      	ldr	r2, [r7, #12]
 80045ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	689a      	ldr	r2, [r3, #8]
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	681a      	ldr	r2, [r3, #0]
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	4a09      	ldr	r2, [pc, #36]	; (80045f4 <TIM_Base_SetConfig+0xe0>)
 80045d0:	4293      	cmp	r3, r2
 80045d2:	d003      	beq.n	80045dc <TIM_Base_SetConfig+0xc8>
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	4a08      	ldr	r2, [pc, #32]	; (80045f8 <TIM_Base_SetConfig+0xe4>)
 80045d8:	4293      	cmp	r3, r2
 80045da:	d103      	bne.n	80045e4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	691a      	ldr	r2, [r3, #16]
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2201      	movs	r2, #1
 80045e8:	615a      	str	r2, [r3, #20]
}
 80045ea:	bf00      	nop
 80045ec:	3714      	adds	r7, #20
 80045ee:	46bd      	mov	sp, r7
 80045f0:	bc80      	pop	{r7}
 80045f2:	4770      	bx	lr
 80045f4:	40012c00 	.word	0x40012c00
 80045f8:	40013400 	.word	0x40013400
 80045fc:	40000400 	.word	0x40000400
 8004600:	40000800 	.word	0x40000800
 8004604:	40000c00 	.word	0x40000c00

08004608 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004608:	b480      	push	{r7}
 800460a:	b085      	sub	sp, #20
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
 8004610:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004618:	2b01      	cmp	r3, #1
 800461a:	d101      	bne.n	8004620 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800461c:	2302      	movs	r3, #2
 800461e:	e050      	b.n	80046c2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2201      	movs	r2, #1
 8004624:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2202      	movs	r2, #2
 800462c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	685b      	ldr	r3, [r3, #4]
 8004636:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	689b      	ldr	r3, [r3, #8]
 800463e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004646:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	68fa      	ldr	r2, [r7, #12]
 800464e:	4313      	orrs	r3, r2
 8004650:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	68fa      	ldr	r2, [r7, #12]
 8004658:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	4a1b      	ldr	r2, [pc, #108]	; (80046cc <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004660:	4293      	cmp	r3, r2
 8004662:	d018      	beq.n	8004696 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	4a19      	ldr	r2, [pc, #100]	; (80046d0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800466a:	4293      	cmp	r3, r2
 800466c:	d013      	beq.n	8004696 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004676:	d00e      	beq.n	8004696 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	4a15      	ldr	r2, [pc, #84]	; (80046d4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800467e:	4293      	cmp	r3, r2
 8004680:	d009      	beq.n	8004696 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	4a14      	ldr	r2, [pc, #80]	; (80046d8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004688:	4293      	cmp	r3, r2
 800468a:	d004      	beq.n	8004696 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	4a12      	ldr	r2, [pc, #72]	; (80046dc <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004692:	4293      	cmp	r3, r2
 8004694:	d10c      	bne.n	80046b0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004696:	68bb      	ldr	r3, [r7, #8]
 8004698:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800469c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	685b      	ldr	r3, [r3, #4]
 80046a2:	68ba      	ldr	r2, [r7, #8]
 80046a4:	4313      	orrs	r3, r2
 80046a6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	68ba      	ldr	r2, [r7, #8]
 80046ae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2201      	movs	r2, #1
 80046b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2200      	movs	r2, #0
 80046bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80046c0:	2300      	movs	r3, #0
}
 80046c2:	4618      	mov	r0, r3
 80046c4:	3714      	adds	r7, #20
 80046c6:	46bd      	mov	sp, r7
 80046c8:	bc80      	pop	{r7}
 80046ca:	4770      	bx	lr
 80046cc:	40012c00 	.word	0x40012c00
 80046d0:	40013400 	.word	0x40013400
 80046d4:	40000400 	.word	0x40000400
 80046d8:	40000800 	.word	0x40000800
 80046dc:	40000c00 	.word	0x40000c00

080046e0 <FSMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device,
                                    FSMC_NORSRAM_InitTypeDef *Init)
{
 80046e0:	b480      	push	{r7}
 80046e2:	b087      	sub	sp, #28
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
 80046e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_ASYNWAIT(Init->AsynchronousWait));
  assert_param(IS_FSMC_WRITE_BURST(Init->WriteBurst));
  assert_param(IS_FSMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	681a      	ldr	r2, [r3, #0]
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80046f4:	683a      	ldr	r2, [r7, #0]
 80046f6:	6812      	ldr	r2, [r2, #0]
 80046f8:	f023 0101 	bic.w	r1, r3, #1
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	689b      	ldr	r3, [r3, #8]
 8004706:	2b08      	cmp	r3, #8
 8004708:	d102      	bne.n	8004710 <FSMC_NORSRAM_Init+0x30>
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 800470a:	2340      	movs	r3, #64	; 0x40
 800470c:	617b      	str	r3, [r7, #20]
 800470e:	e001      	b.n	8004714 <FSMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_DISABLE;
 8004710:	2300      	movs	r3, #0
 8004712:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 8004718:	697b      	ldr	r3, [r7, #20]
 800471a:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 8004720:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 8004726:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 800472c:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 8004732:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalPolarity      | \
 8004738:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	6a1b      	ldr	r3, [r3, #32]
              Init->WaitSignalActive        | \
 800473e:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WriteOperation          | \
 8004744:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->WaitSignal              | \
 800474a:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
              Init->ExtendedMode            | \
 8004750:	431a      	orrs	r2, r3
              Init->WriteBurst);
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  btcr_reg = (flashaccess                   | \
 8004756:	4313      	orrs	r3, r2
 8004758:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->WrapMode;
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	699b      	ldr	r3, [r3, #24]
 800475e:	693a      	ldr	r2, [r7, #16]
 8004760:	4313      	orrs	r3, r2
 8004762:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->PageSize;
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004768:	693a      	ldr	r2, [r7, #16]
 800476a:	4313      	orrs	r3, r2
 800476c:	613b      	str	r3, [r7, #16]

  mask = (FSMC_BCRx_MBKEN                |
 800476e:	4b10      	ldr	r3, [pc, #64]	; (80047b0 <FSMC_NORSRAM_Init+0xd0>)
 8004770:	60fb      	str	r3, [r7, #12]
          FSMC_BCRx_WAITEN               |
          FSMC_BCRx_EXTMOD               |
          FSMC_BCRx_ASYNCWAIT            |
          FSMC_BCRx_CBURSTRW);

  mask |= FSMC_BCRx_WRAPMOD;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004778:	60fb      	str	r3, [r7, #12]
  mask |= 0x00070000U; /* CPSIZE to be defined in CMSIS file */
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8004780:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	681a      	ldr	r2, [r3, #0]
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	43db      	mvns	r3, r3
 8004790:	ea02 0103 	and.w	r1, r2, r3
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	681a      	ldr	r2, [r3, #0]
 8004798:	693b      	ldr	r3, [r7, #16]
 800479a:	4319      	orrs	r1, r3
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]


  return HAL_OK;
 80047a2:	2300      	movs	r3, #0
}
 80047a4:	4618      	mov	r0, r3
 80047a6:	371c      	adds	r7, #28
 80047a8:	46bd      	mov	sp, r7
 80047aa:	bc80      	pop	{r7}
 80047ac:	4770      	bx	lr
 80047ae:	bf00      	nop
 80047b0:	0008fb7f 	.word	0x0008fb7f

080047b4 <FSMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device,
                                          FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80047b4:	b480      	push	{r7}
 80047b6:	b085      	sub	sp, #20
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	60f8      	str	r0, [r7, #12]
 80047bc:	60b9      	str	r1, [r7, #8]
 80047be:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	1c5a      	adds	r2, r3, #1
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80047ca:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 80047ce:	68bb      	ldr	r3, [r7, #8]
 80047d0:	681a      	ldr	r2, [r3, #0]
 80047d2:	68bb      	ldr	r3, [r7, #8]
 80047d4:	685b      	ldr	r3, [r3, #4]
 80047d6:	011b      	lsls	r3, r3, #4
 80047d8:	431a      	orrs	r2, r3
 80047da:	68bb      	ldr	r3, [r7, #8]
 80047dc:	689b      	ldr	r3, [r3, #8]
 80047de:	021b      	lsls	r3, r3, #8
 80047e0:	431a      	orrs	r2, r3
 80047e2:	68bb      	ldr	r3, [r7, #8]
 80047e4:	68db      	ldr	r3, [r3, #12]
 80047e6:	041b      	lsls	r3, r3, #16
 80047e8:	431a      	orrs	r2, r3
 80047ea:	68bb      	ldr	r3, [r7, #8]
 80047ec:	691b      	ldr	r3, [r3, #16]
 80047ee:	3b01      	subs	r3, #1
 80047f0:	051b      	lsls	r3, r3, #20
 80047f2:	431a      	orrs	r2, r3
 80047f4:	68bb      	ldr	r3, [r7, #8]
 80047f6:	695b      	ldr	r3, [r3, #20]
 80047f8:	3b02      	subs	r3, #2
 80047fa:	061b      	lsls	r3, r3, #24
 80047fc:	431a      	orrs	r2, r3
 80047fe:	68bb      	ldr	r3, [r7, #8]
 8004800:	699b      	ldr	r3, [r3, #24]
 8004802:	4313      	orrs	r3, r2
 8004804:	687a      	ldr	r2, [r7, #4]
 8004806:	3201      	adds	r2, #1
 8004808:	4319      	orrs	r1, r3
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                       ((Timing->BusTurnAroundDuration)  << FSMC_BTRx_BUSTURN_Pos) |
                                                       (((Timing->CLKDivision) - 1U)     << FSMC_BTRx_CLKDIV_Pos)  |
                                                       (((Timing->DataLatency) - 2U)     << FSMC_BTRx_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));

  return HAL_OK;
 8004810:	2300      	movs	r3, #0
}
 8004812:	4618      	mov	r0, r3
 8004814:	3714      	adds	r7, #20
 8004816:	46bd      	mov	sp, r7
 8004818:	bc80      	pop	{r7}
 800481a:	4770      	bx	lr

0800481c <FSMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 800481c:	b480      	push	{r7}
 800481e:	b085      	sub	sp, #20
 8004820:	af00      	add	r7, sp, #0
 8004822:	60f8      	str	r0, [r7, #12]
 8004824:	60b9      	str	r1, [r7, #8]
 8004826:	607a      	str	r2, [r7, #4]
 8004828:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004830:	d11d      	bne.n	800486e <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
#if defined(FSMC_BWTRx_BUSTURN)
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	687a      	ldr	r2, [r7, #4]
 8004836:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800483a:	4b13      	ldr	r3, [pc, #76]	; (8004888 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 800483c:	4013      	ands	r3, r2
 800483e:	68ba      	ldr	r2, [r7, #8]
 8004840:	6811      	ldr	r1, [r2, #0]
 8004842:	68ba      	ldr	r2, [r7, #8]
 8004844:	6852      	ldr	r2, [r2, #4]
 8004846:	0112      	lsls	r2, r2, #4
 8004848:	4311      	orrs	r1, r2
 800484a:	68ba      	ldr	r2, [r7, #8]
 800484c:	6892      	ldr	r2, [r2, #8]
 800484e:	0212      	lsls	r2, r2, #8
 8004850:	4311      	orrs	r1, r2
 8004852:	68ba      	ldr	r2, [r7, #8]
 8004854:	6992      	ldr	r2, [r2, #24]
 8004856:	4311      	orrs	r1, r2
 8004858:	68ba      	ldr	r2, [r7, #8]
 800485a:	68d2      	ldr	r2, [r2, #12]
 800485c:	0412      	lsls	r2, r2, #16
 800485e:	430a      	orrs	r2, r1
 8004860:	ea43 0102 	orr.w	r1, r3, r2
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	687a      	ldr	r2, [r7, #4]
 8004868:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800486c:	e005      	b.n	800487a <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     (((Timing->DataLatency) - 2U)     << FSMC_BWTRx_DATLAT_Pos)));
#endif /* FSMC_BWTRx_BUSTURN */
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	687a      	ldr	r2, [r7, #4]
 8004872:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8004876:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 800487a:	2300      	movs	r3, #0
}
 800487c:	4618      	mov	r0, r3
 800487e:	3714      	adds	r7, #20
 8004880:	46bd      	mov	sp, r7
 8004882:	bc80      	pop	{r7}
 8004884:	4770      	bx	lr
 8004886:	bf00      	nop
 8004888:	cff00000 	.word	0xcff00000

0800488c <__errno>:
 800488c:	4b01      	ldr	r3, [pc, #4]	; (8004894 <__errno+0x8>)
 800488e:	6818      	ldr	r0, [r3, #0]
 8004890:	4770      	bx	lr
 8004892:	bf00      	nop
 8004894:	200000a8 	.word	0x200000a8

08004898 <__libc_init_array>:
 8004898:	b570      	push	{r4, r5, r6, lr}
 800489a:	2600      	movs	r6, #0
 800489c:	4d0c      	ldr	r5, [pc, #48]	; (80048d0 <__libc_init_array+0x38>)
 800489e:	4c0d      	ldr	r4, [pc, #52]	; (80048d4 <__libc_init_array+0x3c>)
 80048a0:	1b64      	subs	r4, r4, r5
 80048a2:	10a4      	asrs	r4, r4, #2
 80048a4:	42a6      	cmp	r6, r4
 80048a6:	d109      	bne.n	80048bc <__libc_init_array+0x24>
 80048a8:	f000 fc9c 	bl	80051e4 <_init>
 80048ac:	2600      	movs	r6, #0
 80048ae:	4d0a      	ldr	r5, [pc, #40]	; (80048d8 <__libc_init_array+0x40>)
 80048b0:	4c0a      	ldr	r4, [pc, #40]	; (80048dc <__libc_init_array+0x44>)
 80048b2:	1b64      	subs	r4, r4, r5
 80048b4:	10a4      	asrs	r4, r4, #2
 80048b6:	42a6      	cmp	r6, r4
 80048b8:	d105      	bne.n	80048c6 <__libc_init_array+0x2e>
 80048ba:	bd70      	pop	{r4, r5, r6, pc}
 80048bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80048c0:	4798      	blx	r3
 80048c2:	3601      	adds	r6, #1
 80048c4:	e7ee      	b.n	80048a4 <__libc_init_array+0xc>
 80048c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80048ca:	4798      	blx	r3
 80048cc:	3601      	adds	r6, #1
 80048ce:	e7f2      	b.n	80048b6 <__libc_init_array+0x1e>
 80048d0:	08005dfc 	.word	0x08005dfc
 80048d4:	08005dfc 	.word	0x08005dfc
 80048d8:	08005dfc 	.word	0x08005dfc
 80048dc:	08005e00 	.word	0x08005e00

080048e0 <memset>:
 80048e0:	4603      	mov	r3, r0
 80048e2:	4402      	add	r2, r0
 80048e4:	4293      	cmp	r3, r2
 80048e6:	d100      	bne.n	80048ea <memset+0xa>
 80048e8:	4770      	bx	lr
 80048ea:	f803 1b01 	strb.w	r1, [r3], #1
 80048ee:	e7f9      	b.n	80048e4 <memset+0x4>

080048f0 <siprintf>:
 80048f0:	b40e      	push	{r1, r2, r3}
 80048f2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80048f6:	b500      	push	{lr}
 80048f8:	b09c      	sub	sp, #112	; 0x70
 80048fa:	ab1d      	add	r3, sp, #116	; 0x74
 80048fc:	9002      	str	r0, [sp, #8]
 80048fe:	9006      	str	r0, [sp, #24]
 8004900:	9107      	str	r1, [sp, #28]
 8004902:	9104      	str	r1, [sp, #16]
 8004904:	4808      	ldr	r0, [pc, #32]	; (8004928 <siprintf+0x38>)
 8004906:	4909      	ldr	r1, [pc, #36]	; (800492c <siprintf+0x3c>)
 8004908:	f853 2b04 	ldr.w	r2, [r3], #4
 800490c:	9105      	str	r1, [sp, #20]
 800490e:	6800      	ldr	r0, [r0, #0]
 8004910:	a902      	add	r1, sp, #8
 8004912:	9301      	str	r3, [sp, #4]
 8004914:	f000 f868 	bl	80049e8 <_svfiprintf_r>
 8004918:	2200      	movs	r2, #0
 800491a:	9b02      	ldr	r3, [sp, #8]
 800491c:	701a      	strb	r2, [r3, #0]
 800491e:	b01c      	add	sp, #112	; 0x70
 8004920:	f85d eb04 	ldr.w	lr, [sp], #4
 8004924:	b003      	add	sp, #12
 8004926:	4770      	bx	lr
 8004928:	200000a8 	.word	0x200000a8
 800492c:	ffff0208 	.word	0xffff0208

08004930 <__ssputs_r>:
 8004930:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004934:	688e      	ldr	r6, [r1, #8]
 8004936:	4682      	mov	sl, r0
 8004938:	429e      	cmp	r6, r3
 800493a:	460c      	mov	r4, r1
 800493c:	4690      	mov	r8, r2
 800493e:	461f      	mov	r7, r3
 8004940:	d838      	bhi.n	80049b4 <__ssputs_r+0x84>
 8004942:	898a      	ldrh	r2, [r1, #12]
 8004944:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004948:	d032      	beq.n	80049b0 <__ssputs_r+0x80>
 800494a:	6825      	ldr	r5, [r4, #0]
 800494c:	6909      	ldr	r1, [r1, #16]
 800494e:	3301      	adds	r3, #1
 8004950:	eba5 0901 	sub.w	r9, r5, r1
 8004954:	6965      	ldr	r5, [r4, #20]
 8004956:	444b      	add	r3, r9
 8004958:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800495c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004960:	106d      	asrs	r5, r5, #1
 8004962:	429d      	cmp	r5, r3
 8004964:	bf38      	it	cc
 8004966:	461d      	movcc	r5, r3
 8004968:	0553      	lsls	r3, r2, #21
 800496a:	d531      	bpl.n	80049d0 <__ssputs_r+0xa0>
 800496c:	4629      	mov	r1, r5
 800496e:	f000 fb6f 	bl	8005050 <_malloc_r>
 8004972:	4606      	mov	r6, r0
 8004974:	b950      	cbnz	r0, 800498c <__ssputs_r+0x5c>
 8004976:	230c      	movs	r3, #12
 8004978:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800497c:	f8ca 3000 	str.w	r3, [sl]
 8004980:	89a3      	ldrh	r3, [r4, #12]
 8004982:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004986:	81a3      	strh	r3, [r4, #12]
 8004988:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800498c:	464a      	mov	r2, r9
 800498e:	6921      	ldr	r1, [r4, #16]
 8004990:	f000 face 	bl	8004f30 <memcpy>
 8004994:	89a3      	ldrh	r3, [r4, #12]
 8004996:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800499a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800499e:	81a3      	strh	r3, [r4, #12]
 80049a0:	6126      	str	r6, [r4, #16]
 80049a2:	444e      	add	r6, r9
 80049a4:	6026      	str	r6, [r4, #0]
 80049a6:	463e      	mov	r6, r7
 80049a8:	6165      	str	r5, [r4, #20]
 80049aa:	eba5 0509 	sub.w	r5, r5, r9
 80049ae:	60a5      	str	r5, [r4, #8]
 80049b0:	42be      	cmp	r6, r7
 80049b2:	d900      	bls.n	80049b6 <__ssputs_r+0x86>
 80049b4:	463e      	mov	r6, r7
 80049b6:	4632      	mov	r2, r6
 80049b8:	4641      	mov	r1, r8
 80049ba:	6820      	ldr	r0, [r4, #0]
 80049bc:	f000 fac6 	bl	8004f4c <memmove>
 80049c0:	68a3      	ldr	r3, [r4, #8]
 80049c2:	2000      	movs	r0, #0
 80049c4:	1b9b      	subs	r3, r3, r6
 80049c6:	60a3      	str	r3, [r4, #8]
 80049c8:	6823      	ldr	r3, [r4, #0]
 80049ca:	4433      	add	r3, r6
 80049cc:	6023      	str	r3, [r4, #0]
 80049ce:	e7db      	b.n	8004988 <__ssputs_r+0x58>
 80049d0:	462a      	mov	r2, r5
 80049d2:	f000 fbb1 	bl	8005138 <_realloc_r>
 80049d6:	4606      	mov	r6, r0
 80049d8:	2800      	cmp	r0, #0
 80049da:	d1e1      	bne.n	80049a0 <__ssputs_r+0x70>
 80049dc:	4650      	mov	r0, sl
 80049de:	6921      	ldr	r1, [r4, #16]
 80049e0:	f000 face 	bl	8004f80 <_free_r>
 80049e4:	e7c7      	b.n	8004976 <__ssputs_r+0x46>
	...

080049e8 <_svfiprintf_r>:
 80049e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049ec:	4698      	mov	r8, r3
 80049ee:	898b      	ldrh	r3, [r1, #12]
 80049f0:	4607      	mov	r7, r0
 80049f2:	061b      	lsls	r3, r3, #24
 80049f4:	460d      	mov	r5, r1
 80049f6:	4614      	mov	r4, r2
 80049f8:	b09d      	sub	sp, #116	; 0x74
 80049fa:	d50e      	bpl.n	8004a1a <_svfiprintf_r+0x32>
 80049fc:	690b      	ldr	r3, [r1, #16]
 80049fe:	b963      	cbnz	r3, 8004a1a <_svfiprintf_r+0x32>
 8004a00:	2140      	movs	r1, #64	; 0x40
 8004a02:	f000 fb25 	bl	8005050 <_malloc_r>
 8004a06:	6028      	str	r0, [r5, #0]
 8004a08:	6128      	str	r0, [r5, #16]
 8004a0a:	b920      	cbnz	r0, 8004a16 <_svfiprintf_r+0x2e>
 8004a0c:	230c      	movs	r3, #12
 8004a0e:	603b      	str	r3, [r7, #0]
 8004a10:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004a14:	e0d1      	b.n	8004bba <_svfiprintf_r+0x1d2>
 8004a16:	2340      	movs	r3, #64	; 0x40
 8004a18:	616b      	str	r3, [r5, #20]
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	9309      	str	r3, [sp, #36]	; 0x24
 8004a1e:	2320      	movs	r3, #32
 8004a20:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004a24:	2330      	movs	r3, #48	; 0x30
 8004a26:	f04f 0901 	mov.w	r9, #1
 8004a2a:	f8cd 800c 	str.w	r8, [sp, #12]
 8004a2e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004bd4 <_svfiprintf_r+0x1ec>
 8004a32:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004a36:	4623      	mov	r3, r4
 8004a38:	469a      	mov	sl, r3
 8004a3a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004a3e:	b10a      	cbz	r2, 8004a44 <_svfiprintf_r+0x5c>
 8004a40:	2a25      	cmp	r2, #37	; 0x25
 8004a42:	d1f9      	bne.n	8004a38 <_svfiprintf_r+0x50>
 8004a44:	ebba 0b04 	subs.w	fp, sl, r4
 8004a48:	d00b      	beq.n	8004a62 <_svfiprintf_r+0x7a>
 8004a4a:	465b      	mov	r3, fp
 8004a4c:	4622      	mov	r2, r4
 8004a4e:	4629      	mov	r1, r5
 8004a50:	4638      	mov	r0, r7
 8004a52:	f7ff ff6d 	bl	8004930 <__ssputs_r>
 8004a56:	3001      	adds	r0, #1
 8004a58:	f000 80aa 	beq.w	8004bb0 <_svfiprintf_r+0x1c8>
 8004a5c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004a5e:	445a      	add	r2, fp
 8004a60:	9209      	str	r2, [sp, #36]	; 0x24
 8004a62:	f89a 3000 	ldrb.w	r3, [sl]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	f000 80a2 	beq.w	8004bb0 <_svfiprintf_r+0x1c8>
 8004a6c:	2300      	movs	r3, #0
 8004a6e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004a72:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004a76:	f10a 0a01 	add.w	sl, sl, #1
 8004a7a:	9304      	str	r3, [sp, #16]
 8004a7c:	9307      	str	r3, [sp, #28]
 8004a7e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004a82:	931a      	str	r3, [sp, #104]	; 0x68
 8004a84:	4654      	mov	r4, sl
 8004a86:	2205      	movs	r2, #5
 8004a88:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004a8c:	4851      	ldr	r0, [pc, #324]	; (8004bd4 <_svfiprintf_r+0x1ec>)
 8004a8e:	f000 fa41 	bl	8004f14 <memchr>
 8004a92:	9a04      	ldr	r2, [sp, #16]
 8004a94:	b9d8      	cbnz	r0, 8004ace <_svfiprintf_r+0xe6>
 8004a96:	06d0      	lsls	r0, r2, #27
 8004a98:	bf44      	itt	mi
 8004a9a:	2320      	movmi	r3, #32
 8004a9c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004aa0:	0711      	lsls	r1, r2, #28
 8004aa2:	bf44      	itt	mi
 8004aa4:	232b      	movmi	r3, #43	; 0x2b
 8004aa6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004aaa:	f89a 3000 	ldrb.w	r3, [sl]
 8004aae:	2b2a      	cmp	r3, #42	; 0x2a
 8004ab0:	d015      	beq.n	8004ade <_svfiprintf_r+0xf6>
 8004ab2:	4654      	mov	r4, sl
 8004ab4:	2000      	movs	r0, #0
 8004ab6:	f04f 0c0a 	mov.w	ip, #10
 8004aba:	9a07      	ldr	r2, [sp, #28]
 8004abc:	4621      	mov	r1, r4
 8004abe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004ac2:	3b30      	subs	r3, #48	; 0x30
 8004ac4:	2b09      	cmp	r3, #9
 8004ac6:	d94e      	bls.n	8004b66 <_svfiprintf_r+0x17e>
 8004ac8:	b1b0      	cbz	r0, 8004af8 <_svfiprintf_r+0x110>
 8004aca:	9207      	str	r2, [sp, #28]
 8004acc:	e014      	b.n	8004af8 <_svfiprintf_r+0x110>
 8004ace:	eba0 0308 	sub.w	r3, r0, r8
 8004ad2:	fa09 f303 	lsl.w	r3, r9, r3
 8004ad6:	4313      	orrs	r3, r2
 8004ad8:	46a2      	mov	sl, r4
 8004ada:	9304      	str	r3, [sp, #16]
 8004adc:	e7d2      	b.n	8004a84 <_svfiprintf_r+0x9c>
 8004ade:	9b03      	ldr	r3, [sp, #12]
 8004ae0:	1d19      	adds	r1, r3, #4
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	9103      	str	r1, [sp, #12]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	bfbb      	ittet	lt
 8004aea:	425b      	neglt	r3, r3
 8004aec:	f042 0202 	orrlt.w	r2, r2, #2
 8004af0:	9307      	strge	r3, [sp, #28]
 8004af2:	9307      	strlt	r3, [sp, #28]
 8004af4:	bfb8      	it	lt
 8004af6:	9204      	strlt	r2, [sp, #16]
 8004af8:	7823      	ldrb	r3, [r4, #0]
 8004afa:	2b2e      	cmp	r3, #46	; 0x2e
 8004afc:	d10c      	bne.n	8004b18 <_svfiprintf_r+0x130>
 8004afe:	7863      	ldrb	r3, [r4, #1]
 8004b00:	2b2a      	cmp	r3, #42	; 0x2a
 8004b02:	d135      	bne.n	8004b70 <_svfiprintf_r+0x188>
 8004b04:	9b03      	ldr	r3, [sp, #12]
 8004b06:	3402      	adds	r4, #2
 8004b08:	1d1a      	adds	r2, r3, #4
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	9203      	str	r2, [sp, #12]
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	bfb8      	it	lt
 8004b12:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8004b16:	9305      	str	r3, [sp, #20]
 8004b18:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8004bd8 <_svfiprintf_r+0x1f0>
 8004b1c:	2203      	movs	r2, #3
 8004b1e:	4650      	mov	r0, sl
 8004b20:	7821      	ldrb	r1, [r4, #0]
 8004b22:	f000 f9f7 	bl	8004f14 <memchr>
 8004b26:	b140      	cbz	r0, 8004b3a <_svfiprintf_r+0x152>
 8004b28:	2340      	movs	r3, #64	; 0x40
 8004b2a:	eba0 000a 	sub.w	r0, r0, sl
 8004b2e:	fa03 f000 	lsl.w	r0, r3, r0
 8004b32:	9b04      	ldr	r3, [sp, #16]
 8004b34:	3401      	adds	r4, #1
 8004b36:	4303      	orrs	r3, r0
 8004b38:	9304      	str	r3, [sp, #16]
 8004b3a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004b3e:	2206      	movs	r2, #6
 8004b40:	4826      	ldr	r0, [pc, #152]	; (8004bdc <_svfiprintf_r+0x1f4>)
 8004b42:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004b46:	f000 f9e5 	bl	8004f14 <memchr>
 8004b4a:	2800      	cmp	r0, #0
 8004b4c:	d038      	beq.n	8004bc0 <_svfiprintf_r+0x1d8>
 8004b4e:	4b24      	ldr	r3, [pc, #144]	; (8004be0 <_svfiprintf_r+0x1f8>)
 8004b50:	bb1b      	cbnz	r3, 8004b9a <_svfiprintf_r+0x1b2>
 8004b52:	9b03      	ldr	r3, [sp, #12]
 8004b54:	3307      	adds	r3, #7
 8004b56:	f023 0307 	bic.w	r3, r3, #7
 8004b5a:	3308      	adds	r3, #8
 8004b5c:	9303      	str	r3, [sp, #12]
 8004b5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004b60:	4433      	add	r3, r6
 8004b62:	9309      	str	r3, [sp, #36]	; 0x24
 8004b64:	e767      	b.n	8004a36 <_svfiprintf_r+0x4e>
 8004b66:	460c      	mov	r4, r1
 8004b68:	2001      	movs	r0, #1
 8004b6a:	fb0c 3202 	mla	r2, ip, r2, r3
 8004b6e:	e7a5      	b.n	8004abc <_svfiprintf_r+0xd4>
 8004b70:	2300      	movs	r3, #0
 8004b72:	f04f 0c0a 	mov.w	ip, #10
 8004b76:	4619      	mov	r1, r3
 8004b78:	3401      	adds	r4, #1
 8004b7a:	9305      	str	r3, [sp, #20]
 8004b7c:	4620      	mov	r0, r4
 8004b7e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004b82:	3a30      	subs	r2, #48	; 0x30
 8004b84:	2a09      	cmp	r2, #9
 8004b86:	d903      	bls.n	8004b90 <_svfiprintf_r+0x1a8>
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d0c5      	beq.n	8004b18 <_svfiprintf_r+0x130>
 8004b8c:	9105      	str	r1, [sp, #20]
 8004b8e:	e7c3      	b.n	8004b18 <_svfiprintf_r+0x130>
 8004b90:	4604      	mov	r4, r0
 8004b92:	2301      	movs	r3, #1
 8004b94:	fb0c 2101 	mla	r1, ip, r1, r2
 8004b98:	e7f0      	b.n	8004b7c <_svfiprintf_r+0x194>
 8004b9a:	ab03      	add	r3, sp, #12
 8004b9c:	9300      	str	r3, [sp, #0]
 8004b9e:	462a      	mov	r2, r5
 8004ba0:	4638      	mov	r0, r7
 8004ba2:	4b10      	ldr	r3, [pc, #64]	; (8004be4 <_svfiprintf_r+0x1fc>)
 8004ba4:	a904      	add	r1, sp, #16
 8004ba6:	f3af 8000 	nop.w
 8004baa:	1c42      	adds	r2, r0, #1
 8004bac:	4606      	mov	r6, r0
 8004bae:	d1d6      	bne.n	8004b5e <_svfiprintf_r+0x176>
 8004bb0:	89ab      	ldrh	r3, [r5, #12]
 8004bb2:	065b      	lsls	r3, r3, #25
 8004bb4:	f53f af2c 	bmi.w	8004a10 <_svfiprintf_r+0x28>
 8004bb8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004bba:	b01d      	add	sp, #116	; 0x74
 8004bbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004bc0:	ab03      	add	r3, sp, #12
 8004bc2:	9300      	str	r3, [sp, #0]
 8004bc4:	462a      	mov	r2, r5
 8004bc6:	4638      	mov	r0, r7
 8004bc8:	4b06      	ldr	r3, [pc, #24]	; (8004be4 <_svfiprintf_r+0x1fc>)
 8004bca:	a904      	add	r1, sp, #16
 8004bcc:	f000 f87c 	bl	8004cc8 <_printf_i>
 8004bd0:	e7eb      	b.n	8004baa <_svfiprintf_r+0x1c2>
 8004bd2:	bf00      	nop
 8004bd4:	08005dc8 	.word	0x08005dc8
 8004bd8:	08005dce 	.word	0x08005dce
 8004bdc:	08005dd2 	.word	0x08005dd2
 8004be0:	00000000 	.word	0x00000000
 8004be4:	08004931 	.word	0x08004931

08004be8 <_printf_common>:
 8004be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004bec:	4616      	mov	r6, r2
 8004bee:	4699      	mov	r9, r3
 8004bf0:	688a      	ldr	r2, [r1, #8]
 8004bf2:	690b      	ldr	r3, [r1, #16]
 8004bf4:	4607      	mov	r7, r0
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	bfb8      	it	lt
 8004bfa:	4613      	movlt	r3, r2
 8004bfc:	6033      	str	r3, [r6, #0]
 8004bfe:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004c02:	460c      	mov	r4, r1
 8004c04:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004c08:	b10a      	cbz	r2, 8004c0e <_printf_common+0x26>
 8004c0a:	3301      	adds	r3, #1
 8004c0c:	6033      	str	r3, [r6, #0]
 8004c0e:	6823      	ldr	r3, [r4, #0]
 8004c10:	0699      	lsls	r1, r3, #26
 8004c12:	bf42      	ittt	mi
 8004c14:	6833      	ldrmi	r3, [r6, #0]
 8004c16:	3302      	addmi	r3, #2
 8004c18:	6033      	strmi	r3, [r6, #0]
 8004c1a:	6825      	ldr	r5, [r4, #0]
 8004c1c:	f015 0506 	ands.w	r5, r5, #6
 8004c20:	d106      	bne.n	8004c30 <_printf_common+0x48>
 8004c22:	f104 0a19 	add.w	sl, r4, #25
 8004c26:	68e3      	ldr	r3, [r4, #12]
 8004c28:	6832      	ldr	r2, [r6, #0]
 8004c2a:	1a9b      	subs	r3, r3, r2
 8004c2c:	42ab      	cmp	r3, r5
 8004c2e:	dc28      	bgt.n	8004c82 <_printf_common+0x9a>
 8004c30:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004c34:	1e13      	subs	r3, r2, #0
 8004c36:	6822      	ldr	r2, [r4, #0]
 8004c38:	bf18      	it	ne
 8004c3a:	2301      	movne	r3, #1
 8004c3c:	0692      	lsls	r2, r2, #26
 8004c3e:	d42d      	bmi.n	8004c9c <_printf_common+0xb4>
 8004c40:	4649      	mov	r1, r9
 8004c42:	4638      	mov	r0, r7
 8004c44:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004c48:	47c0      	blx	r8
 8004c4a:	3001      	adds	r0, #1
 8004c4c:	d020      	beq.n	8004c90 <_printf_common+0xa8>
 8004c4e:	6823      	ldr	r3, [r4, #0]
 8004c50:	68e5      	ldr	r5, [r4, #12]
 8004c52:	f003 0306 	and.w	r3, r3, #6
 8004c56:	2b04      	cmp	r3, #4
 8004c58:	bf18      	it	ne
 8004c5a:	2500      	movne	r5, #0
 8004c5c:	6832      	ldr	r2, [r6, #0]
 8004c5e:	f04f 0600 	mov.w	r6, #0
 8004c62:	68a3      	ldr	r3, [r4, #8]
 8004c64:	bf08      	it	eq
 8004c66:	1aad      	subeq	r5, r5, r2
 8004c68:	6922      	ldr	r2, [r4, #16]
 8004c6a:	bf08      	it	eq
 8004c6c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004c70:	4293      	cmp	r3, r2
 8004c72:	bfc4      	itt	gt
 8004c74:	1a9b      	subgt	r3, r3, r2
 8004c76:	18ed      	addgt	r5, r5, r3
 8004c78:	341a      	adds	r4, #26
 8004c7a:	42b5      	cmp	r5, r6
 8004c7c:	d11a      	bne.n	8004cb4 <_printf_common+0xcc>
 8004c7e:	2000      	movs	r0, #0
 8004c80:	e008      	b.n	8004c94 <_printf_common+0xac>
 8004c82:	2301      	movs	r3, #1
 8004c84:	4652      	mov	r2, sl
 8004c86:	4649      	mov	r1, r9
 8004c88:	4638      	mov	r0, r7
 8004c8a:	47c0      	blx	r8
 8004c8c:	3001      	adds	r0, #1
 8004c8e:	d103      	bne.n	8004c98 <_printf_common+0xb0>
 8004c90:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004c94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c98:	3501      	adds	r5, #1
 8004c9a:	e7c4      	b.n	8004c26 <_printf_common+0x3e>
 8004c9c:	2030      	movs	r0, #48	; 0x30
 8004c9e:	18e1      	adds	r1, r4, r3
 8004ca0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004ca4:	1c5a      	adds	r2, r3, #1
 8004ca6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004caa:	4422      	add	r2, r4
 8004cac:	3302      	adds	r3, #2
 8004cae:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004cb2:	e7c5      	b.n	8004c40 <_printf_common+0x58>
 8004cb4:	2301      	movs	r3, #1
 8004cb6:	4622      	mov	r2, r4
 8004cb8:	4649      	mov	r1, r9
 8004cba:	4638      	mov	r0, r7
 8004cbc:	47c0      	blx	r8
 8004cbe:	3001      	adds	r0, #1
 8004cc0:	d0e6      	beq.n	8004c90 <_printf_common+0xa8>
 8004cc2:	3601      	adds	r6, #1
 8004cc4:	e7d9      	b.n	8004c7a <_printf_common+0x92>
	...

08004cc8 <_printf_i>:
 8004cc8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004ccc:	7e0f      	ldrb	r7, [r1, #24]
 8004cce:	4691      	mov	r9, r2
 8004cd0:	2f78      	cmp	r7, #120	; 0x78
 8004cd2:	4680      	mov	r8, r0
 8004cd4:	460c      	mov	r4, r1
 8004cd6:	469a      	mov	sl, r3
 8004cd8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004cda:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004cde:	d807      	bhi.n	8004cf0 <_printf_i+0x28>
 8004ce0:	2f62      	cmp	r7, #98	; 0x62
 8004ce2:	d80a      	bhi.n	8004cfa <_printf_i+0x32>
 8004ce4:	2f00      	cmp	r7, #0
 8004ce6:	f000 80d9 	beq.w	8004e9c <_printf_i+0x1d4>
 8004cea:	2f58      	cmp	r7, #88	; 0x58
 8004cec:	f000 80a4 	beq.w	8004e38 <_printf_i+0x170>
 8004cf0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004cf4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004cf8:	e03a      	b.n	8004d70 <_printf_i+0xa8>
 8004cfa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004cfe:	2b15      	cmp	r3, #21
 8004d00:	d8f6      	bhi.n	8004cf0 <_printf_i+0x28>
 8004d02:	a101      	add	r1, pc, #4	; (adr r1, 8004d08 <_printf_i+0x40>)
 8004d04:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004d08:	08004d61 	.word	0x08004d61
 8004d0c:	08004d75 	.word	0x08004d75
 8004d10:	08004cf1 	.word	0x08004cf1
 8004d14:	08004cf1 	.word	0x08004cf1
 8004d18:	08004cf1 	.word	0x08004cf1
 8004d1c:	08004cf1 	.word	0x08004cf1
 8004d20:	08004d75 	.word	0x08004d75
 8004d24:	08004cf1 	.word	0x08004cf1
 8004d28:	08004cf1 	.word	0x08004cf1
 8004d2c:	08004cf1 	.word	0x08004cf1
 8004d30:	08004cf1 	.word	0x08004cf1
 8004d34:	08004e83 	.word	0x08004e83
 8004d38:	08004da5 	.word	0x08004da5
 8004d3c:	08004e65 	.word	0x08004e65
 8004d40:	08004cf1 	.word	0x08004cf1
 8004d44:	08004cf1 	.word	0x08004cf1
 8004d48:	08004ea5 	.word	0x08004ea5
 8004d4c:	08004cf1 	.word	0x08004cf1
 8004d50:	08004da5 	.word	0x08004da5
 8004d54:	08004cf1 	.word	0x08004cf1
 8004d58:	08004cf1 	.word	0x08004cf1
 8004d5c:	08004e6d 	.word	0x08004e6d
 8004d60:	682b      	ldr	r3, [r5, #0]
 8004d62:	1d1a      	adds	r2, r3, #4
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	602a      	str	r2, [r5, #0]
 8004d68:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004d6c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004d70:	2301      	movs	r3, #1
 8004d72:	e0a4      	b.n	8004ebe <_printf_i+0x1f6>
 8004d74:	6820      	ldr	r0, [r4, #0]
 8004d76:	6829      	ldr	r1, [r5, #0]
 8004d78:	0606      	lsls	r6, r0, #24
 8004d7a:	f101 0304 	add.w	r3, r1, #4
 8004d7e:	d50a      	bpl.n	8004d96 <_printf_i+0xce>
 8004d80:	680e      	ldr	r6, [r1, #0]
 8004d82:	602b      	str	r3, [r5, #0]
 8004d84:	2e00      	cmp	r6, #0
 8004d86:	da03      	bge.n	8004d90 <_printf_i+0xc8>
 8004d88:	232d      	movs	r3, #45	; 0x2d
 8004d8a:	4276      	negs	r6, r6
 8004d8c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004d90:	230a      	movs	r3, #10
 8004d92:	485e      	ldr	r0, [pc, #376]	; (8004f0c <_printf_i+0x244>)
 8004d94:	e019      	b.n	8004dca <_printf_i+0x102>
 8004d96:	680e      	ldr	r6, [r1, #0]
 8004d98:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004d9c:	602b      	str	r3, [r5, #0]
 8004d9e:	bf18      	it	ne
 8004da0:	b236      	sxthne	r6, r6
 8004da2:	e7ef      	b.n	8004d84 <_printf_i+0xbc>
 8004da4:	682b      	ldr	r3, [r5, #0]
 8004da6:	6820      	ldr	r0, [r4, #0]
 8004da8:	1d19      	adds	r1, r3, #4
 8004daa:	6029      	str	r1, [r5, #0]
 8004dac:	0601      	lsls	r1, r0, #24
 8004dae:	d501      	bpl.n	8004db4 <_printf_i+0xec>
 8004db0:	681e      	ldr	r6, [r3, #0]
 8004db2:	e002      	b.n	8004dba <_printf_i+0xf2>
 8004db4:	0646      	lsls	r6, r0, #25
 8004db6:	d5fb      	bpl.n	8004db0 <_printf_i+0xe8>
 8004db8:	881e      	ldrh	r6, [r3, #0]
 8004dba:	2f6f      	cmp	r7, #111	; 0x6f
 8004dbc:	bf0c      	ite	eq
 8004dbe:	2308      	moveq	r3, #8
 8004dc0:	230a      	movne	r3, #10
 8004dc2:	4852      	ldr	r0, [pc, #328]	; (8004f0c <_printf_i+0x244>)
 8004dc4:	2100      	movs	r1, #0
 8004dc6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004dca:	6865      	ldr	r5, [r4, #4]
 8004dcc:	2d00      	cmp	r5, #0
 8004dce:	bfa8      	it	ge
 8004dd0:	6821      	ldrge	r1, [r4, #0]
 8004dd2:	60a5      	str	r5, [r4, #8]
 8004dd4:	bfa4      	itt	ge
 8004dd6:	f021 0104 	bicge.w	r1, r1, #4
 8004dda:	6021      	strge	r1, [r4, #0]
 8004ddc:	b90e      	cbnz	r6, 8004de2 <_printf_i+0x11a>
 8004dde:	2d00      	cmp	r5, #0
 8004de0:	d04d      	beq.n	8004e7e <_printf_i+0x1b6>
 8004de2:	4615      	mov	r5, r2
 8004de4:	fbb6 f1f3 	udiv	r1, r6, r3
 8004de8:	fb03 6711 	mls	r7, r3, r1, r6
 8004dec:	5dc7      	ldrb	r7, [r0, r7]
 8004dee:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004df2:	4637      	mov	r7, r6
 8004df4:	42bb      	cmp	r3, r7
 8004df6:	460e      	mov	r6, r1
 8004df8:	d9f4      	bls.n	8004de4 <_printf_i+0x11c>
 8004dfa:	2b08      	cmp	r3, #8
 8004dfc:	d10b      	bne.n	8004e16 <_printf_i+0x14e>
 8004dfe:	6823      	ldr	r3, [r4, #0]
 8004e00:	07de      	lsls	r6, r3, #31
 8004e02:	d508      	bpl.n	8004e16 <_printf_i+0x14e>
 8004e04:	6923      	ldr	r3, [r4, #16]
 8004e06:	6861      	ldr	r1, [r4, #4]
 8004e08:	4299      	cmp	r1, r3
 8004e0a:	bfde      	ittt	le
 8004e0c:	2330      	movle	r3, #48	; 0x30
 8004e0e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004e12:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8004e16:	1b52      	subs	r2, r2, r5
 8004e18:	6122      	str	r2, [r4, #16]
 8004e1a:	464b      	mov	r3, r9
 8004e1c:	4621      	mov	r1, r4
 8004e1e:	4640      	mov	r0, r8
 8004e20:	f8cd a000 	str.w	sl, [sp]
 8004e24:	aa03      	add	r2, sp, #12
 8004e26:	f7ff fedf 	bl	8004be8 <_printf_common>
 8004e2a:	3001      	adds	r0, #1
 8004e2c:	d14c      	bne.n	8004ec8 <_printf_i+0x200>
 8004e2e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004e32:	b004      	add	sp, #16
 8004e34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e38:	4834      	ldr	r0, [pc, #208]	; (8004f0c <_printf_i+0x244>)
 8004e3a:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004e3e:	6829      	ldr	r1, [r5, #0]
 8004e40:	6823      	ldr	r3, [r4, #0]
 8004e42:	f851 6b04 	ldr.w	r6, [r1], #4
 8004e46:	6029      	str	r1, [r5, #0]
 8004e48:	061d      	lsls	r5, r3, #24
 8004e4a:	d514      	bpl.n	8004e76 <_printf_i+0x1ae>
 8004e4c:	07df      	lsls	r7, r3, #31
 8004e4e:	bf44      	itt	mi
 8004e50:	f043 0320 	orrmi.w	r3, r3, #32
 8004e54:	6023      	strmi	r3, [r4, #0]
 8004e56:	b91e      	cbnz	r6, 8004e60 <_printf_i+0x198>
 8004e58:	6823      	ldr	r3, [r4, #0]
 8004e5a:	f023 0320 	bic.w	r3, r3, #32
 8004e5e:	6023      	str	r3, [r4, #0]
 8004e60:	2310      	movs	r3, #16
 8004e62:	e7af      	b.n	8004dc4 <_printf_i+0xfc>
 8004e64:	6823      	ldr	r3, [r4, #0]
 8004e66:	f043 0320 	orr.w	r3, r3, #32
 8004e6a:	6023      	str	r3, [r4, #0]
 8004e6c:	2378      	movs	r3, #120	; 0x78
 8004e6e:	4828      	ldr	r0, [pc, #160]	; (8004f10 <_printf_i+0x248>)
 8004e70:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004e74:	e7e3      	b.n	8004e3e <_printf_i+0x176>
 8004e76:	0659      	lsls	r1, r3, #25
 8004e78:	bf48      	it	mi
 8004e7a:	b2b6      	uxthmi	r6, r6
 8004e7c:	e7e6      	b.n	8004e4c <_printf_i+0x184>
 8004e7e:	4615      	mov	r5, r2
 8004e80:	e7bb      	b.n	8004dfa <_printf_i+0x132>
 8004e82:	682b      	ldr	r3, [r5, #0]
 8004e84:	6826      	ldr	r6, [r4, #0]
 8004e86:	1d18      	adds	r0, r3, #4
 8004e88:	6961      	ldr	r1, [r4, #20]
 8004e8a:	6028      	str	r0, [r5, #0]
 8004e8c:	0635      	lsls	r5, r6, #24
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	d501      	bpl.n	8004e96 <_printf_i+0x1ce>
 8004e92:	6019      	str	r1, [r3, #0]
 8004e94:	e002      	b.n	8004e9c <_printf_i+0x1d4>
 8004e96:	0670      	lsls	r0, r6, #25
 8004e98:	d5fb      	bpl.n	8004e92 <_printf_i+0x1ca>
 8004e9a:	8019      	strh	r1, [r3, #0]
 8004e9c:	2300      	movs	r3, #0
 8004e9e:	4615      	mov	r5, r2
 8004ea0:	6123      	str	r3, [r4, #16]
 8004ea2:	e7ba      	b.n	8004e1a <_printf_i+0x152>
 8004ea4:	682b      	ldr	r3, [r5, #0]
 8004ea6:	2100      	movs	r1, #0
 8004ea8:	1d1a      	adds	r2, r3, #4
 8004eaa:	602a      	str	r2, [r5, #0]
 8004eac:	681d      	ldr	r5, [r3, #0]
 8004eae:	6862      	ldr	r2, [r4, #4]
 8004eb0:	4628      	mov	r0, r5
 8004eb2:	f000 f82f 	bl	8004f14 <memchr>
 8004eb6:	b108      	cbz	r0, 8004ebc <_printf_i+0x1f4>
 8004eb8:	1b40      	subs	r0, r0, r5
 8004eba:	6060      	str	r0, [r4, #4]
 8004ebc:	6863      	ldr	r3, [r4, #4]
 8004ebe:	6123      	str	r3, [r4, #16]
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004ec6:	e7a8      	b.n	8004e1a <_printf_i+0x152>
 8004ec8:	462a      	mov	r2, r5
 8004eca:	4649      	mov	r1, r9
 8004ecc:	4640      	mov	r0, r8
 8004ece:	6923      	ldr	r3, [r4, #16]
 8004ed0:	47d0      	blx	sl
 8004ed2:	3001      	adds	r0, #1
 8004ed4:	d0ab      	beq.n	8004e2e <_printf_i+0x166>
 8004ed6:	6823      	ldr	r3, [r4, #0]
 8004ed8:	079b      	lsls	r3, r3, #30
 8004eda:	d413      	bmi.n	8004f04 <_printf_i+0x23c>
 8004edc:	68e0      	ldr	r0, [r4, #12]
 8004ede:	9b03      	ldr	r3, [sp, #12]
 8004ee0:	4298      	cmp	r0, r3
 8004ee2:	bfb8      	it	lt
 8004ee4:	4618      	movlt	r0, r3
 8004ee6:	e7a4      	b.n	8004e32 <_printf_i+0x16a>
 8004ee8:	2301      	movs	r3, #1
 8004eea:	4632      	mov	r2, r6
 8004eec:	4649      	mov	r1, r9
 8004eee:	4640      	mov	r0, r8
 8004ef0:	47d0      	blx	sl
 8004ef2:	3001      	adds	r0, #1
 8004ef4:	d09b      	beq.n	8004e2e <_printf_i+0x166>
 8004ef6:	3501      	adds	r5, #1
 8004ef8:	68e3      	ldr	r3, [r4, #12]
 8004efa:	9903      	ldr	r1, [sp, #12]
 8004efc:	1a5b      	subs	r3, r3, r1
 8004efe:	42ab      	cmp	r3, r5
 8004f00:	dcf2      	bgt.n	8004ee8 <_printf_i+0x220>
 8004f02:	e7eb      	b.n	8004edc <_printf_i+0x214>
 8004f04:	2500      	movs	r5, #0
 8004f06:	f104 0619 	add.w	r6, r4, #25
 8004f0a:	e7f5      	b.n	8004ef8 <_printf_i+0x230>
 8004f0c:	08005dd9 	.word	0x08005dd9
 8004f10:	08005dea 	.word	0x08005dea

08004f14 <memchr>:
 8004f14:	4603      	mov	r3, r0
 8004f16:	b510      	push	{r4, lr}
 8004f18:	b2c9      	uxtb	r1, r1
 8004f1a:	4402      	add	r2, r0
 8004f1c:	4293      	cmp	r3, r2
 8004f1e:	4618      	mov	r0, r3
 8004f20:	d101      	bne.n	8004f26 <memchr+0x12>
 8004f22:	2000      	movs	r0, #0
 8004f24:	e003      	b.n	8004f2e <memchr+0x1a>
 8004f26:	7804      	ldrb	r4, [r0, #0]
 8004f28:	3301      	adds	r3, #1
 8004f2a:	428c      	cmp	r4, r1
 8004f2c:	d1f6      	bne.n	8004f1c <memchr+0x8>
 8004f2e:	bd10      	pop	{r4, pc}

08004f30 <memcpy>:
 8004f30:	440a      	add	r2, r1
 8004f32:	4291      	cmp	r1, r2
 8004f34:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8004f38:	d100      	bne.n	8004f3c <memcpy+0xc>
 8004f3a:	4770      	bx	lr
 8004f3c:	b510      	push	{r4, lr}
 8004f3e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004f42:	4291      	cmp	r1, r2
 8004f44:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004f48:	d1f9      	bne.n	8004f3e <memcpy+0xe>
 8004f4a:	bd10      	pop	{r4, pc}

08004f4c <memmove>:
 8004f4c:	4288      	cmp	r0, r1
 8004f4e:	b510      	push	{r4, lr}
 8004f50:	eb01 0402 	add.w	r4, r1, r2
 8004f54:	d902      	bls.n	8004f5c <memmove+0x10>
 8004f56:	4284      	cmp	r4, r0
 8004f58:	4623      	mov	r3, r4
 8004f5a:	d807      	bhi.n	8004f6c <memmove+0x20>
 8004f5c:	1e43      	subs	r3, r0, #1
 8004f5e:	42a1      	cmp	r1, r4
 8004f60:	d008      	beq.n	8004f74 <memmove+0x28>
 8004f62:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004f66:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004f6a:	e7f8      	b.n	8004f5e <memmove+0x12>
 8004f6c:	4601      	mov	r1, r0
 8004f6e:	4402      	add	r2, r0
 8004f70:	428a      	cmp	r2, r1
 8004f72:	d100      	bne.n	8004f76 <memmove+0x2a>
 8004f74:	bd10      	pop	{r4, pc}
 8004f76:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004f7a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004f7e:	e7f7      	b.n	8004f70 <memmove+0x24>

08004f80 <_free_r>:
 8004f80:	b538      	push	{r3, r4, r5, lr}
 8004f82:	4605      	mov	r5, r0
 8004f84:	2900      	cmp	r1, #0
 8004f86:	d040      	beq.n	800500a <_free_r+0x8a>
 8004f88:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004f8c:	1f0c      	subs	r4, r1, #4
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	bfb8      	it	lt
 8004f92:	18e4      	addlt	r4, r4, r3
 8004f94:	f000 f910 	bl	80051b8 <__malloc_lock>
 8004f98:	4a1c      	ldr	r2, [pc, #112]	; (800500c <_free_r+0x8c>)
 8004f9a:	6813      	ldr	r3, [r2, #0]
 8004f9c:	b933      	cbnz	r3, 8004fac <_free_r+0x2c>
 8004f9e:	6063      	str	r3, [r4, #4]
 8004fa0:	6014      	str	r4, [r2, #0]
 8004fa2:	4628      	mov	r0, r5
 8004fa4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004fa8:	f000 b90c 	b.w	80051c4 <__malloc_unlock>
 8004fac:	42a3      	cmp	r3, r4
 8004fae:	d908      	bls.n	8004fc2 <_free_r+0x42>
 8004fb0:	6820      	ldr	r0, [r4, #0]
 8004fb2:	1821      	adds	r1, r4, r0
 8004fb4:	428b      	cmp	r3, r1
 8004fb6:	bf01      	itttt	eq
 8004fb8:	6819      	ldreq	r1, [r3, #0]
 8004fba:	685b      	ldreq	r3, [r3, #4]
 8004fbc:	1809      	addeq	r1, r1, r0
 8004fbe:	6021      	streq	r1, [r4, #0]
 8004fc0:	e7ed      	b.n	8004f9e <_free_r+0x1e>
 8004fc2:	461a      	mov	r2, r3
 8004fc4:	685b      	ldr	r3, [r3, #4]
 8004fc6:	b10b      	cbz	r3, 8004fcc <_free_r+0x4c>
 8004fc8:	42a3      	cmp	r3, r4
 8004fca:	d9fa      	bls.n	8004fc2 <_free_r+0x42>
 8004fcc:	6811      	ldr	r1, [r2, #0]
 8004fce:	1850      	adds	r0, r2, r1
 8004fd0:	42a0      	cmp	r0, r4
 8004fd2:	d10b      	bne.n	8004fec <_free_r+0x6c>
 8004fd4:	6820      	ldr	r0, [r4, #0]
 8004fd6:	4401      	add	r1, r0
 8004fd8:	1850      	adds	r0, r2, r1
 8004fda:	4283      	cmp	r3, r0
 8004fdc:	6011      	str	r1, [r2, #0]
 8004fde:	d1e0      	bne.n	8004fa2 <_free_r+0x22>
 8004fe0:	6818      	ldr	r0, [r3, #0]
 8004fe2:	685b      	ldr	r3, [r3, #4]
 8004fe4:	4401      	add	r1, r0
 8004fe6:	6011      	str	r1, [r2, #0]
 8004fe8:	6053      	str	r3, [r2, #4]
 8004fea:	e7da      	b.n	8004fa2 <_free_r+0x22>
 8004fec:	d902      	bls.n	8004ff4 <_free_r+0x74>
 8004fee:	230c      	movs	r3, #12
 8004ff0:	602b      	str	r3, [r5, #0]
 8004ff2:	e7d6      	b.n	8004fa2 <_free_r+0x22>
 8004ff4:	6820      	ldr	r0, [r4, #0]
 8004ff6:	1821      	adds	r1, r4, r0
 8004ff8:	428b      	cmp	r3, r1
 8004ffa:	bf01      	itttt	eq
 8004ffc:	6819      	ldreq	r1, [r3, #0]
 8004ffe:	685b      	ldreq	r3, [r3, #4]
 8005000:	1809      	addeq	r1, r1, r0
 8005002:	6021      	streq	r1, [r4, #0]
 8005004:	6063      	str	r3, [r4, #4]
 8005006:	6054      	str	r4, [r2, #4]
 8005008:	e7cb      	b.n	8004fa2 <_free_r+0x22>
 800500a:	bd38      	pop	{r3, r4, r5, pc}
 800500c:	200001f8 	.word	0x200001f8

08005010 <sbrk_aligned>:
 8005010:	b570      	push	{r4, r5, r6, lr}
 8005012:	4e0e      	ldr	r6, [pc, #56]	; (800504c <sbrk_aligned+0x3c>)
 8005014:	460c      	mov	r4, r1
 8005016:	6831      	ldr	r1, [r6, #0]
 8005018:	4605      	mov	r5, r0
 800501a:	b911      	cbnz	r1, 8005022 <sbrk_aligned+0x12>
 800501c:	f000 f8bc 	bl	8005198 <_sbrk_r>
 8005020:	6030      	str	r0, [r6, #0]
 8005022:	4621      	mov	r1, r4
 8005024:	4628      	mov	r0, r5
 8005026:	f000 f8b7 	bl	8005198 <_sbrk_r>
 800502a:	1c43      	adds	r3, r0, #1
 800502c:	d00a      	beq.n	8005044 <sbrk_aligned+0x34>
 800502e:	1cc4      	adds	r4, r0, #3
 8005030:	f024 0403 	bic.w	r4, r4, #3
 8005034:	42a0      	cmp	r0, r4
 8005036:	d007      	beq.n	8005048 <sbrk_aligned+0x38>
 8005038:	1a21      	subs	r1, r4, r0
 800503a:	4628      	mov	r0, r5
 800503c:	f000 f8ac 	bl	8005198 <_sbrk_r>
 8005040:	3001      	adds	r0, #1
 8005042:	d101      	bne.n	8005048 <sbrk_aligned+0x38>
 8005044:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8005048:	4620      	mov	r0, r4
 800504a:	bd70      	pop	{r4, r5, r6, pc}
 800504c:	200001fc 	.word	0x200001fc

08005050 <_malloc_r>:
 8005050:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005054:	1ccd      	adds	r5, r1, #3
 8005056:	f025 0503 	bic.w	r5, r5, #3
 800505a:	3508      	adds	r5, #8
 800505c:	2d0c      	cmp	r5, #12
 800505e:	bf38      	it	cc
 8005060:	250c      	movcc	r5, #12
 8005062:	2d00      	cmp	r5, #0
 8005064:	4607      	mov	r7, r0
 8005066:	db01      	blt.n	800506c <_malloc_r+0x1c>
 8005068:	42a9      	cmp	r1, r5
 800506a:	d905      	bls.n	8005078 <_malloc_r+0x28>
 800506c:	230c      	movs	r3, #12
 800506e:	2600      	movs	r6, #0
 8005070:	603b      	str	r3, [r7, #0]
 8005072:	4630      	mov	r0, r6
 8005074:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005078:	4e2e      	ldr	r6, [pc, #184]	; (8005134 <_malloc_r+0xe4>)
 800507a:	f000 f89d 	bl	80051b8 <__malloc_lock>
 800507e:	6833      	ldr	r3, [r6, #0]
 8005080:	461c      	mov	r4, r3
 8005082:	bb34      	cbnz	r4, 80050d2 <_malloc_r+0x82>
 8005084:	4629      	mov	r1, r5
 8005086:	4638      	mov	r0, r7
 8005088:	f7ff ffc2 	bl	8005010 <sbrk_aligned>
 800508c:	1c43      	adds	r3, r0, #1
 800508e:	4604      	mov	r4, r0
 8005090:	d14d      	bne.n	800512e <_malloc_r+0xde>
 8005092:	6834      	ldr	r4, [r6, #0]
 8005094:	4626      	mov	r6, r4
 8005096:	2e00      	cmp	r6, #0
 8005098:	d140      	bne.n	800511c <_malloc_r+0xcc>
 800509a:	6823      	ldr	r3, [r4, #0]
 800509c:	4631      	mov	r1, r6
 800509e:	4638      	mov	r0, r7
 80050a0:	eb04 0803 	add.w	r8, r4, r3
 80050a4:	f000 f878 	bl	8005198 <_sbrk_r>
 80050a8:	4580      	cmp	r8, r0
 80050aa:	d13a      	bne.n	8005122 <_malloc_r+0xd2>
 80050ac:	6821      	ldr	r1, [r4, #0]
 80050ae:	3503      	adds	r5, #3
 80050b0:	1a6d      	subs	r5, r5, r1
 80050b2:	f025 0503 	bic.w	r5, r5, #3
 80050b6:	3508      	adds	r5, #8
 80050b8:	2d0c      	cmp	r5, #12
 80050ba:	bf38      	it	cc
 80050bc:	250c      	movcc	r5, #12
 80050be:	4638      	mov	r0, r7
 80050c0:	4629      	mov	r1, r5
 80050c2:	f7ff ffa5 	bl	8005010 <sbrk_aligned>
 80050c6:	3001      	adds	r0, #1
 80050c8:	d02b      	beq.n	8005122 <_malloc_r+0xd2>
 80050ca:	6823      	ldr	r3, [r4, #0]
 80050cc:	442b      	add	r3, r5
 80050ce:	6023      	str	r3, [r4, #0]
 80050d0:	e00e      	b.n	80050f0 <_malloc_r+0xa0>
 80050d2:	6822      	ldr	r2, [r4, #0]
 80050d4:	1b52      	subs	r2, r2, r5
 80050d6:	d41e      	bmi.n	8005116 <_malloc_r+0xc6>
 80050d8:	2a0b      	cmp	r2, #11
 80050da:	d916      	bls.n	800510a <_malloc_r+0xba>
 80050dc:	1961      	adds	r1, r4, r5
 80050de:	42a3      	cmp	r3, r4
 80050e0:	6025      	str	r5, [r4, #0]
 80050e2:	bf18      	it	ne
 80050e4:	6059      	strne	r1, [r3, #4]
 80050e6:	6863      	ldr	r3, [r4, #4]
 80050e8:	bf08      	it	eq
 80050ea:	6031      	streq	r1, [r6, #0]
 80050ec:	5162      	str	r2, [r4, r5]
 80050ee:	604b      	str	r3, [r1, #4]
 80050f0:	4638      	mov	r0, r7
 80050f2:	f104 060b 	add.w	r6, r4, #11
 80050f6:	f000 f865 	bl	80051c4 <__malloc_unlock>
 80050fa:	f026 0607 	bic.w	r6, r6, #7
 80050fe:	1d23      	adds	r3, r4, #4
 8005100:	1af2      	subs	r2, r6, r3
 8005102:	d0b6      	beq.n	8005072 <_malloc_r+0x22>
 8005104:	1b9b      	subs	r3, r3, r6
 8005106:	50a3      	str	r3, [r4, r2]
 8005108:	e7b3      	b.n	8005072 <_malloc_r+0x22>
 800510a:	6862      	ldr	r2, [r4, #4]
 800510c:	42a3      	cmp	r3, r4
 800510e:	bf0c      	ite	eq
 8005110:	6032      	streq	r2, [r6, #0]
 8005112:	605a      	strne	r2, [r3, #4]
 8005114:	e7ec      	b.n	80050f0 <_malloc_r+0xa0>
 8005116:	4623      	mov	r3, r4
 8005118:	6864      	ldr	r4, [r4, #4]
 800511a:	e7b2      	b.n	8005082 <_malloc_r+0x32>
 800511c:	4634      	mov	r4, r6
 800511e:	6876      	ldr	r6, [r6, #4]
 8005120:	e7b9      	b.n	8005096 <_malloc_r+0x46>
 8005122:	230c      	movs	r3, #12
 8005124:	4638      	mov	r0, r7
 8005126:	603b      	str	r3, [r7, #0]
 8005128:	f000 f84c 	bl	80051c4 <__malloc_unlock>
 800512c:	e7a1      	b.n	8005072 <_malloc_r+0x22>
 800512e:	6025      	str	r5, [r4, #0]
 8005130:	e7de      	b.n	80050f0 <_malloc_r+0xa0>
 8005132:	bf00      	nop
 8005134:	200001f8 	.word	0x200001f8

08005138 <_realloc_r>:
 8005138:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800513c:	4680      	mov	r8, r0
 800513e:	4614      	mov	r4, r2
 8005140:	460e      	mov	r6, r1
 8005142:	b921      	cbnz	r1, 800514e <_realloc_r+0x16>
 8005144:	4611      	mov	r1, r2
 8005146:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800514a:	f7ff bf81 	b.w	8005050 <_malloc_r>
 800514e:	b92a      	cbnz	r2, 800515c <_realloc_r+0x24>
 8005150:	f7ff ff16 	bl	8004f80 <_free_r>
 8005154:	4625      	mov	r5, r4
 8005156:	4628      	mov	r0, r5
 8005158:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800515c:	f000 f838 	bl	80051d0 <_malloc_usable_size_r>
 8005160:	4284      	cmp	r4, r0
 8005162:	4607      	mov	r7, r0
 8005164:	d802      	bhi.n	800516c <_realloc_r+0x34>
 8005166:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800516a:	d812      	bhi.n	8005192 <_realloc_r+0x5a>
 800516c:	4621      	mov	r1, r4
 800516e:	4640      	mov	r0, r8
 8005170:	f7ff ff6e 	bl	8005050 <_malloc_r>
 8005174:	4605      	mov	r5, r0
 8005176:	2800      	cmp	r0, #0
 8005178:	d0ed      	beq.n	8005156 <_realloc_r+0x1e>
 800517a:	42bc      	cmp	r4, r7
 800517c:	4622      	mov	r2, r4
 800517e:	4631      	mov	r1, r6
 8005180:	bf28      	it	cs
 8005182:	463a      	movcs	r2, r7
 8005184:	f7ff fed4 	bl	8004f30 <memcpy>
 8005188:	4631      	mov	r1, r6
 800518a:	4640      	mov	r0, r8
 800518c:	f7ff fef8 	bl	8004f80 <_free_r>
 8005190:	e7e1      	b.n	8005156 <_realloc_r+0x1e>
 8005192:	4635      	mov	r5, r6
 8005194:	e7df      	b.n	8005156 <_realloc_r+0x1e>
	...

08005198 <_sbrk_r>:
 8005198:	b538      	push	{r3, r4, r5, lr}
 800519a:	2300      	movs	r3, #0
 800519c:	4d05      	ldr	r5, [pc, #20]	; (80051b4 <_sbrk_r+0x1c>)
 800519e:	4604      	mov	r4, r0
 80051a0:	4608      	mov	r0, r1
 80051a2:	602b      	str	r3, [r5, #0]
 80051a4:	f7fd fa08 	bl	80025b8 <_sbrk>
 80051a8:	1c43      	adds	r3, r0, #1
 80051aa:	d102      	bne.n	80051b2 <_sbrk_r+0x1a>
 80051ac:	682b      	ldr	r3, [r5, #0]
 80051ae:	b103      	cbz	r3, 80051b2 <_sbrk_r+0x1a>
 80051b0:	6023      	str	r3, [r4, #0]
 80051b2:	bd38      	pop	{r3, r4, r5, pc}
 80051b4:	20000200 	.word	0x20000200

080051b8 <__malloc_lock>:
 80051b8:	4801      	ldr	r0, [pc, #4]	; (80051c0 <__malloc_lock+0x8>)
 80051ba:	f000 b811 	b.w	80051e0 <__retarget_lock_acquire_recursive>
 80051be:	bf00      	nop
 80051c0:	20000204 	.word	0x20000204

080051c4 <__malloc_unlock>:
 80051c4:	4801      	ldr	r0, [pc, #4]	; (80051cc <__malloc_unlock+0x8>)
 80051c6:	f000 b80c 	b.w	80051e2 <__retarget_lock_release_recursive>
 80051ca:	bf00      	nop
 80051cc:	20000204 	.word	0x20000204

080051d0 <_malloc_usable_size_r>:
 80051d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80051d4:	1f18      	subs	r0, r3, #4
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	bfbc      	itt	lt
 80051da:	580b      	ldrlt	r3, [r1, r0]
 80051dc:	18c0      	addlt	r0, r0, r3
 80051de:	4770      	bx	lr

080051e0 <__retarget_lock_acquire_recursive>:
 80051e0:	4770      	bx	lr

080051e2 <__retarget_lock_release_recursive>:
 80051e2:	4770      	bx	lr

080051e4 <_init>:
 80051e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051e6:	bf00      	nop
 80051e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80051ea:	bc08      	pop	{r3}
 80051ec:	469e      	mov	lr, r3
 80051ee:	4770      	bx	lr

080051f0 <_fini>:
 80051f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051f2:	bf00      	nop
 80051f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80051f6:	bc08      	pop	{r3}
 80051f8:	469e      	mov	lr, r3
 80051fa:	4770      	bx	lr
