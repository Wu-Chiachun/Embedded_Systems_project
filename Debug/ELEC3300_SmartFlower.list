
ELEC3300_SmartFlower.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000070b0  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d68  08007298  08007298  00017298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008000  08008000  0002013c  2**0
                  CONTENTS
  4 .ARM          00000000  08008000  08008000  0002013c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008000  08008000  0002013c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008000  08008000  00018000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008004  08008004  00018004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000013c  20000000  08008008  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000154  2000013c  08008144  0002013c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000290  08008144  00020290  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002013c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010b0f  00000000  00000000  00020165  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000030ca  00000000  00000000  00030c74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001128  00000000  00000000  00033d40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fa0  00000000  00000000  00034e68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001cf97  00000000  00000000  00035e08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014c2c  00000000  00000000  00052d9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a3c0d  00000000  00000000  000679cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0010b5d8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004b9c  00000000  00000000  0010b628  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	2000013c 	.word	0x2000013c
 8000204:	00000000 	.word	0x00000000
 8000208:	08007280 	.word	0x08007280

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	20000140 	.word	0x20000140
 8000224:	08007280 	.word	0x08007280

08000228 <strcmp>:
 8000228:	f810 2b01 	ldrb.w	r2, [r0], #1
 800022c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000230:	2a01      	cmp	r2, #1
 8000232:	bf28      	it	cs
 8000234:	429a      	cmpcs	r2, r3
 8000236:	d0f7      	beq.n	8000228 <strcmp>
 8000238:	1ad0      	subs	r0, r2, r3
 800023a:	4770      	bx	lr

0800023c <__aeabi_drsub>:
 800023c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000240:	e002      	b.n	8000248 <__adddf3>
 8000242:	bf00      	nop

08000244 <__aeabi_dsub>:
 8000244:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000248 <__adddf3>:
 8000248:	b530      	push	{r4, r5, lr}
 800024a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800024e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000252:	ea94 0f05 	teq	r4, r5
 8000256:	bf08      	it	eq
 8000258:	ea90 0f02 	teqeq	r0, r2
 800025c:	bf1f      	itttt	ne
 800025e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000262:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000266:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800026a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800026e:	f000 80e2 	beq.w	8000436 <__adddf3+0x1ee>
 8000272:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000276:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800027a:	bfb8      	it	lt
 800027c:	426d      	neglt	r5, r5
 800027e:	dd0c      	ble.n	800029a <__adddf3+0x52>
 8000280:	442c      	add	r4, r5
 8000282:	ea80 0202 	eor.w	r2, r0, r2
 8000286:	ea81 0303 	eor.w	r3, r1, r3
 800028a:	ea82 0000 	eor.w	r0, r2, r0
 800028e:	ea83 0101 	eor.w	r1, r3, r1
 8000292:	ea80 0202 	eor.w	r2, r0, r2
 8000296:	ea81 0303 	eor.w	r3, r1, r3
 800029a:	2d36      	cmp	r5, #54	; 0x36
 800029c:	bf88      	it	hi
 800029e:	bd30      	pophi	{r4, r5, pc}
 80002a0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002a4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002a8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002ac:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002b0:	d002      	beq.n	80002b8 <__adddf3+0x70>
 80002b2:	4240      	negs	r0, r0
 80002b4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002b8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002bc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002c0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c4:	d002      	beq.n	80002cc <__adddf3+0x84>
 80002c6:	4252      	negs	r2, r2
 80002c8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002cc:	ea94 0f05 	teq	r4, r5
 80002d0:	f000 80a7 	beq.w	8000422 <__adddf3+0x1da>
 80002d4:	f1a4 0401 	sub.w	r4, r4, #1
 80002d8:	f1d5 0e20 	rsbs	lr, r5, #32
 80002dc:	db0d      	blt.n	80002fa <__adddf3+0xb2>
 80002de:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002e2:	fa22 f205 	lsr.w	r2, r2, r5
 80002e6:	1880      	adds	r0, r0, r2
 80002e8:	f141 0100 	adc.w	r1, r1, #0
 80002ec:	fa03 f20e 	lsl.w	r2, r3, lr
 80002f0:	1880      	adds	r0, r0, r2
 80002f2:	fa43 f305 	asr.w	r3, r3, r5
 80002f6:	4159      	adcs	r1, r3
 80002f8:	e00e      	b.n	8000318 <__adddf3+0xd0>
 80002fa:	f1a5 0520 	sub.w	r5, r5, #32
 80002fe:	f10e 0e20 	add.w	lr, lr, #32
 8000302:	2a01      	cmp	r2, #1
 8000304:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000308:	bf28      	it	cs
 800030a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800030e:	fa43 f305 	asr.w	r3, r3, r5
 8000312:	18c0      	adds	r0, r0, r3
 8000314:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000318:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800031c:	d507      	bpl.n	800032e <__adddf3+0xe6>
 800031e:	f04f 0e00 	mov.w	lr, #0
 8000322:	f1dc 0c00 	rsbs	ip, ip, #0
 8000326:	eb7e 0000 	sbcs.w	r0, lr, r0
 800032a:	eb6e 0101 	sbc.w	r1, lr, r1
 800032e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000332:	d31b      	bcc.n	800036c <__adddf3+0x124>
 8000334:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000338:	d30c      	bcc.n	8000354 <__adddf3+0x10c>
 800033a:	0849      	lsrs	r1, r1, #1
 800033c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000340:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000344:	f104 0401 	add.w	r4, r4, #1
 8000348:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800034c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000350:	f080 809a 	bcs.w	8000488 <__adddf3+0x240>
 8000354:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000358:	bf08      	it	eq
 800035a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800035e:	f150 0000 	adcs.w	r0, r0, #0
 8000362:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000366:	ea41 0105 	orr.w	r1, r1, r5
 800036a:	bd30      	pop	{r4, r5, pc}
 800036c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000370:	4140      	adcs	r0, r0
 8000372:	eb41 0101 	adc.w	r1, r1, r1
 8000376:	3c01      	subs	r4, #1
 8000378:	bf28      	it	cs
 800037a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800037e:	d2e9      	bcs.n	8000354 <__adddf3+0x10c>
 8000380:	f091 0f00 	teq	r1, #0
 8000384:	bf04      	itt	eq
 8000386:	4601      	moveq	r1, r0
 8000388:	2000      	moveq	r0, #0
 800038a:	fab1 f381 	clz	r3, r1
 800038e:	bf08      	it	eq
 8000390:	3320      	addeq	r3, #32
 8000392:	f1a3 030b 	sub.w	r3, r3, #11
 8000396:	f1b3 0220 	subs.w	r2, r3, #32
 800039a:	da0c      	bge.n	80003b6 <__adddf3+0x16e>
 800039c:	320c      	adds	r2, #12
 800039e:	dd08      	ble.n	80003b2 <__adddf3+0x16a>
 80003a0:	f102 0c14 	add.w	ip, r2, #20
 80003a4:	f1c2 020c 	rsb	r2, r2, #12
 80003a8:	fa01 f00c 	lsl.w	r0, r1, ip
 80003ac:	fa21 f102 	lsr.w	r1, r1, r2
 80003b0:	e00c      	b.n	80003cc <__adddf3+0x184>
 80003b2:	f102 0214 	add.w	r2, r2, #20
 80003b6:	bfd8      	it	le
 80003b8:	f1c2 0c20 	rsble	ip, r2, #32
 80003bc:	fa01 f102 	lsl.w	r1, r1, r2
 80003c0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c4:	bfdc      	itt	le
 80003c6:	ea41 010c 	orrle.w	r1, r1, ip
 80003ca:	4090      	lslle	r0, r2
 80003cc:	1ae4      	subs	r4, r4, r3
 80003ce:	bfa2      	ittt	ge
 80003d0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d4:	4329      	orrge	r1, r5
 80003d6:	bd30      	popge	{r4, r5, pc}
 80003d8:	ea6f 0404 	mvn.w	r4, r4
 80003dc:	3c1f      	subs	r4, #31
 80003de:	da1c      	bge.n	800041a <__adddf3+0x1d2>
 80003e0:	340c      	adds	r4, #12
 80003e2:	dc0e      	bgt.n	8000402 <__adddf3+0x1ba>
 80003e4:	f104 0414 	add.w	r4, r4, #20
 80003e8:	f1c4 0220 	rsb	r2, r4, #32
 80003ec:	fa20 f004 	lsr.w	r0, r0, r4
 80003f0:	fa01 f302 	lsl.w	r3, r1, r2
 80003f4:	ea40 0003 	orr.w	r0, r0, r3
 80003f8:	fa21 f304 	lsr.w	r3, r1, r4
 80003fc:	ea45 0103 	orr.w	r1, r5, r3
 8000400:	bd30      	pop	{r4, r5, pc}
 8000402:	f1c4 040c 	rsb	r4, r4, #12
 8000406:	f1c4 0220 	rsb	r2, r4, #32
 800040a:	fa20 f002 	lsr.w	r0, r0, r2
 800040e:	fa01 f304 	lsl.w	r3, r1, r4
 8000412:	ea40 0003 	orr.w	r0, r0, r3
 8000416:	4629      	mov	r1, r5
 8000418:	bd30      	pop	{r4, r5, pc}
 800041a:	fa21 f004 	lsr.w	r0, r1, r4
 800041e:	4629      	mov	r1, r5
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	f094 0f00 	teq	r4, #0
 8000426:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800042a:	bf06      	itte	eq
 800042c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000430:	3401      	addeq	r4, #1
 8000432:	3d01      	subne	r5, #1
 8000434:	e74e      	b.n	80002d4 <__adddf3+0x8c>
 8000436:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800043a:	bf18      	it	ne
 800043c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000440:	d029      	beq.n	8000496 <__adddf3+0x24e>
 8000442:	ea94 0f05 	teq	r4, r5
 8000446:	bf08      	it	eq
 8000448:	ea90 0f02 	teqeq	r0, r2
 800044c:	d005      	beq.n	800045a <__adddf3+0x212>
 800044e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000452:	bf04      	itt	eq
 8000454:	4619      	moveq	r1, r3
 8000456:	4610      	moveq	r0, r2
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	ea91 0f03 	teq	r1, r3
 800045e:	bf1e      	ittt	ne
 8000460:	2100      	movne	r1, #0
 8000462:	2000      	movne	r0, #0
 8000464:	bd30      	popne	{r4, r5, pc}
 8000466:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800046a:	d105      	bne.n	8000478 <__adddf3+0x230>
 800046c:	0040      	lsls	r0, r0, #1
 800046e:	4149      	adcs	r1, r1
 8000470:	bf28      	it	cs
 8000472:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000476:	bd30      	pop	{r4, r5, pc}
 8000478:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800047c:	bf3c      	itt	cc
 800047e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000482:	bd30      	popcc	{r4, r5, pc}
 8000484:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000488:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800048c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000490:	f04f 0000 	mov.w	r0, #0
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049a:	bf1a      	itte	ne
 800049c:	4619      	movne	r1, r3
 800049e:	4610      	movne	r0, r2
 80004a0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a4:	bf1c      	itt	ne
 80004a6:	460b      	movne	r3, r1
 80004a8:	4602      	movne	r2, r0
 80004aa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004ae:	bf06      	itte	eq
 80004b0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b4:	ea91 0f03 	teqeq	r1, r3
 80004b8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	bf00      	nop

080004c0 <__aeabi_ui2d>:
 80004c0:	f090 0f00 	teq	r0, #0
 80004c4:	bf04      	itt	eq
 80004c6:	2100      	moveq	r1, #0
 80004c8:	4770      	bxeq	lr
 80004ca:	b530      	push	{r4, r5, lr}
 80004cc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004d0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d4:	f04f 0500 	mov.w	r5, #0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e750      	b.n	8000380 <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_i2d>:
 80004e0:	f090 0f00 	teq	r0, #0
 80004e4:	bf04      	itt	eq
 80004e6:	2100      	moveq	r1, #0
 80004e8:	4770      	bxeq	lr
 80004ea:	b530      	push	{r4, r5, lr}
 80004ec:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004f0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004f4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004f8:	bf48      	it	mi
 80004fa:	4240      	negmi	r0, r0
 80004fc:	f04f 0100 	mov.w	r1, #0
 8000500:	e73e      	b.n	8000380 <__adddf3+0x138>
 8000502:	bf00      	nop

08000504 <__aeabi_f2d>:
 8000504:	0042      	lsls	r2, r0, #1
 8000506:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800050a:	ea4f 0131 	mov.w	r1, r1, rrx
 800050e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000512:	bf1f      	itttt	ne
 8000514:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000518:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800051c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000520:	4770      	bxne	lr
 8000522:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000526:	bf08      	it	eq
 8000528:	4770      	bxeq	lr
 800052a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800052e:	bf04      	itt	eq
 8000530:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000534:	4770      	bxeq	lr
 8000536:	b530      	push	{r4, r5, lr}
 8000538:	f44f 7460 	mov.w	r4, #896	; 0x380
 800053c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000540:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000544:	e71c      	b.n	8000380 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_ul2d>:
 8000548:	ea50 0201 	orrs.w	r2, r0, r1
 800054c:	bf08      	it	eq
 800054e:	4770      	bxeq	lr
 8000550:	b530      	push	{r4, r5, lr}
 8000552:	f04f 0500 	mov.w	r5, #0
 8000556:	e00a      	b.n	800056e <__aeabi_l2d+0x16>

08000558 <__aeabi_l2d>:
 8000558:	ea50 0201 	orrs.w	r2, r0, r1
 800055c:	bf08      	it	eq
 800055e:	4770      	bxeq	lr
 8000560:	b530      	push	{r4, r5, lr}
 8000562:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000566:	d502      	bpl.n	800056e <__aeabi_l2d+0x16>
 8000568:	4240      	negs	r0, r0
 800056a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800056e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000572:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000576:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800057a:	f43f aed8 	beq.w	800032e <__adddf3+0xe6>
 800057e:	f04f 0203 	mov.w	r2, #3
 8000582:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000586:	bf18      	it	ne
 8000588:	3203      	addne	r2, #3
 800058a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058e:	bf18      	it	ne
 8000590:	3203      	addne	r2, #3
 8000592:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000596:	f1c2 0320 	rsb	r3, r2, #32
 800059a:	fa00 fc03 	lsl.w	ip, r0, r3
 800059e:	fa20 f002 	lsr.w	r0, r0, r2
 80005a2:	fa01 fe03 	lsl.w	lr, r1, r3
 80005a6:	ea40 000e 	orr.w	r0, r0, lr
 80005aa:	fa21 f102 	lsr.w	r1, r1, r2
 80005ae:	4414      	add	r4, r2
 80005b0:	e6bd      	b.n	800032e <__adddf3+0xe6>
 80005b2:	bf00      	nop

080005b4 <__aeabi_dmul>:
 80005b4:	b570      	push	{r4, r5, r6, lr}
 80005b6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ba:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005be:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005c2:	bf1d      	ittte	ne
 80005c4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005c8:	ea94 0f0c 	teqne	r4, ip
 80005cc:	ea95 0f0c 	teqne	r5, ip
 80005d0:	f000 f8de 	bleq	8000790 <__aeabi_dmul+0x1dc>
 80005d4:	442c      	add	r4, r5
 80005d6:	ea81 0603 	eor.w	r6, r1, r3
 80005da:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005de:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005e2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005e6:	bf18      	it	ne
 80005e8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005f0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005f4:	d038      	beq.n	8000668 <__aeabi_dmul+0xb4>
 80005f6:	fba0 ce02 	umull	ip, lr, r0, r2
 80005fa:	f04f 0500 	mov.w	r5, #0
 80005fe:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000602:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000606:	fbe0 e503 	umlal	lr, r5, r0, r3
 800060a:	f04f 0600 	mov.w	r6, #0
 800060e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000612:	f09c 0f00 	teq	ip, #0
 8000616:	bf18      	it	ne
 8000618:	f04e 0e01 	orrne.w	lr, lr, #1
 800061c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000620:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000624:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000628:	d204      	bcs.n	8000634 <__aeabi_dmul+0x80>
 800062a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800062e:	416d      	adcs	r5, r5
 8000630:	eb46 0606 	adc.w	r6, r6, r6
 8000634:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000638:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800063c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000640:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000644:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000648:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800064c:	bf88      	it	hi
 800064e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000652:	d81e      	bhi.n	8000692 <__aeabi_dmul+0xde>
 8000654:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000658:	bf08      	it	eq
 800065a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800065e:	f150 0000 	adcs.w	r0, r0, #0
 8000662:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000666:	bd70      	pop	{r4, r5, r6, pc}
 8000668:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800066c:	ea46 0101 	orr.w	r1, r6, r1
 8000670:	ea40 0002 	orr.w	r0, r0, r2
 8000674:	ea81 0103 	eor.w	r1, r1, r3
 8000678:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800067c:	bfc2      	ittt	gt
 800067e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000682:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000686:	bd70      	popgt	{r4, r5, r6, pc}
 8000688:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800068c:	f04f 0e00 	mov.w	lr, #0
 8000690:	3c01      	subs	r4, #1
 8000692:	f300 80ab 	bgt.w	80007ec <__aeabi_dmul+0x238>
 8000696:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800069a:	bfde      	ittt	le
 800069c:	2000      	movle	r0, #0
 800069e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006a2:	bd70      	pople	{r4, r5, r6, pc}
 80006a4:	f1c4 0400 	rsb	r4, r4, #0
 80006a8:	3c20      	subs	r4, #32
 80006aa:	da35      	bge.n	8000718 <__aeabi_dmul+0x164>
 80006ac:	340c      	adds	r4, #12
 80006ae:	dc1b      	bgt.n	80006e8 <__aeabi_dmul+0x134>
 80006b0:	f104 0414 	add.w	r4, r4, #20
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f305 	lsl.w	r3, r0, r5
 80006bc:	fa20 f004 	lsr.w	r0, r0, r4
 80006c0:	fa01 f205 	lsl.w	r2, r1, r5
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d4:	fa21 f604 	lsr.w	r6, r1, r4
 80006d8:	eb42 0106 	adc.w	r1, r2, r6
 80006dc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e0:	bf08      	it	eq
 80006e2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e6:	bd70      	pop	{r4, r5, r6, pc}
 80006e8:	f1c4 040c 	rsb	r4, r4, #12
 80006ec:	f1c4 0520 	rsb	r5, r4, #32
 80006f0:	fa00 f304 	lsl.w	r3, r0, r4
 80006f4:	fa20 f005 	lsr.w	r0, r0, r5
 80006f8:	fa01 f204 	lsl.w	r2, r1, r4
 80006fc:	ea40 0002 	orr.w	r0, r0, r2
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	f141 0100 	adc.w	r1, r1, #0
 800070c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000710:	bf08      	it	eq
 8000712:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000716:	bd70      	pop	{r4, r5, r6, pc}
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f205 	lsl.w	r2, r0, r5
 8000720:	ea4e 0e02 	orr.w	lr, lr, r2
 8000724:	fa20 f304 	lsr.w	r3, r0, r4
 8000728:	fa01 f205 	lsl.w	r2, r1, r5
 800072c:	ea43 0302 	orr.w	r3, r3, r2
 8000730:	fa21 f004 	lsr.w	r0, r1, r4
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	fa21 f204 	lsr.w	r2, r1, r4
 800073c:	ea20 0002 	bic.w	r0, r0, r2
 8000740:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000744:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000748:	bf08      	it	eq
 800074a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074e:	bd70      	pop	{r4, r5, r6, pc}
 8000750:	f094 0f00 	teq	r4, #0
 8000754:	d10f      	bne.n	8000776 <__aeabi_dmul+0x1c2>
 8000756:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800075a:	0040      	lsls	r0, r0, #1
 800075c:	eb41 0101 	adc.w	r1, r1, r1
 8000760:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000764:	bf08      	it	eq
 8000766:	3c01      	subeq	r4, #1
 8000768:	d0f7      	beq.n	800075a <__aeabi_dmul+0x1a6>
 800076a:	ea41 0106 	orr.w	r1, r1, r6
 800076e:	f095 0f00 	teq	r5, #0
 8000772:	bf18      	it	ne
 8000774:	4770      	bxne	lr
 8000776:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800077a:	0052      	lsls	r2, r2, #1
 800077c:	eb43 0303 	adc.w	r3, r3, r3
 8000780:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000784:	bf08      	it	eq
 8000786:	3d01      	subeq	r5, #1
 8000788:	d0f7      	beq.n	800077a <__aeabi_dmul+0x1c6>
 800078a:	ea43 0306 	orr.w	r3, r3, r6
 800078e:	4770      	bx	lr
 8000790:	ea94 0f0c 	teq	r4, ip
 8000794:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000798:	bf18      	it	ne
 800079a:	ea95 0f0c 	teqne	r5, ip
 800079e:	d00c      	beq.n	80007ba <__aeabi_dmul+0x206>
 80007a0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a4:	bf18      	it	ne
 80007a6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007aa:	d1d1      	bne.n	8000750 <__aeabi_dmul+0x19c>
 80007ac:	ea81 0103 	eor.w	r1, r1, r3
 80007b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b4:	f04f 0000 	mov.w	r0, #0
 80007b8:	bd70      	pop	{r4, r5, r6, pc}
 80007ba:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007be:	bf06      	itte	eq
 80007c0:	4610      	moveq	r0, r2
 80007c2:	4619      	moveq	r1, r3
 80007c4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007c8:	d019      	beq.n	80007fe <__aeabi_dmul+0x24a>
 80007ca:	ea94 0f0c 	teq	r4, ip
 80007ce:	d102      	bne.n	80007d6 <__aeabi_dmul+0x222>
 80007d0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007d4:	d113      	bne.n	80007fe <__aeabi_dmul+0x24a>
 80007d6:	ea95 0f0c 	teq	r5, ip
 80007da:	d105      	bne.n	80007e8 <__aeabi_dmul+0x234>
 80007dc:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007e0:	bf1c      	itt	ne
 80007e2:	4610      	movne	r0, r2
 80007e4:	4619      	movne	r1, r3
 80007e6:	d10a      	bne.n	80007fe <__aeabi_dmul+0x24a>
 80007e8:	ea81 0103 	eor.w	r1, r1, r3
 80007ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000802:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000806:	bd70      	pop	{r4, r5, r6, pc}

08000808 <__aeabi_ddiv>:
 8000808:	b570      	push	{r4, r5, r6, lr}
 800080a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800080e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000812:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000816:	bf1d      	ittte	ne
 8000818:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800081c:	ea94 0f0c 	teqne	r4, ip
 8000820:	ea95 0f0c 	teqne	r5, ip
 8000824:	f000 f8a7 	bleq	8000976 <__aeabi_ddiv+0x16e>
 8000828:	eba4 0405 	sub.w	r4, r4, r5
 800082c:	ea81 0e03 	eor.w	lr, r1, r3
 8000830:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000834:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000838:	f000 8088 	beq.w	800094c <__aeabi_ddiv+0x144>
 800083c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000840:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000844:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000848:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800084c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000850:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000854:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000858:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800085c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000860:	429d      	cmp	r5, r3
 8000862:	bf08      	it	eq
 8000864:	4296      	cmpeq	r6, r2
 8000866:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800086a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800086e:	d202      	bcs.n	8000876 <__aeabi_ddiv+0x6e>
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	1ab6      	subs	r6, r6, r2
 8000878:	eb65 0503 	sbc.w	r5, r5, r3
 800087c:	085b      	lsrs	r3, r3, #1
 800087e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000882:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000886:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800088a:	ebb6 0e02 	subs.w	lr, r6, r2
 800088e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000892:	bf22      	ittt	cs
 8000894:	1ab6      	subcs	r6, r6, r2
 8000896:	4675      	movcs	r5, lr
 8000898:	ea40 000c 	orrcs.w	r0, r0, ip
 800089c:	085b      	lsrs	r3, r3, #1
 800089e:	ea4f 0232 	mov.w	r2, r2, rrx
 80008a2:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008aa:	bf22      	ittt	cs
 80008ac:	1ab6      	subcs	r6, r6, r2
 80008ae:	4675      	movcs	r5, lr
 80008b0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	ebb6 0e02 	subs.w	lr, r6, r2
 80008be:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c2:	bf22      	ittt	cs
 80008c4:	1ab6      	subcs	r6, r6, r2
 80008c6:	4675      	movcs	r5, lr
 80008c8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008cc:	085b      	lsrs	r3, r3, #1
 80008ce:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d2:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008da:	bf22      	ittt	cs
 80008dc:	1ab6      	subcs	r6, r6, r2
 80008de:	4675      	movcs	r5, lr
 80008e0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008e4:	ea55 0e06 	orrs.w	lr, r5, r6
 80008e8:	d018      	beq.n	800091c <__aeabi_ddiv+0x114>
 80008ea:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ee:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008f2:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008f6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008fa:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008fe:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000902:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000906:	d1c0      	bne.n	800088a <__aeabi_ddiv+0x82>
 8000908:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800090c:	d10b      	bne.n	8000926 <__aeabi_ddiv+0x11e>
 800090e:	ea41 0100 	orr.w	r1, r1, r0
 8000912:	f04f 0000 	mov.w	r0, #0
 8000916:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800091a:	e7b6      	b.n	800088a <__aeabi_ddiv+0x82>
 800091c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000920:	bf04      	itt	eq
 8000922:	4301      	orreq	r1, r0
 8000924:	2000      	moveq	r0, #0
 8000926:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800092a:	bf88      	it	hi
 800092c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000930:	f63f aeaf 	bhi.w	8000692 <__aeabi_dmul+0xde>
 8000934:	ebb5 0c03 	subs.w	ip, r5, r3
 8000938:	bf04      	itt	eq
 800093a:	ebb6 0c02 	subseq.w	ip, r6, r2
 800093e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000942:	f150 0000 	adcs.w	r0, r0, #0
 8000946:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800094a:	bd70      	pop	{r4, r5, r6, pc}
 800094c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000950:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000954:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000958:	bfc2      	ittt	gt
 800095a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800095e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000962:	bd70      	popgt	{r4, r5, r6, pc}
 8000964:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000968:	f04f 0e00 	mov.w	lr, #0
 800096c:	3c01      	subs	r4, #1
 800096e:	e690      	b.n	8000692 <__aeabi_dmul+0xde>
 8000970:	ea45 0e06 	orr.w	lr, r5, r6
 8000974:	e68d      	b.n	8000692 <__aeabi_dmul+0xde>
 8000976:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800097a:	ea94 0f0c 	teq	r4, ip
 800097e:	bf08      	it	eq
 8000980:	ea95 0f0c 	teqeq	r5, ip
 8000984:	f43f af3b 	beq.w	80007fe <__aeabi_dmul+0x24a>
 8000988:	ea94 0f0c 	teq	r4, ip
 800098c:	d10a      	bne.n	80009a4 <__aeabi_ddiv+0x19c>
 800098e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000992:	f47f af34 	bne.w	80007fe <__aeabi_dmul+0x24a>
 8000996:	ea95 0f0c 	teq	r5, ip
 800099a:	f47f af25 	bne.w	80007e8 <__aeabi_dmul+0x234>
 800099e:	4610      	mov	r0, r2
 80009a0:	4619      	mov	r1, r3
 80009a2:	e72c      	b.n	80007fe <__aeabi_dmul+0x24a>
 80009a4:	ea95 0f0c 	teq	r5, ip
 80009a8:	d106      	bne.n	80009b8 <__aeabi_ddiv+0x1b0>
 80009aa:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009ae:	f43f aefd 	beq.w	80007ac <__aeabi_dmul+0x1f8>
 80009b2:	4610      	mov	r0, r2
 80009b4:	4619      	mov	r1, r3
 80009b6:	e722      	b.n	80007fe <__aeabi_dmul+0x24a>
 80009b8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009bc:	bf18      	it	ne
 80009be:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009c2:	f47f aec5 	bne.w	8000750 <__aeabi_dmul+0x19c>
 80009c6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009ca:	f47f af0d 	bne.w	80007e8 <__aeabi_dmul+0x234>
 80009ce:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009d2:	f47f aeeb 	bne.w	80007ac <__aeabi_dmul+0x1f8>
 80009d6:	e712      	b.n	80007fe <__aeabi_dmul+0x24a>

080009d8 <__aeabi_d2iz>:
 80009d8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009dc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80009e0:	d215      	bcs.n	8000a0e <__aeabi_d2iz+0x36>
 80009e2:	d511      	bpl.n	8000a08 <__aeabi_d2iz+0x30>
 80009e4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80009e8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009ec:	d912      	bls.n	8000a14 <__aeabi_d2iz+0x3c>
 80009ee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009f2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009f6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009fa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80009fe:	fa23 f002 	lsr.w	r0, r3, r2
 8000a02:	bf18      	it	ne
 8000a04:	4240      	negne	r0, r0
 8000a06:	4770      	bx	lr
 8000a08:	f04f 0000 	mov.w	r0, #0
 8000a0c:	4770      	bx	lr
 8000a0e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a12:	d105      	bne.n	8000a20 <__aeabi_d2iz+0x48>
 8000a14:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a18:	bf08      	it	eq
 8000a1a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a1e:	4770      	bx	lr
 8000a20:	f04f 0000 	mov.w	r0, #0
 8000a24:	4770      	bx	lr
 8000a26:	bf00      	nop

08000a28 <__aeabi_d2uiz>:
 8000a28:	004a      	lsls	r2, r1, #1
 8000a2a:	d211      	bcs.n	8000a50 <__aeabi_d2uiz+0x28>
 8000a2c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a30:	d211      	bcs.n	8000a56 <__aeabi_d2uiz+0x2e>
 8000a32:	d50d      	bpl.n	8000a50 <__aeabi_d2uiz+0x28>
 8000a34:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a38:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a3c:	d40e      	bmi.n	8000a5c <__aeabi_d2uiz+0x34>
 8000a3e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a42:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a46:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a4e:	4770      	bx	lr
 8000a50:	f04f 0000 	mov.w	r0, #0
 8000a54:	4770      	bx	lr
 8000a56:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a5a:	d102      	bne.n	8000a62 <__aeabi_d2uiz+0x3a>
 8000a5c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a60:	4770      	bx	lr
 8000a62:	f04f 0000 	mov.w	r0, #0
 8000a66:	4770      	bx	lr

08000a68 <Ov7725_Init>:

/************************************************
 * Sensor_Init
 ************************************************/
ErrorStatus Ov7725_Init(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b082      	sub	sp, #8
 8000a6c:	af00      	add	r7, sp, #0
	uint16_t i = 0;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	80fb      	strh	r3, [r7, #6]
	uint8_t Sensor_IDCode = 0;	
 8000a72:	2300      	movs	r3, #0
 8000a74:	717b      	strb	r3, [r7, #5]
	
	if( 0 == SCCB_WriteByte ( 0x12, 0x80 ) ) /*reset sensor */
 8000a76:	2180      	movs	r1, #128	; 0x80
 8000a78:	2012      	movs	r0, #18
 8000a7a:	f000 f999 	bl	8000db0 <SCCB_WriteByte>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d101      	bne.n	8000a88 <Ov7725_Init+0x20>
	{
		return ERROR ;
 8000a84:	2301      	movs	r3, #1
 8000a86:	e030      	b.n	8000aea <Ov7725_Init+0x82>
	}	

	if( 0 == SCCB_ReadByte( &Sensor_IDCode, 1, 0x0b ) )	 /* read sensor ID*/
 8000a88:	1d7b      	adds	r3, r7, #5
 8000a8a:	220b      	movs	r2, #11
 8000a8c:	2101      	movs	r1, #1
 8000a8e:	4618      	mov	r0, r3
 8000a90:	f000 f9bd 	bl	8000e0e <SCCB_ReadByte>
 8000a94:	4603      	mov	r3, r0
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d101      	bne.n	8000a9e <Ov7725_Init+0x36>
	{
		return ERROR;
 8000a9a:	2301      	movs	r3, #1
 8000a9c:	e025      	b.n	8000aea <Ov7725_Init+0x82>
	}
	//DEBUG("Sensor ID is 0x%x", Sensor_IDCode);	
	
	if(Sensor_IDCode == OV7725_ID)
 8000a9e:	797b      	ldrb	r3, [r7, #5]
 8000aa0:	2b21      	cmp	r3, #33	; 0x21
 8000aa2:	d11f      	bne.n	8000ae4 <Ov7725_Init+0x7c>
	{
		for( i = 0 ; i < OV7725_REG_NUM ; i++ )
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	80fb      	strh	r3, [r7, #6]
 8000aa8:	e015      	b.n	8000ad6 <Ov7725_Init+0x6e>
		{
			if( 0 == SCCB_WriteByte(Sensor_Config[i].Address, Sensor_Config[i].Value) )
 8000aaa:	88fb      	ldrh	r3, [r7, #6]
 8000aac:	4a11      	ldr	r2, [pc, #68]	; (8000af4 <Ov7725_Init+0x8c>)
 8000aae:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8000ab2:	b29a      	uxth	r2, r3
 8000ab4:	88fb      	ldrh	r3, [r7, #6]
 8000ab6:	490f      	ldr	r1, [pc, #60]	; (8000af4 <Ov7725_Init+0x8c>)
 8000ab8:	005b      	lsls	r3, r3, #1
 8000aba:	440b      	add	r3, r1
 8000abc:	785b      	ldrb	r3, [r3, #1]
 8000abe:	4619      	mov	r1, r3
 8000ac0:	4610      	mov	r0, r2
 8000ac2:	f000 f975 	bl	8000db0 <SCCB_WriteByte>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d101      	bne.n	8000ad0 <Ov7725_Init+0x68>
			{                
				return ERROR;
 8000acc:	2301      	movs	r3, #1
 8000ace:	e00c      	b.n	8000aea <Ov7725_Init+0x82>
		for( i = 0 ; i < OV7725_REG_NUM ; i++ )
 8000ad0:	88fb      	ldrh	r3, [r7, #6]
 8000ad2:	3301      	adds	r3, #1
 8000ad4:	80fb      	strh	r3, [r7, #6]
 8000ad6:	4b08      	ldr	r3, [pc, #32]	; (8000af8 <Ov7725_Init+0x90>)
 8000ad8:	781b      	ldrb	r3, [r3, #0]
 8000ada:	b29b      	uxth	r3, r3
 8000adc:	88fa      	ldrh	r2, [r7, #6]
 8000ade:	429a      	cmp	r2, r3
 8000ae0:	d3e3      	bcc.n	8000aaa <Ov7725_Init+0x42>
 8000ae2:	e001      	b.n	8000ae8 <Ov7725_Init+0x80>
			}
		}
	}
	else
	{
		return ERROR;
 8000ae4:	2301      	movs	r3, #1
 8000ae6:	e000      	b.n	8000aea <Ov7725_Init+0x82>
	}
	
	return SUCCESS;
 8000ae8:	2300      	movs	r3, #0
}
 8000aea:	4618      	mov	r0, r3
 8000aec:	3708      	adds	r7, #8
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	bf00      	nop
 8000af4:	20000000 	.word	0x20000000
 8000af8:	2000009a 	.word	0x2000009a

08000afc <ImagDisp>:

void ImagDisp(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b082      	sub	sp, #8
 8000b00:	af00      	add	r7, sp, #0
	uint16_t i, j;
	uint16_t Camera_Data;
	
	LCD_Cam_Gram();
 8000b02:	f000 fd21 	bl	8001548 <LCD_Cam_Gram>
	
	for(i = 0; i < 240; i++)
 8000b06:	2300      	movs	r3, #0
 8000b08:	80fb      	strh	r3, [r7, #6]
 8000b0a:	e02c      	b.n	8000b66 <ImagDisp+0x6a>
	{
		for(j = 0; j < 320; j++)
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	80bb      	strh	r3, [r7, #4]
 8000b10:	e022      	b.n	8000b58 <ImagDisp+0x5c>
		{
			READ_FIFO_PIXEL(Camera_Data);		
 8000b12:	2300      	movs	r3, #0
 8000b14:	807b      	strh	r3, [r7, #2]
 8000b16:	4b19      	ldr	r3, [pc, #100]	; (8000b7c <ImagDisp+0x80>)
 8000b18:	2220      	movs	r2, #32
 8000b1a:	615a      	str	r2, [r3, #20]
 8000b1c:	4b18      	ldr	r3, [pc, #96]	; (8000b80 <ImagDisp+0x84>)
 8000b1e:	689b      	ldr	r3, [r3, #8]
 8000b20:	b29b      	uxth	r3, r3
 8000b22:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8000b26:	807b      	strh	r3, [r7, #2]
 8000b28:	4b14      	ldr	r3, [pc, #80]	; (8000b7c <ImagDisp+0x80>)
 8000b2a:	2220      	movs	r2, #32
 8000b2c:	611a      	str	r2, [r3, #16]
 8000b2e:	4b13      	ldr	r3, [pc, #76]	; (8000b7c <ImagDisp+0x80>)
 8000b30:	2220      	movs	r2, #32
 8000b32:	615a      	str	r2, [r3, #20]
 8000b34:	4b12      	ldr	r3, [pc, #72]	; (8000b80 <ImagDisp+0x84>)
 8000b36:	689b      	ldr	r3, [r3, #8]
 8000b38:	0a1b      	lsrs	r3, r3, #8
 8000b3a:	b2db      	uxtb	r3, r3
 8000b3c:	b29a      	uxth	r2, r3
 8000b3e:	887b      	ldrh	r3, [r7, #2]
 8000b40:	4313      	orrs	r3, r2
 8000b42:	807b      	strh	r3, [r7, #2]
 8000b44:	4b0d      	ldr	r3, [pc, #52]	; (8000b7c <ImagDisp+0x80>)
 8000b46:	2220      	movs	r2, #32
 8000b48:	611a      	str	r2, [r3, #16]
			LCD_Write_Data(Camera_Data);
 8000b4a:	887b      	ldrh	r3, [r7, #2]
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	f000 fa1d 	bl	8000f8c <LCD_Write_Data>
		for(j = 0; j < 320; j++)
 8000b52:	88bb      	ldrh	r3, [r7, #4]
 8000b54:	3301      	adds	r3, #1
 8000b56:	80bb      	strh	r3, [r7, #4]
 8000b58:	88bb      	ldrh	r3, [r7, #4]
 8000b5a:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8000b5e:	d3d8      	bcc.n	8000b12 <ImagDisp+0x16>
	for(i = 0; i < 240; i++)
 8000b60:	88fb      	ldrh	r3, [r7, #6]
 8000b62:	3301      	adds	r3, #1
 8000b64:	80fb      	strh	r3, [r7, #6]
 8000b66:	88fb      	ldrh	r3, [r7, #6]
 8000b68:	2bef      	cmp	r3, #239	; 0xef
 8000b6a:	d9cf      	bls.n	8000b0c <ImagDisp+0x10>
		}
	}
	HAL_Delay(1000);
 8000b6c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b70:	f003 f8e0 	bl	8003d34 <HAL_Delay>
}
 8000b74:	bf00      	nop
 8000b76:	3708      	adds	r7, #8
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bd80      	pop	{r7, pc}
 8000b7c:	40011000 	.word	0x40011000
 8000b80:	40010c00 	.word	0x40010c00

08000b84 <SCCB_delay>:

#define DEV_ADR  ADDR_OV7725 			 


static void SCCB_delay(void)
{	
 8000b84:	b480      	push	{r7}
 8000b86:	b083      	sub	sp, #12
 8000b88:	af00      	add	r7, sp, #0
   uint16_t i = 400; 
 8000b8a:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000b8e:	80fb      	strh	r3, [r7, #6]
   while(i) 
 8000b90:	e002      	b.n	8000b98 <SCCB_delay+0x14>
   { 
     i--; 
 8000b92:	88fb      	ldrh	r3, [r7, #6]
 8000b94:	3b01      	subs	r3, #1
 8000b96:	80fb      	strh	r3, [r7, #6]
   while(i) 
 8000b98:	88fb      	ldrh	r3, [r7, #6]
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d1f9      	bne.n	8000b92 <SCCB_delay+0xe>
   } 
}
 8000b9e:	bf00      	nop
 8000ba0:	bf00      	nop
 8000ba2:	370c      	adds	r7, #12
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bc80      	pop	{r7}
 8000ba8:	4770      	bx	lr
	...

08000bac <SCCB_Start>:


static int SCCB_Start(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	af00      	add	r7, sp, #0
	SDA_H;
 8000bb0:	4b13      	ldr	r3, [pc, #76]	; (8000c00 <SCCB_Start+0x54>)
 8000bb2:	2280      	movs	r2, #128	; 0x80
 8000bb4:	611a      	str	r2, [r3, #16]
	SCL_H;
 8000bb6:	4b12      	ldr	r3, [pc, #72]	; (8000c00 <SCCB_Start+0x54>)
 8000bb8:	2240      	movs	r2, #64	; 0x40
 8000bba:	611a      	str	r2, [r3, #16]
	SCCB_delay();
 8000bbc:	f7ff ffe2 	bl	8000b84 <SCCB_delay>
	if(!SDA_read)
 8000bc0:	2180      	movs	r1, #128	; 0x80
 8000bc2:	480f      	ldr	r0, [pc, #60]	; (8000c00 <SCCB_Start+0x54>)
 8000bc4:	f004 f866 	bl	8004c94 <HAL_GPIO_ReadPin>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d101      	bne.n	8000bd2 <SCCB_Start+0x26>
	return DISABLE;	
 8000bce:	2300      	movs	r3, #0
 8000bd0:	e013      	b.n	8000bfa <SCCB_Start+0x4e>
	SDA_L;
 8000bd2:	4b0b      	ldr	r3, [pc, #44]	; (8000c00 <SCCB_Start+0x54>)
 8000bd4:	2280      	movs	r2, #128	; 0x80
 8000bd6:	615a      	str	r2, [r3, #20]
	SCCB_delay();
 8000bd8:	f7ff ffd4 	bl	8000b84 <SCCB_delay>
	if(SDA_read) 
 8000bdc:	2180      	movs	r1, #128	; 0x80
 8000bde:	4808      	ldr	r0, [pc, #32]	; (8000c00 <SCCB_Start+0x54>)
 8000be0:	f004 f858 	bl	8004c94 <HAL_GPIO_ReadPin>
 8000be4:	4603      	mov	r3, r0
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d001      	beq.n	8000bee <SCCB_Start+0x42>
	return DISABLE;	
 8000bea:	2300      	movs	r3, #0
 8000bec:	e005      	b.n	8000bfa <SCCB_Start+0x4e>
	SDA_L;
 8000bee:	4b04      	ldr	r3, [pc, #16]	; (8000c00 <SCCB_Start+0x54>)
 8000bf0:	2280      	movs	r2, #128	; 0x80
 8000bf2:	615a      	str	r2, [r3, #20]
	SCCB_delay();
 8000bf4:	f7ff ffc6 	bl	8000b84 <SCCB_delay>
	return ENABLE;
 8000bf8:	2301      	movs	r3, #1
}
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	40011000 	.word	0x40011000

08000c04 <SCCB_Stop>:


static void SCCB_Stop(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	af00      	add	r7, sp, #0
	SCL_L;
 8000c08:	4b0a      	ldr	r3, [pc, #40]	; (8000c34 <SCCB_Stop+0x30>)
 8000c0a:	2240      	movs	r2, #64	; 0x40
 8000c0c:	615a      	str	r2, [r3, #20]
	SCCB_delay();
 8000c0e:	f7ff ffb9 	bl	8000b84 <SCCB_delay>
	SDA_L;
 8000c12:	4b08      	ldr	r3, [pc, #32]	; (8000c34 <SCCB_Stop+0x30>)
 8000c14:	2280      	movs	r2, #128	; 0x80
 8000c16:	615a      	str	r2, [r3, #20]
	SCCB_delay();
 8000c18:	f7ff ffb4 	bl	8000b84 <SCCB_delay>
	SCL_H;
 8000c1c:	4b05      	ldr	r3, [pc, #20]	; (8000c34 <SCCB_Stop+0x30>)
 8000c1e:	2240      	movs	r2, #64	; 0x40
 8000c20:	611a      	str	r2, [r3, #16]
	SCCB_delay();
 8000c22:	f7ff ffaf 	bl	8000b84 <SCCB_delay>
	SDA_H;
 8000c26:	4b03      	ldr	r3, [pc, #12]	; (8000c34 <SCCB_Stop+0x30>)
 8000c28:	2280      	movs	r2, #128	; 0x80
 8000c2a:	611a      	str	r2, [r3, #16]
	SCCB_delay();
 8000c2c:	f7ff ffaa 	bl	8000b84 <SCCB_delay>
}
 8000c30:	bf00      	nop
 8000c32:	bd80      	pop	{r7, pc}
 8000c34:	40011000 	.word	0x40011000

08000c38 <SCCB_Ack>:


static void SCCB_Ack(void)
{	
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	af00      	add	r7, sp, #0
	SCL_L;
 8000c3c:	4b0a      	ldr	r3, [pc, #40]	; (8000c68 <SCCB_Ack+0x30>)
 8000c3e:	2240      	movs	r2, #64	; 0x40
 8000c40:	615a      	str	r2, [r3, #20]
	SCCB_delay();
 8000c42:	f7ff ff9f 	bl	8000b84 <SCCB_delay>
	SDA_L;
 8000c46:	4b08      	ldr	r3, [pc, #32]	; (8000c68 <SCCB_Ack+0x30>)
 8000c48:	2280      	movs	r2, #128	; 0x80
 8000c4a:	615a      	str	r2, [r3, #20]
	SCCB_delay();
 8000c4c:	f7ff ff9a 	bl	8000b84 <SCCB_delay>
	SCL_H;
 8000c50:	4b05      	ldr	r3, [pc, #20]	; (8000c68 <SCCB_Ack+0x30>)
 8000c52:	2240      	movs	r2, #64	; 0x40
 8000c54:	611a      	str	r2, [r3, #16]
	SCCB_delay();
 8000c56:	f7ff ff95 	bl	8000b84 <SCCB_delay>
	SCL_L;
 8000c5a:	4b03      	ldr	r3, [pc, #12]	; (8000c68 <SCCB_Ack+0x30>)
 8000c5c:	2240      	movs	r2, #64	; 0x40
 8000c5e:	615a      	str	r2, [r3, #20]
	SCCB_delay();
 8000c60:	f7ff ff90 	bl	8000b84 <SCCB_delay>
}
 8000c64:	bf00      	nop
 8000c66:	bd80      	pop	{r7, pc}
 8000c68:	40011000 	.word	0x40011000

08000c6c <SCCB_NoAck>:


static void SCCB_NoAck(void)
{	
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	af00      	add	r7, sp, #0
	SCL_L;
 8000c70:	4b0a      	ldr	r3, [pc, #40]	; (8000c9c <SCCB_NoAck+0x30>)
 8000c72:	2240      	movs	r2, #64	; 0x40
 8000c74:	615a      	str	r2, [r3, #20]
	SCCB_delay();
 8000c76:	f7ff ff85 	bl	8000b84 <SCCB_delay>
	SDA_H;
 8000c7a:	4b08      	ldr	r3, [pc, #32]	; (8000c9c <SCCB_NoAck+0x30>)
 8000c7c:	2280      	movs	r2, #128	; 0x80
 8000c7e:	611a      	str	r2, [r3, #16]
	SCCB_delay();
 8000c80:	f7ff ff80 	bl	8000b84 <SCCB_delay>
	SCL_H;
 8000c84:	4b05      	ldr	r3, [pc, #20]	; (8000c9c <SCCB_NoAck+0x30>)
 8000c86:	2240      	movs	r2, #64	; 0x40
 8000c88:	611a      	str	r2, [r3, #16]
	SCCB_delay();
 8000c8a:	f7ff ff7b 	bl	8000b84 <SCCB_delay>
	SCL_L;
 8000c8e:	4b03      	ldr	r3, [pc, #12]	; (8000c9c <SCCB_NoAck+0x30>)
 8000c90:	2240      	movs	r2, #64	; 0x40
 8000c92:	615a      	str	r2, [r3, #20]
	SCCB_delay();
 8000c94:	f7ff ff76 	bl	8000b84 <SCCB_delay>
}
 8000c98:	bf00      	nop
 8000c9a:	bd80      	pop	{r7, pc}
 8000c9c:	40011000 	.word	0x40011000

08000ca0 <SCCB_WaitAck>:


static int SCCB_WaitAck(void) 	
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	af00      	add	r7, sp, #0
	SCL_L;
 8000ca4:	4b10      	ldr	r3, [pc, #64]	; (8000ce8 <SCCB_WaitAck+0x48>)
 8000ca6:	2240      	movs	r2, #64	; 0x40
 8000ca8:	615a      	str	r2, [r3, #20]
	SCCB_delay();
 8000caa:	f7ff ff6b 	bl	8000b84 <SCCB_delay>
	SDA_H;			
 8000cae:	4b0e      	ldr	r3, [pc, #56]	; (8000ce8 <SCCB_WaitAck+0x48>)
 8000cb0:	2280      	movs	r2, #128	; 0x80
 8000cb2:	611a      	str	r2, [r3, #16]
	SCCB_delay();
 8000cb4:	f7ff ff66 	bl	8000b84 <SCCB_delay>
	SCL_H;
 8000cb8:	4b0b      	ldr	r3, [pc, #44]	; (8000ce8 <SCCB_WaitAck+0x48>)
 8000cba:	2240      	movs	r2, #64	; 0x40
 8000cbc:	611a      	str	r2, [r3, #16]
	SCCB_delay();
 8000cbe:	f7ff ff61 	bl	8000b84 <SCCB_delay>
	if(SDA_read)
 8000cc2:	2180      	movs	r1, #128	; 0x80
 8000cc4:	4808      	ldr	r0, [pc, #32]	; (8000ce8 <SCCB_WaitAck+0x48>)
 8000cc6:	f003 ffe5 	bl	8004c94 <HAL_GPIO_ReadPin>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d004      	beq.n	8000cda <SCCB_WaitAck+0x3a>
	{
      SCL_L;
 8000cd0:	4b05      	ldr	r3, [pc, #20]	; (8000ce8 <SCCB_WaitAck+0x48>)
 8000cd2:	2240      	movs	r2, #64	; 0x40
 8000cd4:	615a      	str	r2, [r3, #20]
      return DISABLE;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	e003      	b.n	8000ce2 <SCCB_WaitAck+0x42>
	}
	SCL_L;
 8000cda:	4b03      	ldr	r3, [pc, #12]	; (8000ce8 <SCCB_WaitAck+0x48>)
 8000cdc:	2240      	movs	r2, #64	; 0x40
 8000cde:	615a      	str	r2, [r3, #20]
	return ENABLE;
 8000ce0:	2301      	movs	r3, #1
}
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	40011000 	.word	0x40011000

08000cec <SCCB_SendByte>:


static void SCCB_SendByte(uint8_t SendByte) 
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b084      	sub	sp, #16
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	71fb      	strb	r3, [r7, #7]
    uint8_t i=8;
 8000cf6:	2308      	movs	r3, #8
 8000cf8:	73fb      	strb	r3, [r7, #15]
    while(i--)
 8000cfa:	e019      	b.n	8000d30 <SCCB_SendByte+0x44>
    {
        SCL_L;
 8000cfc:	4b12      	ldr	r3, [pc, #72]	; (8000d48 <SCCB_SendByte+0x5c>)
 8000cfe:	2240      	movs	r2, #64	; 0x40
 8000d00:	615a      	str	r2, [r3, #20]
        SCCB_delay();
 8000d02:	f7ff ff3f 	bl	8000b84 <SCCB_delay>
      if(SendByte&0x80)
 8000d06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	da03      	bge.n	8000d16 <SCCB_SendByte+0x2a>
        SDA_H;  
 8000d0e:	4b0e      	ldr	r3, [pc, #56]	; (8000d48 <SCCB_SendByte+0x5c>)
 8000d10:	2280      	movs	r2, #128	; 0x80
 8000d12:	611a      	str	r2, [r3, #16]
 8000d14:	e002      	b.n	8000d1c <SCCB_SendByte+0x30>
      else 
        SDA_L;   
 8000d16:	4b0c      	ldr	r3, [pc, #48]	; (8000d48 <SCCB_SendByte+0x5c>)
 8000d18:	2280      	movs	r2, #128	; 0x80
 8000d1a:	615a      	str	r2, [r3, #20]
        SendByte<<=1;
 8000d1c:	79fb      	ldrb	r3, [r7, #7]
 8000d1e:	005b      	lsls	r3, r3, #1
 8000d20:	71fb      	strb	r3, [r7, #7]
        SCCB_delay();
 8000d22:	f7ff ff2f 	bl	8000b84 <SCCB_delay>
		SCL_H;
 8000d26:	4b08      	ldr	r3, [pc, #32]	; (8000d48 <SCCB_SendByte+0x5c>)
 8000d28:	2240      	movs	r2, #64	; 0x40
 8000d2a:	611a      	str	r2, [r3, #16]
        SCCB_delay();
 8000d2c:	f7ff ff2a 	bl	8000b84 <SCCB_delay>
    while(i--)
 8000d30:	7bfb      	ldrb	r3, [r7, #15]
 8000d32:	1e5a      	subs	r2, r3, #1
 8000d34:	73fa      	strb	r2, [r7, #15]
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d1e0      	bne.n	8000cfc <SCCB_SendByte+0x10>
    }
    SCL_L;
 8000d3a:	4b03      	ldr	r3, [pc, #12]	; (8000d48 <SCCB_SendByte+0x5c>)
 8000d3c:	2240      	movs	r2, #64	; 0x40
 8000d3e:	615a      	str	r2, [r3, #20]
}
 8000d40:	bf00      	nop
 8000d42:	3710      	adds	r7, #16
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bd80      	pop	{r7, pc}
 8000d48:	40011000 	.word	0x40011000

08000d4c <SCCB_ReceiveByte>:


static int SCCB_ReceiveByte(void)  
{ 
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b082      	sub	sp, #8
 8000d50:	af00      	add	r7, sp, #0
    uint8_t i=8;
 8000d52:	2308      	movs	r3, #8
 8000d54:	71fb      	strb	r3, [r7, #7]
    uint8_t ReceiveByte=0;
 8000d56:	2300      	movs	r3, #0
 8000d58:	71bb      	strb	r3, [r7, #6]

    SDA_H;				
 8000d5a:	4b14      	ldr	r3, [pc, #80]	; (8000dac <SCCB_ReceiveByte+0x60>)
 8000d5c:	2280      	movs	r2, #128	; 0x80
 8000d5e:	611a      	str	r2, [r3, #16]
    while(i--)
 8000d60:	e017      	b.n	8000d92 <SCCB_ReceiveByte+0x46>
    {
      ReceiveByte<<=1;      
 8000d62:	79bb      	ldrb	r3, [r7, #6]
 8000d64:	005b      	lsls	r3, r3, #1
 8000d66:	71bb      	strb	r3, [r7, #6]
      SCL_L;
 8000d68:	4b10      	ldr	r3, [pc, #64]	; (8000dac <SCCB_ReceiveByte+0x60>)
 8000d6a:	2240      	movs	r2, #64	; 0x40
 8000d6c:	615a      	str	r2, [r3, #20]
      SCCB_delay();
 8000d6e:	f7ff ff09 	bl	8000b84 <SCCB_delay>
	  SCL_H;
 8000d72:	4b0e      	ldr	r3, [pc, #56]	; (8000dac <SCCB_ReceiveByte+0x60>)
 8000d74:	2240      	movs	r2, #64	; 0x40
 8000d76:	611a      	str	r2, [r3, #16]
      SCCB_delay();	
 8000d78:	f7ff ff04 	bl	8000b84 <SCCB_delay>
      if(SDA_read)
 8000d7c:	2180      	movs	r1, #128	; 0x80
 8000d7e:	480b      	ldr	r0, [pc, #44]	; (8000dac <SCCB_ReceiveByte+0x60>)
 8000d80:	f003 ff88 	bl	8004c94 <HAL_GPIO_ReadPin>
 8000d84:	4603      	mov	r3, r0
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d003      	beq.n	8000d92 <SCCB_ReceiveByte+0x46>
      {
        ReceiveByte|=0x01;
 8000d8a:	79bb      	ldrb	r3, [r7, #6]
 8000d8c:	f043 0301 	orr.w	r3, r3, #1
 8000d90:	71bb      	strb	r3, [r7, #6]
    while(i--)
 8000d92:	79fb      	ldrb	r3, [r7, #7]
 8000d94:	1e5a      	subs	r2, r3, #1
 8000d96:	71fa      	strb	r2, [r7, #7]
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d1e2      	bne.n	8000d62 <SCCB_ReceiveByte+0x16>
      }
    }
    SCL_L;
 8000d9c:	4b03      	ldr	r3, [pc, #12]	; (8000dac <SCCB_ReceiveByte+0x60>)
 8000d9e:	2240      	movs	r2, #64	; 0x40
 8000da0:	615a      	str	r2, [r3, #20]
    return ReceiveByte;
 8000da2:	79bb      	ldrb	r3, [r7, #6]
}
 8000da4:	4618      	mov	r0, r3
 8000da6:	3708      	adds	r7, #8
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}
 8000dac:	40011000 	.word	0x40011000

08000db0 <SCCB_WriteByte>:

          
int SCCB_WriteByte( uint16_t WriteAddress , uint8_t SendByte )
{		
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b082      	sub	sp, #8
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	4603      	mov	r3, r0
 8000db8:	460a      	mov	r2, r1
 8000dba:	80fb      	strh	r3, [r7, #6]
 8000dbc:	4613      	mov	r3, r2
 8000dbe:	717b      	strb	r3, [r7, #5]
    if(!SCCB_Start())
 8000dc0:	f7ff fef4 	bl	8000bac <SCCB_Start>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d101      	bne.n	8000dce <SCCB_WriteByte+0x1e>
	{
	    return DISABLE;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	e01b      	b.n	8000e06 <SCCB_WriteByte+0x56>
	}
    SCCB_SendByte( DEV_ADR );                
 8000dce:	2042      	movs	r0, #66	; 0x42
 8000dd0:	f7ff ff8c 	bl	8000cec <SCCB_SendByte>
    if( !SCCB_WaitAck() )
 8000dd4:	f7ff ff64 	bl	8000ca0 <SCCB_WaitAck>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d103      	bne.n	8000de6 <SCCB_WriteByte+0x36>
	{
		SCCB_Stop(); 
 8000dde:	f7ff ff11 	bl	8000c04 <SCCB_Stop>
		return DISABLE;
 8000de2:	2300      	movs	r3, #0
 8000de4:	e00f      	b.n	8000e06 <SCCB_WriteByte+0x56>
	}
    SCCB_SendByte((uint8_t)(WriteAddress & 0x00FF));  
 8000de6:	88fb      	ldrh	r3, [r7, #6]
 8000de8:	b2db      	uxtb	r3, r3
 8000dea:	4618      	mov	r0, r3
 8000dec:	f7ff ff7e 	bl	8000cec <SCCB_SendByte>
    SCCB_WaitAck();	
 8000df0:	f7ff ff56 	bl	8000ca0 <SCCB_WaitAck>
    SCCB_SendByte(SendByte);
 8000df4:	797b      	ldrb	r3, [r7, #5]
 8000df6:	4618      	mov	r0, r3
 8000df8:	f7ff ff78 	bl	8000cec <SCCB_SendByte>
    SCCB_WaitAck();   
 8000dfc:	f7ff ff50 	bl	8000ca0 <SCCB_WaitAck>
    SCCB_Stop(); 
 8000e00:	f7ff ff00 	bl	8000c04 <SCCB_Stop>
    return ENABLE;
 8000e04:	2301      	movs	r3, #1
}
 8000e06:	4618      	mov	r0, r3
 8000e08:	3708      	adds	r7, #8
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}

08000e0e <SCCB_ReadByte>:

          
int SCCB_ReadByte(uint8_t* pBuffer, uint16_t length, uint8_t ReadAddress)
{	
 8000e0e:	b580      	push	{r7, lr}
 8000e10:	b082      	sub	sp, #8
 8000e12:	af00      	add	r7, sp, #0
 8000e14:	6078      	str	r0, [r7, #4]
 8000e16:	460b      	mov	r3, r1
 8000e18:	807b      	strh	r3, [r7, #2]
 8000e1a:	4613      	mov	r3, r2
 8000e1c:	707b      	strb	r3, [r7, #1]
    if(!SCCB_Start())
 8000e1e:	f7ff fec5 	bl	8000bac <SCCB_Start>
 8000e22:	4603      	mov	r3, r0
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d101      	bne.n	8000e2c <SCCB_ReadByte+0x1e>
	{
	    return DISABLE;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	e040      	b.n	8000eae <SCCB_ReadByte+0xa0>
	}
    SCCB_SendByte( DEV_ADR );       
 8000e2c:	2042      	movs	r0, #66	; 0x42
 8000e2e:	f7ff ff5d 	bl	8000cec <SCCB_SendByte>
    if( !SCCB_WaitAck() )
 8000e32:	f7ff ff35 	bl	8000ca0 <SCCB_WaitAck>
 8000e36:	4603      	mov	r3, r0
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d103      	bne.n	8000e44 <SCCB_ReadByte+0x36>
	{
		SCCB_Stop(); 
 8000e3c:	f7ff fee2 	bl	8000c04 <SCCB_Stop>
		return DISABLE;
 8000e40:	2300      	movs	r3, #0
 8000e42:	e034      	b.n	8000eae <SCCB_ReadByte+0xa0>
	}
    SCCB_SendByte( ReadAddress );     
 8000e44:	787b      	ldrb	r3, [r7, #1]
 8000e46:	4618      	mov	r0, r3
 8000e48:	f7ff ff50 	bl	8000cec <SCCB_SendByte>
    SCCB_WaitAck();	
 8000e4c:	f7ff ff28 	bl	8000ca0 <SCCB_WaitAck>
    SCCB_Stop(); 
 8000e50:	f7ff fed8 	bl	8000c04 <SCCB_Stop>
	
    if(!SCCB_Start())
 8000e54:	f7ff feaa 	bl	8000bac <SCCB_Start>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d101      	bne.n	8000e62 <SCCB_ReadByte+0x54>
	{
		return DISABLE;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	e025      	b.n	8000eae <SCCB_ReadByte+0xa0>
	}
    SCCB_SendByte( DEV_ADR + 1 );   
 8000e62:	2043      	movs	r0, #67	; 0x43
 8000e64:	f7ff ff42 	bl	8000cec <SCCB_SendByte>
    if(!SCCB_WaitAck())
 8000e68:	f7ff ff1a 	bl	8000ca0 <SCCB_WaitAck>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d117      	bne.n	8000ea2 <SCCB_ReadByte+0x94>
	{
		SCCB_Stop(); 
 8000e72:	f7ff fec7 	bl	8000c04 <SCCB_Stop>
		return DISABLE;
 8000e76:	2300      	movs	r3, #0
 8000e78:	e019      	b.n	8000eae <SCCB_ReadByte+0xa0>
	}
    while(length)
    {
      *pBuffer = SCCB_ReceiveByte();
 8000e7a:	f7ff ff67 	bl	8000d4c <SCCB_ReceiveByte>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	b2da      	uxtb	r2, r3
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	701a      	strb	r2, [r3, #0]
      if(length == 1)
 8000e86:	887b      	ldrh	r3, [r7, #2]
 8000e88:	2b01      	cmp	r3, #1
 8000e8a:	d102      	bne.n	8000e92 <SCCB_ReadByte+0x84>
	  {
		  SCCB_NoAck();
 8000e8c:	f7ff feee 	bl	8000c6c <SCCB_NoAck>
 8000e90:	e001      	b.n	8000e96 <SCCB_ReadByte+0x88>
	  }
      else
	  {
		SCCB_Ack(); 
 8000e92:	f7ff fed1 	bl	8000c38 <SCCB_Ack>
	  }
      pBuffer++;
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	3301      	adds	r3, #1
 8000e9a:	607b      	str	r3, [r7, #4]
      length--;
 8000e9c:	887b      	ldrh	r3, [r7, #2]
 8000e9e:	3b01      	subs	r3, #1
 8000ea0:	807b      	strh	r3, [r7, #2]
    while(length)
 8000ea2:	887b      	ldrh	r3, [r7, #2]
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d1e8      	bne.n	8000e7a <SCCB_ReadByte+0x6c>
    }
    SCCB_Stop();
 8000ea8:	f7ff feac 	bl	8000c04 <SCCB_Stop>
    return ENABLE;
 8000eac:	2301      	movs	r3, #1
}
 8000eae:	4618      	mov	r0, r3
 8000eb0:	3708      	adds	r7, #8
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}

08000eb6 <Delay>:
void		LCD_FillColor           ( uint32_t ulAmout_Point, uint16_t usColor );
uint16_t	LCD_Read_PixelData      ( void );



void Delay ( __IO uint32_t nCount ){  for ( ; nCount != 0; nCount -- );}
 8000eb6:	b480      	push	{r7}
 8000eb8:	b083      	sub	sp, #12
 8000eba:	af00      	add	r7, sp, #0
 8000ebc:	6078      	str	r0, [r7, #4]
 8000ebe:	e002      	b.n	8000ec6 <Delay+0x10>
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	3b01      	subs	r3, #1
 8000ec4:	607b      	str	r3, [r7, #4]
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d1f9      	bne.n	8000ec0 <Delay+0xa>
 8000ecc:	bf00      	nop
 8000ece:	bf00      	nop
 8000ed0:	370c      	adds	r7, #12
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bc80      	pop	{r7}
 8000ed6:	4770      	bx	lr

08000ed8 <LCD_INIT>:

void LCD_INIT ( void )
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b082      	sub	sp, #8
 8000edc:	af02      	add	r7, sp, #8
	LCD_BackLed_Control(ENABLE);      
 8000ede:	2001      	movs	r0, #1
 8000ee0:	f000 f82a 	bl	8000f38 <LCD_BackLed_Control>
	LCD_Rst();
 8000ee4:	f000 f810 	bl	8000f08 <LCD_Rst>
	LCD_REG_Config();
 8000ee8:	f000 f860 	bl	8000fac <LCD_REG_Config>
	LCD_Clear (0, 0, 240, 320, BACKGROUND);
 8000eec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000ef0:	9300      	str	r3, [sp, #0]
 8000ef2:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000ef6:	22f0      	movs	r2, #240	; 0xf0
 8000ef8:	2100      	movs	r1, #0
 8000efa:	2000      	movs	r0, #0
 8000efc:	f000 f9e7 	bl	80012ce <LCD_Clear>
}
 8000f00:	bf00      	nop
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}
	...

08000f08 <LCD_Rst>:



void LCD_Rst ( void )
{			
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RST_PORT,LCD_RST_PIN,GPIO_PIN_RESET);
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	2102      	movs	r1, #2
 8000f10:	4807      	ldr	r0, [pc, #28]	; (8000f30 <LCD_Rst+0x28>)
 8000f12:	f003 fed6 	bl	8004cc2 <HAL_GPIO_WritePin>
	Delay ( 0xAFFf<<2 ); 					   
 8000f16:	4807      	ldr	r0, [pc, #28]	; (8000f34 <LCD_Rst+0x2c>)
 8000f18:	f7ff ffcd 	bl	8000eb6 <Delay>
	HAL_GPIO_WritePin(LCD_RST_PORT,LCD_RST_PIN,GPIO_PIN_SET);
 8000f1c:	2201      	movs	r2, #1
 8000f1e:	2102      	movs	r1, #2
 8000f20:	4803      	ldr	r0, [pc, #12]	; (8000f30 <LCD_Rst+0x28>)
 8000f22:	f003 fece 	bl	8004cc2 <HAL_GPIO_WritePin>
	Delay ( 0xAFFf<<2 ); 	
 8000f26:	4803      	ldr	r0, [pc, #12]	; (8000f34 <LCD_Rst+0x2c>)
 8000f28:	f7ff ffc5 	bl	8000eb6 <Delay>
}
 8000f2c:	bf00      	nop
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	40011800 	.word	0x40011800
 8000f34:	0002bffc 	.word	0x0002bffc

08000f38 <LCD_BackLed_Control>:


void LCD_BackLed_Control ( FunctionalState enumState )
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b082      	sub	sp, #8
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	4603      	mov	r3, r0
 8000f40:	71fb      	strb	r3, [r7, #7]
	if ( enumState )
 8000f42:	79fb      	ldrb	r3, [r7, #7]
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d006      	beq.n	8000f56 <LCD_BackLed_Control+0x1e>
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_RESET);	
 8000f48:	2200      	movs	r2, #0
 8000f4a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f4e:	4807      	ldr	r0, [pc, #28]	; (8000f6c <LCD_BackLed_Control+0x34>)
 8000f50:	f003 feb7 	bl	8004cc2 <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_SET);			
}
 8000f54:	e005      	b.n	8000f62 <LCD_BackLed_Control+0x2a>
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_SET);			
 8000f56:	2201      	movs	r2, #1
 8000f58:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f5c:	4803      	ldr	r0, [pc, #12]	; (8000f6c <LCD_BackLed_Control+0x34>)
 8000f5e:	f003 feb0 	bl	8004cc2 <HAL_GPIO_WritePin>
}
 8000f62:	bf00      	nop
 8000f64:	3708      	adds	r7, #8
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	40011400 	.word	0x40011400

08000f70 <LCD_Write_Cmd>:




void LCD_Write_Cmd ( uint16_t usCmd )
{
 8000f70:	b480      	push	{r7}
 8000f72:	b083      	sub	sp, #12
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	4603      	mov	r3, r0
 8000f78:	80fb      	strh	r3, [r7, #6]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 8000f7a:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8000f7e:	88fb      	ldrh	r3, [r7, #6]
 8000f80:	8013      	strh	r3, [r2, #0]
}
 8000f82:	bf00      	nop
 8000f84:	370c      	adds	r7, #12
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bc80      	pop	{r7}
 8000f8a:	4770      	bx	lr

08000f8c <LCD_Write_Data>:




void LCD_Write_Data ( uint16_t usData )
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	b083      	sub	sp, #12
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	4603      	mov	r3, r0
 8000f94:	80fb      	strh	r3, [r7, #6]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000f96:	4a04      	ldr	r2, [pc, #16]	; (8000fa8 <LCD_Write_Data+0x1c>)
 8000f98:	88fb      	ldrh	r3, [r7, #6]
 8000f9a:	8013      	strh	r3, [r2, #0]
}
 8000f9c:	bf00      	nop
 8000f9e:	370c      	adds	r7, #12
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bc80      	pop	{r7}
 8000fa4:	4770      	bx	lr
 8000fa6:	bf00      	nop
 8000fa8:	60020000 	.word	0x60020000

08000fac <LCD_REG_Config>:
	return ( * ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) );	
}


void LCD_REG_Config ( void )
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	af00      	add	r7, sp, #0
	/*  Power control B (CFh)  */
	DEBUG_DELAY  ();
	LCD_Write_Cmd ( 0xCF  );
 8000fb0:	20cf      	movs	r0, #207	; 0xcf
 8000fb2:	f7ff ffdd 	bl	8000f70 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00  );
 8000fb6:	2000      	movs	r0, #0
 8000fb8:	f7ff ffe8 	bl	8000f8c <LCD_Write_Data>
	LCD_Write_Data ( 0x81  );
 8000fbc:	2081      	movs	r0, #129	; 0x81
 8000fbe:	f7ff ffe5 	bl	8000f8c <LCD_Write_Data>
	LCD_Write_Data ( 0x30  );
 8000fc2:	2030      	movs	r0, #48	; 0x30
 8000fc4:	f7ff ffe2 	bl	8000f8c <LCD_Write_Data>
	
	/*  Power on sequence control (EDh) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xED );
 8000fc8:	20ed      	movs	r0, #237	; 0xed
 8000fca:	f7ff ffd1 	bl	8000f70 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x64 );
 8000fce:	2064      	movs	r0, #100	; 0x64
 8000fd0:	f7ff ffdc 	bl	8000f8c <LCD_Write_Data>
	LCD_Write_Data ( 0x03 );
 8000fd4:	2003      	movs	r0, #3
 8000fd6:	f7ff ffd9 	bl	8000f8c <LCD_Write_Data>
	LCD_Write_Data ( 0x12 );
 8000fda:	2012      	movs	r0, #18
 8000fdc:	f7ff ffd6 	bl	8000f8c <LCD_Write_Data>
	LCD_Write_Data ( 0x81 );
 8000fe0:	2081      	movs	r0, #129	; 0x81
 8000fe2:	f7ff ffd3 	bl	8000f8c <LCD_Write_Data>
	
	/*  Driver timing control A (E8h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xE8 );
 8000fe6:	20e8      	movs	r0, #232	; 0xe8
 8000fe8:	f7ff ffc2 	bl	8000f70 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x85 );
 8000fec:	2085      	movs	r0, #133	; 0x85
 8000fee:	f7ff ffcd 	bl	8000f8c <LCD_Write_Data>
	LCD_Write_Data ( 0x10 );
 8000ff2:	2010      	movs	r0, #16
 8000ff4:	f7ff ffca 	bl	8000f8c <LCD_Write_Data>
	LCD_Write_Data ( 0x78 );
 8000ff8:	2078      	movs	r0, #120	; 0x78
 8000ffa:	f7ff ffc7 	bl	8000f8c <LCD_Write_Data>
	
	/*  Power control A (CBh) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xCB );
 8000ffe:	20cb      	movs	r0, #203	; 0xcb
 8001000:	f7ff ffb6 	bl	8000f70 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x39 );
 8001004:	2039      	movs	r0, #57	; 0x39
 8001006:	f7ff ffc1 	bl	8000f8c <LCD_Write_Data>
	LCD_Write_Data ( 0x2C );
 800100a:	202c      	movs	r0, #44	; 0x2c
 800100c:	f7ff ffbe 	bl	8000f8c <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8001010:	2000      	movs	r0, #0
 8001012:	f7ff ffbb 	bl	8000f8c <LCD_Write_Data>
	LCD_Write_Data ( 0x34 );
 8001016:	2034      	movs	r0, #52	; 0x34
 8001018:	f7ff ffb8 	bl	8000f8c <LCD_Write_Data>
	LCD_Write_Data ( 0x02 );
 800101c:	2002      	movs	r0, #2
 800101e:	f7ff ffb5 	bl	8000f8c <LCD_Write_Data>
	
	/* Pump ratio control (F7h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xF7 );
 8001022:	20f7      	movs	r0, #247	; 0xf7
 8001024:	f7ff ffa4 	bl	8000f70 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x20 );
 8001028:	2020      	movs	r0, #32
 800102a:	f7ff ffaf 	bl	8000f8c <LCD_Write_Data>
	
	/* Driver timing control B */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xEA );
 800102e:	20ea      	movs	r0, #234	; 0xea
 8001030:	f7ff ff9e 	bl	8000f70 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8001034:	2000      	movs	r0, #0
 8001036:	f7ff ffa9 	bl	8000f8c <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 800103a:	2000      	movs	r0, #0
 800103c:	f7ff ffa6 	bl	8000f8c <LCD_Write_Data>
	
	/* Frame Rate Control (In Normal Mode/Full Colors) (B1h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xB1 );
 8001040:	20b1      	movs	r0, #177	; 0xb1
 8001042:	f7ff ff95 	bl	8000f70 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8001046:	2000      	movs	r0, #0
 8001048:	f7ff ffa0 	bl	8000f8c <LCD_Write_Data>
	LCD_Write_Data ( 0x1B );
 800104c:	201b      	movs	r0, #27
 800104e:	f7ff ff9d 	bl	8000f8c <LCD_Write_Data>
	
	/*  Display Function Control (B6h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xB6 );
 8001052:	20b6      	movs	r0, #182	; 0xb6
 8001054:	f7ff ff8c 	bl	8000f70 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x0A );
 8001058:	200a      	movs	r0, #10
 800105a:	f7ff ff97 	bl	8000f8c <LCD_Write_Data>
	LCD_Write_Data ( 0xA2 );
 800105e:	20a2      	movs	r0, #162	; 0xa2
 8001060:	f7ff ff94 	bl	8000f8c <LCD_Write_Data>
	
	/* Power Control 1 (C0h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xC0 );
 8001064:	20c0      	movs	r0, #192	; 0xc0
 8001066:	f7ff ff83 	bl	8000f70 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x35 );
 800106a:	2035      	movs	r0, #53	; 0x35
 800106c:	f7ff ff8e 	bl	8000f8c <LCD_Write_Data>
	
	/* Power Control 2 (C1h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xC1 );
 8001070:	20c1      	movs	r0, #193	; 0xc1
 8001072:	f7ff ff7d 	bl	8000f70 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x11 );
 8001076:	2011      	movs	r0, #17
 8001078:	f7ff ff88 	bl	8000f8c <LCD_Write_Data>
	
	/* VCOM Control 1 (C5h) */
	LCD_Write_Cmd ( 0xC5 );
 800107c:	20c5      	movs	r0, #197	; 0xc5
 800107e:	f7ff ff77 	bl	8000f70 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x45 );
 8001082:	2045      	movs	r0, #69	; 0x45
 8001084:	f7ff ff82 	bl	8000f8c <LCD_Write_Data>
	LCD_Write_Data ( 0x45 );
 8001088:	2045      	movs	r0, #69	; 0x45
 800108a:	f7ff ff7f 	bl	8000f8c <LCD_Write_Data>
	
	/*  VCOM Control 2 (C7h)  */
	LCD_Write_Cmd ( 0xC7 );
 800108e:	20c7      	movs	r0, #199	; 0xc7
 8001090:	f7ff ff6e 	bl	8000f70 <LCD_Write_Cmd>
	LCD_Write_Data ( 0xA2 );
 8001094:	20a2      	movs	r0, #162	; 0xa2
 8001096:	f7ff ff79 	bl	8000f8c <LCD_Write_Data>
	
	/* Enable 3G (F2h) */
	LCD_Write_Cmd ( 0xF2 );
 800109a:	20f2      	movs	r0, #242	; 0xf2
 800109c:	f7ff ff68 	bl	8000f70 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 80010a0:	2000      	movs	r0, #0
 80010a2:	f7ff ff73 	bl	8000f8c <LCD_Write_Data>
	
	/* Gamma Set (26h) */
	LCD_Write_Cmd ( 0x26 );
 80010a6:	2026      	movs	r0, #38	; 0x26
 80010a8:	f7ff ff62 	bl	8000f70 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x01 );
 80010ac:	2001      	movs	r0, #1
 80010ae:	f7ff ff6d 	bl	8000f8c <LCD_Write_Data>
	DEBUG_DELAY ();
	
	/* Positive Gamma Correction */
	LCD_Write_Cmd ( 0xE0 ); //Set Gamma
 80010b2:	20e0      	movs	r0, #224	; 0xe0
 80010b4:	f7ff ff5c 	bl	8000f70 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x0F );
 80010b8:	200f      	movs	r0, #15
 80010ba:	f7ff ff67 	bl	8000f8c <LCD_Write_Data>
	LCD_Write_Data ( 0x26 );
 80010be:	2026      	movs	r0, #38	; 0x26
 80010c0:	f7ff ff64 	bl	8000f8c <LCD_Write_Data>
	LCD_Write_Data ( 0x24 );
 80010c4:	2024      	movs	r0, #36	; 0x24
 80010c6:	f7ff ff61 	bl	8000f8c <LCD_Write_Data>
	LCD_Write_Data ( 0x0B );
 80010ca:	200b      	movs	r0, #11
 80010cc:	f7ff ff5e 	bl	8000f8c <LCD_Write_Data>
	LCD_Write_Data ( 0x0E );
 80010d0:	200e      	movs	r0, #14
 80010d2:	f7ff ff5b 	bl	8000f8c <LCD_Write_Data>
	LCD_Write_Data ( 0x09 );
 80010d6:	2009      	movs	r0, #9
 80010d8:	f7ff ff58 	bl	8000f8c <LCD_Write_Data>
	LCD_Write_Data ( 0x54 );
 80010dc:	2054      	movs	r0, #84	; 0x54
 80010de:	f7ff ff55 	bl	8000f8c <LCD_Write_Data>
	LCD_Write_Data ( 0xA8 );
 80010e2:	20a8      	movs	r0, #168	; 0xa8
 80010e4:	f7ff ff52 	bl	8000f8c <LCD_Write_Data>
	LCD_Write_Data ( 0x46 );
 80010e8:	2046      	movs	r0, #70	; 0x46
 80010ea:	f7ff ff4f 	bl	8000f8c <LCD_Write_Data>
	LCD_Write_Data ( 0x0C );
 80010ee:	200c      	movs	r0, #12
 80010f0:	f7ff ff4c 	bl	8000f8c <LCD_Write_Data>
	LCD_Write_Data ( 0x17 );
 80010f4:	2017      	movs	r0, #23
 80010f6:	f7ff ff49 	bl	8000f8c <LCD_Write_Data>
	LCD_Write_Data ( 0x09 );
 80010fa:	2009      	movs	r0, #9
 80010fc:	f7ff ff46 	bl	8000f8c <LCD_Write_Data>
	LCD_Write_Data ( 0x0F );
 8001100:	200f      	movs	r0, #15
 8001102:	f7ff ff43 	bl	8000f8c <LCD_Write_Data>
	LCD_Write_Data ( 0x07 );
 8001106:	2007      	movs	r0, #7
 8001108:	f7ff ff40 	bl	8000f8c <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 800110c:	2000      	movs	r0, #0
 800110e:	f7ff ff3d 	bl	8000f8c <LCD_Write_Data>
	
	/* Negative Gamma Correction (E1h) */
	LCD_Write_Cmd ( 0XE1 ); //Set Gamma
 8001112:	20e1      	movs	r0, #225	; 0xe1
 8001114:	f7ff ff2c 	bl	8000f70 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8001118:	2000      	movs	r0, #0
 800111a:	f7ff ff37 	bl	8000f8c <LCD_Write_Data>
	LCD_Write_Data ( 0x19 );
 800111e:	2019      	movs	r0, #25
 8001120:	f7ff ff34 	bl	8000f8c <LCD_Write_Data>
	LCD_Write_Data ( 0x1B );
 8001124:	201b      	movs	r0, #27
 8001126:	f7ff ff31 	bl	8000f8c <LCD_Write_Data>
	LCD_Write_Data ( 0x04 );
 800112a:	2004      	movs	r0, #4
 800112c:	f7ff ff2e 	bl	8000f8c <LCD_Write_Data>
	LCD_Write_Data ( 0x10 );
 8001130:	2010      	movs	r0, #16
 8001132:	f7ff ff2b 	bl	8000f8c <LCD_Write_Data>
	LCD_Write_Data ( 0x07 );
 8001136:	2007      	movs	r0, #7
 8001138:	f7ff ff28 	bl	8000f8c <LCD_Write_Data>
	LCD_Write_Data ( 0x2A );
 800113c:	202a      	movs	r0, #42	; 0x2a
 800113e:	f7ff ff25 	bl	8000f8c <LCD_Write_Data>
	LCD_Write_Data ( 0x47 );
 8001142:	2047      	movs	r0, #71	; 0x47
 8001144:	f7ff ff22 	bl	8000f8c <LCD_Write_Data>
	LCD_Write_Data ( 0x39 );
 8001148:	2039      	movs	r0, #57	; 0x39
 800114a:	f7ff ff1f 	bl	8000f8c <LCD_Write_Data>
	LCD_Write_Data ( 0x03 );
 800114e:	2003      	movs	r0, #3
 8001150:	f7ff ff1c 	bl	8000f8c <LCD_Write_Data>
	LCD_Write_Data ( 0x06 );
 8001154:	2006      	movs	r0, #6
 8001156:	f7ff ff19 	bl	8000f8c <LCD_Write_Data>
	LCD_Write_Data ( 0x06 );
 800115a:	2006      	movs	r0, #6
 800115c:	f7ff ff16 	bl	8000f8c <LCD_Write_Data>
	LCD_Write_Data ( 0x30 );
 8001160:	2030      	movs	r0, #48	; 0x30
 8001162:	f7ff ff13 	bl	8000f8c <LCD_Write_Data>
	LCD_Write_Data ( 0x38 );
 8001166:	2038      	movs	r0, #56	; 0x38
 8001168:	f7ff ff10 	bl	8000f8c <LCD_Write_Data>
	LCD_Write_Data ( 0x0F );
 800116c:	200f      	movs	r0, #15
 800116e:	f7ff ff0d 	bl	8000f8c <LCD_Write_Data>
	
	/* memory access control set */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0x36 ); 	
 8001172:	2036      	movs	r0, #54	; 0x36
 8001174:	f7ff fefc 	bl	8000f70 <LCD_Write_Cmd>
	LCD_Write_Data ( 0xC8 );    
 8001178:	20c8      	movs	r0, #200	; 0xc8
 800117a:	f7ff ff07 	bl	8000f8c <LCD_Write_Data>
	DEBUG_DELAY ();
	
	/* column address control set */
	LCD_Write_Cmd ( CMD_Set_COLUMN ); 
 800117e:	202a      	movs	r0, #42	; 0x2a
 8001180:	f7ff fef6 	bl	8000f70 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8001184:	2000      	movs	r0, #0
 8001186:	f7ff ff01 	bl	8000f8c <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 800118a:	2000      	movs	r0, #0
 800118c:	f7ff fefe 	bl	8000f8c <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8001190:	2000      	movs	r0, #0
 8001192:	f7ff fefb 	bl	8000f8c <LCD_Write_Data>
	LCD_Write_Data ( 0xEF );
 8001196:	20ef      	movs	r0, #239	; 0xef
 8001198:	f7ff fef8 	bl	8000f8c <LCD_Write_Data>
	
	/* page address control set */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( CMD_Set_PAGE ); 
 800119c:	202b      	movs	r0, #43	; 0x2b
 800119e:	f7ff fee7 	bl	8000f70 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 80011a2:	2000      	movs	r0, #0
 80011a4:	f7ff fef2 	bl	8000f8c <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 80011a8:	2000      	movs	r0, #0
 80011aa:	f7ff feef 	bl	8000f8c <LCD_Write_Data>
	LCD_Write_Data ( 0x01 );
 80011ae:	2001      	movs	r0, #1
 80011b0:	f7ff feec 	bl	8000f8c <LCD_Write_Data>
	LCD_Write_Data ( 0x3F );
 80011b4:	203f      	movs	r0, #63	; 0x3f
 80011b6:	f7ff fee9 	bl	8000f8c <LCD_Write_Data>
	
	/*  Pixel Format Set (3Ah)  */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0x3a ); 
 80011ba:	203a      	movs	r0, #58	; 0x3a
 80011bc:	f7ff fed8 	bl	8000f70 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x55 );
 80011c0:	2055      	movs	r0, #85	; 0x55
 80011c2:	f7ff fee3 	bl	8000f8c <LCD_Write_Data>
	
	/* Sleep Out (11h)  */
	LCD_Write_Cmd ( 0x11 );	
 80011c6:	2011      	movs	r0, #17
 80011c8:	f7ff fed2 	bl	8000f70 <LCD_Write_Cmd>
	Delay ( 0xAFFf<<2 );
 80011cc:	4803      	ldr	r0, [pc, #12]	; (80011dc <LCD_REG_Config+0x230>)
 80011ce:	f7ff fe72 	bl	8000eb6 <Delay>
	DEBUG_DELAY ();
	
	/* Display ON (29h) */
	LCD_Write_Cmd ( 0x29 ); 
 80011d2:	2029      	movs	r0, #41	; 0x29
 80011d4:	f7ff fecc 	bl	8000f70 <LCD_Write_Cmd>
	
	
}
 80011d8:	bf00      	nop
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	0002bffc 	.word	0x0002bffc

080011e0 <LCD_OpenWindow>:



void LCD_OpenWindow ( uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usWidth, uint16_t usHeight )
{	
 80011e0:	b590      	push	{r4, r7, lr}
 80011e2:	b083      	sub	sp, #12
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	4604      	mov	r4, r0
 80011e8:	4608      	mov	r0, r1
 80011ea:	4611      	mov	r1, r2
 80011ec:	461a      	mov	r2, r3
 80011ee:	4623      	mov	r3, r4
 80011f0:	80fb      	strh	r3, [r7, #6]
 80011f2:	4603      	mov	r3, r0
 80011f4:	80bb      	strh	r3, [r7, #4]
 80011f6:	460b      	mov	r3, r1
 80011f8:	807b      	strh	r3, [r7, #2]
 80011fa:	4613      	mov	r3, r2
 80011fc:	803b      	strh	r3, [r7, #0]
	LCD_Write_Cmd ( CMD_Set_COLUMN ); 				
 80011fe:	202a      	movs	r0, #42	; 0x2a
 8001200:	f7ff feb6 	bl	8000f70 <LCD_Write_Cmd>
	LCD_Write_Data ( usCOLUMN >> 8  );	 
 8001204:	88fb      	ldrh	r3, [r7, #6]
 8001206:	0a1b      	lsrs	r3, r3, #8
 8001208:	b29b      	uxth	r3, r3
 800120a:	4618      	mov	r0, r3
 800120c:	f7ff febe 	bl	8000f8c <LCD_Write_Data>
	LCD_Write_Data ( usCOLUMN & 0xff  );	 
 8001210:	88fb      	ldrh	r3, [r7, #6]
 8001212:	b2db      	uxtb	r3, r3
 8001214:	b29b      	uxth	r3, r3
 8001216:	4618      	mov	r0, r3
 8001218:	f7ff feb8 	bl	8000f8c <LCD_Write_Data>
	LCD_Write_Data ( ( usCOLUMN + usWidth - 1 ) >> 8  );
 800121c:	88fa      	ldrh	r2, [r7, #6]
 800121e:	887b      	ldrh	r3, [r7, #2]
 8001220:	4413      	add	r3, r2
 8001222:	3b01      	subs	r3, #1
 8001224:	121b      	asrs	r3, r3, #8
 8001226:	b29b      	uxth	r3, r3
 8001228:	4618      	mov	r0, r3
 800122a:	f7ff feaf 	bl	8000f8c <LCD_Write_Data>
	LCD_Write_Data ( ( usCOLUMN + usWidth - 1 ) & 0xff  );
 800122e:	88fa      	ldrh	r2, [r7, #6]
 8001230:	887b      	ldrh	r3, [r7, #2]
 8001232:	4413      	add	r3, r2
 8001234:	b29b      	uxth	r3, r3
 8001236:	3b01      	subs	r3, #1
 8001238:	b29b      	uxth	r3, r3
 800123a:	b2db      	uxtb	r3, r3
 800123c:	b29b      	uxth	r3, r3
 800123e:	4618      	mov	r0, r3
 8001240:	f7ff fea4 	bl	8000f8c <LCD_Write_Data>

	LCD_Write_Cmd ( CMD_Set_PAGE ); 			     
 8001244:	202b      	movs	r0, #43	; 0x2b
 8001246:	f7ff fe93 	bl	8000f70 <LCD_Write_Cmd>
	LCD_Write_Data ( usPAGE >> 8  );
 800124a:	88bb      	ldrh	r3, [r7, #4]
 800124c:	0a1b      	lsrs	r3, r3, #8
 800124e:	b29b      	uxth	r3, r3
 8001250:	4618      	mov	r0, r3
 8001252:	f7ff fe9b 	bl	8000f8c <LCD_Write_Data>
	LCD_Write_Data ( usPAGE & 0xff  );
 8001256:	88bb      	ldrh	r3, [r7, #4]
 8001258:	b2db      	uxtb	r3, r3
 800125a:	b29b      	uxth	r3, r3
 800125c:	4618      	mov	r0, r3
 800125e:	f7ff fe95 	bl	8000f8c <LCD_Write_Data>
	LCD_Write_Data ( ( usPAGE + usHeight - 1 ) >> 8 );
 8001262:	88ba      	ldrh	r2, [r7, #4]
 8001264:	883b      	ldrh	r3, [r7, #0]
 8001266:	4413      	add	r3, r2
 8001268:	3b01      	subs	r3, #1
 800126a:	121b      	asrs	r3, r3, #8
 800126c:	b29b      	uxth	r3, r3
 800126e:	4618      	mov	r0, r3
 8001270:	f7ff fe8c 	bl	8000f8c <LCD_Write_Data>
	LCD_Write_Data ( ( usPAGE + usHeight - 1) & 0xff );
 8001274:	88ba      	ldrh	r2, [r7, #4]
 8001276:	883b      	ldrh	r3, [r7, #0]
 8001278:	4413      	add	r3, r2
 800127a:	b29b      	uxth	r3, r3
 800127c:	3b01      	subs	r3, #1
 800127e:	b29b      	uxth	r3, r3
 8001280:	b2db      	uxtb	r3, r3
 8001282:	b29b      	uxth	r3, r3
 8001284:	4618      	mov	r0, r3
 8001286:	f7ff fe81 	bl	8000f8c <LCD_Write_Data>
	
}
 800128a:	bf00      	nop
 800128c:	370c      	adds	r7, #12
 800128e:	46bd      	mov	sp, r7
 8001290:	bd90      	pop	{r4, r7, pc}

08001292 <LCD_FillColor>:


void LCD_FillColor ( uint32_t usPoint, uint16_t usColor )
{
 8001292:	b580      	push	{r7, lr}
 8001294:	b084      	sub	sp, #16
 8001296:	af00      	add	r7, sp, #0
 8001298:	6078      	str	r0, [r7, #4]
 800129a:	460b      	mov	r3, r1
 800129c:	807b      	strh	r3, [r7, #2]
	uint32_t i = 0;
 800129e:	2300      	movs	r3, #0
 80012a0:	60fb      	str	r3, [r7, #12]
	
	/* memory write */
	LCD_Write_Cmd ( CMD_SetPixel );	
 80012a2:	202c      	movs	r0, #44	; 0x2c
 80012a4:	f7ff fe64 	bl	8000f70 <LCD_Write_Cmd>
		
	for ( i = 0; i < usPoint; i ++ )
 80012a8:	2300      	movs	r3, #0
 80012aa:	60fb      	str	r3, [r7, #12]
 80012ac:	e006      	b.n	80012bc <LCD_FillColor+0x2a>
		LCD_Write_Data ( usColor );
 80012ae:	887b      	ldrh	r3, [r7, #2]
 80012b0:	4618      	mov	r0, r3
 80012b2:	f7ff fe6b 	bl	8000f8c <LCD_Write_Data>
	for ( i = 0; i < usPoint; i ++ )
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	3301      	adds	r3, #1
 80012ba:	60fb      	str	r3, [r7, #12]
 80012bc:	68fa      	ldr	r2, [r7, #12]
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	429a      	cmp	r2, r3
 80012c2:	d3f4      	bcc.n	80012ae <LCD_FillColor+0x1c>
		
}
 80012c4:	bf00      	nop
 80012c6:	bf00      	nop
 80012c8:	3710      	adds	r7, #16
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}

080012ce <LCD_Clear>:




void LCD_Clear ( uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usWidth, uint16_t usHeight, uint16_t usColor )
{
 80012ce:	b590      	push	{r4, r7, lr}
 80012d0:	b083      	sub	sp, #12
 80012d2:	af00      	add	r7, sp, #0
 80012d4:	4604      	mov	r4, r0
 80012d6:	4608      	mov	r0, r1
 80012d8:	4611      	mov	r1, r2
 80012da:	461a      	mov	r2, r3
 80012dc:	4623      	mov	r3, r4
 80012de:	80fb      	strh	r3, [r7, #6]
 80012e0:	4603      	mov	r3, r0
 80012e2:	80bb      	strh	r3, [r7, #4]
 80012e4:	460b      	mov	r3, r1
 80012e6:	807b      	strh	r3, [r7, #2]
 80012e8:	4613      	mov	r3, r2
 80012ea:	803b      	strh	r3, [r7, #0]
	LCD_OpenWindow ( usCOLUMN, usPAGE, usWidth, usHeight );
 80012ec:	883b      	ldrh	r3, [r7, #0]
 80012ee:	887a      	ldrh	r2, [r7, #2]
 80012f0:	88b9      	ldrh	r1, [r7, #4]
 80012f2:	88f8      	ldrh	r0, [r7, #6]
 80012f4:	f7ff ff74 	bl	80011e0 <LCD_OpenWindow>

	LCD_FillColor ( usWidth * usHeight, usColor );		
 80012f8:	887b      	ldrh	r3, [r7, #2]
 80012fa:	883a      	ldrh	r2, [r7, #0]
 80012fc:	fb02 f303 	mul.w	r3, r2, r3
 8001300:	461a      	mov	r2, r3
 8001302:	8b3b      	ldrh	r3, [r7, #24]
 8001304:	4619      	mov	r1, r3
 8001306:	4610      	mov	r0, r2
 8001308:	f7ff ffc3 	bl	8001292 <LCD_FillColor>
	
}
 800130c:	bf00      	nop
 800130e:	370c      	adds	r7, #12
 8001310:	46bd      	mov	sp, r7
 8001312:	bd90      	pop	{r4, r7, pc}

08001314 <LCD_DrawLine>:
}



void LCD_DrawLine ( uint16_t usC1, uint16_t usP1, uint16_t usC2, uint16_t usP2, uint16_t usColor )
{
 8001314:	b590      	push	{r4, r7, lr}
 8001316:	b08d      	sub	sp, #52	; 0x34
 8001318:	af00      	add	r7, sp, #0
 800131a:	4604      	mov	r4, r0
 800131c:	4608      	mov	r0, r1
 800131e:	4611      	mov	r1, r2
 8001320:	461a      	mov	r2, r3
 8001322:	4623      	mov	r3, r4
 8001324:	80fb      	strh	r3, [r7, #6]
 8001326:	4603      	mov	r3, r0
 8001328:	80bb      	strh	r3, [r7, #4]
 800132a:	460b      	mov	r3, r1
 800132c:	807b      	strh	r3, [r7, #2]
 800132e:	4613      	mov	r3, r2
 8001330:	803b      	strh	r3, [r7, #0]
	uint16_t us; 
	uint16_t usC_Current, usP_Current;
	
	int32_t lError_C = 0, lError_P = 0, lDelta_C, lDelta_P, lDistance; 
 8001332:	2300      	movs	r3, #0
 8001334:	627b      	str	r3, [r7, #36]	; 0x24
 8001336:	2300      	movs	r3, #0
 8001338:	623b      	str	r3, [r7, #32]
	int32_t lIncrease_C, lIncrease_P; 	
	
	
	lDelta_C = usC2 - usC1;
 800133a:	887a      	ldrh	r2, [r7, #2]
 800133c:	88fb      	ldrh	r3, [r7, #6]
 800133e:	1ad3      	subs	r3, r2, r3
 8001340:	61fb      	str	r3, [r7, #28]
	lDelta_P = usP2 - usP1; 
 8001342:	883a      	ldrh	r2, [r7, #0]
 8001344:	88bb      	ldrh	r3, [r7, #4]
 8001346:	1ad3      	subs	r3, r2, r3
 8001348:	61bb      	str	r3, [r7, #24]
	
	usC_Current = usC1; 
 800134a:	88fb      	ldrh	r3, [r7, #6]
 800134c:	85bb      	strh	r3, [r7, #44]	; 0x2c
	usP_Current = usP1; 
 800134e:	88bb      	ldrh	r3, [r7, #4]
 8001350:	857b      	strh	r3, [r7, #42]	; 0x2a
	
	
	if ( lDelta_C > 0 ) 
 8001352:	69fb      	ldr	r3, [r7, #28]
 8001354:	2b00      	cmp	r3, #0
 8001356:	dd02      	ble.n	800135e <LCD_DrawLine+0x4a>
		lIncrease_C = 1;  
 8001358:	2301      	movs	r3, #1
 800135a:	613b      	str	r3, [r7, #16]
 800135c:	e00b      	b.n	8001376 <LCD_DrawLine+0x62>
	
	else if ( lDelta_C == 0 ) 
 800135e:	69fb      	ldr	r3, [r7, #28]
 8001360:	2b00      	cmp	r3, #0
 8001362:	d102      	bne.n	800136a <LCD_DrawLine+0x56>
		lIncrease_C = 0;
 8001364:	2300      	movs	r3, #0
 8001366:	613b      	str	r3, [r7, #16]
 8001368:	e005      	b.n	8001376 <LCD_DrawLine+0x62>
	
	else 
  	{ 
    		lIncrease_C = -1;
 800136a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800136e:	613b      	str	r3, [r7, #16]
    		lDelta_C = - lDelta_C;
 8001370:	69fb      	ldr	r3, [r7, #28]
 8001372:	425b      	negs	r3, r3
 8001374:	61fb      	str	r3, [r7, #28]
  	} 

	
	if ( lDelta_P > 0 )
 8001376:	69bb      	ldr	r3, [r7, #24]
 8001378:	2b00      	cmp	r3, #0
 800137a:	dd02      	ble.n	8001382 <LCD_DrawLine+0x6e>
		lIncrease_P = 1; 
 800137c:	2301      	movs	r3, #1
 800137e:	60fb      	str	r3, [r7, #12]
 8001380:	e00b      	b.n	800139a <LCD_DrawLine+0x86>
	
	else if ( lDelta_P == 0 )
 8001382:	69bb      	ldr	r3, [r7, #24]
 8001384:	2b00      	cmp	r3, #0
 8001386:	d102      	bne.n	800138e <LCD_DrawLine+0x7a>
		lIncrease_P = 0;
 8001388:	2300      	movs	r3, #0
 800138a:	60fb      	str	r3, [r7, #12]
 800138c:	e005      	b.n	800139a <LCD_DrawLine+0x86>
	else 
	{
  		lIncrease_P = -1;
 800138e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001392:	60fb      	str	r3, [r7, #12]
    		lDelta_P = - lDelta_P;
 8001394:	69bb      	ldr	r3, [r7, #24]
 8001396:	425b      	negs	r3, r3
 8001398:	61bb      	str	r3, [r7, #24]
 	} 

	if (  lDelta_C > lDelta_P )
 800139a:	69fa      	ldr	r2, [r7, #28]
 800139c:	69bb      	ldr	r3, [r7, #24]
 800139e:	429a      	cmp	r2, r3
 80013a0:	dd02      	ble.n	80013a8 <LCD_DrawLine+0x94>
		lDistance = lDelta_C; 
 80013a2:	69fb      	ldr	r3, [r7, #28]
 80013a4:	617b      	str	r3, [r7, #20]
 80013a6:	e001      	b.n	80013ac <LCD_DrawLine+0x98>
	
	else 
		lDistance = lDelta_P; 
 80013a8:	69bb      	ldr	r3, [r7, #24]
 80013aa:	617b      	str	r3, [r7, #20]
	
	
	for ( us = 0; us <= lDistance + 1; us ++ ) 
 80013ac:	2300      	movs	r3, #0
 80013ae:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80013b0:	e02b      	b.n	800140a <LCD_DrawLine+0xf6>
	{  
		LCD_DrawDot ( usC_Current, usP_Current, usColor );
 80013b2:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80013b6:	8d79      	ldrh	r1, [r7, #42]	; 0x2a
 80013b8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80013ba:	4618      	mov	r0, r3
 80013bc:	f000 f8a5 	bl	800150a <LCD_DrawDot>
		
		lError_C += lDelta_C ; 
 80013c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013c2:	69fb      	ldr	r3, [r7, #28]
 80013c4:	4413      	add	r3, r2
 80013c6:	627b      	str	r3, [r7, #36]	; 0x24
		lError_P += lDelta_P ; 
 80013c8:	6a3a      	ldr	r2, [r7, #32]
 80013ca:	69bb      	ldr	r3, [r7, #24]
 80013cc:	4413      	add	r3, r2
 80013ce:	623b      	str	r3, [r7, #32]
		
		if ( lError_C > lDistance ) 
 80013d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013d2:	697b      	ldr	r3, [r7, #20]
 80013d4:	429a      	cmp	r2, r3
 80013d6:	dd08      	ble.n	80013ea <LCD_DrawLine+0xd6>
		{ 
			lError_C -= lDistance; 
 80013d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013da:	697b      	ldr	r3, [r7, #20]
 80013dc:	1ad3      	subs	r3, r2, r3
 80013de:	627b      	str	r3, [r7, #36]	; 0x24
			usC_Current += lIncrease_C; 
 80013e0:	693b      	ldr	r3, [r7, #16]
 80013e2:	b29a      	uxth	r2, r3
 80013e4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80013e6:	4413      	add	r3, r2
 80013e8:	85bb      	strh	r3, [r7, #44]	; 0x2c
		}  
		
		if ( lError_P > lDistance ) 
 80013ea:	6a3a      	ldr	r2, [r7, #32]
 80013ec:	697b      	ldr	r3, [r7, #20]
 80013ee:	429a      	cmp	r2, r3
 80013f0:	dd08      	ble.n	8001404 <LCD_DrawLine+0xf0>
		{ 
			lError_P -= lDistance; 
 80013f2:	6a3a      	ldr	r2, [r7, #32]
 80013f4:	697b      	ldr	r3, [r7, #20]
 80013f6:	1ad3      	subs	r3, r2, r3
 80013f8:	623b      	str	r3, [r7, #32]
			usP_Current += lIncrease_P; 
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	b29a      	uxth	r2, r3
 80013fe:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001400:	4413      	add	r3, r2
 8001402:	857b      	strh	r3, [r7, #42]	; 0x2a
	for ( us = 0; us <= lDistance + 1; us ++ ) 
 8001404:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001406:	3301      	adds	r3, #1
 8001408:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800140a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800140c:	697b      	ldr	r3, [r7, #20]
 800140e:	3301      	adds	r3, #1
 8001410:	429a      	cmp	r2, r3
 8001412:	ddce      	ble.n	80013b2 <LCD_DrawLine+0x9e>
		} 
		
	}  
	
	
}   
 8001414:	bf00      	nop
 8001416:	bf00      	nop
 8001418:	3734      	adds	r7, #52	; 0x34
 800141a:	46bd      	mov	sp, r7
 800141c:	bd90      	pop	{r4, r7, pc}
	...

08001420 <LCD_DrawChar>:


void LCD_DrawChar ( uint16_t usC, uint16_t usP, uint8_t cChar )
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b084      	sub	sp, #16
 8001424:	af00      	add	r7, sp, #0
 8001426:	4603      	mov	r3, r0
 8001428:	80fb      	strh	r3, [r7, #6]
 800142a:	460b      	mov	r3, r1
 800142c:	80bb      	strh	r3, [r7, #4]
 800142e:	4613      	mov	r3, r2
 8001430:	70fb      	strb	r3, [r7, #3]
	uint8_t ucTemp, ucRelativePositon, ucPage, ucColumn;

	
	ucRelativePositon = cChar - ' ';
 8001432:	78fb      	ldrb	r3, [r7, #3]
 8001434:	3b20      	subs	r3, #32
 8001436:	733b      	strb	r3, [r7, #12]
	
	LCD_OpenWindow ( usC, usP, WIDTH_EN_CHAR, HEIGHT_EN_CHAR );
 8001438:	88b9      	ldrh	r1, [r7, #4]
 800143a:	88f8      	ldrh	r0, [r7, #6]
 800143c:	2310      	movs	r3, #16
 800143e:	2208      	movs	r2, #8
 8001440:	f7ff fece 	bl	80011e0 <LCD_OpenWindow>
	
	LCD_Write_Cmd ( CMD_SetPixel );	
 8001444:	202c      	movs	r0, #44	; 0x2c
 8001446:	f7ff fd93 	bl	8000f70 <LCD_Write_Cmd>
	
	for ( ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage ++ )
 800144a:	2300      	movs	r3, #0
 800144c:	73bb      	strb	r3, [r7, #14]
 800144e:	e023      	b.n	8001498 <LCD_DrawChar+0x78>
	{
		ucTemp = ucAscii_1608 [ ucRelativePositon ] [ ucPage ];
 8001450:	7b3a      	ldrb	r2, [r7, #12]
 8001452:	7bbb      	ldrb	r3, [r7, #14]
 8001454:	4914      	ldr	r1, [pc, #80]	; (80014a8 <LCD_DrawChar+0x88>)
 8001456:	0112      	lsls	r2, r2, #4
 8001458:	440a      	add	r2, r1
 800145a:	4413      	add	r3, r2
 800145c:	781b      	ldrb	r3, [r3, #0]
 800145e:	73fb      	strb	r3, [r7, #15]
		
		for ( ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn ++ )
 8001460:	2300      	movs	r3, #0
 8001462:	737b      	strb	r3, [r7, #13]
 8001464:	e012      	b.n	800148c <LCD_DrawChar+0x6c>
		{
			if ( ucTemp & 0x01 )
 8001466:	7bfb      	ldrb	r3, [r7, #15]
 8001468:	f003 0301 	and.w	r3, r3, #1
 800146c:	2b00      	cmp	r3, #0
 800146e:	d003      	beq.n	8001478 <LCD_DrawChar+0x58>
				LCD_Write_Data ( 0x001F );
 8001470:	201f      	movs	r0, #31
 8001472:	f7ff fd8b 	bl	8000f8c <LCD_Write_Data>
 8001476:	e003      	b.n	8001480 <LCD_DrawChar+0x60>
			
			else
				LCD_Write_Data (  0xFFFF );								
 8001478:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800147c:	f7ff fd86 	bl	8000f8c <LCD_Write_Data>
			
			ucTemp >>= 1;		
 8001480:	7bfb      	ldrb	r3, [r7, #15]
 8001482:	085b      	lsrs	r3, r3, #1
 8001484:	73fb      	strb	r3, [r7, #15]
		for ( ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn ++ )
 8001486:	7b7b      	ldrb	r3, [r7, #13]
 8001488:	3301      	adds	r3, #1
 800148a:	737b      	strb	r3, [r7, #13]
 800148c:	7b7b      	ldrb	r3, [r7, #13]
 800148e:	2b07      	cmp	r3, #7
 8001490:	d9e9      	bls.n	8001466 <LCD_DrawChar+0x46>
	for ( ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage ++ )
 8001492:	7bbb      	ldrb	r3, [r7, #14]
 8001494:	3301      	adds	r3, #1
 8001496:	73bb      	strb	r3, [r7, #14]
 8001498:	7bbb      	ldrb	r3, [r7, #14]
 800149a:	2b0f      	cmp	r3, #15
 800149c:	d9d8      	bls.n	8001450 <LCD_DrawChar+0x30>
			
		}
		
	}
	
}
 800149e:	bf00      	nop
 80014a0:	bf00      	nop
 80014a2:	3710      	adds	r7, #16
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}
 80014a8:	080073f4 	.word	0x080073f4

080014ac <LCD_DrawString>:




void LCD_DrawString ( uint16_t usC, uint16_t usP, const char * pStr )
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b082      	sub	sp, #8
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	4603      	mov	r3, r0
 80014b4:	603a      	str	r2, [r7, #0]
 80014b6:	80fb      	strh	r3, [r7, #6]
 80014b8:	460b      	mov	r3, r1
 80014ba:	80bb      	strh	r3, [r7, #4]
	while ( * pStr != '\0' )
 80014bc:	e01c      	b.n	80014f8 <LCD_DrawString+0x4c>
	{
		if ( ( usC - LCD_DispWindow_Start_COLUMN + WIDTH_EN_CHAR ) > LCD_DispWindow_COLUMN )
 80014be:	88fb      	ldrh	r3, [r7, #6]
 80014c0:	2be8      	cmp	r3, #232	; 0xe8
 80014c2:	d904      	bls.n	80014ce <LCD_DrawString+0x22>
		{
			usC = LCD_DispWindow_Start_COLUMN;
 80014c4:	2300      	movs	r3, #0
 80014c6:	80fb      	strh	r3, [r7, #6]
			usP += HEIGHT_EN_CHAR;
 80014c8:	88bb      	ldrh	r3, [r7, #4]
 80014ca:	3310      	adds	r3, #16
 80014cc:	80bb      	strh	r3, [r7, #4]
		}
		
		if ( ( usP - LCD_DispWindow_Start_PAGE + HEIGHT_EN_CHAR ) > LCD_DispWindow_PAGE )
 80014ce:	88bb      	ldrh	r3, [r7, #4]
 80014d0:	f5b3 7f98 	cmp.w	r3, #304	; 0x130
 80014d4:	d903      	bls.n	80014de <LCD_DrawString+0x32>
		{
			usC = LCD_DispWindow_Start_COLUMN;
 80014d6:	2300      	movs	r3, #0
 80014d8:	80fb      	strh	r3, [r7, #6]
			usP = LCD_DispWindow_Start_PAGE;
 80014da:	2300      	movs	r3, #0
 80014dc:	80bb      	strh	r3, [r7, #4]
		}
		
		LCD_DrawChar ( usC, usP, * pStr );
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	781a      	ldrb	r2, [r3, #0]
 80014e2:	88b9      	ldrh	r1, [r7, #4]
 80014e4:	88fb      	ldrh	r3, [r7, #6]
 80014e6:	4618      	mov	r0, r3
 80014e8:	f7ff ff9a 	bl	8001420 <LCD_DrawChar>
		
		pStr ++;
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	3301      	adds	r3, #1
 80014f0:	603b      	str	r3, [r7, #0]
		
		usC += WIDTH_EN_CHAR;
 80014f2:	88fb      	ldrh	r3, [r7, #6]
 80014f4:	3308      	adds	r3, #8
 80014f6:	80fb      	strh	r3, [r7, #6]
	while ( * pStr != '\0' )
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	781b      	ldrb	r3, [r3, #0]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d1de      	bne.n	80014be <LCD_DrawString+0x12>
		
	}
	
}
 8001500:	bf00      	nop
 8001502:	bf00      	nop
 8001504:	3708      	adds	r7, #8
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}

0800150a <LCD_DrawDot>:


//Task 2
void LCD_DrawDot(uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usColor)	
{	
 800150a:	b580      	push	{r7, lr}
 800150c:	b082      	sub	sp, #8
 800150e:	af00      	add	r7, sp, #0
 8001510:	4603      	mov	r3, r0
 8001512:	80fb      	strh	r3, [r7, #6]
 8001514:	460b      	mov	r3, r1
 8001516:	80bb      	strh	r3, [r7, #4]
 8001518:	4613      	mov	r3, r2
 800151a:	807b      	strh	r3, [r7, #2]
	if (( usCOLUMN < LCD_DispWindow_COLUMN ) && ( usPAGE < LCD_DispWindow_PAGE ))
 800151c:	88fb      	ldrh	r3, [r7, #6]
 800151e:	2bef      	cmp	r3, #239	; 0xef
 8001520:	d809      	bhi.n	8001536 <LCD_DrawDot+0x2c>
 8001522:	88bb      	ldrh	r3, [r7, #4]
 8001524:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8001528:	d205      	bcs.n	8001536 <LCD_DrawDot+0x2c>
	LCD_OpenWindow ( usCOLUMN, usPAGE, 1, 1 );
 800152a:	88b9      	ldrh	r1, [r7, #4]
 800152c:	88f8      	ldrh	r0, [r7, #6]
 800152e:	2301      	movs	r3, #1
 8001530:	2201      	movs	r2, #1
 8001532:	f7ff fe55 	bl	80011e0 <LCD_OpenWindow>
	LCD_FillColor (1, usColor);
 8001536:	887b      	ldrh	r3, [r7, #2]
 8001538:	4619      	mov	r1, r3
 800153a:	2001      	movs	r0, #1
 800153c:	f7ff fea9 	bl	8001292 <LCD_FillColor>
}
 8001540:	bf00      	nop
 8001542:	3708      	adds	r7, #8
 8001544:	46bd      	mov	sp, r7
 8001546:	bd80      	pop	{r7, pc}

08001548 <LCD_Cam_Gram>:
		LCD_DrawDot(x, y, usColor);
	}
}

void LCD_Cam_Gram()
{
 8001548:	b580      	push	{r7, lr}
 800154a:	af00      	add	r7, sp, #0
	/* memory access control set */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0x36 ); 	
 800154c:	2036      	movs	r0, #54	; 0x36
 800154e:	f7ff fd0f 	bl	8000f70 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x68 );    
 8001552:	2068      	movs	r0, #104	; 0x68
 8001554:	f7ff fd1a 	bl	8000f8c <LCD_Write_Data>
	DEBUG_DELAY ();
	
	/* column address control set */
	LCD_Write_Cmd ( CMD_Set_COLUMN ); 
 8001558:	202a      	movs	r0, #42	; 0x2a
 800155a:	f7ff fd09 	bl	8000f70 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 800155e:	2000      	movs	r0, #0
 8001560:	f7ff fd14 	bl	8000f8c <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8001564:	2000      	movs	r0, #0
 8001566:	f7ff fd11 	bl	8000f8c <LCD_Write_Data>
	LCD_Write_Data ( 0x01 );
 800156a:	2001      	movs	r0, #1
 800156c:	f7ff fd0e 	bl	8000f8c <LCD_Write_Data>
	LCD_Write_Data ( 0x3F );
 8001570:	203f      	movs	r0, #63	; 0x3f
 8001572:	f7ff fd0b 	bl	8000f8c <LCD_Write_Data>
	
	/* page address control set */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( CMD_Set_PAGE ); 
 8001576:	202b      	movs	r0, #43	; 0x2b
 8001578:	f7ff fcfa 	bl	8000f70 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 800157c:	2000      	movs	r0, #0
 800157e:	f7ff fd05 	bl	8000f8c <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8001582:	2000      	movs	r0, #0
 8001584:	f7ff fd02 	bl	8000f8c <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8001588:	2000      	movs	r0, #0
 800158a:	f7ff fcff 	bl	8000f8c <LCD_Write_Data>
	LCD_Write_Data ( 0xEF );
 800158e:	20ef      	movs	r0, #239	; 0xef
 8001590:	f7ff fcfc 	bl	8000f8c <LCD_Write_Data>
	
	LCD_Write_Cmd ( 0x2C );
 8001594:	202c      	movs	r0, #44	; 0x2c
 8001596:	f7ff fceb 	bl	8000f70 <LCD_Write_Cmd>

}
 800159a:	bf00      	nop
 800159c:	bd80      	pop	{r7, pc}

0800159e <LCD_Draw_Num>:


void LCD_Draw_Num ( uint16_t usC, uint16_t usP, const uint8_t arr[96] )
{
 800159e:	b580      	push	{r7, lr}
 80015a0:	b084      	sub	sp, #16
 80015a2:	af00      	add	r7, sp, #0
 80015a4:	4603      	mov	r3, r0
 80015a6:	603a      	str	r2, [r7, #0]
 80015a8:	80fb      	strh	r3, [r7, #6]
 80015aa:	460b      	mov	r3, r1
 80015ac:	80bb      	strh	r3, [r7, #4]
	uint8_t ucTemp, ucPage, ucColumn;



		LCD_OpenWindow ( usC, usP, 24, 32 );
 80015ae:	88b9      	ldrh	r1, [r7, #4]
 80015b0:	88f8      	ldrh	r0, [r7, #6]
 80015b2:	2320      	movs	r3, #32
 80015b4:	2218      	movs	r2, #24
 80015b6:	f7ff fe13 	bl	80011e0 <LCD_OpenWindow>

		LCD_Write_Cmd ( CMD_SetPixel );
 80015ba:	202c      	movs	r0, #44	; 0x2c
 80015bc:	f7ff fcd8 	bl	8000f70 <LCD_Write_Cmd>

		for ( ucPage = 0; ucPage < 96; ucPage ++ )
 80015c0:	2300      	movs	r3, #0
 80015c2:	73bb      	strb	r3, [r7, #14]
 80015c4:	e020      	b.n	8001608 <LCD_Draw_Num+0x6a>
		{
			ucTemp = arr[ ucPage ];
 80015c6:	7bbb      	ldrb	r3, [r7, #14]
 80015c8:	683a      	ldr	r2, [r7, #0]
 80015ca:	4413      	add	r3, r2
 80015cc:	781b      	ldrb	r3, [r3, #0]
 80015ce:	73fb      	strb	r3, [r7, #15]

			for ( ucColumn = 0; ucColumn < 8; ucColumn ++ )
 80015d0:	2300      	movs	r3, #0
 80015d2:	737b      	strb	r3, [r7, #13]
 80015d4:	e012      	b.n	80015fc <LCD_Draw_Num+0x5e>
			{
				if ( ucTemp & 0x01 )
 80015d6:	7bfb      	ldrb	r3, [r7, #15]
 80015d8:	f003 0301 	and.w	r3, r3, #1
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d003      	beq.n	80015e8 <LCD_Draw_Num+0x4a>
					LCD_Write_Data ( 0x001F );
 80015e0:	201f      	movs	r0, #31
 80015e2:	f7ff fcd3 	bl	8000f8c <LCD_Write_Data>
 80015e6:	e003      	b.n	80015f0 <LCD_Draw_Num+0x52>

				else
					LCD_Write_Data (  0xFFFF );
 80015e8:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80015ec:	f7ff fcce 	bl	8000f8c <LCD_Write_Data>

				ucTemp >>= 1;
 80015f0:	7bfb      	ldrb	r3, [r7, #15]
 80015f2:	085b      	lsrs	r3, r3, #1
 80015f4:	73fb      	strb	r3, [r7, #15]
			for ( ucColumn = 0; ucColumn < 8; ucColumn ++ )
 80015f6:	7b7b      	ldrb	r3, [r7, #13]
 80015f8:	3301      	adds	r3, #1
 80015fa:	737b      	strb	r3, [r7, #13]
 80015fc:	7b7b      	ldrb	r3, [r7, #13]
 80015fe:	2b07      	cmp	r3, #7
 8001600:	d9e9      	bls.n	80015d6 <LCD_Draw_Num+0x38>
		for ( ucPage = 0; ucPage < 96; ucPage ++ )
 8001602:	7bbb      	ldrb	r3, [r7, #14]
 8001604:	3301      	adds	r3, #1
 8001606:	73bb      	strb	r3, [r7, #14]
 8001608:	7bbb      	ldrb	r3, [r7, #14]
 800160a:	2b5f      	cmp	r3, #95	; 0x5f
 800160c:	d9db      	bls.n	80015c6 <LCD_Draw_Num+0x28>

			}

		}
}
 800160e:	bf00      	nop
 8001610:	bf00      	nop
 8001612:	3710      	adds	r7, #16
 8001614:	46bd      	mov	sp, r7
 8001616:	bd80      	pop	{r7, pc}

08001618 <LCD_Draw_24sqr>:

void LCD_Draw_24sqr ( uint16_t usC, uint16_t usP, const uint8_t arr[72] )
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b084      	sub	sp, #16
 800161c:	af00      	add	r7, sp, #0
 800161e:	4603      	mov	r3, r0
 8001620:	603a      	str	r2, [r7, #0]
 8001622:	80fb      	strh	r3, [r7, #6]
 8001624:	460b      	mov	r3, r1
 8001626:	80bb      	strh	r3, [r7, #4]
	uint8_t ucTemp, ucPage, ucColumn;



		LCD_OpenWindow ( usC, usP, 24, 24 );
 8001628:	88b9      	ldrh	r1, [r7, #4]
 800162a:	88f8      	ldrh	r0, [r7, #6]
 800162c:	2318      	movs	r3, #24
 800162e:	2218      	movs	r2, #24
 8001630:	f7ff fdd6 	bl	80011e0 <LCD_OpenWindow>

		LCD_Write_Cmd ( CMD_SetPixel );
 8001634:	202c      	movs	r0, #44	; 0x2c
 8001636:	f7ff fc9b 	bl	8000f70 <LCD_Write_Cmd>

		for ( ucPage = 0; ucPage < 72; ucPage ++ )
 800163a:	2300      	movs	r3, #0
 800163c:	73bb      	strb	r3, [r7, #14]
 800163e:	e020      	b.n	8001682 <LCD_Draw_24sqr+0x6a>
		{
			ucTemp = arr[ ucPage ];
 8001640:	7bbb      	ldrb	r3, [r7, #14]
 8001642:	683a      	ldr	r2, [r7, #0]
 8001644:	4413      	add	r3, r2
 8001646:	781b      	ldrb	r3, [r3, #0]
 8001648:	73fb      	strb	r3, [r7, #15]

			for ( ucColumn = 0; ucColumn < 8; ucColumn ++ )
 800164a:	2300      	movs	r3, #0
 800164c:	737b      	strb	r3, [r7, #13]
 800164e:	e012      	b.n	8001676 <LCD_Draw_24sqr+0x5e>
			{
				if ( ucTemp & 0x01 )
 8001650:	7bfb      	ldrb	r3, [r7, #15]
 8001652:	f003 0301 	and.w	r3, r3, #1
 8001656:	2b00      	cmp	r3, #0
 8001658:	d003      	beq.n	8001662 <LCD_Draw_24sqr+0x4a>
					LCD_Write_Data ( 0x001F );
 800165a:	201f      	movs	r0, #31
 800165c:	f7ff fc96 	bl	8000f8c <LCD_Write_Data>
 8001660:	e003      	b.n	800166a <LCD_Draw_24sqr+0x52>

				else
					LCD_Write_Data (  0xFFFF );
 8001662:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001666:	f7ff fc91 	bl	8000f8c <LCD_Write_Data>

				ucTemp >>= 1;
 800166a:	7bfb      	ldrb	r3, [r7, #15]
 800166c:	085b      	lsrs	r3, r3, #1
 800166e:	73fb      	strb	r3, [r7, #15]
			for ( ucColumn = 0; ucColumn < 8; ucColumn ++ )
 8001670:	7b7b      	ldrb	r3, [r7, #13]
 8001672:	3301      	adds	r3, #1
 8001674:	737b      	strb	r3, [r7, #13]
 8001676:	7b7b      	ldrb	r3, [r7, #13]
 8001678:	2b07      	cmp	r3, #7
 800167a:	d9e9      	bls.n	8001650 <LCD_Draw_24sqr+0x38>
		for ( ucPage = 0; ucPage < 72; ucPage ++ )
 800167c:	7bbb      	ldrb	r3, [r7, #14]
 800167e:	3301      	adds	r3, #1
 8001680:	73bb      	strb	r3, [r7, #14]
 8001682:	7bbb      	ldrb	r3, [r7, #14]
 8001684:	2b47      	cmp	r3, #71	; 0x47
 8001686:	d9db      	bls.n	8001640 <LCD_Draw_24sqr+0x28>

			}

		}
}
 8001688:	bf00      	nop
 800168a:	bf00      	nop
 800168c:	3710      	adds	r7, #16
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}
	...

08001694 <delay>:
#include "main.h"
#include "stdio.h"

TIM_HandleTypeDef htim6;

void delay (uint16_t time_us){
 8001694:	b480      	push	{r7}
 8001696:	b083      	sub	sp, #12
 8001698:	af00      	add	r7, sp, #0
 800169a:	4603      	mov	r3, r0
 800169c:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim6, 0);
 800169e:	4b08      	ldr	r3, [pc, #32]	; (80016c0 <delay+0x2c>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	2200      	movs	r2, #0
 80016a4:	625a      	str	r2, [r3, #36]	; 0x24
	while(__HAL_TIM_GET_COUNTER(&htim6)<time_us);
 80016a6:	bf00      	nop
 80016a8:	4b05      	ldr	r3, [pc, #20]	; (80016c0 <delay+0x2c>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80016ae:	88fb      	ldrh	r3, [r7, #6]
 80016b0:	429a      	cmp	r2, r3
 80016b2:	d3f9      	bcc.n	80016a8 <delay+0x14>
}
 80016b4:	bf00      	nop
 80016b6:	bf00      	nop
 80016b8:	370c      	adds	r7, #12
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bc80      	pop	{r7}
 80016be:	4770      	bx	lr
 80016c0:	20000158 	.word	0x20000158

080016c4 <Set_Pin_Output>:

void Set_Pin_Output(GPIO_TypeDef* port, uint16_t pin){
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b086      	sub	sp, #24
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
 80016cc:	460b      	mov	r3, r1
 80016ce:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef  GPIO_InitStruct = {0};
 80016d0:	f107 0308 	add.w	r3, r7, #8
 80016d4:	2200      	movs	r2, #0
 80016d6:	601a      	str	r2, [r3, #0]
 80016d8:	605a      	str	r2, [r3, #4]
 80016da:	609a      	str	r2, [r3, #8]
 80016dc:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = pin;
 80016de:	887b      	ldrh	r3, [r7, #2]
 80016e0:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016e2:	2301      	movs	r3, #1
 80016e4:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016e6:	2302      	movs	r3, #2
 80016e8:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(port, &GPIO_InitStruct);
 80016ea:	f107 0308 	add.w	r3, r7, #8
 80016ee:	4619      	mov	r1, r3
 80016f0:	6878      	ldr	r0, [r7, #4]
 80016f2:	f003 f93b 	bl	800496c <HAL_GPIO_Init>
}
 80016f6:	bf00      	nop
 80016f8:	3718      	adds	r7, #24
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}

080016fe <Set_Pin_Input>:

void Set_Pin_Input(GPIO_TypeDef* port, uint16_t pin){
 80016fe:	b580      	push	{r7, lr}
 8001700:	b086      	sub	sp, #24
 8001702:	af00      	add	r7, sp, #0
 8001704:	6078      	str	r0, [r7, #4]
 8001706:	460b      	mov	r3, r1
 8001708:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef  GPIO_InitStruct = {0};
 800170a:	f107 0308 	add.w	r3, r7, #8
 800170e:	2200      	movs	r2, #0
 8001710:	601a      	str	r2, [r3, #0]
 8001712:	605a      	str	r2, [r3, #4]
 8001714:	609a      	str	r2, [r3, #8]
 8001716:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = pin;
 8001718:	887b      	ldrh	r3, [r7, #2]
 800171a:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800171c:	2300      	movs	r3, #0
 800171e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001720:	2300      	movs	r3, #0
 8001722:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(port, &GPIO_InitStruct);
 8001724:	f107 0308 	add.w	r3, r7, #8
 8001728:	4619      	mov	r1, r3
 800172a:	6878      	ldr	r0, [r7, #4]
 800172c:	f003 f91e 	bl	800496c <HAL_GPIO_Init>
}
 8001730:	bf00      	nop
 8001732:	3718      	adds	r7, #24
 8001734:	46bd      	mov	sp, r7
 8001736:	bd80      	pop	{r7, pc}

08001738 <DHT11_Start>:

void DHT11_Start (void)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	af00      	add	r7, sp, #0

	Set_Pin_Output (DHT11_PORT, DHT11_PIN);  // set the pin as output
 800173c:	2140      	movs	r1, #64	; 0x40
 800173e:	480c      	ldr	r0, [pc, #48]	; (8001770 <DHT11_Start+0x38>)
 8001740:	f7ff ffc0 	bl	80016c4 <Set_Pin_Output>
	HAL_GPIO_WritePin (DHT11_PORT, DHT11_PIN, 0);   // pull the pin low
 8001744:	2200      	movs	r2, #0
 8001746:	2140      	movs	r1, #64	; 0x40
 8001748:	4809      	ldr	r0, [pc, #36]	; (8001770 <DHT11_Start+0x38>)
 800174a:	f003 faba 	bl	8004cc2 <HAL_GPIO_WritePin>
	HAL_Delay(20);  // wait for 18ms
 800174e:	2014      	movs	r0, #20
 8001750:	f002 faf0 	bl	8003d34 <HAL_Delay>
	HAL_GPIO_WritePin (DHT11_PORT, DHT11_PIN, 1);
 8001754:	2201      	movs	r2, #1
 8001756:	2140      	movs	r1, #64	; 0x40
 8001758:	4805      	ldr	r0, [pc, #20]	; (8001770 <DHT11_Start+0x38>)
 800175a:	f003 fab2 	bl	8004cc2 <HAL_GPIO_WritePin>
	delay(20);
 800175e:	2014      	movs	r0, #20
 8001760:	f7ff ff98 	bl	8001694 <delay>
	Set_Pin_Input(DHT11_PORT, DHT11_PIN);    // set as input
 8001764:	2140      	movs	r1, #64	; 0x40
 8001766:	4802      	ldr	r0, [pc, #8]	; (8001770 <DHT11_Start+0x38>)
 8001768:	f7ff ffc9 	bl	80016fe <Set_Pin_Input>
}
 800176c:	bf00      	nop
 800176e:	bd80      	pop	{r7, pc}
 8001770:	40011800 	.word	0x40011800

08001774 <Check_Response>:

uint8_t Check_Response (void)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b082      	sub	sp, #8
 8001778:	af00      	add	r7, sp, #0
	uint8_t Response = 0;
 800177a:	2300      	movs	r3, #0
 800177c:	71fb      	strb	r3, [r7, #7]
	char str[4];
	delay (40);
 800177e:	2028      	movs	r0, #40	; 0x28
 8001780:	f7ff ff88 	bl	8001694 <delay>
	if (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)))
 8001784:	2140      	movs	r1, #64	; 0x40
 8001786:	4811      	ldr	r0, [pc, #68]	; (80017cc <Check_Response+0x58>)
 8001788:	f003 fa84 	bl	8004c94 <HAL_GPIO_ReadPin>
 800178c:	4603      	mov	r3, r0
 800178e:	2b00      	cmp	r3, #0
 8001790:	d10e      	bne.n	80017b0 <Check_Response+0x3c>
	{
		delay (80);
 8001792:	2050      	movs	r0, #80	; 0x50
 8001794:	f7ff ff7e 	bl	8001694 <delay>
		if ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN))) Response = 1;
 8001798:	2140      	movs	r1, #64	; 0x40
 800179a:	480c      	ldr	r0, [pc, #48]	; (80017cc <Check_Response+0x58>)
 800179c:	f003 fa7a 	bl	8004c94 <HAL_GPIO_ReadPin>
 80017a0:	4603      	mov	r3, r0
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d002      	beq.n	80017ac <Check_Response+0x38>
 80017a6:	2301      	movs	r3, #1
 80017a8:	71fb      	strb	r3, [r7, #7]
 80017aa:	e001      	b.n	80017b0 <Check_Response+0x3c>
		else Response = -1;
 80017ac:	23ff      	movs	r3, #255	; 0xff
 80017ae:	71fb      	strb	r3, [r7, #7]
	}
//	sprintf(str, "%d", Response);
//	LCD_DrawString(10, 10, str);
	while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)));   // wait for the pin to go low
 80017b0:	bf00      	nop
 80017b2:	2140      	movs	r1, #64	; 0x40
 80017b4:	4805      	ldr	r0, [pc, #20]	; (80017cc <Check_Response+0x58>)
 80017b6:	f003 fa6d 	bl	8004c94 <HAL_GPIO_ReadPin>
 80017ba:	4603      	mov	r3, r0
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d1f8      	bne.n	80017b2 <Check_Response+0x3e>
	return Response;
 80017c0:	79fb      	ldrb	r3, [r7, #7]
}
 80017c2:	4618      	mov	r0, r3
 80017c4:	3708      	adds	r7, #8
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	40011800 	.word	0x40011800

080017d0 <DHT11_Read>:

uint8_t DHT11_Read (void)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b082      	sub	sp, #8
 80017d4:	af00      	add	r7, sp, #0
	uint8_t i,j;
	for (j=0;j<8;j++)
 80017d6:	2300      	movs	r3, #0
 80017d8:	71bb      	strb	r3, [r7, #6]
 80017da:	e037      	b.n	800184c <DHT11_Read+0x7c>
	{
		while (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)));   // wait for the pin to go high
 80017dc:	bf00      	nop
 80017de:	2140      	movs	r1, #64	; 0x40
 80017e0:	481e      	ldr	r0, [pc, #120]	; (800185c <DHT11_Read+0x8c>)
 80017e2:	f003 fa57 	bl	8004c94 <HAL_GPIO_ReadPin>
 80017e6:	4603      	mov	r3, r0
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d0f8      	beq.n	80017de <DHT11_Read+0xe>
		delay (50);   // wait for 40 us
 80017ec:	2032      	movs	r0, #50	; 0x32
 80017ee:	f7ff ff51 	bl	8001694 <delay>
		if (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)))   // if the pin is low
 80017f2:	2140      	movs	r1, #64	; 0x40
 80017f4:	4819      	ldr	r0, [pc, #100]	; (800185c <DHT11_Read+0x8c>)
 80017f6:	f003 fa4d 	bl	8004c94 <HAL_GPIO_ReadPin>
 80017fa:	4603      	mov	r3, r0
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d10e      	bne.n	800181e <DHT11_Read+0x4e>
		{
			i&= ~(1<<(7-j));   // write 0
 8001800:	79bb      	ldrb	r3, [r7, #6]
 8001802:	f1c3 0307 	rsb	r3, r3, #7
 8001806:	2201      	movs	r2, #1
 8001808:	fa02 f303 	lsl.w	r3, r2, r3
 800180c:	b25b      	sxtb	r3, r3
 800180e:	43db      	mvns	r3, r3
 8001810:	b25a      	sxtb	r2, r3
 8001812:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001816:	4013      	ands	r3, r2
 8001818:	b25b      	sxtb	r3, r3
 800181a:	71fb      	strb	r3, [r7, #7]
 800181c:	e00b      	b.n	8001836 <DHT11_Read+0x66>
		}
		else i|= (1<<(7-j));  // if the pin is high, write 1
 800181e:	79bb      	ldrb	r3, [r7, #6]
 8001820:	f1c3 0307 	rsb	r3, r3, #7
 8001824:	2201      	movs	r2, #1
 8001826:	fa02 f303 	lsl.w	r3, r2, r3
 800182a:	b25a      	sxtb	r2, r3
 800182c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001830:	4313      	orrs	r3, r2
 8001832:	b25b      	sxtb	r3, r3
 8001834:	71fb      	strb	r3, [r7, #7]
		while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)));  // wait for the pin to go low
 8001836:	bf00      	nop
 8001838:	2140      	movs	r1, #64	; 0x40
 800183a:	4808      	ldr	r0, [pc, #32]	; (800185c <DHT11_Read+0x8c>)
 800183c:	f003 fa2a 	bl	8004c94 <HAL_GPIO_ReadPin>
 8001840:	4603      	mov	r3, r0
 8001842:	2b00      	cmp	r3, #0
 8001844:	d1f8      	bne.n	8001838 <DHT11_Read+0x68>
	for (j=0;j<8;j++)
 8001846:	79bb      	ldrb	r3, [r7, #6]
 8001848:	3301      	adds	r3, #1
 800184a:	71bb      	strb	r3, [r7, #6]
 800184c:	79bb      	ldrb	r3, [r7, #6]
 800184e:	2b07      	cmp	r3, #7
 8001850:	d9c4      	bls.n	80017dc <DHT11_Read+0xc>
	}
	return i;
 8001852:	79fb      	ldrb	r3, [r7, #7]
}
 8001854:	4618      	mov	r0, r3
 8001856:	3708      	adds	r7, #8
 8001858:	46bd      	mov	sp, r7
 800185a:	bd80      	pop	{r7, pc}
 800185c:	40011800 	.word	0x40011800

08001860 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001860:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001864:	b0db      	sub	sp, #364	; 0x16c
 8001866:	af0a      	add	r7, sp, #40	; 0x28
  /* USER CODE BEGIN 1 */
  int32_t adc1_value = 0, adc2_value = 0;
 8001868:	2300      	movs	r3, #0
 800186a:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 800186e:	2300      	movs	r3, #0
 8001870:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  char watering_time_1 [] = {"00:00"};
 8001874:	4acc      	ldr	r2, [pc, #816]	; (8001ba8 <main+0x348>)
 8001876:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800187a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800187e:	6018      	str	r0, [r3, #0]
 8001880:	3304      	adds	r3, #4
 8001882:	8019      	strh	r1, [r3, #0]
  char watering_time_2 [] = {"00:00"};
 8001884:	4ac8      	ldr	r2, [pc, #800]	; (8001ba8 <main+0x348>)
 8001886:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800188a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800188e:	6018      	str	r0, [r3, #0]
 8001890:	3304      	adds	r3, #4
 8001892:	8019      	strh	r1, [r3, #0]
  char watering_time [] = {"00:00"};
 8001894:	4ac4      	ldr	r2, [pc, #784]	; (8001ba8 <main+0x348>)
 8001896:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800189a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800189e:	6018      	str	r0, [r3, #0]
 80018a0:	3304      	adds	r3, #4
 80018a2:	8019      	strh	r1, [r3, #0]
  char records [10][3][8] = {{"time", "temperature", "humidity"}};
 80018a4:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80018a8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80018ac:	4618      	mov	r0, r3
 80018ae:	23f0      	movs	r3, #240	; 0xf0
 80018b0:	461a      	mov	r2, r3
 80018b2:	2100      	movs	r1, #0
 80018b4:	f005 f85a 	bl	800696c <memset>
 80018b8:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80018bc:	f5a3 728c 	sub.w	r2, r3, #280	; 0x118
 80018c0:	49ba      	ldr	r1, [pc, #744]	; (8001bac <main+0x34c>)
 80018c2:	4613      	mov	r3, r2
 80018c4:	c903      	ldmia	r1, {r0, r1}
 80018c6:	6018      	str	r0, [r3, #0]
 80018c8:	3304      	adds	r3, #4
 80018ca:	7019      	strb	r1, [r3, #0]
 80018cc:	1d53      	adds	r3, r2, #5
 80018ce:	2200      	movs	r2, #0
 80018d0:	801a      	strh	r2, [r3, #0]
 80018d2:	709a      	strb	r2, [r3, #2]
 80018d4:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80018d8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80018dc:	4ab4      	ldr	r2, [pc, #720]	; (8001bb0 <main+0x350>)
 80018de:	3308      	adds	r3, #8
 80018e0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80018e4:	e883 0003 	stmia.w	r3, {r0, r1}
 80018e8:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80018ec:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80018f0:	4ab0      	ldr	r2, [pc, #704]	; (8001bb4 <main+0x354>)
 80018f2:	3310      	adds	r3, #16
 80018f4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80018f8:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t records_count = 0;
 80018fc:	2300      	movs	r3, #0
 80018fe:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
  uint8_t Humidity_B1, Humidity_B2, Temp_B1, Temp_B2;
  char temp_r [8] = {0}, humid_r [8] = {0};
 8001902:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8001906:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800190a:	2200      	movs	r2, #0
 800190c:	601a      	str	r2, [r3, #0]
 800190e:	2200      	movs	r2, #0
 8001910:	605a      	str	r2, [r3, #4]
 8001912:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8001916:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800191a:	2200      	movs	r2, #0
 800191c:	601a      	str	r2, [r3, #0]
 800191e:	2200      	movs	r2, #0
 8001920:	605a      	str	r2, [r3, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001922:	f002 f9a5 	bl	8003c70 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001926:	f000 fb51 	bl	8001fcc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800192a:	f000 fd0b 	bl	8002344 <MX_GPIO_Init>
  MX_FSMC_Init();
 800192e:	f000 fe2d 	bl	800258c <MX_FSMC_Init>
  MX_ADC1_Init();
 8001932:	f000 fbad 	bl	8002090 <MX_ADC1_Init>
  MX_TIM6_Init();
 8001936:	f000 fccf 	bl	80022d8 <MX_TIM6_Init>
  MX_RTC_Init();
 800193a:	f000 fc25 	bl	8002188 <MX_RTC_Init>
  MX_ADC2_Init();
 800193e:	f000 fbe5 	bl	800210c <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */
  macXPT2046_CS_DISABLE();
 8001942:	2200      	movs	r2, #0
 8001944:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001948:	489b      	ldr	r0, [pc, #620]	; (8001bb8 <main+0x358>)
 800194a:	f003 f9ba 	bl	8004cc2 <HAL_GPIO_WritePin>
  LCD_INIT();
 800194e:	f7ff fac3 	bl	8000ed8 <LCD_INIT>
  HAL_ADCEx_Calibration_Start(&hadc1);
 8001952:	489a      	ldr	r0, [pc, #616]	; (8001bbc <main+0x35c>)
 8001954:	f002 fe50 	bl	80045f8 <HAL_ADCEx_Calibration_Start>
  HAL_TIM_Base_Start(&htim6);
 8001958:	4899      	ldr	r0, [pc, #612]	; (8001bc0 <main+0x360>)
 800195a:	f004 fdc9 	bl	80064f0 <HAL_TIM_Base_Start>
  while(Ov7725_Init() != SUCCESS);
 800195e:	bf00      	nop
 8001960:	f7ff f882 	bl	8000a68 <Ov7725_Init>
 8001964:	4603      	mov	r3, r0
 8001966:	2b00      	cmp	r3, #0
 8001968:	d1fa      	bne.n	8001960 <main+0x100>
  TimeInitPage(sec, min, hr, weekday, date, month, year, sTime, sDate, hrtc);
 800196a:	4b96      	ldr	r3, [pc, #600]	; (8001bc4 <main+0x364>)
 800196c:	f893 c000 	ldrb.w	ip, [r3]
 8001970:	4b95      	ldr	r3, [pc, #596]	; (8001bc8 <main+0x368>)
 8001972:	f893 e000 	ldrb.w	lr, [r3]
 8001976:	4b95      	ldr	r3, [pc, #596]	; (8001bcc <main+0x36c>)
 8001978:	f893 8000 	ldrb.w	r8, [r3]
 800197c:	4b94      	ldr	r3, [pc, #592]	; (8001bd0 <main+0x370>)
 800197e:	f893 9000 	ldrb.w	r9, [r3]
 8001982:	4b94      	ldr	r3, [pc, #592]	; (8001bd4 <main+0x374>)
 8001984:	781e      	ldrb	r6, [r3, #0]
 8001986:	4b94      	ldr	r3, [pc, #592]	; (8001bd8 <main+0x378>)
 8001988:	781b      	ldrb	r3, [r3, #0]
 800198a:	607b      	str	r3, [r7, #4]
 800198c:	4b93      	ldr	r3, [pc, #588]	; (8001bdc <main+0x37c>)
 800198e:	781a      	ldrb	r2, [r3, #0]
 8001990:	603a      	str	r2, [r7, #0]
 8001992:	4b93      	ldr	r3, [pc, #588]	; (8001be0 <main+0x380>)
 8001994:	ac05      	add	r4, sp, #20
 8001996:	461d      	mov	r5, r3
 8001998:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800199a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800199c:	682b      	ldr	r3, [r5, #0]
 800199e:	6023      	str	r3, [r4, #0]
 80019a0:	4b90      	ldr	r3, [pc, #576]	; (8001be4 <main+0x384>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	9304      	str	r3, [sp, #16]
 80019a6:	4a90      	ldr	r2, [pc, #576]	; (8001be8 <main+0x388>)
 80019a8:	ab03      	add	r3, sp, #12
 80019aa:	6812      	ldr	r2, [r2, #0]
 80019ac:	4611      	mov	r1, r2
 80019ae:	8019      	strh	r1, [r3, #0]
 80019b0:	3302      	adds	r3, #2
 80019b2:	0c12      	lsrs	r2, r2, #16
 80019b4:	701a      	strb	r2, [r3, #0]
 80019b6:	683a      	ldr	r2, [r7, #0]
 80019b8:	9202      	str	r2, [sp, #8]
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	9301      	str	r3, [sp, #4]
 80019be:	9600      	str	r6, [sp, #0]
 80019c0:	464b      	mov	r3, r9
 80019c2:	4642      	mov	r2, r8
 80019c4:	4671      	mov	r1, lr
 80019c6:	4660      	mov	r0, ip
 80019c8:	f000 ffe8 	bl	800299c <TimeInitPage>
  Ov7725_vsync = 0;
 80019cc:	4b87      	ldr	r3, [pc, #540]	; (8001bec <main+0x38c>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	701a      	strb	r2, [r3, #0]

	
  while (1)
  {
	// RTC
	HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 80019d2:	2200      	movs	r2, #0
 80019d4:	4984      	ldr	r1, [pc, #528]	; (8001be8 <main+0x388>)
 80019d6:	4882      	ldr	r0, [pc, #520]	; (8001be0 <main+0x380>)
 80019d8:	f004 f888 	bl	8005aec <HAL_RTC_GetTime>
	if(sTime.Hours == (watering_time_1[0]-48)*10+(watering_time_1[1]-48)){
 80019dc:	4b82      	ldr	r3, [pc, #520]	; (8001be8 <main+0x388>)
 80019de:	781b      	ldrb	r3, [r3, #0]
 80019e0:	4619      	mov	r1, r3
 80019e2:	f897 3128 	ldrb.w	r3, [r7, #296]	; 0x128
 80019e6:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80019ea:	4613      	mov	r3, r2
 80019ec:	009b      	lsls	r3, r3, #2
 80019ee:	4413      	add	r3, r2
 80019f0:	005b      	lsls	r3, r3, #1
 80019f2:	461a      	mov	r2, r3
 80019f4:	f897 3129 	ldrb.w	r3, [r7, #297]	; 0x129
 80019f8:	3b30      	subs	r3, #48	; 0x30
 80019fa:	4413      	add	r3, r2
 80019fc:	4299      	cmp	r1, r3
 80019fe:	d135      	bne.n	8001a6c <main+0x20c>
		if(sTime.Minutes > (watering_time_1[3]-48)*10+(watering_time_1[4]-48) && sTime.Minutes <= (watering_time_2[3]-48)*10+(watering_time_2[4]-48))
 8001a00:	4b79      	ldr	r3, [pc, #484]	; (8001be8 <main+0x388>)
 8001a02:	785b      	ldrb	r3, [r3, #1]
 8001a04:	4619      	mov	r1, r3
 8001a06:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8001a0a:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8001a0e:	4613      	mov	r3, r2
 8001a10:	009b      	lsls	r3, r3, #2
 8001a12:	4413      	add	r3, r2
 8001a14:	005b      	lsls	r3, r3, #1
 8001a16:	461a      	mov	r2, r3
 8001a18:	f897 312c 	ldrb.w	r3, [r7, #300]	; 0x12c
 8001a1c:	3b30      	subs	r3, #48	; 0x30
 8001a1e:	4413      	add	r3, r2
 8001a20:	4299      	cmp	r1, r3
 8001a22:	dd1a      	ble.n	8001a5a <main+0x1fa>
 8001a24:	4b70      	ldr	r3, [pc, #448]	; (8001be8 <main+0x388>)
 8001a26:	785b      	ldrb	r3, [r3, #1]
 8001a28:	4619      	mov	r1, r3
 8001a2a:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
 8001a2e:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8001a32:	4613      	mov	r3, r2
 8001a34:	009b      	lsls	r3, r3, #2
 8001a36:	4413      	add	r3, r2
 8001a38:	005b      	lsls	r3, r3, #1
 8001a3a:	461a      	mov	r2, r3
 8001a3c:	f897 3124 	ldrb.w	r3, [r7, #292]	; 0x124
 8001a40:	3b30      	subs	r3, #48	; 0x30
 8001a42:	4413      	add	r3, r2
 8001a44:	4299      	cmp	r1, r3
 8001a46:	dc08      	bgt.n	8001a5a <main+0x1fa>
			strcpy(watering_time, watering_time_2);
 8001a48:	f507 7290 	add.w	r2, r7, #288	; 0x120
 8001a4c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001a50:	4611      	mov	r1, r2
 8001a52:	4618      	mov	r0, r3
 8001a54:	f004 ffb2 	bl	80069bc <strcpy>
 8001a58:	e058      	b.n	8001b0c <main+0x2ac>
		else
			strcpy(watering_time, watering_time_1);
 8001a5a:	f507 7294 	add.w	r2, r7, #296	; 0x128
 8001a5e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001a62:	4611      	mov	r1, r2
 8001a64:	4618      	mov	r0, r3
 8001a66:	f004 ffa9 	bl	80069bc <strcpy>
 8001a6a:	e04f      	b.n	8001b0c <main+0x2ac>
	}
	else if(sTime.Hours > (watering_time_1[0]-48)*10+(watering_time_1[1]-48) && sTime.Hours <= (watering_time_2[0]-48)*10+(watering_time_2[1]-48)){
 8001a6c:	4b5e      	ldr	r3, [pc, #376]	; (8001be8 <main+0x388>)
 8001a6e:	781b      	ldrb	r3, [r3, #0]
 8001a70:	4619      	mov	r1, r3
 8001a72:	f897 3128 	ldrb.w	r3, [r7, #296]	; 0x128
 8001a76:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8001a7a:	4613      	mov	r3, r2
 8001a7c:	009b      	lsls	r3, r3, #2
 8001a7e:	4413      	add	r3, r2
 8001a80:	005b      	lsls	r3, r3, #1
 8001a82:	461a      	mov	r2, r3
 8001a84:	f897 3129 	ldrb.w	r3, [r7, #297]	; 0x129
 8001a88:	3b30      	subs	r3, #48	; 0x30
 8001a8a:	4413      	add	r3, r2
 8001a8c:	4299      	cmp	r1, r3
 8001a8e:	dd35      	ble.n	8001afc <main+0x29c>
 8001a90:	4b55      	ldr	r3, [pc, #340]	; (8001be8 <main+0x388>)
 8001a92:	781b      	ldrb	r3, [r3, #0]
 8001a94:	4619      	mov	r1, r3
 8001a96:	f897 3120 	ldrb.w	r3, [r7, #288]	; 0x120
 8001a9a:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8001a9e:	4613      	mov	r3, r2
 8001aa0:	009b      	lsls	r3, r3, #2
 8001aa2:	4413      	add	r3, r2
 8001aa4:	005b      	lsls	r3, r3, #1
 8001aa6:	461a      	mov	r2, r3
 8001aa8:	f897 3121 	ldrb.w	r3, [r7, #289]	; 0x121
 8001aac:	3b30      	subs	r3, #48	; 0x30
 8001aae:	4413      	add	r3, r2
 8001ab0:	4299      	cmp	r1, r3
 8001ab2:	dc23      	bgt.n	8001afc <main+0x29c>
		if(sTime.Minutes > (watering_time_2[3]-48)*10+(watering_time_2[4]-48))
 8001ab4:	4b4c      	ldr	r3, [pc, #304]	; (8001be8 <main+0x388>)
 8001ab6:	785b      	ldrb	r3, [r3, #1]
 8001ab8:	4619      	mov	r1, r3
 8001aba:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
 8001abe:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8001ac2:	4613      	mov	r3, r2
 8001ac4:	009b      	lsls	r3, r3, #2
 8001ac6:	4413      	add	r3, r2
 8001ac8:	005b      	lsls	r3, r3, #1
 8001aca:	461a      	mov	r2, r3
 8001acc:	f897 3124 	ldrb.w	r3, [r7, #292]	; 0x124
 8001ad0:	3b30      	subs	r3, #48	; 0x30
 8001ad2:	4413      	add	r3, r2
 8001ad4:	4299      	cmp	r1, r3
 8001ad6:	dd08      	ble.n	8001aea <main+0x28a>
			strcpy(watering_time, watering_time_1);
 8001ad8:	f507 7294 	add.w	r2, r7, #296	; 0x128
 8001adc:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001ae0:	4611      	mov	r1, r2
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f004 ff6a 	bl	80069bc <strcpy>
		if(sTime.Minutes > (watering_time_2[3]-48)*10+(watering_time_2[4]-48))
 8001ae8:	e010      	b.n	8001b0c <main+0x2ac>
		else
			strcpy(watering_time, watering_time_2);
 8001aea:	f507 7290 	add.w	r2, r7, #288	; 0x120
 8001aee:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001af2:	4611      	mov	r1, r2
 8001af4:	4618      	mov	r0, r3
 8001af6:	f004 ff61 	bl	80069bc <strcpy>
		if(sTime.Minutes > (watering_time_2[3]-48)*10+(watering_time_2[4]-48))
 8001afa:	e007      	b.n	8001b0c <main+0x2ac>
	}
	else strcpy(watering_time, watering_time_1);
 8001afc:	f507 7294 	add.w	r2, r7, #296	; 0x128
 8001b00:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001b04:	4611      	mov	r1, r2
 8001b06:	4618      	mov	r0, r3
 8001b08:	f004 ff58 	bl	80069bc <strcpy>


	//DHT11 Sensor For Temperature and Humidity
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_6, GPIO_PIN_SET);
 8001b0c:	2201      	movs	r2, #1
 8001b0e:	2140      	movs	r1, #64	; 0x40
 8001b10:	4837      	ldr	r0, [pc, #220]	; (8001bf0 <main+0x390>)
 8001b12:	f003 f8d6 	bl	8004cc2 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8001b16:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001b1a:	f002 f90b 	bl	8003d34 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_6, GPIO_PIN_RESET);
 8001b1e:	2200      	movs	r2, #0
 8001b20:	2140      	movs	r1, #64	; 0x40
 8001b22:	4833      	ldr	r0, [pc, #204]	; (8001bf0 <main+0x390>)
 8001b24:	f003 f8cd 	bl	8004cc2 <HAL_GPIO_WritePin>
	DHT11_Start();
 8001b28:	f7ff fe06 	bl	8001738 <DHT11_Start>
	Check_Response();
 8001b2c:	f7ff fe22 	bl	8001774 <Check_Response>
	Humidity_B1 = DHT11_Read();
 8001b30:	f7ff fe4e 	bl	80017d0 <DHT11_Read>
 8001b34:	4603      	mov	r3, r0
 8001b36:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
	Humidity_B2 = DHT11_Read();
 8001b3a:	f7ff fe49 	bl	80017d0 <DHT11_Read>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	f887 3132 	strb.w	r3, [r7, #306]	; 0x132
	Temp_B1 = DHT11_Read();
 8001b44:	f7ff fe44 	bl	80017d0 <DHT11_Read>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	f887 3131 	strb.w	r3, [r7, #305]	; 0x131
	Temp_B2 = DHT11_Read();
 8001b4e:	f7ff fe3f 	bl	80017d0 <DHT11_Read>
 8001b52:	4603      	mov	r3, r0
 8001b54:	f887 3130 	strb.w	r3, [r7, #304]	; 0x130

	// ADC1 for Water Level Sensor
	HAL_ADC_Start(&hadc1);
 8001b58:	4818      	ldr	r0, [pc, #96]	; (8001bbc <main+0x35c>)
 8001b5a:	f002 f9f9 	bl	8003f50 <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc1, 1000);
 8001b5e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001b62:	4816      	ldr	r0, [pc, #88]	; (8001bbc <main+0x35c>)
 8001b64:	f002 faa2 	bl	80040ac <HAL_ADC_PollForConversion>
	adc1_value = HAL_ADC_GetValue(&hadc1);
 8001b68:	4814      	ldr	r0, [pc, #80]	; (8001bbc <main+0x35c>)
 8001b6a:	f002 fba5 	bl	80042b8 <HAL_ADC_GetValue>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138

	// ADC2 for LDR
	HAL_ADC_Start(&hadc2);
 8001b74:	481f      	ldr	r0, [pc, #124]	; (8001bf4 <main+0x394>)
 8001b76:	f002 f9eb 	bl	8003f50 <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc2, 1000);
 8001b7a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001b7e:	481d      	ldr	r0, [pc, #116]	; (8001bf4 <main+0x394>)
 8001b80:	f002 fa94 	bl	80040ac <HAL_ADC_PollForConversion>
	adc2_value = HAL_ADC_GetValue(&hadc2);
 8001b84:	481b      	ldr	r0, [pc, #108]	; (8001bf4 <main+0x394>)
 8001b86:	f002 fb97 	bl	80042b8 <HAL_ADC_GetValue>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134



	// Control LED light based on LDR value: Turn on if it's dim
	if(adc2_value <= 2800) HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8001b90:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001b94:	f5b3 6f2f 	cmp.w	r3, #2800	; 0xaf0
 8001b98:	dc30      	bgt.n	8001bfc <main+0x39c>
 8001b9a:	2201      	movs	r2, #1
 8001b9c:	2110      	movs	r1, #16
 8001b9e:	4816      	ldr	r0, [pc, #88]	; (8001bf8 <main+0x398>)
 8001ba0:	f003 f88f 	bl	8004cc2 <HAL_GPIO_WritePin>
 8001ba4:	e02f      	b.n	8001c06 <main+0x3a6>
 8001ba6:	bf00      	nop
 8001ba8:	080072f0 	.word	0x080072f0
 8001bac:	080072f8 	.word	0x080072f8
 8001bb0:	08007300 	.word	0x08007300
 8001bb4:	08007308 	.word	0x08007308
 8001bb8:	40011400 	.word	0x40011400
 8001bbc:	200001a0 	.word	0x200001a0
 8001bc0:	20000158 	.word	0x20000158
 8001bc4:	20000268 	.word	0x20000268
 8001bc8:	20000269 	.word	0x20000269
 8001bcc:	2000026a 	.word	0x2000026a
 8001bd0:	2000026b 	.word	0x2000026b
 8001bd4:	2000026c 	.word	0x2000026c
 8001bd8:	2000026d 	.word	0x2000026d
 8001bdc:	2000026e 	.word	0x2000026e
 8001be0:	20000200 	.word	0x20000200
 8001be4:	20000264 	.word	0x20000264
 8001be8:	20000260 	.word	0x20000260
 8001bec:	2000025c 	.word	0x2000025c
 8001bf0:	40011800 	.word	0x40011800
 8001bf4:	200001d0 	.word	0x200001d0
 8001bf8:	40010800 	.word	0x40010800
	else HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	2110      	movs	r1, #16
 8001c00:	48cb      	ldr	r0, [pc, #812]	; (8001f30 <main+0x6d0>)
 8001c02:	f003 f85e 	bl	8004cc2 <HAL_GPIO_WritePin>

	// PIR and LCD
	if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) == GPIO_PIN_SET){
 8001c06:	2140      	movs	r1, #64	; 0x40
 8001c08:	48ca      	ldr	r0, [pc, #808]	; (8001f34 <main+0x6d4>)
 8001c0a:	f003 f843 	bl	8004c94 <HAL_GPIO_ReadPin>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	2b01      	cmp	r3, #1
 8001c12:	d106      	bne.n	8001c22 <main+0x3c2>
		HAL_GPIO_WritePin(GPIOD,GPIO_PIN_12,GPIO_PIN_RESET);
 8001c14:	2200      	movs	r2, #0
 8001c16:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001c1a:	48c7      	ldr	r0, [pc, #796]	; (8001f38 <main+0x6d8>)
 8001c1c:	f003 f851 	bl	8004cc2 <HAL_GPIO_WritePin>
 8001c20:	e005      	b.n	8001c2e <main+0x3ce>
	}
	else{
		HAL_GPIO_WritePin(GPIOD,GPIO_PIN_12,GPIO_PIN_SET);
 8001c22:	2201      	movs	r2, #1
 8001c24:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001c28:	48c3      	ldr	r0, [pc, #780]	; (8001f38 <main+0x6d8>)
 8001c2a:	f003 f84a 	bl	8004cc2 <HAL_GPIO_WritePin>




	// Records During Watering => delay 1 minutes
	if(sTime.Hours == (watering_time[0]-48)*10+(watering_time[1]-48) && sTime.Minutes == (watering_time[3]-48)*10+(watering_time[4]-48) && strcmp(watering_time_1, watering_time_2)!=0){
 8001c2e:	4bc3      	ldr	r3, [pc, #780]	; (8001f3c <main+0x6dc>)
 8001c30:	781b      	ldrb	r3, [r3, #0]
 8001c32:	4619      	mov	r1, r3
 8001c34:	f897 3118 	ldrb.w	r3, [r7, #280]	; 0x118
 8001c38:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8001c3c:	4613      	mov	r3, r2
 8001c3e:	009b      	lsls	r3, r3, #2
 8001c40:	4413      	add	r3, r2
 8001c42:	005b      	lsls	r3, r3, #1
 8001c44:	461a      	mov	r2, r3
 8001c46:	f897 3119 	ldrb.w	r3, [r7, #281]	; 0x119
 8001c4a:	3b30      	subs	r3, #48	; 0x30
 8001c4c:	4413      	add	r3, r2
 8001c4e:	4299      	cmp	r1, r3
 8001c50:	f040 80ad 	bne.w	8001dae <main+0x54e>
 8001c54:	4bb9      	ldr	r3, [pc, #740]	; (8001f3c <main+0x6dc>)
 8001c56:	785b      	ldrb	r3, [r3, #1]
 8001c58:	4619      	mov	r1, r3
 8001c5a:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 8001c5e:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8001c62:	4613      	mov	r3, r2
 8001c64:	009b      	lsls	r3, r3, #2
 8001c66:	4413      	add	r3, r2
 8001c68:	005b      	lsls	r3, r3, #1
 8001c6a:	461a      	mov	r2, r3
 8001c6c:	f897 311c 	ldrb.w	r3, [r7, #284]	; 0x11c
 8001c70:	3b30      	subs	r3, #48	; 0x30
 8001c72:	4413      	add	r3, r2
 8001c74:	4299      	cmp	r1, r3
 8001c76:	f040 809a 	bne.w	8001dae <main+0x54e>
 8001c7a:	f507 7290 	add.w	r2, r7, #288	; 0x120
 8001c7e:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001c82:	4611      	mov	r1, r2
 8001c84:	4618      	mov	r0, r3
 8001c86:	f7fe facf 	bl	8000228 <strcmp>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	f000 808e 	beq.w	8001dae <main+0x54e>
	  LCD_Clear (50, 80, 140, 70, GREEN);
 8001c92:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001c96:	9300      	str	r3, [sp, #0]
 8001c98:	2346      	movs	r3, #70	; 0x46
 8001c9a:	228c      	movs	r2, #140	; 0x8c
 8001c9c:	2150      	movs	r1, #80	; 0x50
 8001c9e:	2032      	movs	r0, #50	; 0x32
 8001ca0:	f7ff fb15 	bl	80012ce <LCD_Clear>
	  LCD_DrawString(75, 100, "Watering");
 8001ca4:	4aa6      	ldr	r2, [pc, #664]	; (8001f40 <main+0x6e0>)
 8001ca6:	2164      	movs	r1, #100	; 0x64
 8001ca8:	204b      	movs	r0, #75	; 0x4b
 8001caa:	f7ff fbff 	bl	80014ac <LCD_DrawString>
	  strcpy(records[records_count%10][0], watering_time);
 8001cae:	f897 213f 	ldrb.w	r2, [r7, #319]	; 0x13f
 8001cb2:	4ba4      	ldr	r3, [pc, #656]	; (8001f44 <main+0x6e4>)
 8001cb4:	fba3 1302 	umull	r1, r3, r3, r2
 8001cb8:	08d9      	lsrs	r1, r3, #3
 8001cba:	460b      	mov	r3, r1
 8001cbc:	009b      	lsls	r3, r3, #2
 8001cbe:	440b      	add	r3, r1
 8001cc0:	005b      	lsls	r3, r3, #1
 8001cc2:	1ad3      	subs	r3, r2, r3
 8001cc4:	b2db      	uxtb	r3, r3
 8001cc6:	4619      	mov	r1, r3
 8001cc8:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001ccc:	460b      	mov	r3, r1
 8001cce:	005b      	lsls	r3, r3, #1
 8001cd0:	440b      	add	r3, r1
 8001cd2:	00db      	lsls	r3, r3, #3
 8001cd4:	4413      	add	r3, r2
 8001cd6:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8001cda:	4611      	mov	r1, r2
 8001cdc:	4618      	mov	r0, r3
 8001cde:	f004 fe6d 	bl	80069bc <strcpy>
	  sprintf(temp_r, "%d", (int)Temp_B1);
 8001ce2:	f897 2131 	ldrb.w	r2, [r7, #305]	; 0x131
 8001ce6:	f107 0320 	add.w	r3, r7, #32
 8001cea:	4997      	ldr	r1, [pc, #604]	; (8001f48 <main+0x6e8>)
 8001cec:	4618      	mov	r0, r3
 8001cee:	f004 fe45 	bl	800697c <siprintf>
	  sprintf(humid_r, "%d", (int)Humidity_B1);
 8001cf2:	f897 2133 	ldrb.w	r2, [r7, #307]	; 0x133
 8001cf6:	f107 0318 	add.w	r3, r7, #24
 8001cfa:	4993      	ldr	r1, [pc, #588]	; (8001f48 <main+0x6e8>)
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	f004 fe3d 	bl	800697c <siprintf>
	  strcpy(records[records_count%10][1], temp_r);
 8001d02:	f897 213f 	ldrb.w	r2, [r7, #319]	; 0x13f
 8001d06:	4b8f      	ldr	r3, [pc, #572]	; (8001f44 <main+0x6e4>)
 8001d08:	fba3 1302 	umull	r1, r3, r3, r2
 8001d0c:	08d9      	lsrs	r1, r3, #3
 8001d0e:	460b      	mov	r3, r1
 8001d10:	009b      	lsls	r3, r3, #2
 8001d12:	440b      	add	r3, r1
 8001d14:	005b      	lsls	r3, r3, #1
 8001d16:	1ad3      	subs	r3, r2, r3
 8001d18:	b2db      	uxtb	r3, r3
 8001d1a:	4619      	mov	r1, r3
 8001d1c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001d20:	460b      	mov	r3, r1
 8001d22:	005b      	lsls	r3, r3, #1
 8001d24:	440b      	add	r3, r1
 8001d26:	00db      	lsls	r3, r3, #3
 8001d28:	3308      	adds	r3, #8
 8001d2a:	4413      	add	r3, r2
 8001d2c:	f107 0220 	add.w	r2, r7, #32
 8001d30:	4611      	mov	r1, r2
 8001d32:	4618      	mov	r0, r3
 8001d34:	f004 fe42 	bl	80069bc <strcpy>
	  strcpy(records[records_count%10][2], humid_r);
 8001d38:	f897 213f 	ldrb.w	r2, [r7, #319]	; 0x13f
 8001d3c:	4b81      	ldr	r3, [pc, #516]	; (8001f44 <main+0x6e4>)
 8001d3e:	fba3 1302 	umull	r1, r3, r3, r2
 8001d42:	08d9      	lsrs	r1, r3, #3
 8001d44:	460b      	mov	r3, r1
 8001d46:	009b      	lsls	r3, r3, #2
 8001d48:	440b      	add	r3, r1
 8001d4a:	005b      	lsls	r3, r3, #1
 8001d4c:	1ad3      	subs	r3, r2, r3
 8001d4e:	b2db      	uxtb	r3, r3
 8001d50:	4619      	mov	r1, r3
 8001d52:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001d56:	460b      	mov	r3, r1
 8001d58:	005b      	lsls	r3, r3, #1
 8001d5a:	440b      	add	r3, r1
 8001d5c:	00db      	lsls	r3, r3, #3
 8001d5e:	3310      	adds	r3, #16
 8001d60:	4413      	add	r3, r2
 8001d62:	f107 0218 	add.w	r2, r7, #24
 8001d66:	4611      	mov	r1, r2
 8001d68:	4618      	mov	r0, r3
 8001d6a:	f004 fe27 	bl	80069bc <strcpy>
	  records_count += 1;
 8001d6e:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 8001d72:	3301      	adds	r3, #1
 8001d74:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f

	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 8001d78:	2201      	movs	r2, #1
 8001d7a:	2180      	movs	r1, #128	; 0x80
 8001d7c:	486c      	ldr	r0, [pc, #432]	; (8001f30 <main+0x6d0>)
 8001d7e:	f002 ffa0 	bl	8004cc2 <HAL_GPIO_WritePin>
	  HAL_Delay(10000);
 8001d82:	f242 7010 	movw	r0, #10000	; 0x2710
 8001d86:	f001 ffd5 	bl	8003d34 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	2180      	movs	r1, #128	; 0x80
 8001d8e:	4868      	ldr	r0, [pc, #416]	; (8001f30 <main+0x6d0>)
 8001d90:	f002 ff97 	bl	8004cc2 <HAL_GPIO_WritePin>
	  HAL_Delay(50000);
 8001d94:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001d98:	f001 ffcc 	bl	8003d34 <HAL_Delay>
	  LCD_Clear (50, 80, 140, 70, WHITE);
 8001d9c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001da0:	9300      	str	r3, [sp, #0]
 8001da2:	2346      	movs	r3, #70	; 0x46
 8001da4:	228c      	movs	r2, #140	; 0x8c
 8001da6:	2150      	movs	r1, #80	; 0x50
 8001da8:	2032      	movs	r0, #50	; 0x32
 8001daa:	f7ff fa90 	bl	80012ce <LCD_Clear>
	}

	HomePage((int)Temp_B1, (int)Humidity_B1, adc2_value, adc1_value, watering_time, sTime, sDate, hrtc);
 8001dae:	f897 6131 	ldrb.w	r6, [r7, #305]	; 0x131
 8001db2:	f897 c133 	ldrb.w	ip, [r7, #307]	; 0x133
 8001db6:	4b65      	ldr	r3, [pc, #404]	; (8001f4c <main+0x6ec>)
 8001db8:	ac03      	add	r4, sp, #12
 8001dba:	461d      	mov	r5, r3
 8001dbc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001dbe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001dc0:	682b      	ldr	r3, [r5, #0]
 8001dc2:	6023      	str	r3, [r4, #0]
 8001dc4:	4b62      	ldr	r3, [pc, #392]	; (8001f50 <main+0x6f0>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	9302      	str	r3, [sp, #8]
 8001dca:	4a5c      	ldr	r2, [pc, #368]	; (8001f3c <main+0x6dc>)
 8001dcc:	ab01      	add	r3, sp, #4
 8001dce:	6812      	ldr	r2, [r2, #0]
 8001dd0:	4611      	mov	r1, r2
 8001dd2:	8019      	strh	r1, [r3, #0]
 8001dd4:	3302      	adds	r3, #2
 8001dd6:	0c12      	lsrs	r2, r2, #16
 8001dd8:	701a      	strb	r2, [r3, #0]
 8001dda:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001dde:	9300      	str	r3, [sp, #0]
 8001de0:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001de4:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8001de8:	4661      	mov	r1, ip
 8001dea:	4630      	mov	r0, r6
 8001dec:	f000 ff18 	bl	8002c20 <HomePage>

	//	LCD_DrawString(10, 280, watering_time_1);
//	LCD_DrawString(10, 300, watering_time_2);

	// Touch Screen Activity -- HomePage
	if(XPT2046_Get_TouchedPoint(&touchpt, &strXPT2046_TouchPara) && touchpt.x >= 290 && touchpt.y<=60){
 8001df0:	f107 0314 	add.w	r3, r7, #20
 8001df4:	4957      	ldr	r1, [pc, #348]	; (8001f54 <main+0x6f4>)
 8001df6:	4618      	mov	r0, r3
 8001df8:	f001 fe8c 	bl	8003b14 <XPT2046_Get_TouchedPoint>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	f000 80dc 	beq.w	8001fbc <main+0x75c>
 8001e04:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8001e08:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001e0c:	881b      	ldrh	r3, [r3, #0]
 8001e0e:	f5b3 7f91 	cmp.w	r3, #290	; 0x122
 8001e12:	f0c0 80d3 	bcc.w	8001fbc <main+0x75c>
 8001e16:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8001e1a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001e1e:	885b      	ldrh	r3, [r3, #2]
 8001e20:	2b3c      	cmp	r3, #60	; 0x3c
 8001e22:	f200 80cb 	bhi.w	8001fbc <main+0x75c>
		LCD_Clear(0, 0, 240, 320, 0xffff);
 8001e26:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001e2a:	9300      	str	r3, [sp, #0]
 8001e2c:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001e30:	22f0      	movs	r2, #240	; 0xf0
 8001e32:	2100      	movs	r1, #0
 8001e34:	2000      	movs	r0, #0
 8001e36:	f7ff fa4a 	bl	80012ce <LCD_Clear>
		LCD_Draw_24sqr(10, 10, menu);
 8001e3a:	4a47      	ldr	r2, [pc, #284]	; (8001f58 <main+0x6f8>)
 8001e3c:	210a      	movs	r1, #10
 8001e3e:	200a      	movs	r0, #10
 8001e40:	f7ff fbea 	bl	8001618 <LCD_Draw_24sqr>
		LCD_DrawString(48, 50, "Menu");
 8001e44:	4a45      	ldr	r2, [pc, #276]	; (8001f5c <main+0x6fc>)
 8001e46:	2132      	movs	r1, #50	; 0x32
 8001e48:	2030      	movs	r0, #48	; 0x30
 8001e4a:	f7ff fb2f 	bl	80014ac <LCD_DrawString>
		LCD_DrawString(48, 100, "Home");
 8001e4e:	4a44      	ldr	r2, [pc, #272]	; (8001f60 <main+0x700>)
 8001e50:	2164      	movs	r1, #100	; 0x64
 8001e52:	2030      	movs	r0, #48	; 0x30
 8001e54:	f7ff fb2a 	bl	80014ac <LCD_DrawString>
		LCD_DrawString(48, 150, "> Set Watering Time");
 8001e58:	4a42      	ldr	r2, [pc, #264]	; (8001f64 <main+0x704>)
 8001e5a:	2196      	movs	r1, #150	; 0x96
 8001e5c:	2030      	movs	r0, #48	; 0x30
 8001e5e:	f7ff fb25 	bl	80014ac <LCD_DrawString>
		LCD_DrawString(48, 200, "> Review Records");
 8001e62:	4a41      	ldr	r2, [pc, #260]	; (8001f68 <main+0x708>)
 8001e64:	21c8      	movs	r1, #200	; 0xc8
 8001e66:	2030      	movs	r0, #48	; 0x30
 8001e68:	f7ff fb20 	bl	80014ac <LCD_DrawString>
		LCD_DrawString(48, 250, "> Review Images");
 8001e6c:	4a3f      	ldr	r2, [pc, #252]	; (8001f6c <main+0x70c>)
 8001e6e:	21fa      	movs	r1, #250	; 0xfa
 8001e70:	2030      	movs	r0, #48	; 0x30
 8001e72:	f7ff fb1b 	bl	80014ac <LCD_DrawString>
		while(1){
			touchpt.x = 0;
 8001e76:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8001e7a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001e7e:	2200      	movs	r2, #0
 8001e80:	801a      	strh	r2, [r3, #0]
			touchpt.y = 0;
 8001e82:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8001e86:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	805a      	strh	r2, [r3, #2]
			XPT2046_Get_TouchedPoint(&touchpt, &strXPT2046_TouchPara);
 8001e8e:	f107 0314 	add.w	r3, r7, #20
 8001e92:	4930      	ldr	r1, [pc, #192]	; (8001f54 <main+0x6f4>)
 8001e94:	4618      	mov	r0, r3
 8001e96:	f001 fe3d 	bl	8003b14 <XPT2046_Get_TouchedPoint>
			if(touchpt.x >= 170 && touchpt.x <=240 && touchpt.y >= 50 && touchpt.y <=200) {
 8001e9a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8001e9e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001ea2:	881b      	ldrh	r3, [r3, #0]
 8001ea4:	2ba9      	cmp	r3, #169	; 0xa9
 8001ea6:	d91d      	bls.n	8001ee4 <main+0x684>
 8001ea8:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8001eac:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001eb0:	881b      	ldrh	r3, [r3, #0]
 8001eb2:	2bf0      	cmp	r3, #240	; 0xf0
 8001eb4:	d816      	bhi.n	8001ee4 <main+0x684>
 8001eb6:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8001eba:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001ebe:	885b      	ldrh	r3, [r3, #2]
 8001ec0:	2b31      	cmp	r3, #49	; 0x31
 8001ec2:	d90f      	bls.n	8001ee4 <main+0x684>
 8001ec4:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8001ec8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001ecc:	885b      	ldrh	r3, [r3, #2]
 8001ece:	2bc8      	cmp	r3, #200	; 0xc8
 8001ed0:	d808      	bhi.n	8001ee4 <main+0x684>
				SetTimePage(watering_time_1, watering_time_2);
 8001ed2:	f507 7290 	add.w	r2, r7, #288	; 0x120
 8001ed6:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001eda:	4611      	mov	r1, r2
 8001edc:	4618      	mov	r0, r3
 8001ede:	f000 fecd 	bl	8002c7c <SetTimePage>
				break;
 8001ee2:	e06b      	b.n	8001fbc <main+0x75c>
			}
			else if(touchpt.x >= 60 && touchpt.x <=120 && touchpt.y >= 40 && touchpt.y <=180) {
 8001ee4:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8001ee8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001eec:	881b      	ldrh	r3, [r3, #0]
 8001eee:	2b3b      	cmp	r3, #59	; 0x3b
 8001ef0:	d93e      	bls.n	8001f70 <main+0x710>
 8001ef2:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8001ef6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001efa:	881b      	ldrh	r3, [r3, #0]
 8001efc:	2b78      	cmp	r3, #120	; 0x78
 8001efe:	d837      	bhi.n	8001f70 <main+0x710>
 8001f00:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8001f04:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001f08:	885b      	ldrh	r3, [r3, #2]
 8001f0a:	2b27      	cmp	r3, #39	; 0x27
 8001f0c:	d930      	bls.n	8001f70 <main+0x710>
 8001f0e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8001f12:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001f16:	885b      	ldrh	r3, [r3, #2]
 8001f18:	2bb4      	cmp	r3, #180	; 0xb4
 8001f1a:	d829      	bhi.n	8001f70 <main+0x710>
				RecordsPage(records, records_count);
 8001f1c:	f897 213f 	ldrb.w	r2, [r7, #319]	; 0x13f
 8001f20:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001f24:	4611      	mov	r1, r2
 8001f26:	4618      	mov	r0, r3
 8001f28:	f001 f8b4 	bl	8003094 <RecordsPage>
				break;
 8001f2c:	e046      	b.n	8001fbc <main+0x75c>
 8001f2e:	bf00      	nop
 8001f30:	40010800 	.word	0x40010800
 8001f34:	40010c00 	.word	0x40010c00
 8001f38:	40011400 	.word	0x40011400
 8001f3c:	20000260 	.word	0x20000260
 8001f40:	08007298 	.word	0x08007298
 8001f44:	cccccccd 	.word	0xcccccccd
 8001f48:	080072a4 	.word	0x080072a4
 8001f4c:	20000200 	.word	0x20000200
 8001f50:	20000264 	.word	0x20000264
 8001f54:	200000a0 	.word	0x200000a0
 8001f58:	080079e4 	.word	0x080079e4
 8001f5c:	080072a8 	.word	0x080072a8
 8001f60:	080072b0 	.word	0x080072b0
 8001f64:	080072b8 	.word	0x080072b8
 8001f68:	080072cc 	.word	0x080072cc
 8001f6c:	080072e0 	.word	0x080072e0
			}
			else if(touchpt.x >= 40 && touchpt.x <=80 && touchpt.y >= 40 && touchpt.y <=180){
 8001f70:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8001f74:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001f78:	881b      	ldrh	r3, [r3, #0]
 8001f7a:	2b27      	cmp	r3, #39	; 0x27
 8001f7c:	f67f af7b 	bls.w	8001e76 <main+0x616>
 8001f80:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8001f84:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001f88:	881b      	ldrh	r3, [r3, #0]
 8001f8a:	2b50      	cmp	r3, #80	; 0x50
 8001f8c:	f63f af73 	bhi.w	8001e76 <main+0x616>
 8001f90:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8001f94:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001f98:	885b      	ldrh	r3, [r3, #2]
 8001f9a:	2b27      	cmp	r3, #39	; 0x27
 8001f9c:	f67f af6b 	bls.w	8001e76 <main+0x616>
 8001fa0:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8001fa4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001fa8:	885b      	ldrh	r3, [r3, #2]
 8001faa:	2bb4      	cmp	r3, #180	; 0xb4
 8001fac:	f63f af63 	bhi.w	8001e76 <main+0x616>
				ImgPage(Ov7725_vsync);
 8001fb0:	4b05      	ldr	r3, [pc, #20]	; (8001fc8 <main+0x768>)
 8001fb2:	781b      	ldrb	r3, [r3, #0]
 8001fb4:	b2db      	uxtb	r3, r3
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	f001 f97a 	bl	80032b0 <ImgPage>
			}
		}

	}

	HAL_Delay(1000);
 8001fbc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001fc0:	f001 feb8 	bl	8003d34 <HAL_Delay>
	HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8001fc4:	e505      	b.n	80019d2 <main+0x172>
 8001fc6:	bf00      	nop
 8001fc8:	2000025c 	.word	0x2000025c

08001fcc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b096      	sub	sp, #88	; 0x58
 8001fd0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001fd2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001fd6:	2228      	movs	r2, #40	; 0x28
 8001fd8:	2100      	movs	r1, #0
 8001fda:	4618      	mov	r0, r3
 8001fdc:	f004 fcc6 	bl	800696c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001fe0:	f107 031c 	add.w	r3, r7, #28
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	601a      	str	r2, [r3, #0]
 8001fe8:	605a      	str	r2, [r3, #4]
 8001fea:	609a      	str	r2, [r3, #8]
 8001fec:	60da      	str	r2, [r3, #12]
 8001fee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001ff0:	1d3b      	adds	r3, r7, #4
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	601a      	str	r2, [r3, #0]
 8001ff6:	605a      	str	r2, [r3, #4]
 8001ff8:	609a      	str	r2, [r3, #8]
 8001ffa:	60da      	str	r2, [r3, #12]
 8001ffc:	611a      	str	r2, [r3, #16]
 8001ffe:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8002000:	2309      	movs	r3, #9
 8002002:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002004:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002008:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800200a:	2300      	movs	r3, #0
 800200c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800200e:	2301      	movs	r3, #1
 8002010:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002012:	2301      	movs	r3, #1
 8002014:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002016:	2302      	movs	r3, #2
 8002018:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800201a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800201e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002020:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8002024:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002026:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800202a:	4618      	mov	r0, r3
 800202c:	f002 fe90 	bl	8004d50 <HAL_RCC_OscConfig>
 8002030:	4603      	mov	r3, r0
 8002032:	2b00      	cmp	r3, #0
 8002034:	d001      	beq.n	800203a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8002036:	f000 fb0d 	bl	8002654 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800203a:	230f      	movs	r3, #15
 800203c:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800203e:	2302      	movs	r3, #2
 8002040:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002042:	2300      	movs	r3, #0
 8002044:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002046:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800204a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800204c:	2300      	movs	r3, #0
 800204e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002050:	f107 031c 	add.w	r3, r7, #28
 8002054:	2102      	movs	r1, #2
 8002056:	4618      	mov	r0, r3
 8002058:	f003 f8fc 	bl	8005254 <HAL_RCC_ClockConfig>
 800205c:	4603      	mov	r3, r0
 800205e:	2b00      	cmp	r3, #0
 8002060:	d001      	beq.n	8002066 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8002062:	f000 faf7 	bl	8002654 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_ADC;
 8002066:	2303      	movs	r3, #3
 8002068:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800206a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800206e:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8002070:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002074:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002076:	1d3b      	adds	r3, r7, #4
 8002078:	4618      	mov	r0, r3
 800207a:	f003 fa6f 	bl	800555c <HAL_RCCEx_PeriphCLKConfig>
 800207e:	4603      	mov	r3, r0
 8002080:	2b00      	cmp	r3, #0
 8002082:	d001      	beq.n	8002088 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8002084:	f000 fae6 	bl	8002654 <Error_Handler>
  }
}
 8002088:	bf00      	nop
 800208a:	3758      	adds	r7, #88	; 0x58
 800208c:	46bd      	mov	sp, r7
 800208e:	bd80      	pop	{r7, pc}

08002090 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b084      	sub	sp, #16
 8002094:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002096:	1d3b      	adds	r3, r7, #4
 8002098:	2200      	movs	r2, #0
 800209a:	601a      	str	r2, [r3, #0]
 800209c:	605a      	str	r2, [r3, #4]
 800209e:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80020a0:	4b18      	ldr	r3, [pc, #96]	; (8002104 <MX_ADC1_Init+0x74>)
 80020a2:	4a19      	ldr	r2, [pc, #100]	; (8002108 <MX_ADC1_Init+0x78>)
 80020a4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80020a6:	4b17      	ldr	r3, [pc, #92]	; (8002104 <MX_ADC1_Init+0x74>)
 80020a8:	2200      	movs	r2, #0
 80020aa:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80020ac:	4b15      	ldr	r3, [pc, #84]	; (8002104 <MX_ADC1_Init+0x74>)
 80020ae:	2200      	movs	r2, #0
 80020b0:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80020b2:	4b14      	ldr	r3, [pc, #80]	; (8002104 <MX_ADC1_Init+0x74>)
 80020b4:	2200      	movs	r2, #0
 80020b6:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80020b8:	4b12      	ldr	r3, [pc, #72]	; (8002104 <MX_ADC1_Init+0x74>)
 80020ba:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80020be:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80020c0:	4b10      	ldr	r3, [pc, #64]	; (8002104 <MX_ADC1_Init+0x74>)
 80020c2:	2200      	movs	r2, #0
 80020c4:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80020c6:	4b0f      	ldr	r3, [pc, #60]	; (8002104 <MX_ADC1_Init+0x74>)
 80020c8:	2201      	movs	r2, #1
 80020ca:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80020cc:	480d      	ldr	r0, [pc, #52]	; (8002104 <MX_ADC1_Init+0x74>)
 80020ce:	f001 fe55 	bl	8003d7c <HAL_ADC_Init>
 80020d2:	4603      	mov	r3, r0
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d001      	beq.n	80020dc <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80020d8:	f000 fabc 	bl	8002654 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80020dc:	2305      	movs	r3, #5
 80020de:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80020e0:	2301      	movs	r3, #1
 80020e2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80020e4:	2300      	movs	r3, #0
 80020e6:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80020e8:	1d3b      	adds	r3, r7, #4
 80020ea:	4619      	mov	r1, r3
 80020ec:	4805      	ldr	r0, [pc, #20]	; (8002104 <MX_ADC1_Init+0x74>)
 80020ee:	f002 f8ef 	bl	80042d0 <HAL_ADC_ConfigChannel>
 80020f2:	4603      	mov	r3, r0
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d001      	beq.n	80020fc <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80020f8:	f000 faac 	bl	8002654 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80020fc:	bf00      	nop
 80020fe:	3710      	adds	r7, #16
 8002100:	46bd      	mov	sp, r7
 8002102:	bd80      	pop	{r7, pc}
 8002104:	200001a0 	.word	0x200001a0
 8002108:	40012400 	.word	0x40012400

0800210c <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b084      	sub	sp, #16
 8002110:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002112:	1d3b      	adds	r3, r7, #4
 8002114:	2200      	movs	r2, #0
 8002116:	601a      	str	r2, [r3, #0]
 8002118:	605a      	str	r2, [r3, #4]
 800211a:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 800211c:	4b18      	ldr	r3, [pc, #96]	; (8002180 <MX_ADC2_Init+0x74>)
 800211e:	4a19      	ldr	r2, [pc, #100]	; (8002184 <MX_ADC2_Init+0x78>)
 8002120:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002122:	4b17      	ldr	r3, [pc, #92]	; (8002180 <MX_ADC2_Init+0x74>)
 8002124:	2200      	movs	r2, #0
 8002126:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8002128:	4b15      	ldr	r3, [pc, #84]	; (8002180 <MX_ADC2_Init+0x74>)
 800212a:	2200      	movs	r2, #0
 800212c:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800212e:	4b14      	ldr	r3, [pc, #80]	; (8002180 <MX_ADC2_Init+0x74>)
 8002130:	2200      	movs	r2, #0
 8002132:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002134:	4b12      	ldr	r3, [pc, #72]	; (8002180 <MX_ADC2_Init+0x74>)
 8002136:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800213a:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800213c:	4b10      	ldr	r3, [pc, #64]	; (8002180 <MX_ADC2_Init+0x74>)
 800213e:	2200      	movs	r2, #0
 8002140:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 1;
 8002142:	4b0f      	ldr	r3, [pc, #60]	; (8002180 <MX_ADC2_Init+0x74>)
 8002144:	2201      	movs	r2, #1
 8002146:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8002148:	480d      	ldr	r0, [pc, #52]	; (8002180 <MX_ADC2_Init+0x74>)
 800214a:	f001 fe17 	bl	8003d7c <HAL_ADC_Init>
 800214e:	4603      	mov	r3, r0
 8002150:	2b00      	cmp	r3, #0
 8002152:	d001      	beq.n	8002158 <MX_ADC2_Init+0x4c>
  {
    Error_Handler();
 8002154:	f000 fa7e 	bl	8002654 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8002158:	2306      	movs	r3, #6
 800215a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800215c:	2301      	movs	r3, #1
 800215e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8002160:	2300      	movs	r3, #0
 8002162:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8002164:	1d3b      	adds	r3, r7, #4
 8002166:	4619      	mov	r1, r3
 8002168:	4805      	ldr	r0, [pc, #20]	; (8002180 <MX_ADC2_Init+0x74>)
 800216a:	f002 f8b1 	bl	80042d0 <HAL_ADC_ConfigChannel>
 800216e:	4603      	mov	r3, r0
 8002170:	2b00      	cmp	r3, #0
 8002172:	d001      	beq.n	8002178 <MX_ADC2_Init+0x6c>
  {
    Error_Handler();
 8002174:	f000 fa6e 	bl	8002654 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8002178:	bf00      	nop
 800217a:	3710      	adds	r7, #16
 800217c:	46bd      	mov	sp, r7
 800217e:	bd80      	pop	{r7, pc}
 8002180:	200001d0 	.word	0x200001d0
 8002184:	40012800 	.word	0x40012800

08002188 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b084      	sub	sp, #16
 800218c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 0 */
  RTC_TimeTypeDef sTime_buffer;
  RTC_DateTypeDef DateToUpdate_buffer;
  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800218e:	1d3b      	adds	r3, r7, #4
 8002190:	2100      	movs	r1, #0
 8002192:	460a      	mov	r2, r1
 8002194:	801a      	strh	r2, [r3, #0]
 8002196:	460a      	mov	r2, r1
 8002198:	709a      	strb	r2, [r3, #2]
  RTC_DateTypeDef DateToUpdate = {0};
 800219a:	2300      	movs	r3, #0
 800219c:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800219e:	4b4c      	ldr	r3, [pc, #304]	; (80022d0 <MX_RTC_Init+0x148>)
 80021a0:	4a4c      	ldr	r2, [pc, #304]	; (80022d4 <MX_RTC_Init+0x14c>)
 80021a2:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 80021a4:	4b4a      	ldr	r3, [pc, #296]	; (80022d0 <MX_RTC_Init+0x148>)
 80021a6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80021aa:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 80021ac:	4b48      	ldr	r3, [pc, #288]	; (80022d0 <MX_RTC_Init+0x148>)
 80021ae:	f44f 7280 	mov.w	r2, #256	; 0x100
 80021b2:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80021b4:	4846      	ldr	r0, [pc, #280]	; (80022d0 <MX_RTC_Init+0x148>)
 80021b6:	f003 fb6b 	bl	8005890 <HAL_RTC_Init>
 80021ba:	4603      	mov	r3, r0
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d001      	beq.n	80021c4 <MX_RTC_Init+0x3c>
  {
    Error_Handler();
 80021c0:	f000 fa48 	bl	8002654 <Error_Handler>
  }

  /* USER CODE BEGIN Check_RTC_BKUP */
  if(HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR1) != 0x5432){
 80021c4:	2101      	movs	r1, #1
 80021c6:	4842      	ldr	r0, [pc, #264]	; (80022d0 <MX_RTC_Init+0x148>)
 80021c8:	f004 f8da 	bl	8006380 <HAL_RTCEx_BKUPRead>
 80021cc:	4603      	mov	r3, r0
 80021ce:	f245 4232 	movw	r2, #21554	; 0x5432
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d04c      	beq.n	8002270 <MX_RTC_Init+0xe8>
  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80021d6:	2300      	movs	r3, #0
 80021d8:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 80021da:	2300      	movs	r3, #0
 80021dc:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 80021de:	2300      	movs	r3, #0
 80021e0:	71bb      	strb	r3, [r7, #6]

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80021e2:	1d3b      	adds	r3, r7, #4
 80021e4:	2201      	movs	r2, #1
 80021e6:	4619      	mov	r1, r3
 80021e8:	4839      	ldr	r0, [pc, #228]	; (80022d0 <MX_RTC_Init+0x148>)
 80021ea:	f003 fbe7 	bl	80059bc <HAL_RTC_SetTime>
 80021ee:	4603      	mov	r3, r0
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d001      	beq.n	80021f8 <MX_RTC_Init+0x70>
  {
    Error_Handler();
 80021f4:	f000 fa2e 	bl	8002654 <Error_Handler>
  }
  DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 80021f8:	2301      	movs	r3, #1
 80021fa:	703b      	strb	r3, [r7, #0]
  DateToUpdate.Month = RTC_MONTH_JANUARY;
 80021fc:	2301      	movs	r3, #1
 80021fe:	707b      	strb	r3, [r7, #1]
  DateToUpdate.Date = 0x1;
 8002200:	2301      	movs	r3, #1
 8002202:	70bb      	strb	r3, [r7, #2]
  DateToUpdate.Year = 0x0;
 8002204:	2300      	movs	r3, #0
 8002206:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 8002208:	463b      	mov	r3, r7
 800220a:	2201      	movs	r2, #1
 800220c:	4619      	mov	r1, r3
 800220e:	4830      	ldr	r0, [pc, #192]	; (80022d0 <MX_RTC_Init+0x148>)
 8002210:	f003 fd44 	bl	8005c9c <HAL_RTC_SetDate>
 8002214:	4603      	mov	r3, r0
 8002216:	2b00      	cmp	r3, #0
 8002218:	d001      	beq.n	800221e <MX_RTC_Init+0x96>
  {
    Error_Handler();
 800221a:	f000 fa1b 	bl	8002654 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */
	__HAL_RTC_SECOND_ENABLE_IT(&hrtc, RTC_IT_SEC);
 800221e:	4b2c      	ldr	r3, [pc, #176]	; (80022d0 <MX_RTC_Init+0x148>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	681a      	ldr	r2, [r3, #0]
 8002224:	4b2a      	ldr	r3, [pc, #168]	; (80022d0 <MX_RTC_Init+0x148>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f042 0201 	orr.w	r2, r2, #1
 800222c:	601a      	str	r2, [r3, #0]
	DateToUpdate_buffer = DateToUpdate;
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	60bb      	str	r3, [r7, #8]
	HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x5432);
 8002232:	f245 4232 	movw	r2, #21554	; 0x5432
 8002236:	2101      	movs	r1, #1
 8002238:	4825      	ldr	r0, [pc, #148]	; (80022d0 <MX_RTC_Init+0x148>)
 800223a:	f004 f887 	bl	800634c <HAL_RTCEx_BKUPWrite>
	HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR2, (uint16_t)DateToUpdate_buffer.Year);
 800223e:	7afb      	ldrb	r3, [r7, #11]
 8002240:	461a      	mov	r2, r3
 8002242:	2102      	movs	r1, #2
 8002244:	4822      	ldr	r0, [pc, #136]	; (80022d0 <MX_RTC_Init+0x148>)
 8002246:	f004 f881 	bl	800634c <HAL_RTCEx_BKUPWrite>
	HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR3, (uint16_t)DateToUpdate_buffer.Month);
 800224a:	7a7b      	ldrb	r3, [r7, #9]
 800224c:	461a      	mov	r2, r3
 800224e:	2103      	movs	r1, #3
 8002250:	481f      	ldr	r0, [pc, #124]	; (80022d0 <MX_RTC_Init+0x148>)
 8002252:	f004 f87b 	bl	800634c <HAL_RTCEx_BKUPWrite>
	HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR4, (uint16_t)DateToUpdate_buffer.Date);
 8002256:	7abb      	ldrb	r3, [r7, #10]
 8002258:	461a      	mov	r2, r3
 800225a:	2104      	movs	r1, #4
 800225c:	481c      	ldr	r0, [pc, #112]	; (80022d0 <MX_RTC_Init+0x148>)
 800225e:	f004 f875 	bl	800634c <HAL_RTCEx_BKUPWrite>
	HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR5, (uint16_t)DateToUpdate_buffer.WeekDay);
 8002262:	7a3b      	ldrb	r3, [r7, #8]
 8002264:	461a      	mov	r2, r3
 8002266:	2105      	movs	r1, #5
 8002268:	4819      	ldr	r0, [pc, #100]	; (80022d0 <MX_RTC_Init+0x148>)
 800226a:	f004 f86f 	bl	800634c <HAL_RTCEx_BKUPWrite>
	HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD);
	__HAL_RTC_SECOND_ENABLE_IT(&hrtc, RTC_IT_SEC);
}
  /* USER CODE END RTC_Init 2 */

}
 800226e:	e02b      	b.n	80022c8 <MX_RTC_Init+0x140>
	DateToUpdate_buffer.Year = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR2);
 8002270:	2102      	movs	r1, #2
 8002272:	4817      	ldr	r0, [pc, #92]	; (80022d0 <MX_RTC_Init+0x148>)
 8002274:	f004 f884 	bl	8006380 <HAL_RTCEx_BKUPRead>
 8002278:	4603      	mov	r3, r0
 800227a:	b2db      	uxtb	r3, r3
 800227c:	72fb      	strb	r3, [r7, #11]
	DateToUpdate_buffer.Month = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR3);
 800227e:	2103      	movs	r1, #3
 8002280:	4813      	ldr	r0, [pc, #76]	; (80022d0 <MX_RTC_Init+0x148>)
 8002282:	f004 f87d 	bl	8006380 <HAL_RTCEx_BKUPRead>
 8002286:	4603      	mov	r3, r0
 8002288:	b2db      	uxtb	r3, r3
 800228a:	727b      	strb	r3, [r7, #9]
	DateToUpdate_buffer.Date = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR4);
 800228c:	2104      	movs	r1, #4
 800228e:	4810      	ldr	r0, [pc, #64]	; (80022d0 <MX_RTC_Init+0x148>)
 8002290:	f004 f876 	bl	8006380 <HAL_RTCEx_BKUPRead>
 8002294:	4603      	mov	r3, r0
 8002296:	b2db      	uxtb	r3, r3
 8002298:	72bb      	strb	r3, [r7, #10]
	DateToUpdate_buffer.WeekDay = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR5);
 800229a:	2105      	movs	r1, #5
 800229c:	480c      	ldr	r0, [pc, #48]	; (80022d0 <MX_RTC_Init+0x148>)
 800229e:	f004 f86f 	bl	8006380 <HAL_RTCEx_BKUPRead>
 80022a2:	4603      	mov	r3, r0
 80022a4:	b2db      	uxtb	r3, r3
 80022a6:	723b      	strb	r3, [r7, #8]
	DateToUpdate = DateToUpdate_buffer;
 80022a8:	68bb      	ldr	r3, [r7, #8]
 80022aa:	603b      	str	r3, [r7, #0]
	HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD);
 80022ac:	463b      	mov	r3, r7
 80022ae:	2201      	movs	r2, #1
 80022b0:	4619      	mov	r1, r3
 80022b2:	4807      	ldr	r0, [pc, #28]	; (80022d0 <MX_RTC_Init+0x148>)
 80022b4:	f003 fcf2 	bl	8005c9c <HAL_RTC_SetDate>
	__HAL_RTC_SECOND_ENABLE_IT(&hrtc, RTC_IT_SEC);
 80022b8:	4b05      	ldr	r3, [pc, #20]	; (80022d0 <MX_RTC_Init+0x148>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	681a      	ldr	r2, [r3, #0]
 80022be:	4b04      	ldr	r3, [pc, #16]	; (80022d0 <MX_RTC_Init+0x148>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f042 0201 	orr.w	r2, r2, #1
 80022c6:	601a      	str	r2, [r3, #0]
}
 80022c8:	bf00      	nop
 80022ca:	3710      	adds	r7, #16
 80022cc:	46bd      	mov	sp, r7
 80022ce:	bd80      	pop	{r7, pc}
 80022d0:	20000200 	.word	0x20000200
 80022d4:	40002800 	.word	0x40002800

080022d8 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b082      	sub	sp, #8
 80022dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022de:	463b      	mov	r3, r7
 80022e0:	2200      	movs	r2, #0
 80022e2:	601a      	str	r2, [r3, #0]
 80022e4:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80022e6:	4b15      	ldr	r3, [pc, #84]	; (800233c <MX_TIM6_Init+0x64>)
 80022e8:	4a15      	ldr	r2, [pc, #84]	; (8002340 <MX_TIM6_Init+0x68>)
 80022ea:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 71;
 80022ec:	4b13      	ldr	r3, [pc, #76]	; (800233c <MX_TIM6_Init+0x64>)
 80022ee:	2247      	movs	r2, #71	; 0x47
 80022f0:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022f2:	4b12      	ldr	r3, [pc, #72]	; (800233c <MX_TIM6_Init+0x64>)
 80022f4:	2200      	movs	r2, #0
 80022f6:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 80022f8:	4b10      	ldr	r3, [pc, #64]	; (800233c <MX_TIM6_Init+0x64>)
 80022fa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80022fe:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002300:	4b0e      	ldr	r3, [pc, #56]	; (800233c <MX_TIM6_Init+0x64>)
 8002302:	2200      	movs	r2, #0
 8002304:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002306:	480d      	ldr	r0, [pc, #52]	; (800233c <MX_TIM6_Init+0x64>)
 8002308:	f004 f8a3 	bl	8006452 <HAL_TIM_Base_Init>
 800230c:	4603      	mov	r3, r0
 800230e:	2b00      	cmp	r3, #0
 8002310:	d001      	beq.n	8002316 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8002312:	f000 f99f 	bl	8002654 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002316:	2300      	movs	r3, #0
 8002318:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800231a:	2300      	movs	r3, #0
 800231c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800231e:	463b      	mov	r3, r7
 8002320:	4619      	mov	r1, r3
 8002322:	4806      	ldr	r0, [pc, #24]	; (800233c <MX_TIM6_Init+0x64>)
 8002324:	f004 f9b6 	bl	8006694 <HAL_TIMEx_MasterConfigSynchronization>
 8002328:	4603      	mov	r3, r0
 800232a:	2b00      	cmp	r3, #0
 800232c:	d001      	beq.n	8002332 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 800232e:	f000 f991 	bl	8002654 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002332:	bf00      	nop
 8002334:	3708      	adds	r7, #8
 8002336:	46bd      	mov	sp, r7
 8002338:	bd80      	pop	{r7, pc}
 800233a:	bf00      	nop
 800233c:	20000158 	.word	0x20000158
 8002340:	40001000 	.word	0x40001000

08002344 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b08a      	sub	sp, #40	; 0x28
 8002348:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800234a:	f107 0318 	add.w	r3, r7, #24
 800234e:	2200      	movs	r2, #0
 8002350:	601a      	str	r2, [r3, #0]
 8002352:	605a      	str	r2, [r3, #4]
 8002354:	609a      	str	r2, [r3, #8]
 8002356:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002358:	4b84      	ldr	r3, [pc, #528]	; (800256c <MX_GPIO_Init+0x228>)
 800235a:	699b      	ldr	r3, [r3, #24]
 800235c:	4a83      	ldr	r2, [pc, #524]	; (800256c <MX_GPIO_Init+0x228>)
 800235e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002362:	6193      	str	r3, [r2, #24]
 8002364:	4b81      	ldr	r3, [pc, #516]	; (800256c <MX_GPIO_Init+0x228>)
 8002366:	699b      	ldr	r3, [r3, #24]
 8002368:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800236c:	617b      	str	r3, [r7, #20]
 800236e:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002370:	4b7e      	ldr	r3, [pc, #504]	; (800256c <MX_GPIO_Init+0x228>)
 8002372:	699b      	ldr	r3, [r3, #24]
 8002374:	4a7d      	ldr	r2, [pc, #500]	; (800256c <MX_GPIO_Init+0x228>)
 8002376:	f043 0310 	orr.w	r3, r3, #16
 800237a:	6193      	str	r3, [r2, #24]
 800237c:	4b7b      	ldr	r3, [pc, #492]	; (800256c <MX_GPIO_Init+0x228>)
 800237e:	699b      	ldr	r3, [r3, #24]
 8002380:	f003 0310 	and.w	r3, r3, #16
 8002384:	613b      	str	r3, [r7, #16]
 8002386:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002388:	4b78      	ldr	r3, [pc, #480]	; (800256c <MX_GPIO_Init+0x228>)
 800238a:	699b      	ldr	r3, [r3, #24]
 800238c:	4a77      	ldr	r2, [pc, #476]	; (800256c <MX_GPIO_Init+0x228>)
 800238e:	f043 0304 	orr.w	r3, r3, #4
 8002392:	6193      	str	r3, [r2, #24]
 8002394:	4b75      	ldr	r3, [pc, #468]	; (800256c <MX_GPIO_Init+0x228>)
 8002396:	699b      	ldr	r3, [r3, #24]
 8002398:	f003 0304 	and.w	r3, r3, #4
 800239c:	60fb      	str	r3, [r7, #12]
 800239e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80023a0:	4b72      	ldr	r3, [pc, #456]	; (800256c <MX_GPIO_Init+0x228>)
 80023a2:	699b      	ldr	r3, [r3, #24]
 80023a4:	4a71      	ldr	r2, [pc, #452]	; (800256c <MX_GPIO_Init+0x228>)
 80023a6:	f043 0308 	orr.w	r3, r3, #8
 80023aa:	6193      	str	r3, [r2, #24]
 80023ac:	4b6f      	ldr	r3, [pc, #444]	; (800256c <MX_GPIO_Init+0x228>)
 80023ae:	699b      	ldr	r3, [r3, #24]
 80023b0:	f003 0308 	and.w	r3, r3, #8
 80023b4:	60bb      	str	r3, [r7, #8]
 80023b6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80023b8:	4b6c      	ldr	r3, [pc, #432]	; (800256c <MX_GPIO_Init+0x228>)
 80023ba:	699b      	ldr	r3, [r3, #24]
 80023bc:	4a6b      	ldr	r2, [pc, #428]	; (800256c <MX_GPIO_Init+0x228>)
 80023be:	f043 0320 	orr.w	r3, r3, #32
 80023c2:	6193      	str	r3, [r2, #24]
 80023c4:	4b69      	ldr	r3, [pc, #420]	; (800256c <MX_GPIO_Init+0x228>)
 80023c6:	699b      	ldr	r3, [r3, #24]
 80023c8:	f003 0320 	and.w	r3, r3, #32
 80023cc:	607b      	str	r3, [r7, #4]
 80023ce:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|GPIO_PIN_6|GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 80023d0:	2200      	movs	r2, #0
 80023d2:	2147      	movs	r1, #71	; 0x47
 80023d4:	4866      	ldr	r0, [pc, #408]	; (8002570 <MX_GPIO_Init+0x22c>)
 80023d6:	f002 fc74 	bl	8004cc2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2|GPIO_PIN_3|LED_Pin|Pump_Pin, GPIO_PIN_RESET);
 80023da:	2200      	movs	r2, #0
 80023dc:	219c      	movs	r1, #156	; 0x9c
 80023de:	4865      	ldr	r0, [pc, #404]	; (8002574 <MX_GPIO_Init+0x230>)
 80023e0:	f002 fc6f 	bl	8004cc2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 80023e4:	2200      	movs	r2, #0
 80023e6:	21f0      	movs	r1, #240	; 0xf0
 80023e8:	4863      	ldr	r0, [pc, #396]	; (8002578 <MX_GPIO_Init+0x234>)
 80023ea:	f002 fc6a 	bl	8004cc2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 80023ee:	2201      	movs	r2, #1
 80023f0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80023f4:	4861      	ldr	r0, [pc, #388]	; (800257c <MX_GPIO_Init+0x238>)
 80023f6:	f002 fc64 	bl	8004cc2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13|GPIO_PIN_3, GPIO_PIN_RESET);
 80023fa:	2200      	movs	r2, #0
 80023fc:	f242 0108 	movw	r1, #8200	; 0x2008
 8002400:	485e      	ldr	r0, [pc, #376]	; (800257c <MX_GPIO_Init+0x238>)
 8002402:	f002 fc5e 	bl	8004cc2 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE6 PE0 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_6|GPIO_PIN_0|GPIO_PIN_1;
 8002406:	2347      	movs	r3, #71	; 0x47
 8002408:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800240a:	2301      	movs	r3, #1
 800240c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800240e:	2300      	movs	r3, #0
 8002410:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002412:	2303      	movs	r3, #3
 8002414:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002416:	f107 0318 	add.w	r3, r7, #24
 800241a:	4619      	mov	r1, r3
 800241c:	4854      	ldr	r0, [pc, #336]	; (8002570 <MX_GPIO_Init+0x22c>)
 800241e:	f002 faa5 	bl	800496c <HAL_GPIO_Init>

  /*Configure GPIO pin : PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002422:	2308      	movs	r3, #8
 8002424:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002426:	2300      	movs	r3, #0
 8002428:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800242a:	2301      	movs	r3, #1
 800242c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800242e:	f107 0318 	add.w	r3, r7, #24
 8002432:	4619      	mov	r1, r3
 8002434:	484e      	ldr	r0, [pc, #312]	; (8002570 <MX_GPIO_Init+0x22c>)
 8002436:	f002 fa99 	bl	800496c <HAL_GPIO_Init>

  /*Configure GPIO pin : PE4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800243a:	2310      	movs	r3, #16
 800243c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800243e:	4b50      	ldr	r3, [pc, #320]	; (8002580 <MX_GPIO_Init+0x23c>)
 8002440:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002442:	2300      	movs	r3, #0
 8002444:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002446:	f107 0318 	add.w	r3, r7, #24
 800244a:	4619      	mov	r1, r3
 800244c:	4848      	ldr	r0, [pc, #288]	; (8002570 <MX_GPIO_Init+0x22c>)
 800244e:	f002 fa8d 	bl	800496c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002452:	2308      	movs	r3, #8
 8002454:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002456:	4b4b      	ldr	r3, [pc, #300]	; (8002584 <MX_GPIO_Init+0x240>)
 8002458:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800245a:	2300      	movs	r3, #0
 800245c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800245e:	f107 0318 	add.w	r3, r7, #24
 8002462:	4619      	mov	r1, r3
 8002464:	4844      	ldr	r0, [pc, #272]	; (8002578 <MX_GPIO_Init+0x234>)
 8002466:	f002 fa81 	bl	800496c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800246a:	2301      	movs	r3, #1
 800246c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800246e:	2300      	movs	r3, #0
 8002470:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002472:	2300      	movs	r3, #0
 8002474:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002476:	f107 0318 	add.w	r3, r7, #24
 800247a:	4619      	mov	r1, r3
 800247c:	483d      	ldr	r0, [pc, #244]	; (8002574 <MX_GPIO_Init+0x230>)
 800247e:	f002 fa75 	bl	800496c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002482:	230c      	movs	r3, #12
 8002484:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002486:	2301      	movs	r3, #1
 8002488:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800248a:	2300      	movs	r3, #0
 800248c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800248e:	2303      	movs	r3, #3
 8002490:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002492:	f107 0318 	add.w	r3, r7, #24
 8002496:	4619      	mov	r1, r3
 8002498:	4836      	ldr	r0, [pc, #216]	; (8002574 <MX_GPIO_Init+0x230>)
 800249a:	f002 fa67 	bl	800496c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_Pin Pump_Pin */
  GPIO_InitStruct.Pin = LED_Pin|Pump_Pin;
 800249e:	2390      	movs	r3, #144	; 0x90
 80024a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024a2:	2301      	movs	r3, #1
 80024a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024a6:	2300      	movs	r3, #0
 80024a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024aa:	2302      	movs	r3, #2
 80024ac:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024ae:	f107 0318 	add.w	r3, r7, #24
 80024b2:	4619      	mov	r1, r3
 80024b4:	482f      	ldr	r0, [pc, #188]	; (8002574 <MX_GPIO_Init+0x230>)
 80024b6:	f002 fa59 	bl	800496c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80024ba:	2330      	movs	r3, #48	; 0x30
 80024bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024be:	2301      	movs	r3, #1
 80024c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024c2:	2300      	movs	r3, #0
 80024c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80024c6:	2303      	movs	r3, #3
 80024c8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80024ca:	f107 0318 	add.w	r3, r7, #24
 80024ce:	4619      	mov	r1, r3
 80024d0:	4829      	ldr	r0, [pc, #164]	; (8002578 <MX_GPIO_Init+0x234>)
 80024d2:	f002 fa4b 	bl	800496c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB11 PB12 PB13
                           PB14 PB15 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 80024d6:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 80024da:	61bb      	str	r3, [r7, #24]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80024dc:	2300      	movs	r3, #0
 80024de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024e0:	2300      	movs	r3, #0
 80024e2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024e4:	f107 0318 	add.w	r3, r7, #24
 80024e8:	4619      	mov	r1, r3
 80024ea:	4827      	ldr	r0, [pc, #156]	; (8002588 <MX_GPIO_Init+0x244>)
 80024ec:	f002 fa3e 	bl	800496c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD3 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_3;
 80024f0:	f243 0308 	movw	r3, #12296	; 0x3008
 80024f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024f6:	2301      	movs	r3, #1
 80024f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024fa:	2300      	movs	r3, #0
 80024fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80024fe:	2303      	movs	r3, #3
 8002500:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002502:	f107 0318 	add.w	r3, r7, #24
 8002506:	4619      	mov	r1, r3
 8002508:	481c      	ldr	r0, [pc, #112]	; (800257c <MX_GPIO_Init+0x238>)
 800250a:	f002 fa2f 	bl	800496c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800250e:	23c0      	movs	r3, #192	; 0xc0
 8002510:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8002512:	2311      	movs	r3, #17
 8002514:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002516:	2300      	movs	r3, #0
 8002518:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800251a:	2303      	movs	r3, #3
 800251c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800251e:	f107 0318 	add.w	r3, r7, #24
 8002522:	4619      	mov	r1, r3
 8002524:	4814      	ldr	r0, [pc, #80]	; (8002578 <MX_GPIO_Init+0x234>)
 8002526:	f002 fa21 	bl	800496c <HAL_GPIO_Init>

  /*Configure GPIO pin : PIR_Pin */
  GPIO_InitStruct.Pin = PIR_Pin;
 800252a:	2340      	movs	r3, #64	; 0x40
 800252c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800252e:	2300      	movs	r3, #0
 8002530:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002532:	2302      	movs	r3, #2
 8002534:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(PIR_GPIO_Port, &GPIO_InitStruct);
 8002536:	f107 0318 	add.w	r3, r7, #24
 800253a:	4619      	mov	r1, r3
 800253c:	4812      	ldr	r0, [pc, #72]	; (8002588 <MX_GPIO_Init+0x244>)
 800253e:	f002 fa15 	bl	800496c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8002542:	2200      	movs	r2, #0
 8002544:	2100      	movs	r1, #0
 8002546:	2009      	movs	r0, #9
 8002548:	f002 f9d9 	bl	80048fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 800254c:	2009      	movs	r0, #9
 800254e:	f002 f9f2 	bl	8004936 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8002552:	2200      	movs	r2, #0
 8002554:	2100      	movs	r1, #0
 8002556:	200a      	movs	r0, #10
 8002558:	f002 f9d1 	bl	80048fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800255c:	200a      	movs	r0, #10
 800255e:	f002 f9ea 	bl	8004936 <HAL_NVIC_EnableIRQ>

}
 8002562:	bf00      	nop
 8002564:	3728      	adds	r7, #40	; 0x28
 8002566:	46bd      	mov	sp, r7
 8002568:	bd80      	pop	{r7, pc}
 800256a:	bf00      	nop
 800256c:	40021000 	.word	0x40021000
 8002570:	40011800 	.word	0x40011800
 8002574:	40010800 	.word	0x40010800
 8002578:	40011000 	.word	0x40011000
 800257c:	40011400 	.word	0x40011400
 8002580:	10110000 	.word	0x10110000
 8002584:	10210000 	.word	0x10210000
 8002588:	40010c00 	.word	0x40010c00

0800258c <MX_FSMC_Init>:

/* FSMC initialization function */
static void MX_FSMC_Init(void)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b088      	sub	sp, #32
 8002590:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8002592:	1d3b      	adds	r3, r7, #4
 8002594:	2200      	movs	r2, #0
 8002596:	601a      	str	r2, [r3, #0]
 8002598:	605a      	str	r2, [r3, #4]
 800259a:	609a      	str	r2, [r3, #8]
 800259c:	60da      	str	r2, [r3, #12]
 800259e:	611a      	str	r2, [r3, #16]
 80025a0:	615a      	str	r2, [r3, #20]
 80025a2:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 80025a4:	4b28      	ldr	r3, [pc, #160]	; (8002648 <MX_FSMC_Init+0xbc>)
 80025a6:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 80025aa:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 80025ac:	4b26      	ldr	r3, [pc, #152]	; (8002648 <MX_FSMC_Init+0xbc>)
 80025ae:	4a27      	ldr	r2, [pc, #156]	; (800264c <MX_FSMC_Init+0xc0>)
 80025b0:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 80025b2:	4b25      	ldr	r3, [pc, #148]	; (8002648 <MX_FSMC_Init+0xbc>)
 80025b4:	2200      	movs	r2, #0
 80025b6:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 80025b8:	4b23      	ldr	r3, [pc, #140]	; (8002648 <MX_FSMC_Init+0xbc>)
 80025ba:	2200      	movs	r2, #0
 80025bc:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 80025be:	4b22      	ldr	r3, [pc, #136]	; (8002648 <MX_FSMC_Init+0xbc>)
 80025c0:	2200      	movs	r2, #0
 80025c2:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 80025c4:	4b20      	ldr	r3, [pc, #128]	; (8002648 <MX_FSMC_Init+0xbc>)
 80025c6:	2210      	movs	r2, #16
 80025c8:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 80025ca:	4b1f      	ldr	r3, [pc, #124]	; (8002648 <MX_FSMC_Init+0xbc>)
 80025cc:	2200      	movs	r2, #0
 80025ce:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 80025d0:	4b1d      	ldr	r3, [pc, #116]	; (8002648 <MX_FSMC_Init+0xbc>)
 80025d2:	2200      	movs	r2, #0
 80025d4:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 80025d6:	4b1c      	ldr	r3, [pc, #112]	; (8002648 <MX_FSMC_Init+0xbc>)
 80025d8:	2200      	movs	r2, #0
 80025da:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 80025dc:	4b1a      	ldr	r3, [pc, #104]	; (8002648 <MX_FSMC_Init+0xbc>)
 80025de:	2200      	movs	r2, #0
 80025e0:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 80025e2:	4b19      	ldr	r3, [pc, #100]	; (8002648 <MX_FSMC_Init+0xbc>)
 80025e4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80025e8:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 80025ea:	4b17      	ldr	r3, [pc, #92]	; (8002648 <MX_FSMC_Init+0xbc>)
 80025ec:	2200      	movs	r2, #0
 80025ee:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 80025f0:	4b15      	ldr	r3, [pc, #84]	; (8002648 <MX_FSMC_Init+0xbc>)
 80025f2:	2200      	movs	r2, #0
 80025f4:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 80025f6:	4b14      	ldr	r3, [pc, #80]	; (8002648 <MX_FSMC_Init+0xbc>)
 80025f8:	2200      	movs	r2, #0
 80025fa:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 80025fc:	4b12      	ldr	r3, [pc, #72]	; (8002648 <MX_FSMC_Init+0xbc>)
 80025fe:	2200      	movs	r2, #0
 8002600:	639a      	str	r2, [r3, #56]	; 0x38
  /* Timing */
  Timing.AddressSetupTime = 15;
 8002602:	230f      	movs	r3, #15
 8002604:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 8002606:	230f      	movs	r3, #15
 8002608:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 800260a:	23ff      	movs	r3, #255	; 0xff
 800260c:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 800260e:	230f      	movs	r3, #15
 8002610:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8002612:	2310      	movs	r3, #16
 8002614:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8002616:	2311      	movs	r3, #17
 8002618:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 800261a:	2300      	movs	r3, #0
 800261c:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 800261e:	1d3b      	adds	r3, r7, #4
 8002620:	2200      	movs	r2, #0
 8002622:	4619      	mov	r1, r3
 8002624:	4808      	ldr	r0, [pc, #32]	; (8002648 <MX_FSMC_Init+0xbc>)
 8002626:	f003 fec7 	bl	80063b8 <HAL_SRAM_Init>
 800262a:	4603      	mov	r3, r0
 800262c:	2b00      	cmp	r3, #0
 800262e:	d001      	beq.n	8002634 <MX_FSMC_Init+0xa8>
  {
    Error_Handler( );
 8002630:	f000 f810 	bl	8002654 <Error_Handler>
  }

  /** Disconnect NADV
  */

  __HAL_AFIO_FSMCNADV_DISCONNECTED();
 8002634:	4b06      	ldr	r3, [pc, #24]	; (8002650 <MX_FSMC_Init+0xc4>)
 8002636:	69db      	ldr	r3, [r3, #28]
 8002638:	4a05      	ldr	r2, [pc, #20]	; (8002650 <MX_FSMC_Init+0xc4>)
 800263a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800263e:	61d3      	str	r3, [r2, #28]

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 8002640:	bf00      	nop
 8002642:	3720      	adds	r7, #32
 8002644:	46bd      	mov	sp, r7
 8002646:	bd80      	pop	{r7, pc}
 8002648:	20000214 	.word	0x20000214
 800264c:	a0000104 	.word	0xa0000104
 8002650:	40010000 	.word	0x40010000

08002654 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002654:	b480      	push	{r7}
 8002656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002658:	bf00      	nop
 800265a:	46bd      	mov	sp, r7
 800265c:	bc80      	pop	{r7}
 800265e:	4770      	bx	lr

08002660 <components_display>:
//const uint8_t plus[] = { 0x00, 0x3c, 0x00, 0x00, 0x3c, 0x00, 0x00, 0x3c, 0x00, 0x00, 0x3c, 0x00, 0x00, 0x3c, 0x00, 0x00, 0x3c, 0x00, 0x00, 0x3c, 0x00, 0x00, 0x3c, 0x00, 0x00, 0x3c, 0x00, 0x00, 0x3c, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x3c, 0x00, 0x00, 0x3c, 0x00, 0x00, 0x3c, 0x00, 0x00, 0x3c, 0x00, 0x00, 0x3c, 0x00, 0x00, 0x3c, 0x00, 0x00, 0x3c, 0x00, 0x00, 0x3c, 0x00, 0x00, 0x3c, 0x00, 0x00, 0x3c, 0x00};
//const uint8_t minus[] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
const uint8_t plant [] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x00, 0xc0, 0x1f, 0xf0, 0xe0, 0x3f, 0xf8, 0xe3, 0x3f, 0xfc, 0xf7, 0x7f, 0xfc, 0xf7, 0x78, 0x1c, 0x18, 0x70, 0x04, 0x08, 0x40, 0x00, 0x08, 0x00, 0x00, 0x08, 0x00, 0xf0, 0xff, 0x0f, 0xf0, 0x80, 0x0d, 0xf0, 0xff, 0x0f, 0xe0, 0xff, 0x07, 0xc0, 0xff, 0x03, 0x80, 0xff, 0x01, 0x80, 0xff, 0x01, 0x80, 0xff, 0x01, 0x80, 0xff, 0x01, 0x80, 0xff, 0x01, 0xc0, 0xff, 0x03};
const uint8_t setting[] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};

void components_display(int temp, int humidity, int luminosity, int water_level, char watering_time[],  uint8_t hr, uint8_t min){
 8002660:	b580      	push	{r7, lr}
 8002662:	b09e      	sub	sp, #120	; 0x78
 8002664:	af02      	add	r7, sp, #8
 8002666:	60f8      	str	r0, [r7, #12]
 8002668:	60b9      	str	r1, [r7, #8]
 800266a:	607a      	str	r2, [r7, #4]
 800266c:	603b      	str	r3, [r7, #0]
	char temperature_value_display [16], humidity_value_display [16];
	char adc1_value_display [8], adc2_value_display [8];
	char watering_time_display[48];

	// clock
	LCD_Draw_Num(48, 60, num[hr/10]);
 800266e:	f897 307c 	ldrb.w	r3, [r7, #124]	; 0x7c
 8002672:	4ac1      	ldr	r2, [pc, #772]	; (8002978 <components_display+0x318>)
 8002674:	fba2 2303 	umull	r2, r3, r2, r3
 8002678:	08db      	lsrs	r3, r3, #3
 800267a:	b2db      	uxtb	r3, r3
 800267c:	461a      	mov	r2, r3
 800267e:	4613      	mov	r3, r2
 8002680:	005b      	lsls	r3, r3, #1
 8002682:	4413      	add	r3, r2
 8002684:	015b      	lsls	r3, r3, #5
 8002686:	4abd      	ldr	r2, [pc, #756]	; (800297c <components_display+0x31c>)
 8002688:	4413      	add	r3, r2
 800268a:	461a      	mov	r2, r3
 800268c:	213c      	movs	r1, #60	; 0x3c
 800268e:	2030      	movs	r0, #48	; 0x30
 8002690:	f7fe ff85 	bl	800159e <LCD_Draw_Num>
	LCD_Draw_Num(82, 60, num[hr%10]);
 8002694:	f897 207c 	ldrb.w	r2, [r7, #124]	; 0x7c
 8002698:	4bb7      	ldr	r3, [pc, #732]	; (8002978 <components_display+0x318>)
 800269a:	fba3 1302 	umull	r1, r3, r3, r2
 800269e:	08d9      	lsrs	r1, r3, #3
 80026a0:	460b      	mov	r3, r1
 80026a2:	009b      	lsls	r3, r3, #2
 80026a4:	440b      	add	r3, r1
 80026a6:	005b      	lsls	r3, r3, #1
 80026a8:	1ad3      	subs	r3, r2, r3
 80026aa:	b2db      	uxtb	r3, r3
 80026ac:	461a      	mov	r2, r3
 80026ae:	4613      	mov	r3, r2
 80026b0:	005b      	lsls	r3, r3, #1
 80026b2:	4413      	add	r3, r2
 80026b4:	015b      	lsls	r3, r3, #5
 80026b6:	4ab1      	ldr	r2, [pc, #708]	; (800297c <components_display+0x31c>)
 80026b8:	4413      	add	r3, r2
 80026ba:	461a      	mov	r2, r3
 80026bc:	213c      	movs	r1, #60	; 0x3c
 80026be:	2052      	movs	r0, #82	; 0x52
 80026c0:	f7fe ff6d 	bl	800159e <LCD_Draw_Num>
	LCD_Draw_Num(108, 60, num[10]);
 80026c4:	4aae      	ldr	r2, [pc, #696]	; (8002980 <components_display+0x320>)
 80026c6:	213c      	movs	r1, #60	; 0x3c
 80026c8:	206c      	movs	r0, #108	; 0x6c
 80026ca:	f7fe ff68 	bl	800159e <LCD_Draw_Num>
	LCD_Draw_Num(134, 60, num[min/10]);
 80026ce:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 80026d2:	4aa9      	ldr	r2, [pc, #676]	; (8002978 <components_display+0x318>)
 80026d4:	fba2 2303 	umull	r2, r3, r2, r3
 80026d8:	08db      	lsrs	r3, r3, #3
 80026da:	b2db      	uxtb	r3, r3
 80026dc:	461a      	mov	r2, r3
 80026de:	4613      	mov	r3, r2
 80026e0:	005b      	lsls	r3, r3, #1
 80026e2:	4413      	add	r3, r2
 80026e4:	015b      	lsls	r3, r3, #5
 80026e6:	4aa5      	ldr	r2, [pc, #660]	; (800297c <components_display+0x31c>)
 80026e8:	4413      	add	r3, r2
 80026ea:	461a      	mov	r2, r3
 80026ec:	213c      	movs	r1, #60	; 0x3c
 80026ee:	2086      	movs	r0, #134	; 0x86
 80026f0:	f7fe ff55 	bl	800159e <LCD_Draw_Num>
	LCD_Draw_Num(168, 60, num[min%10]);
 80026f4:	f897 2080 	ldrb.w	r2, [r7, #128]	; 0x80
 80026f8:	4b9f      	ldr	r3, [pc, #636]	; (8002978 <components_display+0x318>)
 80026fa:	fba3 1302 	umull	r1, r3, r3, r2
 80026fe:	08d9      	lsrs	r1, r3, #3
 8002700:	460b      	mov	r3, r1
 8002702:	009b      	lsls	r3, r3, #2
 8002704:	440b      	add	r3, r1
 8002706:	005b      	lsls	r3, r3, #1
 8002708:	1ad3      	subs	r3, r2, r3
 800270a:	b2db      	uxtb	r3, r3
 800270c:	461a      	mov	r2, r3
 800270e:	4613      	mov	r3, r2
 8002710:	005b      	lsls	r3, r3, #1
 8002712:	4413      	add	r3, r2
 8002714:	015b      	lsls	r3, r3, #5
 8002716:	4a99      	ldr	r2, [pc, #612]	; (800297c <components_display+0x31c>)
 8002718:	4413      	add	r3, r2
 800271a:	461a      	mov	r2, r3
 800271c:	213c      	movs	r1, #60	; 0x3c
 800271e:	20a8      	movs	r0, #168	; 0xa8
 8002720:	f7fe ff3d 	bl	800159e <LCD_Draw_Num>

    sprintf(watering_time_display, "Next watering time: %s", watering_time);
 8002724:	f107 0310 	add.w	r3, r7, #16
 8002728:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800272a:	4996      	ldr	r1, [pc, #600]	; (8002984 <components_display+0x324>)
 800272c:	4618      	mov	r0, r3
 800272e:	f004 f925 	bl	800697c <siprintf>
	LCD_DrawString(30, 135, watering_time_display);
 8002732:	f107 0310 	add.w	r3, r7, #16
 8002736:	461a      	mov	r2, r3
 8002738:	2187      	movs	r1, #135	; 0x87
 800273a:	201e      	movs	r0, #30
 800273c:	f7fe feb6 	bl	80014ac <LCD_DrawString>

	//DHT11 Temperature Value and Display
    LCD_Draw_24sqr(20, 166, temperature);
 8002740:	4a91      	ldr	r2, [pc, #580]	; (8002988 <components_display+0x328>)
 8002742:	21a6      	movs	r1, #166	; 0xa6
 8002744:	2014      	movs	r0, #20
 8002746:	f7fe ff67 	bl	8001618 <LCD_Draw_24sqr>
    sprintf(temperature_value_display, "%d", temp);
 800274a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800274e:	68fa      	ldr	r2, [r7, #12]
 8002750:	498e      	ldr	r1, [pc, #568]	; (800298c <components_display+0x32c>)
 8002752:	4618      	mov	r0, r3
 8002754:	f004 f912 	bl	800697c <siprintf>
	LCD_Clear(51, 167, 32, 16, 0xffff);
 8002758:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800275c:	9300      	str	r3, [sp, #0]
 800275e:	2310      	movs	r3, #16
 8002760:	2220      	movs	r2, #32
 8002762:	21a7      	movs	r1, #167	; 0xa7
 8002764:	2033      	movs	r0, #51	; 0x33
 8002766:	f7fe fdb2 	bl	80012ce <LCD_Clear>
	LCD_DrawString(51, 167, temperature_value_display);
 800276a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800276e:	461a      	mov	r2, r3
 8002770:	21a7      	movs	r1, #167	; 0xa7
 8002772:	2033      	movs	r0, #51	; 0x33
 8002774:	f7fe fe9a 	bl	80014ac <LCD_DrawString>
	LCD_DrawLine(50, 166 ,100, 166, 0x0);
 8002778:	2300      	movs	r3, #0
 800277a:	9300      	str	r3, [sp, #0]
 800277c:	23a6      	movs	r3, #166	; 0xa6
 800277e:	2264      	movs	r2, #100	; 0x64
 8002780:	21a6      	movs	r1, #166	; 0xa6
 8002782:	2032      	movs	r0, #50	; 0x32
 8002784:	f7fe fdc6 	bl	8001314 <LCD_DrawLine>
	LCD_DrawLine(50, 186 ,100, 186, 0x0);
 8002788:	2300      	movs	r3, #0
 800278a:	9300      	str	r3, [sp, #0]
 800278c:	23ba      	movs	r3, #186	; 0xba
 800278e:	2264      	movs	r2, #100	; 0x64
 8002790:	21ba      	movs	r1, #186	; 0xba
 8002792:	2032      	movs	r0, #50	; 0x32
 8002794:	f7fe fdbe 	bl	8001314 <LCD_DrawLine>
	LCD_DrawLine(50, 166 ,50, 186, 0x0);
 8002798:	2300      	movs	r3, #0
 800279a:	9300      	str	r3, [sp, #0]
 800279c:	23ba      	movs	r3, #186	; 0xba
 800279e:	2232      	movs	r2, #50	; 0x32
 80027a0:	21a6      	movs	r1, #166	; 0xa6
 80027a2:	2032      	movs	r0, #50	; 0x32
 80027a4:	f7fe fdb6 	bl	8001314 <LCD_DrawLine>
	LCD_DrawLine(100, 166 ,100, 186, 0x0);
 80027a8:	2300      	movs	r3, #0
 80027aa:	9300      	str	r3, [sp, #0]
 80027ac:	23ba      	movs	r3, #186	; 0xba
 80027ae:	2264      	movs	r2, #100	; 0x64
 80027b0:	21a6      	movs	r1, #166	; 0xa6
 80027b2:	2064      	movs	r0, #100	; 0x64
 80027b4:	f7fe fdae 	bl	8001314 <LCD_DrawLine>

	//DHT11 Humidity Value and Display
	LCD_Draw_24sqr(20, 206, dew);
 80027b8:	4a75      	ldr	r2, [pc, #468]	; (8002990 <components_display+0x330>)
 80027ba:	21ce      	movs	r1, #206	; 0xce
 80027bc:	2014      	movs	r0, #20
 80027be:	f7fe ff2b 	bl	8001618 <LCD_Draw_24sqr>
    sprintf(humidity_value_display, "%d", humidity);
 80027c2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80027c6:	68ba      	ldr	r2, [r7, #8]
 80027c8:	4970      	ldr	r1, [pc, #448]	; (800298c <components_display+0x32c>)
 80027ca:	4618      	mov	r0, r3
 80027cc:	f004 f8d6 	bl	800697c <siprintf>
	LCD_Clear(51, 207, 32, 16, 0xffff);
 80027d0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80027d4:	9300      	str	r3, [sp, #0]
 80027d6:	2310      	movs	r3, #16
 80027d8:	2220      	movs	r2, #32
 80027da:	21cf      	movs	r1, #207	; 0xcf
 80027dc:	2033      	movs	r0, #51	; 0x33
 80027de:	f7fe fd76 	bl	80012ce <LCD_Clear>
	LCD_DrawString(51, 207, humidity_value_display);
 80027e2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80027e6:	461a      	mov	r2, r3
 80027e8:	21cf      	movs	r1, #207	; 0xcf
 80027ea:	2033      	movs	r0, #51	; 0x33
 80027ec:	f7fe fe5e 	bl	80014ac <LCD_DrawString>
	LCD_DrawLine(50, 206 ,100, 206, 0x0);
 80027f0:	2300      	movs	r3, #0
 80027f2:	9300      	str	r3, [sp, #0]
 80027f4:	23ce      	movs	r3, #206	; 0xce
 80027f6:	2264      	movs	r2, #100	; 0x64
 80027f8:	21ce      	movs	r1, #206	; 0xce
 80027fa:	2032      	movs	r0, #50	; 0x32
 80027fc:	f7fe fd8a 	bl	8001314 <LCD_DrawLine>
	LCD_DrawLine(50, 226 ,100, 226, 0x0);
 8002800:	2300      	movs	r3, #0
 8002802:	9300      	str	r3, [sp, #0]
 8002804:	23e2      	movs	r3, #226	; 0xe2
 8002806:	2264      	movs	r2, #100	; 0x64
 8002808:	21e2      	movs	r1, #226	; 0xe2
 800280a:	2032      	movs	r0, #50	; 0x32
 800280c:	f7fe fd82 	bl	8001314 <LCD_DrawLine>
	LCD_DrawLine(50, 206 ,50, 226, 0x0);
 8002810:	2300      	movs	r3, #0
 8002812:	9300      	str	r3, [sp, #0]
 8002814:	23e2      	movs	r3, #226	; 0xe2
 8002816:	2232      	movs	r2, #50	; 0x32
 8002818:	21ce      	movs	r1, #206	; 0xce
 800281a:	2032      	movs	r0, #50	; 0x32
 800281c:	f7fe fd7a 	bl	8001314 <LCD_DrawLine>
	LCD_DrawLine(100, 206 ,100, 226, 0x0);
 8002820:	2300      	movs	r3, #0
 8002822:	9300      	str	r3, [sp, #0]
 8002824:	23e2      	movs	r3, #226	; 0xe2
 8002826:	2264      	movs	r2, #100	; 0x64
 8002828:	21ce      	movs	r1, #206	; 0xce
 800282a:	2064      	movs	r0, #100	; 0x64
 800282c:	f7fe fd72 	bl	8001314 <LCD_DrawLine>


	//LDR Sensor Value and Display
	sprintf(adc2_value_display, "%d", luminosity);
 8002830:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002834:	687a      	ldr	r2, [r7, #4]
 8002836:	4955      	ldr	r1, [pc, #340]	; (800298c <components_display+0x32c>)
 8002838:	4618      	mov	r0, r3
 800283a:	f004 f89f 	bl	800697c <siprintf>
	LCD_Clear(51, 247, 32, 16, 0xffff);
 800283e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002842:	9300      	str	r3, [sp, #0]
 8002844:	2310      	movs	r3, #16
 8002846:	2220      	movs	r2, #32
 8002848:	21f7      	movs	r1, #247	; 0xf7
 800284a:	2033      	movs	r0, #51	; 0x33
 800284c:	f7fe fd3f 	bl	80012ce <LCD_Clear>
	LCD_DrawString(51, 247, adc2_value_display);
 8002850:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002854:	461a      	mov	r2, r3
 8002856:	21f7      	movs	r1, #247	; 0xf7
 8002858:	2033      	movs	r0, #51	; 0x33
 800285a:	f7fe fe27 	bl	80014ac <LCD_DrawString>
	LCD_Draw_24sqr(20, 246, light);
 800285e:	4a4d      	ldr	r2, [pc, #308]	; (8002994 <components_display+0x334>)
 8002860:	21f6      	movs	r1, #246	; 0xf6
 8002862:	2014      	movs	r0, #20
 8002864:	f7fe fed8 	bl	8001618 <LCD_Draw_24sqr>
	LCD_DrawLine(50, 246 ,100, 246, 0x0);
 8002868:	2300      	movs	r3, #0
 800286a:	9300      	str	r3, [sp, #0]
 800286c:	23f6      	movs	r3, #246	; 0xf6
 800286e:	2264      	movs	r2, #100	; 0x64
 8002870:	21f6      	movs	r1, #246	; 0xf6
 8002872:	2032      	movs	r0, #50	; 0x32
 8002874:	f7fe fd4e 	bl	8001314 <LCD_DrawLine>
	LCD_DrawLine(50, 266 ,100, 266, 0x0);
 8002878:	2300      	movs	r3, #0
 800287a:	9300      	str	r3, [sp, #0]
 800287c:	f44f 7385 	mov.w	r3, #266	; 0x10a
 8002880:	2264      	movs	r2, #100	; 0x64
 8002882:	f44f 7185 	mov.w	r1, #266	; 0x10a
 8002886:	2032      	movs	r0, #50	; 0x32
 8002888:	f7fe fd44 	bl	8001314 <LCD_DrawLine>
	LCD_DrawLine(50, 246 ,50, 266, 0x0);
 800288c:	2300      	movs	r3, #0
 800288e:	9300      	str	r3, [sp, #0]
 8002890:	f44f 7385 	mov.w	r3, #266	; 0x10a
 8002894:	2232      	movs	r2, #50	; 0x32
 8002896:	21f6      	movs	r1, #246	; 0xf6
 8002898:	2032      	movs	r0, #50	; 0x32
 800289a:	f7fe fd3b 	bl	8001314 <LCD_DrawLine>
    LCD_DrawLine(100, 246 ,100, 266, 0x0);
 800289e:	2300      	movs	r3, #0
 80028a0:	9300      	str	r3, [sp, #0]
 80028a2:	f44f 7385 	mov.w	r3, #266	; 0x10a
 80028a6:	2264      	movs	r2, #100	; 0x64
 80028a8:	21f6      	movs	r1, #246	; 0xf6
 80028aa:	2064      	movs	r0, #100	; 0x64
 80028ac:	f7fe fd32 	bl	8001314 <LCD_DrawLine>

    // water level of the tank
    LCD_Clear (145, 210, 70, 50, 0xffff);
 80028b0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80028b4:	9300      	str	r3, [sp, #0]
 80028b6:	2332      	movs	r3, #50	; 0x32
 80028b8:	2246      	movs	r2, #70	; 0x46
 80028ba:	21d2      	movs	r1, #210	; 0xd2
 80028bc:	2091      	movs	r0, #145	; 0x91
 80028be:	f7fe fd06 	bl	80012ce <LCD_Clear>
//	sprintf(adc1_value_display, "%d", water_level);
	LCD_Clear(140, 160, 100, 20, 0xffff);
 80028c2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80028c6:	9300      	str	r3, [sp, #0]
 80028c8:	2314      	movs	r3, #20
 80028ca:	2264      	movs	r2, #100	; 0x64
 80028cc:	21a0      	movs	r1, #160	; 0xa0
 80028ce:	208c      	movs	r0, #140	; 0x8c
 80028d0:	f7fe fcfd 	bl	80012ce <LCD_Clear>
	water_level *= 0.02;
 80028d4:	6838      	ldr	r0, [r7, #0]
 80028d6:	f7fd fe03 	bl	80004e0 <__aeabi_i2d>
 80028da:	a325      	add	r3, pc, #148	; (adr r3, 8002970 <components_display+0x310>)
 80028dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028e0:	f7fd fe68 	bl	80005b4 <__aeabi_dmul>
 80028e4:	4602      	mov	r2, r0
 80028e6:	460b      	mov	r3, r1
 80028e8:	4610      	mov	r0, r2
 80028ea:	4619      	mov	r1, r3
 80028ec:	f7fe f874 	bl	80009d8 <__aeabi_d2iz>
 80028f0:	4603      	mov	r3, r0
 80028f2:	603b      	str	r3, [r7, #0]
//	LCD_DrawString(140, 160, adc1_value_display);
	LCD_Clear(140, 180, 100, 20, 0xffff);
 80028f4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80028f8:	9300      	str	r3, [sp, #0]
 80028fa:	2314      	movs	r3, #20
 80028fc:	2264      	movs	r2, #100	; 0x64
 80028fe:	21b4      	movs	r1, #180	; 0xb4
 8002900:	208c      	movs	r0, #140	; 0x8c
 8002902:	f7fe fce4 	bl	80012ce <LCD_Clear>
	LCD_DrawString(140, 180, "Water level");
 8002906:	4a24      	ldr	r2, [pc, #144]	; (8002998 <components_display+0x338>)
 8002908:	21b4      	movs	r1, #180	; 0xb4
 800290a:	208c      	movs	r0, #140	; 0x8c
 800290c:	f7fe fdce 	bl	80014ac <LCD_DrawString>
    LCD_DrawLine(140, 206, 140, 266, 0x0);
 8002910:	2300      	movs	r3, #0
 8002912:	9300      	str	r3, [sp, #0]
 8002914:	f44f 7385 	mov.w	r3, #266	; 0x10a
 8002918:	228c      	movs	r2, #140	; 0x8c
 800291a:	21ce      	movs	r1, #206	; 0xce
 800291c:	208c      	movs	r0, #140	; 0x8c
 800291e:	f7fe fcf9 	bl	8001314 <LCD_DrawLine>
    LCD_DrawLine(220, 206, 220, 266, 0x0);
 8002922:	2300      	movs	r3, #0
 8002924:	9300      	str	r3, [sp, #0]
 8002926:	f44f 7385 	mov.w	r3, #266	; 0x10a
 800292a:	22dc      	movs	r2, #220	; 0xdc
 800292c:	21ce      	movs	r1, #206	; 0xce
 800292e:	20dc      	movs	r0, #220	; 0xdc
 8002930:	f7fe fcf0 	bl	8001314 <LCD_DrawLine>
	LCD_DrawLine(140, 266, 220, 266, 0x0);
 8002934:	2300      	movs	r3, #0
 8002936:	9300      	str	r3, [sp, #0]
 8002938:	f44f 7385 	mov.w	r3, #266	; 0x10a
 800293c:	22dc      	movs	r2, #220	; 0xdc
 800293e:	f44f 7185 	mov.w	r1, #266	; 0x10a
 8002942:	208c      	movs	r0, #140	; 0x8c
 8002944:	f7fe fce6 	bl	8001314 <LCD_DrawLine>
	LCD_Clear (145, 265 - water_level, 70, water_level, 0x001f);
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	b29b      	uxth	r3, r3
 800294c:	f5c3 7384 	rsb	r3, r3, #264	; 0x108
 8002950:	3301      	adds	r3, #1
 8002952:	b299      	uxth	r1, r3
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	b29b      	uxth	r3, r3
 8002958:	221f      	movs	r2, #31
 800295a:	9200      	str	r2, [sp, #0]
 800295c:	2246      	movs	r2, #70	; 0x46
 800295e:	2091      	movs	r0, #145	; 0x91
 8002960:	f7fe fcb5 	bl	80012ce <LCD_Clear>
}
 8002964:	bf00      	nop
 8002966:	3770      	adds	r7, #112	; 0x70
 8002968:	46bd      	mov	sp, r7
 800296a:	bd80      	pop	{r7, pc}
 800296c:	f3af 8000 	nop.w
 8002970:	47ae147b 	.word	0x47ae147b
 8002974:	3f947ae1 	.word	0x3f947ae1
 8002978:	cccccccd 	.word	0xcccccccd
 800297c:	08007a2c 	.word	0x08007a2c
 8002980:	08007dec 	.word	0x08007dec
 8002984:	08007310 	.word	0x08007310
 8002988:	08007e94 	.word	0x08007e94
 800298c:	08007328 	.word	0x08007328
 8002990:	08007e4c 	.word	0x08007e4c
 8002994:	08007edc 	.word	0x08007edc
 8002998:	0800732c 	.word	0x0800732c

0800299c <TimeInitPage>:

void TimeInitPage(uint8_t sec, uint8_t min, uint8_t hr, uint8_t weekday, uint8_t date, uint8_t month, uint8_t year, RTC_TimeTypeDef sTime, RTC_DateTypeDef sDate, RTC_HandleTypeDef hrtc){
 800299c:	b590      	push	{r4, r7, lr}
 800299e:	b087      	sub	sp, #28
 80029a0:	af02      	add	r7, sp, #8
 80029a2:	4604      	mov	r4, r0
 80029a4:	4608      	mov	r0, r1
 80029a6:	4611      	mov	r1, r2
 80029a8:	461a      	mov	r2, r3
 80029aa:	4623      	mov	r3, r4
 80029ac:	71fb      	strb	r3, [r7, #7]
 80029ae:	4603      	mov	r3, r0
 80029b0:	71bb      	strb	r3, [r7, #6]
 80029b2:	460b      	mov	r3, r1
 80029b4:	717b      	strb	r3, [r7, #5]
 80029b6:	4613      	mov	r3, r2
 80029b8:	713b      	strb	r3, [r7, #4]
	LCD_DrawString(10, 15, "Initializing your local time");
 80029ba:	4a90      	ldr	r2, [pc, #576]	; (8002bfc <TimeInitPage+0x260>)
 80029bc:	210f      	movs	r1, #15
 80029be:	200a      	movs	r0, #10
 80029c0:	f7fe fd74 	bl	80014ac <LCD_DrawString>
//		LCD_DrawString(10, 45, "Year:");
//		LCD_DrawString(10, 75, "Month:");
//		LCD_DrawString(10, 105, "Date:");
//		LCD_Clear(0, 0, 240, 320, 0xffff);
	LCD_Draw_Num(48, 80, num[0]);
 80029c4:	4a8e      	ldr	r2, [pc, #568]	; (8002c00 <TimeInitPage+0x264>)
 80029c6:	2150      	movs	r1, #80	; 0x50
 80029c8:	2030      	movs	r0, #48	; 0x30
 80029ca:	f7fe fde8 	bl	800159e <LCD_Draw_Num>
	LCD_Draw_Num(82, 80, num[0]);
 80029ce:	4a8c      	ldr	r2, [pc, #560]	; (8002c00 <TimeInitPage+0x264>)
 80029d0:	2150      	movs	r1, #80	; 0x50
 80029d2:	2052      	movs	r0, #82	; 0x52
 80029d4:	f7fe fde3 	bl	800159e <LCD_Draw_Num>
	LCD_Draw_Num(108, 80, num[10]);
 80029d8:	4a8a      	ldr	r2, [pc, #552]	; (8002c04 <TimeInitPage+0x268>)
 80029da:	2150      	movs	r1, #80	; 0x50
 80029dc:	206c      	movs	r0, #108	; 0x6c
 80029de:	f7fe fdde 	bl	800159e <LCD_Draw_Num>
	LCD_Draw_Num(134, 80, num[0]);
 80029e2:	4a87      	ldr	r2, [pc, #540]	; (8002c00 <TimeInitPage+0x264>)
 80029e4:	2150      	movs	r1, #80	; 0x50
 80029e6:	2086      	movs	r0, #134	; 0x86
 80029e8:	f7fe fdd9 	bl	800159e <LCD_Draw_Num>
	LCD_Draw_Num(168, 80, num[0]);
 80029ec:	4a84      	ldr	r2, [pc, #528]	; (8002c00 <TimeInitPage+0x264>)
 80029ee:	2150      	movs	r1, #80	; 0x50
 80029f0:	20a8      	movs	r0, #168	; 0xa8
 80029f2:	f7fe fdd4 	bl	800159e <LCD_Draw_Num>
	LCD_DrawLine(0, 135, 240, 135, 0x0);
 80029f6:	2300      	movs	r3, #0
 80029f8:	9300      	str	r3, [sp, #0]
 80029fa:	2387      	movs	r3, #135	; 0x87
 80029fc:	22f0      	movs	r2, #240	; 0xf0
 80029fe:	2187      	movs	r1, #135	; 0x87
 8002a00:	2000      	movs	r0, #0
 8002a02:	f7fe fc87 	bl	8001314 <LCD_DrawLine>
	LCD_Draw_24sqr(108, 225, plant);
 8002a06:	4a80      	ldr	r2, [pc, #512]	; (8002c08 <TimeInitPage+0x26c>)
 8002a08:	21e1      	movs	r1, #225	; 0xe1
 8002a0a:	206c      	movs	r0, #108	; 0x6c
 8002a0c:	f7fe fe04 	bl	8001618 <LCD_Draw_24sqr>
	LCD_DrawString(108, 260, "SET");
 8002a10:	4a7e      	ldr	r2, [pc, #504]	; (8002c0c <TimeInitPage+0x270>)
 8002a12:	f44f 7182 	mov.w	r1, #260	; 0x104
 8002a16:	206c      	movs	r0, #108	; 0x6c
 8002a18:	f7fe fd48 	bl	80014ac <LCD_DrawString>
	LCD_DrawString(50, 280, "Press K1 to Start");
 8002a1c:	4a7c      	ldr	r2, [pc, #496]	; (8002c10 <TimeInitPage+0x274>)
 8002a1e:	f44f 718c 	mov.w	r1, #280	; 0x118
 8002a22:	2032      	movs	r0, #50	; 0x32
 8002a24:	f7fe fd42 	bl	80014ac <LCD_DrawString>
	while(1){
		strType_XPT2046_Coordinate touchpt;
		XPT2046_Get_TouchedPoint(&touchpt, &strXPT2046_TouchPara);
 8002a28:	f107 030c 	add.w	r3, r7, #12
 8002a2c:	4979      	ldr	r1, [pc, #484]	; (8002c14 <TimeInitPage+0x278>)
 8002a2e:	4618      	mov	r0, r3
 8002a30:	f001 f870 	bl	8003b14 <XPT2046_Get_TouchedPoint>
//		sprintf(x, "%d", touchpt.x);
//		sprintf(y, "%d", touchpt.y);
//		LCD_DrawString(10, 150, x);
//		LCD_DrawString(10, 175, y);

		XPT2046_Get_TouchedPoint(&touchpt, &strXPT2046_TouchPara);
 8002a34:	f107 030c 	add.w	r3, r7, #12
 8002a38:	4976      	ldr	r1, [pc, #472]	; (8002c14 <TimeInitPage+0x278>)
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	f001 f86a 	bl	8003b14 <XPT2046_Get_TouchedPoint>
		if(touchpt.x <= 270 && touchpt.x >= 235 && touchpt.y <= 120 && touchpt.y >= 60) hr += 1;
 8002a40:	89bb      	ldrh	r3, [r7, #12]
 8002a42:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8002a46:	d80c      	bhi.n	8002a62 <TimeInitPage+0xc6>
 8002a48:	89bb      	ldrh	r3, [r7, #12]
 8002a4a:	2bea      	cmp	r3, #234	; 0xea
 8002a4c:	d909      	bls.n	8002a62 <TimeInitPage+0xc6>
 8002a4e:	89fb      	ldrh	r3, [r7, #14]
 8002a50:	2b78      	cmp	r3, #120	; 0x78
 8002a52:	d806      	bhi.n	8002a62 <TimeInitPage+0xc6>
 8002a54:	89fb      	ldrh	r3, [r7, #14]
 8002a56:	2b3b      	cmp	r3, #59	; 0x3b
 8002a58:	d903      	bls.n	8002a62 <TimeInitPage+0xc6>
 8002a5a:	797b      	ldrb	r3, [r7, #5]
 8002a5c:	3301      	adds	r3, #1
 8002a5e:	717b      	strb	r3, [r7, #5]
 8002a60:	e00f      	b.n	8002a82 <TimeInitPage+0xe6>
		else if (touchpt.x <= 270 && touchpt.x >= 235 && touchpt.y <= 190 && touchpt.y >= 135) min += 1;
 8002a62:	89bb      	ldrh	r3, [r7, #12]
 8002a64:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8002a68:	d80b      	bhi.n	8002a82 <TimeInitPage+0xe6>
 8002a6a:	89bb      	ldrh	r3, [r7, #12]
 8002a6c:	2bea      	cmp	r3, #234	; 0xea
 8002a6e:	d908      	bls.n	8002a82 <TimeInitPage+0xe6>
 8002a70:	89fb      	ldrh	r3, [r7, #14]
 8002a72:	2bbe      	cmp	r3, #190	; 0xbe
 8002a74:	d805      	bhi.n	8002a82 <TimeInitPage+0xe6>
 8002a76:	89fb      	ldrh	r3, [r7, #14]
 8002a78:	2b86      	cmp	r3, #134	; 0x86
 8002a7a:	d902      	bls.n	8002a82 <TimeInitPage+0xe6>
 8002a7c:	79bb      	ldrb	r3, [r7, #6]
 8002a7e:	3301      	adds	r3, #1
 8002a80:	71bb      	strb	r3, [r7, #6]
		if(hr == 24) hr = 0;
 8002a82:	797b      	ldrb	r3, [r7, #5]
 8002a84:	2b18      	cmp	r3, #24
 8002a86:	d101      	bne.n	8002a8c <TimeInitPage+0xf0>
 8002a88:	2300      	movs	r3, #0
 8002a8a:	717b      	strb	r3, [r7, #5]
		if(min == 60) min = 0;
 8002a8c:	79bb      	ldrb	r3, [r7, #6]
 8002a8e:	2b3c      	cmp	r3, #60	; 0x3c
 8002a90:	d101      	bne.n	8002a96 <TimeInitPage+0xfa>
 8002a92:	2300      	movs	r3, #0
 8002a94:	71bb      	strb	r3, [r7, #6]
		LCD_Draw_Num(48, 80, num[hr/10]);
 8002a96:	797b      	ldrb	r3, [r7, #5]
 8002a98:	4a5f      	ldr	r2, [pc, #380]	; (8002c18 <TimeInitPage+0x27c>)
 8002a9a:	fba2 2303 	umull	r2, r3, r2, r3
 8002a9e:	08db      	lsrs	r3, r3, #3
 8002aa0:	b2db      	uxtb	r3, r3
 8002aa2:	461a      	mov	r2, r3
 8002aa4:	4613      	mov	r3, r2
 8002aa6:	005b      	lsls	r3, r3, #1
 8002aa8:	4413      	add	r3, r2
 8002aaa:	015b      	lsls	r3, r3, #5
 8002aac:	4a54      	ldr	r2, [pc, #336]	; (8002c00 <TimeInitPage+0x264>)
 8002aae:	4413      	add	r3, r2
 8002ab0:	461a      	mov	r2, r3
 8002ab2:	2150      	movs	r1, #80	; 0x50
 8002ab4:	2030      	movs	r0, #48	; 0x30
 8002ab6:	f7fe fd72 	bl	800159e <LCD_Draw_Num>
		LCD_Draw_Num(82, 80, num[hr%10]);
 8002aba:	797a      	ldrb	r2, [r7, #5]
 8002abc:	4b56      	ldr	r3, [pc, #344]	; (8002c18 <TimeInitPage+0x27c>)
 8002abe:	fba3 1302 	umull	r1, r3, r3, r2
 8002ac2:	08d9      	lsrs	r1, r3, #3
 8002ac4:	460b      	mov	r3, r1
 8002ac6:	009b      	lsls	r3, r3, #2
 8002ac8:	440b      	add	r3, r1
 8002aca:	005b      	lsls	r3, r3, #1
 8002acc:	1ad3      	subs	r3, r2, r3
 8002ace:	b2db      	uxtb	r3, r3
 8002ad0:	461a      	mov	r2, r3
 8002ad2:	4613      	mov	r3, r2
 8002ad4:	005b      	lsls	r3, r3, #1
 8002ad6:	4413      	add	r3, r2
 8002ad8:	015b      	lsls	r3, r3, #5
 8002ada:	4a49      	ldr	r2, [pc, #292]	; (8002c00 <TimeInitPage+0x264>)
 8002adc:	4413      	add	r3, r2
 8002ade:	461a      	mov	r2, r3
 8002ae0:	2150      	movs	r1, #80	; 0x50
 8002ae2:	2052      	movs	r0, #82	; 0x52
 8002ae4:	f7fe fd5b 	bl	800159e <LCD_Draw_Num>
		LCD_Draw_Num(108, 80, num[10]);
 8002ae8:	4a46      	ldr	r2, [pc, #280]	; (8002c04 <TimeInitPage+0x268>)
 8002aea:	2150      	movs	r1, #80	; 0x50
 8002aec:	206c      	movs	r0, #108	; 0x6c
 8002aee:	f7fe fd56 	bl	800159e <LCD_Draw_Num>
		LCD_Draw_Num(134, 80, num[min/10]);
 8002af2:	79bb      	ldrb	r3, [r7, #6]
 8002af4:	4a48      	ldr	r2, [pc, #288]	; (8002c18 <TimeInitPage+0x27c>)
 8002af6:	fba2 2303 	umull	r2, r3, r2, r3
 8002afa:	08db      	lsrs	r3, r3, #3
 8002afc:	b2db      	uxtb	r3, r3
 8002afe:	461a      	mov	r2, r3
 8002b00:	4613      	mov	r3, r2
 8002b02:	005b      	lsls	r3, r3, #1
 8002b04:	4413      	add	r3, r2
 8002b06:	015b      	lsls	r3, r3, #5
 8002b08:	4a3d      	ldr	r2, [pc, #244]	; (8002c00 <TimeInitPage+0x264>)
 8002b0a:	4413      	add	r3, r2
 8002b0c:	461a      	mov	r2, r3
 8002b0e:	2150      	movs	r1, #80	; 0x50
 8002b10:	2086      	movs	r0, #134	; 0x86
 8002b12:	f7fe fd44 	bl	800159e <LCD_Draw_Num>
		LCD_Draw_Num(168, 80, num[min%10]);
 8002b16:	79ba      	ldrb	r2, [r7, #6]
 8002b18:	4b3f      	ldr	r3, [pc, #252]	; (8002c18 <TimeInitPage+0x27c>)
 8002b1a:	fba3 1302 	umull	r1, r3, r3, r2
 8002b1e:	08d9      	lsrs	r1, r3, #3
 8002b20:	460b      	mov	r3, r1
 8002b22:	009b      	lsls	r3, r3, #2
 8002b24:	440b      	add	r3, r1
 8002b26:	005b      	lsls	r3, r3, #1
 8002b28:	1ad3      	subs	r3, r2, r3
 8002b2a:	b2db      	uxtb	r3, r3
 8002b2c:	461a      	mov	r2, r3
 8002b2e:	4613      	mov	r3, r2
 8002b30:	005b      	lsls	r3, r3, #1
 8002b32:	4413      	add	r3, r2
 8002b34:	015b      	lsls	r3, r3, #5
 8002b36:	4a32      	ldr	r2, [pc, #200]	; (8002c00 <TimeInitPage+0x264>)
 8002b38:	4413      	add	r3, r2
 8002b3a:	461a      	mov	r2, r3
 8002b3c:	2150      	movs	r1, #80	; 0x50
 8002b3e:	20a8      	movs	r0, #168	; 0xa8
 8002b40:	f7fe fd2d 	bl	800159e <LCD_Draw_Num>
		HAL_Delay(200);
 8002b44:	20c8      	movs	r0, #200	; 0xc8
 8002b46:	f001 f8f5 	bl	8003d34 <HAL_Delay>
	    if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0)==GPIO_PIN_SET){
 8002b4a:	2101      	movs	r1, #1
 8002b4c:	4833      	ldr	r0, [pc, #204]	; (8002c1c <TimeInitPage+0x280>)
 8002b4e:	f002 f8a1 	bl	8004c94 <HAL_GPIO_ReadPin>
 8002b52:	4603      	mov	r3, r0
 8002b54:	2b01      	cmp	r3, #1
 8002b56:	f47f af67 	bne.w	8002a28 <TimeInitPage+0x8c>
		sTime.Hours = (hr/10)*16 + (hr%10);
 8002b5a:	797b      	ldrb	r3, [r7, #5]
 8002b5c:	4a2e      	ldr	r2, [pc, #184]	; (8002c18 <TimeInitPage+0x27c>)
 8002b5e:	fba2 2303 	umull	r2, r3, r2, r3
 8002b62:	08db      	lsrs	r3, r3, #3
 8002b64:	b2db      	uxtb	r3, r3
 8002b66:	011b      	lsls	r3, r3, #4
 8002b68:	b2d8      	uxtb	r0, r3
 8002b6a:	797a      	ldrb	r2, [r7, #5]
 8002b6c:	4b2a      	ldr	r3, [pc, #168]	; (8002c18 <TimeInitPage+0x27c>)
 8002b6e:	fba3 1302 	umull	r1, r3, r3, r2
 8002b72:	08d9      	lsrs	r1, r3, #3
 8002b74:	460b      	mov	r3, r1
 8002b76:	009b      	lsls	r3, r3, #2
 8002b78:	440b      	add	r3, r1
 8002b7a:	005b      	lsls	r3, r3, #1
 8002b7c:	1ad3      	subs	r3, r2, r3
 8002b7e:	b2db      	uxtb	r3, r3
 8002b80:	4403      	add	r3, r0
 8002b82:	b2db      	uxtb	r3, r3
 8002b84:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
		sTime.Minutes = (min/10)*16 + (min%10);
 8002b88:	79bb      	ldrb	r3, [r7, #6]
 8002b8a:	4a23      	ldr	r2, [pc, #140]	; (8002c18 <TimeInitPage+0x27c>)
 8002b8c:	fba2 2303 	umull	r2, r3, r2, r3
 8002b90:	08db      	lsrs	r3, r3, #3
 8002b92:	b2db      	uxtb	r3, r3
 8002b94:	011b      	lsls	r3, r3, #4
 8002b96:	b2d8      	uxtb	r0, r3
 8002b98:	79ba      	ldrb	r2, [r7, #6]
 8002b9a:	4b1f      	ldr	r3, [pc, #124]	; (8002c18 <TimeInitPage+0x27c>)
 8002b9c:	fba3 1302 	umull	r1, r3, r3, r2
 8002ba0:	08d9      	lsrs	r1, r3, #3
 8002ba2:	460b      	mov	r3, r1
 8002ba4:	009b      	lsls	r3, r3, #2
 8002ba6:	440b      	add	r3, r1
 8002ba8:	005b      	lsls	r3, r3, #1
 8002baa:	1ad3      	subs	r3, r2, r3
 8002bac:	b2db      	uxtb	r3, r3
 8002bae:	4403      	add	r3, r0
 8002bb0:	b2db      	uxtb	r3, r3
 8002bb2:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
//		sTime.Seconds = sec;
//		sDate.WeekDay = weekday;
//		sDate.Date = date;
//		sDate.Month = month;
		sDate.Year = year;
 8002bb6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002bba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD);
 8002bbe:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8002bc2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002bc6:	2201      	movs	r2, #1
 8002bc8:	4618      	mov	r0, r3
 8002bca:	f002 fef7 	bl	80059bc <HAL_RTC_SetTime>
		HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD);
 8002bce:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8002bd2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002bd6:	2201      	movs	r2, #1
 8002bd8:	4618      	mov	r0, r3
 8002bda:	f003 f85f 	bl	8005c9c <HAL_RTC_SetDate>
//		HAL_Delay(500);
//		HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR2, (uint16_t)sDate.Year);
//		HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR3, (uint16_t)sDate.Month);
//		HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR4, (uint16_t)sDate.Date);
//		HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR5, (uint16_t)sDate.WeekDay);
		LCD_Clear(0, 0, 240, 320, WHITE);
 8002bde:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002be2:	9300      	str	r3, [sp, #0]
 8002be4:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8002be8:	22f0      	movs	r2, #240	; 0xf0
 8002bea:	2100      	movs	r1, #0
 8002bec:	2000      	movs	r0, #0
 8002bee:	f7fe fb6e 	bl	80012ce <LCD_Clear>
		break;
		}
	}
}
 8002bf2:	bf00      	nop
 8002bf4:	3714      	adds	r7, #20
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bd90      	pop	{r4, r7, pc}
 8002bfa:	bf00      	nop
 8002bfc:	08007338 	.word	0x08007338
 8002c00:	08007a2c 	.word	0x08007a2c
 8002c04:	08007dec 	.word	0x08007dec
 8002c08:	08007f24 	.word	0x08007f24
 8002c0c:	08007358 	.word	0x08007358
 8002c10:	0800735c 	.word	0x0800735c
 8002c14:	200000a0 	.word	0x200000a0
 8002c18:	cccccccd 	.word	0xcccccccd
 8002c1c:	40010800 	.word	0x40010800

08002c20 <HomePage>:

void HomePage(int temp, int humidity, int luminosity, int water_level, char watering_time[],  RTC_TimeTypeDef sTime, RTC_DateTypeDef sDate, RTC_HandleTypeDef hrtc){
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b088      	sub	sp, #32
 8002c24:	af04      	add	r7, sp, #16
 8002c26:	60f8      	str	r0, [r7, #12]
 8002c28:	60b9      	str	r1, [r7, #8]
 8002c2a:	607a      	str	r2, [r7, #4]
 8002c2c:	603b      	str	r3, [r7, #0]
	HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8002c2e:	f107 011c 	add.w	r1, r7, #28
 8002c32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c36:	2200      	movs	r2, #0
 8002c38:	4618      	mov	r0, r3
 8002c3a:	f002 ff57 	bl	8005aec <HAL_RTC_GetTime>
	LCD_Draw_24sqr(10, 10, setting);
 8002c3e:	4a0e      	ldr	r2, [pc, #56]	; (8002c78 <HomePage+0x58>)
 8002c40:	210a      	movs	r1, #10
 8002c42:	200a      	movs	r0, #10
 8002c44:	f7fe fce8 	bl	8001618 <LCD_Draw_24sqr>
	components_display(temp, humidity, luminosity, water_level, watering_time, sTime.Hours, sTime.Minutes);
 8002c48:	7f3b      	ldrb	r3, [r7, #28]
 8002c4a:	7f7a      	ldrb	r2, [r7, #29]
 8002c4c:	9202      	str	r2, [sp, #8]
 8002c4e:	9301      	str	r3, [sp, #4]
 8002c50:	69bb      	ldr	r3, [r7, #24]
 8002c52:	9300      	str	r3, [sp, #0]
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	687a      	ldr	r2, [r7, #4]
 8002c58:	68b9      	ldr	r1, [r7, #8]
 8002c5a:	68f8      	ldr	r0, [r7, #12]
 8002c5c:	f7ff fd00 	bl	8002660 <components_display>
	LCD_DrawLine(0, 152, 240, 152, 0x0);
 8002c60:	2300      	movs	r3, #0
 8002c62:	9300      	str	r3, [sp, #0]
 8002c64:	2398      	movs	r3, #152	; 0x98
 8002c66:	22f0      	movs	r2, #240	; 0xf0
 8002c68:	2198      	movs	r1, #152	; 0x98
 8002c6a:	2000      	movs	r0, #0
 8002c6c:	f7fe fb52 	bl	8001314 <LCD_DrawLine>
}
 8002c70:	bf00      	nop
 8002c72:	3710      	adds	r7, #16
 8002c74:	46bd      	mov	sp, r7
 8002c76:	bd80      	pop	{r7, pc}
 8002c78:	08007f6c 	.word	0x08007f6c

08002c7c <SetTimePage>:

void SetTimePage(char watering_time[], char watering_time2[]){
 8002c7c:	b5b0      	push	{r4, r5, r7, lr}
 8002c7e:	b088      	sub	sp, #32
 8002c80:	af02      	add	r7, sp, #8
 8002c82:	6078      	str	r0, [r7, #4]
 8002c84:	6039      	str	r1, [r7, #0]
//	Setting Watering time
	strType_XPT2046_Coordinate touchpt;
	char touch_x[4], touch_y[4];
	uint8_t hr = 0, min = 0, hr2 = 0, min2 = 0;
 8002c86:	2300      	movs	r3, #0
 8002c88:	75fb      	strb	r3, [r7, #23]
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	75bb      	strb	r3, [r7, #22]
 8002c8e:	2300      	movs	r3, #0
 8002c90:	757b      	strb	r3, [r7, #21]
 8002c92:	2300      	movs	r3, #0
 8002c94:	753b      	strb	r3, [r7, #20]
	LCD_Clear(0, 0, 240, 320, 0xffff);
 8002c96:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002c9a:	9300      	str	r3, [sp, #0]
 8002c9c:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8002ca0:	22f0      	movs	r2, #240	; 0xf0
 8002ca2:	2100      	movs	r1, #0
 8002ca4:	2000      	movs	r0, #0
 8002ca6:	f7fe fb12 	bl	80012ce <LCD_Clear>
	LCD_DrawString(10, 10, "Home");
 8002caa:	4ab6      	ldr	r2, [pc, #728]	; (8002f84 <SetTimePage+0x308>)
 8002cac:	210a      	movs	r1, #10
 8002cae:	200a      	movs	r0, #10
 8002cb0:	f7fe fbfc 	bl	80014ac <LCD_DrawString>
	LCD_DrawString(20, 50, "Set the 1st watering time:");
 8002cb4:	4ab4      	ldr	r2, [pc, #720]	; (8002f88 <SetTimePage+0x30c>)
 8002cb6:	2132      	movs	r1, #50	; 0x32
 8002cb8:	2014      	movs	r0, #20
 8002cba:	f7fe fbf7 	bl	80014ac <LCD_DrawString>
	LCD_Draw_Num(48, 80, num[0]);
 8002cbe:	4ab3      	ldr	r2, [pc, #716]	; (8002f8c <SetTimePage+0x310>)
 8002cc0:	2150      	movs	r1, #80	; 0x50
 8002cc2:	2030      	movs	r0, #48	; 0x30
 8002cc4:	f7fe fc6b 	bl	800159e <LCD_Draw_Num>
	LCD_Draw_Num(82, 80, num[0]);
 8002cc8:	4ab0      	ldr	r2, [pc, #704]	; (8002f8c <SetTimePage+0x310>)
 8002cca:	2150      	movs	r1, #80	; 0x50
 8002ccc:	2052      	movs	r0, #82	; 0x52
 8002cce:	f7fe fc66 	bl	800159e <LCD_Draw_Num>
	LCD_Draw_Num(108, 80, num[10]);
 8002cd2:	4aaf      	ldr	r2, [pc, #700]	; (8002f90 <SetTimePage+0x314>)
 8002cd4:	2150      	movs	r1, #80	; 0x50
 8002cd6:	206c      	movs	r0, #108	; 0x6c
 8002cd8:	f7fe fc61 	bl	800159e <LCD_Draw_Num>
	LCD_Draw_Num(134, 80, num[0]);
 8002cdc:	4aab      	ldr	r2, [pc, #684]	; (8002f8c <SetTimePage+0x310>)
 8002cde:	2150      	movs	r1, #80	; 0x50
 8002ce0:	2086      	movs	r0, #134	; 0x86
 8002ce2:	f7fe fc5c 	bl	800159e <LCD_Draw_Num>
	LCD_Draw_Num(168, 80, num[0]);
 8002ce6:	4aa9      	ldr	r2, [pc, #676]	; (8002f8c <SetTimePage+0x310>)
 8002ce8:	2150      	movs	r1, #80	; 0x50
 8002cea:	20a8      	movs	r0, #168	; 0xa8
 8002cec:	f7fe fc57 	bl	800159e <LCD_Draw_Num>

	LCD_DrawLine(0, 135, 240, 135, 0x0);
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	9300      	str	r3, [sp, #0]
 8002cf4:	2387      	movs	r3, #135	; 0x87
 8002cf6:	22f0      	movs	r2, #240	; 0xf0
 8002cf8:	2187      	movs	r1, #135	; 0x87
 8002cfa:	2000      	movs	r0, #0
 8002cfc:	f7fe fb0a 	bl	8001314 <LCD_DrawLine>

	LCD_DrawString(20, 155, "Set the 2nd watering time:");
 8002d00:	4aa4      	ldr	r2, [pc, #656]	; (8002f94 <SetTimePage+0x318>)
 8002d02:	219b      	movs	r1, #155	; 0x9b
 8002d04:	2014      	movs	r0, #20
 8002d06:	f7fe fbd1 	bl	80014ac <LCD_DrawString>
	LCD_Draw_Num(48,185, num[0]);
 8002d0a:	4aa0      	ldr	r2, [pc, #640]	; (8002f8c <SetTimePage+0x310>)
 8002d0c:	21b9      	movs	r1, #185	; 0xb9
 8002d0e:	2030      	movs	r0, #48	; 0x30
 8002d10:	f7fe fc45 	bl	800159e <LCD_Draw_Num>
	LCD_Draw_Num(82, 185, num[0]);
 8002d14:	4a9d      	ldr	r2, [pc, #628]	; (8002f8c <SetTimePage+0x310>)
 8002d16:	21b9      	movs	r1, #185	; 0xb9
 8002d18:	2052      	movs	r0, #82	; 0x52
 8002d1a:	f7fe fc40 	bl	800159e <LCD_Draw_Num>
	LCD_Draw_Num(108, 185, num[10]);
 8002d1e:	4a9c      	ldr	r2, [pc, #624]	; (8002f90 <SetTimePage+0x314>)
 8002d20:	21b9      	movs	r1, #185	; 0xb9
 8002d22:	206c      	movs	r0, #108	; 0x6c
 8002d24:	f7fe fc3b 	bl	800159e <LCD_Draw_Num>
	LCD_Draw_Num(134, 185, num[0]);
 8002d28:	4a98      	ldr	r2, [pc, #608]	; (8002f8c <SetTimePage+0x310>)
 8002d2a:	21b9      	movs	r1, #185	; 0xb9
 8002d2c:	2086      	movs	r0, #134	; 0x86
 8002d2e:	f7fe fc36 	bl	800159e <LCD_Draw_Num>
	LCD_Draw_Num(168, 185, num[0]);
 8002d32:	4a96      	ldr	r2, [pc, #600]	; (8002f8c <SetTimePage+0x310>)
 8002d34:	21b9      	movs	r1, #185	; 0xb9
 8002d36:	20a8      	movs	r0, #168	; 0xa8
 8002d38:	f7fe fc31 	bl	800159e <LCD_Draw_Num>

	LCD_DrawString(108, 280, "SET");
 8002d3c:	4a96      	ldr	r2, [pc, #600]	; (8002f98 <SetTimePage+0x31c>)
 8002d3e:	f44f 718c 	mov.w	r1, #280	; 0x118
 8002d42:	206c      	movs	r0, #108	; 0x6c
 8002d44:	f7fe fbb2 	bl	80014ac <LCD_DrawString>
			while(1){
			  XPT2046_Get_TouchedPoint(&touchpt, &strXPT2046_TouchPara);
 8002d48:	f107 0310 	add.w	r3, r7, #16
 8002d4c:	4993      	ldr	r1, [pc, #588]	; (8002f9c <SetTimePage+0x320>)
 8002d4e:	4618      	mov	r0, r3
 8002d50:	f000 fee0 	bl	8003b14 <XPT2046_Get_TouchedPoint>
			  if(touchpt.x <= 270 && touchpt.x >= 235 && touchpt.y <= 120 && touchpt.y >= 60) hr += 1;
 8002d54:	8a3b      	ldrh	r3, [r7, #16]
 8002d56:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8002d5a:	d80c      	bhi.n	8002d76 <SetTimePage+0xfa>
 8002d5c:	8a3b      	ldrh	r3, [r7, #16]
 8002d5e:	2bea      	cmp	r3, #234	; 0xea
 8002d60:	d909      	bls.n	8002d76 <SetTimePage+0xfa>
 8002d62:	8a7b      	ldrh	r3, [r7, #18]
 8002d64:	2b78      	cmp	r3, #120	; 0x78
 8002d66:	d806      	bhi.n	8002d76 <SetTimePage+0xfa>
 8002d68:	8a7b      	ldrh	r3, [r7, #18]
 8002d6a:	2b3b      	cmp	r3, #59	; 0x3b
 8002d6c:	d903      	bls.n	8002d76 <SetTimePage+0xfa>
 8002d6e:	7dfb      	ldrb	r3, [r7, #23]
 8002d70:	3301      	adds	r3, #1
 8002d72:	75fb      	strb	r3, [r7, #23]
 8002d74:	e00f      	b.n	8002d96 <SetTimePage+0x11a>
			  else if (touchpt.x <= 270 && touchpt.x >= 235 && touchpt.y <= 190 && touchpt.y >= 135) min += 1;
 8002d76:	8a3b      	ldrh	r3, [r7, #16]
 8002d78:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8002d7c:	d80b      	bhi.n	8002d96 <SetTimePage+0x11a>
 8002d7e:	8a3b      	ldrh	r3, [r7, #16]
 8002d80:	2bea      	cmp	r3, #234	; 0xea
 8002d82:	d908      	bls.n	8002d96 <SetTimePage+0x11a>
 8002d84:	8a7b      	ldrh	r3, [r7, #18]
 8002d86:	2bbe      	cmp	r3, #190	; 0xbe
 8002d88:	d805      	bhi.n	8002d96 <SetTimePage+0x11a>
 8002d8a:	8a7b      	ldrh	r3, [r7, #18]
 8002d8c:	2b86      	cmp	r3, #134	; 0x86
 8002d8e:	d902      	bls.n	8002d96 <SetTimePage+0x11a>
 8002d90:	7dbb      	ldrb	r3, [r7, #22]
 8002d92:	3301      	adds	r3, #1
 8002d94:	75bb      	strb	r3, [r7, #22]
			  if(hr == 24) hr = 0;
 8002d96:	7dfb      	ldrb	r3, [r7, #23]
 8002d98:	2b18      	cmp	r3, #24
 8002d9a:	d101      	bne.n	8002da0 <SetTimePage+0x124>
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	75fb      	strb	r3, [r7, #23]
			  if(min == 60) min = 0;
 8002da0:	7dbb      	ldrb	r3, [r7, #22]
 8002da2:	2b3c      	cmp	r3, #60	; 0x3c
 8002da4:	d101      	bne.n	8002daa <SetTimePage+0x12e>
 8002da6:	2300      	movs	r3, #0
 8002da8:	75bb      	strb	r3, [r7, #22]
			  LCD_Draw_Num(48, 80, num[hr/10]);
 8002daa:	7dfb      	ldrb	r3, [r7, #23]
 8002dac:	4a7c      	ldr	r2, [pc, #496]	; (8002fa0 <SetTimePage+0x324>)
 8002dae:	fba2 2303 	umull	r2, r3, r2, r3
 8002db2:	08db      	lsrs	r3, r3, #3
 8002db4:	b2db      	uxtb	r3, r3
 8002db6:	461a      	mov	r2, r3
 8002db8:	4613      	mov	r3, r2
 8002dba:	005b      	lsls	r3, r3, #1
 8002dbc:	4413      	add	r3, r2
 8002dbe:	015b      	lsls	r3, r3, #5
 8002dc0:	4a72      	ldr	r2, [pc, #456]	; (8002f8c <SetTimePage+0x310>)
 8002dc2:	4413      	add	r3, r2
 8002dc4:	461a      	mov	r2, r3
 8002dc6:	2150      	movs	r1, #80	; 0x50
 8002dc8:	2030      	movs	r0, #48	; 0x30
 8002dca:	f7fe fbe8 	bl	800159e <LCD_Draw_Num>
			  LCD_Draw_Num(82, 80, num[hr%10]);
 8002dce:	7dfa      	ldrb	r2, [r7, #23]
 8002dd0:	4b73      	ldr	r3, [pc, #460]	; (8002fa0 <SetTimePage+0x324>)
 8002dd2:	fba3 1302 	umull	r1, r3, r3, r2
 8002dd6:	08d9      	lsrs	r1, r3, #3
 8002dd8:	460b      	mov	r3, r1
 8002dda:	009b      	lsls	r3, r3, #2
 8002ddc:	440b      	add	r3, r1
 8002dde:	005b      	lsls	r3, r3, #1
 8002de0:	1ad3      	subs	r3, r2, r3
 8002de2:	b2db      	uxtb	r3, r3
 8002de4:	461a      	mov	r2, r3
 8002de6:	4613      	mov	r3, r2
 8002de8:	005b      	lsls	r3, r3, #1
 8002dea:	4413      	add	r3, r2
 8002dec:	015b      	lsls	r3, r3, #5
 8002dee:	4a67      	ldr	r2, [pc, #412]	; (8002f8c <SetTimePage+0x310>)
 8002df0:	4413      	add	r3, r2
 8002df2:	461a      	mov	r2, r3
 8002df4:	2150      	movs	r1, #80	; 0x50
 8002df6:	2052      	movs	r0, #82	; 0x52
 8002df8:	f7fe fbd1 	bl	800159e <LCD_Draw_Num>
			  LCD_Draw_Num(108, 80, num[10]);
 8002dfc:	4a64      	ldr	r2, [pc, #400]	; (8002f90 <SetTimePage+0x314>)
 8002dfe:	2150      	movs	r1, #80	; 0x50
 8002e00:	206c      	movs	r0, #108	; 0x6c
 8002e02:	f7fe fbcc 	bl	800159e <LCD_Draw_Num>
			  LCD_Draw_Num(134, 80, num[min/10]);
 8002e06:	7dbb      	ldrb	r3, [r7, #22]
 8002e08:	4a65      	ldr	r2, [pc, #404]	; (8002fa0 <SetTimePage+0x324>)
 8002e0a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e0e:	08db      	lsrs	r3, r3, #3
 8002e10:	b2db      	uxtb	r3, r3
 8002e12:	461a      	mov	r2, r3
 8002e14:	4613      	mov	r3, r2
 8002e16:	005b      	lsls	r3, r3, #1
 8002e18:	4413      	add	r3, r2
 8002e1a:	015b      	lsls	r3, r3, #5
 8002e1c:	4a5b      	ldr	r2, [pc, #364]	; (8002f8c <SetTimePage+0x310>)
 8002e1e:	4413      	add	r3, r2
 8002e20:	461a      	mov	r2, r3
 8002e22:	2150      	movs	r1, #80	; 0x50
 8002e24:	2086      	movs	r0, #134	; 0x86
 8002e26:	f7fe fbba 	bl	800159e <LCD_Draw_Num>
			  LCD_Draw_Num(168, 80, num[min%10]);
 8002e2a:	7dba      	ldrb	r2, [r7, #22]
 8002e2c:	4b5c      	ldr	r3, [pc, #368]	; (8002fa0 <SetTimePage+0x324>)
 8002e2e:	fba3 1302 	umull	r1, r3, r3, r2
 8002e32:	08d9      	lsrs	r1, r3, #3
 8002e34:	460b      	mov	r3, r1
 8002e36:	009b      	lsls	r3, r3, #2
 8002e38:	440b      	add	r3, r1
 8002e3a:	005b      	lsls	r3, r3, #1
 8002e3c:	1ad3      	subs	r3, r2, r3
 8002e3e:	b2db      	uxtb	r3, r3
 8002e40:	461a      	mov	r2, r3
 8002e42:	4613      	mov	r3, r2
 8002e44:	005b      	lsls	r3, r3, #1
 8002e46:	4413      	add	r3, r2
 8002e48:	015b      	lsls	r3, r3, #5
 8002e4a:	4a50      	ldr	r2, [pc, #320]	; (8002f8c <SetTimePage+0x310>)
 8002e4c:	4413      	add	r3, r2
 8002e4e:	461a      	mov	r2, r3
 8002e50:	2150      	movs	r1, #80	; 0x50
 8002e52:	20a8      	movs	r0, #168	; 0xa8
 8002e54:	f7fe fba3 	bl	800159e <LCD_Draw_Num>
			  HAL_Delay(100);
 8002e58:	2064      	movs	r0, #100	; 0x64
 8002e5a:	f000 ff6b 	bl	8003d34 <HAL_Delay>

			  if(touchpt.x <= 130 && touchpt.x >= 115 && touchpt.y <= 85 && touchpt.y >= 60) hr2 += 1;
 8002e5e:	8a3b      	ldrh	r3, [r7, #16]
 8002e60:	2b82      	cmp	r3, #130	; 0x82
 8002e62:	d80c      	bhi.n	8002e7e <SetTimePage+0x202>
 8002e64:	8a3b      	ldrh	r3, [r7, #16]
 8002e66:	2b72      	cmp	r3, #114	; 0x72
 8002e68:	d909      	bls.n	8002e7e <SetTimePage+0x202>
 8002e6a:	8a7b      	ldrh	r3, [r7, #18]
 8002e6c:	2b55      	cmp	r3, #85	; 0x55
 8002e6e:	d806      	bhi.n	8002e7e <SetTimePage+0x202>
 8002e70:	8a7b      	ldrh	r3, [r7, #18]
 8002e72:	2b3b      	cmp	r3, #59	; 0x3b
 8002e74:	d903      	bls.n	8002e7e <SetTimePage+0x202>
 8002e76:	7d7b      	ldrb	r3, [r7, #21]
 8002e78:	3301      	adds	r3, #1
 8002e7a:	757b      	strb	r3, [r7, #21]
 8002e7c:	e00e      	b.n	8002e9c <SetTimePage+0x220>
			  else if (touchpt.x <= 90 && touchpt.x >= 65 && touchpt.y <= 180 && touchpt.y >= 145) min2 += 1;
 8002e7e:	8a3b      	ldrh	r3, [r7, #16]
 8002e80:	2b5a      	cmp	r3, #90	; 0x5a
 8002e82:	d80b      	bhi.n	8002e9c <SetTimePage+0x220>
 8002e84:	8a3b      	ldrh	r3, [r7, #16]
 8002e86:	2b40      	cmp	r3, #64	; 0x40
 8002e88:	d908      	bls.n	8002e9c <SetTimePage+0x220>
 8002e8a:	8a7b      	ldrh	r3, [r7, #18]
 8002e8c:	2bb4      	cmp	r3, #180	; 0xb4
 8002e8e:	d805      	bhi.n	8002e9c <SetTimePage+0x220>
 8002e90:	8a7b      	ldrh	r3, [r7, #18]
 8002e92:	2b90      	cmp	r3, #144	; 0x90
 8002e94:	d902      	bls.n	8002e9c <SetTimePage+0x220>
 8002e96:	7d3b      	ldrb	r3, [r7, #20]
 8002e98:	3301      	adds	r3, #1
 8002e9a:	753b      	strb	r3, [r7, #20]
			  if(hr2 == 24) hr2 = 0;
 8002e9c:	7d7b      	ldrb	r3, [r7, #21]
 8002e9e:	2b18      	cmp	r3, #24
 8002ea0:	d101      	bne.n	8002ea6 <SetTimePage+0x22a>
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	757b      	strb	r3, [r7, #21]
			  if(min2 == 60) min2 = 0;
 8002ea6:	7d3b      	ldrb	r3, [r7, #20]
 8002ea8:	2b3c      	cmp	r3, #60	; 0x3c
 8002eaa:	d101      	bne.n	8002eb0 <SetTimePage+0x234>
 8002eac:	2300      	movs	r3, #0
 8002eae:	753b      	strb	r3, [r7, #20]
			  LCD_Draw_Num(48, 185, num[hr2/10]);
 8002eb0:	7d7b      	ldrb	r3, [r7, #21]
 8002eb2:	4a3b      	ldr	r2, [pc, #236]	; (8002fa0 <SetTimePage+0x324>)
 8002eb4:	fba2 2303 	umull	r2, r3, r2, r3
 8002eb8:	08db      	lsrs	r3, r3, #3
 8002eba:	b2db      	uxtb	r3, r3
 8002ebc:	461a      	mov	r2, r3
 8002ebe:	4613      	mov	r3, r2
 8002ec0:	005b      	lsls	r3, r3, #1
 8002ec2:	4413      	add	r3, r2
 8002ec4:	015b      	lsls	r3, r3, #5
 8002ec6:	4a31      	ldr	r2, [pc, #196]	; (8002f8c <SetTimePage+0x310>)
 8002ec8:	4413      	add	r3, r2
 8002eca:	461a      	mov	r2, r3
 8002ecc:	21b9      	movs	r1, #185	; 0xb9
 8002ece:	2030      	movs	r0, #48	; 0x30
 8002ed0:	f7fe fb65 	bl	800159e <LCD_Draw_Num>
			  LCD_Draw_Num(82, 185, num[hr2%10]);
 8002ed4:	7d7a      	ldrb	r2, [r7, #21]
 8002ed6:	4b32      	ldr	r3, [pc, #200]	; (8002fa0 <SetTimePage+0x324>)
 8002ed8:	fba3 1302 	umull	r1, r3, r3, r2
 8002edc:	08d9      	lsrs	r1, r3, #3
 8002ede:	460b      	mov	r3, r1
 8002ee0:	009b      	lsls	r3, r3, #2
 8002ee2:	440b      	add	r3, r1
 8002ee4:	005b      	lsls	r3, r3, #1
 8002ee6:	1ad3      	subs	r3, r2, r3
 8002ee8:	b2db      	uxtb	r3, r3
 8002eea:	461a      	mov	r2, r3
 8002eec:	4613      	mov	r3, r2
 8002eee:	005b      	lsls	r3, r3, #1
 8002ef0:	4413      	add	r3, r2
 8002ef2:	015b      	lsls	r3, r3, #5
 8002ef4:	4a25      	ldr	r2, [pc, #148]	; (8002f8c <SetTimePage+0x310>)
 8002ef6:	4413      	add	r3, r2
 8002ef8:	461a      	mov	r2, r3
 8002efa:	21b9      	movs	r1, #185	; 0xb9
 8002efc:	2052      	movs	r0, #82	; 0x52
 8002efe:	f7fe fb4e 	bl	800159e <LCD_Draw_Num>
			  LCD_Draw_Num(108, 185, num[10]);
 8002f02:	4a23      	ldr	r2, [pc, #140]	; (8002f90 <SetTimePage+0x314>)
 8002f04:	21b9      	movs	r1, #185	; 0xb9
 8002f06:	206c      	movs	r0, #108	; 0x6c
 8002f08:	f7fe fb49 	bl	800159e <LCD_Draw_Num>
			  LCD_Draw_Num(134, 185, num[min2/10]);
 8002f0c:	7d3b      	ldrb	r3, [r7, #20]
 8002f0e:	4a24      	ldr	r2, [pc, #144]	; (8002fa0 <SetTimePage+0x324>)
 8002f10:	fba2 2303 	umull	r2, r3, r2, r3
 8002f14:	08db      	lsrs	r3, r3, #3
 8002f16:	b2db      	uxtb	r3, r3
 8002f18:	461a      	mov	r2, r3
 8002f1a:	4613      	mov	r3, r2
 8002f1c:	005b      	lsls	r3, r3, #1
 8002f1e:	4413      	add	r3, r2
 8002f20:	015b      	lsls	r3, r3, #5
 8002f22:	4a1a      	ldr	r2, [pc, #104]	; (8002f8c <SetTimePage+0x310>)
 8002f24:	4413      	add	r3, r2
 8002f26:	461a      	mov	r2, r3
 8002f28:	21b9      	movs	r1, #185	; 0xb9
 8002f2a:	2086      	movs	r0, #134	; 0x86
 8002f2c:	f7fe fb37 	bl	800159e <LCD_Draw_Num>
			  LCD_Draw_Num(168, 185, num[min2%10]);
 8002f30:	7d3a      	ldrb	r2, [r7, #20]
 8002f32:	4b1b      	ldr	r3, [pc, #108]	; (8002fa0 <SetTimePage+0x324>)
 8002f34:	fba3 1302 	umull	r1, r3, r3, r2
 8002f38:	08d9      	lsrs	r1, r3, #3
 8002f3a:	460b      	mov	r3, r1
 8002f3c:	009b      	lsls	r3, r3, #2
 8002f3e:	440b      	add	r3, r1
 8002f40:	005b      	lsls	r3, r3, #1
 8002f42:	1ad3      	subs	r3, r2, r3
 8002f44:	b2db      	uxtb	r3, r3
 8002f46:	461a      	mov	r2, r3
 8002f48:	4613      	mov	r3, r2
 8002f4a:	005b      	lsls	r3, r3, #1
 8002f4c:	4413      	add	r3, r2
 8002f4e:	015b      	lsls	r3, r3, #5
 8002f50:	4a0e      	ldr	r2, [pc, #56]	; (8002f8c <SetTimePage+0x310>)
 8002f52:	4413      	add	r3, r2
 8002f54:	461a      	mov	r2, r3
 8002f56:	21b9      	movs	r1, #185	; 0xb9
 8002f58:	20a8      	movs	r0, #168	; 0xa8
 8002f5a:	f7fe fb20 	bl	800159e <LCD_Draw_Num>
			  HAL_Delay(100);
 8002f5e:	2064      	movs	r0, #100	; 0x64
 8002f60:	f000 fee8 	bl	8003d34 <HAL_Delay>

			  XPT2046_Get_TouchedPoint(&touchpt, &strXPT2046_TouchPara);
 8002f64:	f107 0310 	add.w	r3, r7, #16
 8002f68:	490c      	ldr	r1, [pc, #48]	; (8002f9c <SetTimePage+0x320>)
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	f000 fdd2 	bl	8003b14 <XPT2046_Get_TouchedPoint>
			  if(touchpt.x >= 290 && touchpt.y<=80) break;
 8002f70:	8a3b      	ldrh	r3, [r7, #16]
 8002f72:	f5b3 7f91 	cmp.w	r3, #290	; 0x122
 8002f76:	f4ff aee7 	bcc.w	8002d48 <SetTimePage+0xcc>
 8002f7a:	8a7b      	ldrh	r3, [r7, #18]
 8002f7c:	2b50      	cmp	r3, #80	; 0x50
 8002f7e:	d911      	bls.n	8002fa4 <SetTimePage+0x328>
			  XPT2046_Get_TouchedPoint(&touchpt, &strXPT2046_TouchPara);
 8002f80:	e6e2      	b.n	8002d48 <SetTimePage+0xcc>
 8002f82:	bf00      	nop
 8002f84:	08007370 	.word	0x08007370
 8002f88:	08007378 	.word	0x08007378
 8002f8c:	08007a2c 	.word	0x08007a2c
 8002f90:	08007dec 	.word	0x08007dec
 8002f94:	08007394 	.word	0x08007394
 8002f98:	08007358 	.word	0x08007358
 8002f9c:	200000a0 	.word	0x200000a0
 8002fa0:	cccccccd 	.word	0xcccccccd
			  if(touchpt.x >= 290 && touchpt.y<=80) break;
 8002fa4:	bf00      	nop
//			  sprintf(touch_x, "%03d", touchpt.x);
//			  sprintf(touch_y, "%03d", touchpt.y);
//			  LCD_DrawString(20, 200, touch_x);
//			  LCD_DrawString(200, 200, touch_y);
			}
		    LCD_Clear(0, 0, 240, 320, 0xffff);
 8002fa6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002faa:	9300      	str	r3, [sp, #0]
 8002fac:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8002fb0:	22f0      	movs	r2, #240	; 0xf0
 8002fb2:	2100      	movs	r1, #0
 8002fb4:	2000      	movs	r0, #0
 8002fb6:	f7fe f98a 	bl	80012ce <LCD_Clear>
			sprintf(watering_time, "%d%d:%d%d", hr/10, hr%10, min/10, min%10);
 8002fba:	7dfb      	ldrb	r3, [r7, #23]
 8002fbc:	4a33      	ldr	r2, [pc, #204]	; (800308c <SetTimePage+0x410>)
 8002fbe:	fba2 2303 	umull	r2, r3, r2, r3
 8002fc2:	08db      	lsrs	r3, r3, #3
 8002fc4:	b2db      	uxtb	r3, r3
 8002fc6:	461c      	mov	r4, r3
 8002fc8:	7dfa      	ldrb	r2, [r7, #23]
 8002fca:	4b30      	ldr	r3, [pc, #192]	; (800308c <SetTimePage+0x410>)
 8002fcc:	fba3 1302 	umull	r1, r3, r3, r2
 8002fd0:	08d9      	lsrs	r1, r3, #3
 8002fd2:	460b      	mov	r3, r1
 8002fd4:	009b      	lsls	r3, r3, #2
 8002fd6:	440b      	add	r3, r1
 8002fd8:	005b      	lsls	r3, r3, #1
 8002fda:	1ad3      	subs	r3, r2, r3
 8002fdc:	b2db      	uxtb	r3, r3
 8002fde:	461d      	mov	r5, r3
 8002fe0:	7dbb      	ldrb	r3, [r7, #22]
 8002fe2:	4a2a      	ldr	r2, [pc, #168]	; (800308c <SetTimePage+0x410>)
 8002fe4:	fba2 2303 	umull	r2, r3, r2, r3
 8002fe8:	08db      	lsrs	r3, r3, #3
 8002fea:	b2db      	uxtb	r3, r3
 8002fec:	4618      	mov	r0, r3
 8002fee:	7dba      	ldrb	r2, [r7, #22]
 8002ff0:	4b26      	ldr	r3, [pc, #152]	; (800308c <SetTimePage+0x410>)
 8002ff2:	fba3 1302 	umull	r1, r3, r3, r2
 8002ff6:	08d9      	lsrs	r1, r3, #3
 8002ff8:	460b      	mov	r3, r1
 8002ffa:	009b      	lsls	r3, r3, #2
 8002ffc:	440b      	add	r3, r1
 8002ffe:	005b      	lsls	r3, r3, #1
 8003000:	1ad3      	subs	r3, r2, r3
 8003002:	b2db      	uxtb	r3, r3
 8003004:	9301      	str	r3, [sp, #4]
 8003006:	9000      	str	r0, [sp, #0]
 8003008:	462b      	mov	r3, r5
 800300a:	4622      	mov	r2, r4
 800300c:	4920      	ldr	r1, [pc, #128]	; (8003090 <SetTimePage+0x414>)
 800300e:	6878      	ldr	r0, [r7, #4]
 8003010:	f003 fcb4 	bl	800697c <siprintf>
			sprintf(watering_time2, "%d%d:%d%d", hr2/10, hr2%10, min2/10, min2%10);
 8003014:	7d7b      	ldrb	r3, [r7, #21]
 8003016:	4a1d      	ldr	r2, [pc, #116]	; (800308c <SetTimePage+0x410>)
 8003018:	fba2 2303 	umull	r2, r3, r2, r3
 800301c:	08db      	lsrs	r3, r3, #3
 800301e:	b2db      	uxtb	r3, r3
 8003020:	461c      	mov	r4, r3
 8003022:	7d7a      	ldrb	r2, [r7, #21]
 8003024:	4b19      	ldr	r3, [pc, #100]	; (800308c <SetTimePage+0x410>)
 8003026:	fba3 1302 	umull	r1, r3, r3, r2
 800302a:	08d9      	lsrs	r1, r3, #3
 800302c:	460b      	mov	r3, r1
 800302e:	009b      	lsls	r3, r3, #2
 8003030:	440b      	add	r3, r1
 8003032:	005b      	lsls	r3, r3, #1
 8003034:	1ad3      	subs	r3, r2, r3
 8003036:	b2db      	uxtb	r3, r3
 8003038:	461d      	mov	r5, r3
 800303a:	7d3b      	ldrb	r3, [r7, #20]
 800303c:	4a13      	ldr	r2, [pc, #76]	; (800308c <SetTimePage+0x410>)
 800303e:	fba2 2303 	umull	r2, r3, r2, r3
 8003042:	08db      	lsrs	r3, r3, #3
 8003044:	b2db      	uxtb	r3, r3
 8003046:	4618      	mov	r0, r3
 8003048:	7d3a      	ldrb	r2, [r7, #20]
 800304a:	4b10      	ldr	r3, [pc, #64]	; (800308c <SetTimePage+0x410>)
 800304c:	fba3 1302 	umull	r1, r3, r3, r2
 8003050:	08d9      	lsrs	r1, r3, #3
 8003052:	460b      	mov	r3, r1
 8003054:	009b      	lsls	r3, r3, #2
 8003056:	440b      	add	r3, r1
 8003058:	005b      	lsls	r3, r3, #1
 800305a:	1ad3      	subs	r3, r2, r3
 800305c:	b2db      	uxtb	r3, r3
 800305e:	9301      	str	r3, [sp, #4]
 8003060:	9000      	str	r0, [sp, #0]
 8003062:	462b      	mov	r3, r5
 8003064:	4622      	mov	r2, r4
 8003066:	490a      	ldr	r1, [pc, #40]	; (8003090 <SetTimePage+0x414>)
 8003068:	6838      	ldr	r0, [r7, #0]
 800306a:	f003 fc87 	bl	800697c <siprintf>
	LCD_Clear(0, 0, 240, 320, 0xffff);
 800306e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003072:	9300      	str	r3, [sp, #0]
 8003074:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8003078:	22f0      	movs	r2, #240	; 0xf0
 800307a:	2100      	movs	r1, #0
 800307c:	2000      	movs	r0, #0
 800307e:	f7fe f926 	bl	80012ce <LCD_Clear>
}
 8003082:	bf00      	nop
 8003084:	3718      	adds	r7, #24
 8003086:	46bd      	mov	sp, r7
 8003088:	bdb0      	pop	{r4, r5, r7, pc}
 800308a:	bf00      	nop
 800308c:	cccccccd 	.word	0xcccccccd
 8003090:	080073b0 	.word	0x080073b0

08003094 <RecordsPage>:

void RecordsPage(char records[10][3][8], uint8_t count){
 8003094:	b580      	push	{r7, lr}
 8003096:	b08c      	sub	sp, #48	; 0x30
 8003098:	af02      	add	r7, sp, #8
 800309a:	6078      	str	r0, [r7, #4]
 800309c:	460b      	mov	r3, r1
 800309e:	70fb      	strb	r3, [r7, #3]
	strType_XPT2046_Coordinate touchpt;
	LCD_Clear(0, 0, 240, 320, 0xffff);
 80030a0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80030a4:	9300      	str	r3, [sp, #0]
 80030a6:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80030aa:	22f0      	movs	r2, #240	; 0xf0
 80030ac:	2100      	movs	r1, #0
 80030ae:	2000      	movs	r0, #0
 80030b0:	f7fe f90d 	bl	80012ce <LCD_Clear>
	LCD_DrawString(10, 10, "Home");
 80030b4:	4a79      	ldr	r2, [pc, #484]	; (800329c <RecordsPage+0x208>)
 80030b6:	210a      	movs	r1, #10
 80030b8:	200a      	movs	r0, #10
 80030ba:	f7fe f9f7 	bl	80014ac <LCD_DrawString>
	LCD_DrawLine(0, 30 ,240, 30, 0x0);
 80030be:	2300      	movs	r3, #0
 80030c0:	9300      	str	r3, [sp, #0]
 80030c2:	231e      	movs	r3, #30
 80030c4:	22f0      	movs	r2, #240	; 0xf0
 80030c6:	211e      	movs	r1, #30
 80030c8:	2000      	movs	r0, #0
 80030ca:	f7fe f923 	bl	8001314 <LCD_DrawLine>

	LCD_DrawLine(20, 50 ,220, 50, 0x0);
 80030ce:	2300      	movs	r3, #0
 80030d0:	9300      	str	r3, [sp, #0]
 80030d2:	2332      	movs	r3, #50	; 0x32
 80030d4:	22dc      	movs	r2, #220	; 0xdc
 80030d6:	2132      	movs	r1, #50	; 0x32
 80030d8:	2014      	movs	r0, #20
 80030da:	f7fe f91b 	bl	8001314 <LCD_DrawLine>
	LCD_DrawLine(20, 300,220, 300, 0x0);
 80030de:	2300      	movs	r3, #0
 80030e0:	9300      	str	r3, [sp, #0]
 80030e2:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80030e6:	22dc      	movs	r2, #220	; 0xdc
 80030e8:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80030ec:	2014      	movs	r0, #20
 80030ee:	f7fe f911 	bl	8001314 <LCD_DrawLine>

	LCD_DrawString(21, 52, "Time:");
 80030f2:	4a6b      	ldr	r2, [pc, #428]	; (80032a0 <RecordsPage+0x20c>)
 80030f4:	2134      	movs	r1, #52	; 0x34
 80030f6:	2015      	movs	r0, #21
 80030f8:	f7fe f9d8 	bl	80014ac <LCD_DrawString>
    LCD_Draw_24sqr(101, 52, temperature);
 80030fc:	4a69      	ldr	r2, [pc, #420]	; (80032a4 <RecordsPage+0x210>)
 80030fe:	2134      	movs	r1, #52	; 0x34
 8003100:	2065      	movs	r0, #101	; 0x65
 8003102:	f7fe fa89 	bl	8001618 <LCD_Draw_24sqr>
	LCD_Draw_24sqr(161, 52, dew);
 8003106:	4a68      	ldr	r2, [pc, #416]	; (80032a8 <RecordsPage+0x214>)
 8003108:	2134      	movs	r1, #52	; 0x34
 800310a:	20a1      	movs	r0, #161	; 0xa1
 800310c:	f7fe fa84 	bl	8001618 <LCD_Draw_24sqr>
	LCD_DrawLine(20, 80, 220, 80, 0);
 8003110:	2300      	movs	r3, #0
 8003112:	9300      	str	r3, [sp, #0]
 8003114:	2350      	movs	r3, #80	; 0x50
 8003116:	22dc      	movs	r2, #220	; 0xdc
 8003118:	2150      	movs	r1, #80	; 0x50
 800311a:	2014      	movs	r0, #20
 800311c:	f7fe f8fa 	bl	8001314 <LCD_DrawLine>

	LCD_DrawLine(100, 50 ,100, 300, 0x0);
 8003120:	2300      	movs	r3, #0
 8003122:	9300      	str	r3, [sp, #0]
 8003124:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8003128:	2264      	movs	r2, #100	; 0x64
 800312a:	2132      	movs	r1, #50	; 0x32
 800312c:	2064      	movs	r0, #100	; 0x64
 800312e:	f7fe f8f1 	bl	8001314 <LCD_DrawLine>
	LCD_DrawLine(160, 50 ,160, 300, 0x0);
 8003132:	2300      	movs	r3, #0
 8003134:	9300      	str	r3, [sp, #0]
 8003136:	f44f 7396 	mov.w	r3, #300	; 0x12c
 800313a:	22a0      	movs	r2, #160	; 0xa0
 800313c:	2132      	movs	r1, #50	; 0x32
 800313e:	20a0      	movs	r0, #160	; 0xa0
 8003140:	f7fe f8e8 	bl	8001314 <LCD_DrawLine>
	LCD_DrawLine(20, 50 ,20, 300, 0x0);
 8003144:	2300      	movs	r3, #0
 8003146:	9300      	str	r3, [sp, #0]
 8003148:	f44f 7396 	mov.w	r3, #300	; 0x12c
 800314c:	2214      	movs	r2, #20
 800314e:	2132      	movs	r1, #50	; 0x32
 8003150:	2014      	movs	r0, #20
 8003152:	f7fe f8df 	bl	8001314 <LCD_DrawLine>
	LCD_DrawLine(220, 50 ,220, 300, 0x0);
 8003156:	2300      	movs	r3, #0
 8003158:	9300      	str	r3, [sp, #0]
 800315a:	f44f 7396 	mov.w	r3, #300	; 0x12c
 800315e:	22dc      	movs	r2, #220	; 0xdc
 8003160:	2132      	movs	r1, #50	; 0x32
 8003162:	20dc      	movs	r0, #220	; 0xdc
 8003164:	f7fe f8d6 	bl	8001314 <LCD_DrawLine>

	uint8_t i = 0, l = count;
 8003168:	2300      	movs	r3, #0
 800316a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800316e:	78fb      	ldrb	r3, [r7, #3]
 8003170:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	char p [8], t[8], h[8];
	if(count>=10) l = 10;
 8003174:	78fb      	ldrb	r3, [r7, #3]
 8003176:	2b09      	cmp	r3, #9
 8003178:	d902      	bls.n	8003180 <RecordsPage+0xec>
 800317a:	230a      	movs	r3, #10
 800317c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	for(i = 0; i<l; i++){
 8003180:	2300      	movs	r3, #0
 8003182:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003186:	e066      	b.n	8003256 <RecordsPage+0x1c2>
		strcpy(p, records[i][0]);
 8003188:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800318c:	4613      	mov	r3, r2
 800318e:	005b      	lsls	r3, r3, #1
 8003190:	4413      	add	r3, r2
 8003192:	00db      	lsls	r3, r3, #3
 8003194:	461a      	mov	r2, r3
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	4413      	add	r3, r2
 800319a:	461a      	mov	r2, r3
 800319c:	f107 0318 	add.w	r3, r7, #24
 80031a0:	4611      	mov	r1, r2
 80031a2:	4618      	mov	r0, r3
 80031a4:	f003 fc0a 	bl	80069bc <strcpy>
		LCD_DrawString(21, 81+20*i, p);
 80031a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80031ac:	b29b      	uxth	r3, r3
 80031ae:	461a      	mov	r2, r3
 80031b0:	0092      	lsls	r2, r2, #2
 80031b2:	4413      	add	r3, r2
 80031b4:	009b      	lsls	r3, r3, #2
 80031b6:	b29b      	uxth	r3, r3
 80031b8:	3351      	adds	r3, #81	; 0x51
 80031ba:	b29b      	uxth	r3, r3
 80031bc:	f107 0218 	add.w	r2, r7, #24
 80031c0:	4619      	mov	r1, r3
 80031c2:	2015      	movs	r0, #21
 80031c4:	f7fe f972 	bl	80014ac <LCD_DrawString>
		strcpy(t, records[i][1]);
 80031c8:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80031cc:	4613      	mov	r3, r2
 80031ce:	005b      	lsls	r3, r3, #1
 80031d0:	4413      	add	r3, r2
 80031d2:	00db      	lsls	r3, r3, #3
 80031d4:	461a      	mov	r2, r3
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	4413      	add	r3, r2
 80031da:	f103 0208 	add.w	r2, r3, #8
 80031de:	f107 0310 	add.w	r3, r7, #16
 80031e2:	4611      	mov	r1, r2
 80031e4:	4618      	mov	r0, r3
 80031e6:	f003 fbe9 	bl	80069bc <strcpy>
		LCD_DrawString(101, 81+20*i, t);
 80031ea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80031ee:	b29b      	uxth	r3, r3
 80031f0:	461a      	mov	r2, r3
 80031f2:	0092      	lsls	r2, r2, #2
 80031f4:	4413      	add	r3, r2
 80031f6:	009b      	lsls	r3, r3, #2
 80031f8:	b29b      	uxth	r3, r3
 80031fa:	3351      	adds	r3, #81	; 0x51
 80031fc:	b29b      	uxth	r3, r3
 80031fe:	f107 0210 	add.w	r2, r7, #16
 8003202:	4619      	mov	r1, r3
 8003204:	2065      	movs	r0, #101	; 0x65
 8003206:	f7fe f951 	bl	80014ac <LCD_DrawString>
		strcpy(h, records[i][2]);
 800320a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800320e:	4613      	mov	r3, r2
 8003210:	005b      	lsls	r3, r3, #1
 8003212:	4413      	add	r3, r2
 8003214:	00db      	lsls	r3, r3, #3
 8003216:	461a      	mov	r2, r3
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	4413      	add	r3, r2
 800321c:	f103 0210 	add.w	r2, r3, #16
 8003220:	f107 0308 	add.w	r3, r7, #8
 8003224:	4611      	mov	r1, r2
 8003226:	4618      	mov	r0, r3
 8003228:	f003 fbc8 	bl	80069bc <strcpy>
		LCD_DrawString(161, 81+20*i, h);
 800322c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003230:	b29b      	uxth	r3, r3
 8003232:	461a      	mov	r2, r3
 8003234:	0092      	lsls	r2, r2, #2
 8003236:	4413      	add	r3, r2
 8003238:	009b      	lsls	r3, r3, #2
 800323a:	b29b      	uxth	r3, r3
 800323c:	3351      	adds	r3, #81	; 0x51
 800323e:	b29b      	uxth	r3, r3
 8003240:	f107 0208 	add.w	r2, r7, #8
 8003244:	4619      	mov	r1, r3
 8003246:	20a1      	movs	r0, #161	; 0xa1
 8003248:	f7fe f930 	bl	80014ac <LCD_DrawString>
	for(i = 0; i<l; i++){
 800324c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003250:	3301      	adds	r3, #1
 8003252:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003256:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800325a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800325e:	429a      	cmp	r2, r3
 8003260:	d392      	bcc.n	8003188 <RecordsPage+0xf4>
	}

	while(1){
	  XPT2046_Get_TouchedPoint(&touchpt, &strXPT2046_TouchPara);
 8003262:	f107 0320 	add.w	r3, r7, #32
 8003266:	4911      	ldr	r1, [pc, #68]	; (80032ac <RecordsPage+0x218>)
 8003268:	4618      	mov	r0, r3
 800326a:	f000 fc53 	bl	8003b14 <XPT2046_Get_TouchedPoint>
	  if(touchpt.x >= 290 && touchpt.y<=80) break;
 800326e:	8c3b      	ldrh	r3, [r7, #32]
 8003270:	f5b3 7f91 	cmp.w	r3, #290	; 0x122
 8003274:	d3f5      	bcc.n	8003262 <RecordsPage+0x1ce>
 8003276:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003278:	2b50      	cmp	r3, #80	; 0x50
 800327a:	d900      	bls.n	800327e <RecordsPage+0x1ea>
	  XPT2046_Get_TouchedPoint(&touchpt, &strXPT2046_TouchPara);
 800327c:	e7f1      	b.n	8003262 <RecordsPage+0x1ce>
	  if(touchpt.x >= 290 && touchpt.y<=80) break;
 800327e:	bf00      	nop
	}
	LCD_Clear(0, 0, 240, 320, 0xffff);
 8003280:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003284:	9300      	str	r3, [sp, #0]
 8003286:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800328a:	22f0      	movs	r2, #240	; 0xf0
 800328c:	2100      	movs	r1, #0
 800328e:	2000      	movs	r0, #0
 8003290:	f7fe f81d 	bl	80012ce <LCD_Clear>

}
 8003294:	bf00      	nop
 8003296:	3728      	adds	r7, #40	; 0x28
 8003298:	46bd      	mov	sp, r7
 800329a:	bd80      	pop	{r7, pc}
 800329c:	08007370 	.word	0x08007370
 80032a0:	080073bc 	.word	0x080073bc
 80032a4:	08007e94 	.word	0x08007e94
 80032a8:	08007e4c 	.word	0x08007e4c
 80032ac:	200000a0 	.word	0x200000a0

080032b0 <ImgPage>:


void ImgPage(uint8_t Ov7725_vsync){
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b086      	sub	sp, #24
 80032b4:	af02      	add	r7, sp, #8
 80032b6:	4603      	mov	r3, r0
 80032b8:	71fb      	strb	r3, [r7, #7]
	strType_XPT2046_Coordinate touchpt;
	LCD_DrawString(10, 10, "ewfbiuewbgiuw");
 80032ba:	4a23      	ldr	r2, [pc, #140]	; (8003348 <ImgPage+0x98>)
 80032bc:	210a      	movs	r1, #10
 80032be:	200a      	movs	r0, #10
 80032c0:	f7fe f8f4 	bl	80014ac <LCD_DrawString>
	while(1){
	  XPT2046_Get_TouchedPoint(&touchpt, &strXPT2046_TouchPara);
 80032c4:	f107 030c 	add.w	r3, r7, #12
 80032c8:	4920      	ldr	r1, [pc, #128]	; (800334c <ImgPage+0x9c>)
 80032ca:	4618      	mov	r0, r3
 80032cc:	f000 fc22 	bl	8003b14 <XPT2046_Get_TouchedPoint>
	  if(touchpt.x >= 290 && touchpt.y<=80) break;
 80032d0:	89bb      	ldrh	r3, [r7, #12]
 80032d2:	f5b3 7f91 	cmp.w	r3, #290	; 0x122
 80032d6:	d302      	bcc.n	80032de <ImgPage+0x2e>
 80032d8:	89fb      	ldrh	r3, [r7, #14]
 80032da:	2b50      	cmp	r3, #80	; 0x50
 80032dc:	d924      	bls.n	8003328 <ImgPage+0x78>
		if (Ov7725_vsync == 2)
 80032de:	79fb      	ldrb	r3, [r7, #7]
 80032e0:	2b02      	cmp	r3, #2
 80032e2:	d1ef      	bne.n	80032c4 <ImgPage+0x14>
			{
				FIFO_PREPARE;
 80032e4:	4b1a      	ldr	r3, [pc, #104]	; (8003350 <ImgPage+0xa0>)
 80032e6:	2204      	movs	r2, #4
 80032e8:	615a      	str	r2, [r3, #20]
 80032ea:	4b1a      	ldr	r3, [pc, #104]	; (8003354 <ImgPage+0xa4>)
 80032ec:	2220      	movs	r2, #32
 80032ee:	615a      	str	r2, [r3, #20]
 80032f0:	4b18      	ldr	r3, [pc, #96]	; (8003354 <ImgPage+0xa4>)
 80032f2:	2220      	movs	r2, #32
 80032f4:	611a      	str	r2, [r3, #16]
 80032f6:	4b16      	ldr	r3, [pc, #88]	; (8003350 <ImgPage+0xa0>)
 80032f8:	2204      	movs	r2, #4
 80032fa:	611a      	str	r2, [r3, #16]
 80032fc:	4b15      	ldr	r3, [pc, #84]	; (8003354 <ImgPage+0xa4>)
 80032fe:	2220      	movs	r2, #32
 8003300:	615a      	str	r2, [r3, #20]
 8003302:	4b14      	ldr	r3, [pc, #80]	; (8003354 <ImgPage+0xa4>)
 8003304:	2220      	movs	r2, #32
 8003306:	611a      	str	r2, [r3, #16]
				ImagDisp();
 8003308:	f7fd fbf8 	bl	8000afc <ImagDisp>
				Ov7725_vsync = 0;
 800330c:	2300      	movs	r3, #0
 800330e:	71fb      	strb	r3, [r7, #7]
				HAL_Delay(2000);
 8003310:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8003314:	f000 fd0e 	bl	8003d34 <HAL_Delay>
				LCD_INIT();
 8003318:	f7fd fdde 	bl	8000ed8 <LCD_INIT>
				LCD_DrawString(10, 10, "Home");
 800331c:	4a0e      	ldr	r2, [pc, #56]	; (8003358 <ImgPage+0xa8>)
 800331e:	210a      	movs	r1, #10
 8003320:	200a      	movs	r0, #10
 8003322:	f7fe f8c3 	bl	80014ac <LCD_DrawString>
	  XPT2046_Get_TouchedPoint(&touchpt, &strXPT2046_TouchPara);
 8003326:	e7cd      	b.n	80032c4 <ImgPage+0x14>
	  if(touchpt.x >= 290 && touchpt.y<=80) break;
 8003328:	bf00      	nop
	    }
	}
	LCD_Clear(0, 0, 240, 320, 0xffff);
 800332a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800332e:	9300      	str	r3, [sp, #0]
 8003330:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8003334:	22f0      	movs	r2, #240	; 0xf0
 8003336:	2100      	movs	r1, #0
 8003338:	2000      	movs	r0, #0
 800333a:	f7fd ffc8 	bl	80012ce <LCD_Clear>
}
 800333e:	bf00      	nop
 8003340:	3710      	adds	r7, #16
 8003342:	46bd      	mov	sp, r7
 8003344:	bd80      	pop	{r7, pc}
 8003346:	bf00      	nop
 8003348:	080073c4 	.word	0x080073c4
 800334c:	200000a0 	.word	0x200000a0
 8003350:	40010800 	.word	0x40010800
 8003354:	40011000 	.word	0x40011000
 8003358:	08007370 	.word	0x08007370

0800335c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800335c:	b480      	push	{r7}
 800335e:	b085      	sub	sp, #20
 8003360:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8003362:	4b15      	ldr	r3, [pc, #84]	; (80033b8 <HAL_MspInit+0x5c>)
 8003364:	699b      	ldr	r3, [r3, #24]
 8003366:	4a14      	ldr	r2, [pc, #80]	; (80033b8 <HAL_MspInit+0x5c>)
 8003368:	f043 0301 	orr.w	r3, r3, #1
 800336c:	6193      	str	r3, [r2, #24]
 800336e:	4b12      	ldr	r3, [pc, #72]	; (80033b8 <HAL_MspInit+0x5c>)
 8003370:	699b      	ldr	r3, [r3, #24]
 8003372:	f003 0301 	and.w	r3, r3, #1
 8003376:	60bb      	str	r3, [r7, #8]
 8003378:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800337a:	4b0f      	ldr	r3, [pc, #60]	; (80033b8 <HAL_MspInit+0x5c>)
 800337c:	69db      	ldr	r3, [r3, #28]
 800337e:	4a0e      	ldr	r2, [pc, #56]	; (80033b8 <HAL_MspInit+0x5c>)
 8003380:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003384:	61d3      	str	r3, [r2, #28]
 8003386:	4b0c      	ldr	r3, [pc, #48]	; (80033b8 <HAL_MspInit+0x5c>)
 8003388:	69db      	ldr	r3, [r3, #28]
 800338a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800338e:	607b      	str	r3, [r7, #4]
 8003390:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8003392:	4b0a      	ldr	r3, [pc, #40]	; (80033bc <HAL_MspInit+0x60>)
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	60fb      	str	r3, [r7, #12]
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800339e:	60fb      	str	r3, [r7, #12]
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80033a6:	60fb      	str	r3, [r7, #12]
 80033a8:	4a04      	ldr	r2, [pc, #16]	; (80033bc <HAL_MspInit+0x60>)
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80033ae:	bf00      	nop
 80033b0:	3714      	adds	r7, #20
 80033b2:	46bd      	mov	sp, r7
 80033b4:	bc80      	pop	{r7}
 80033b6:	4770      	bx	lr
 80033b8:	40021000 	.word	0x40021000
 80033bc:	40010000 	.word	0x40010000

080033c0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b08a      	sub	sp, #40	; 0x28
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033c8:	f107 0318 	add.w	r3, r7, #24
 80033cc:	2200      	movs	r2, #0
 80033ce:	601a      	str	r2, [r3, #0]
 80033d0:	605a      	str	r2, [r3, #4]
 80033d2:	609a      	str	r2, [r3, #8]
 80033d4:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	4a28      	ldr	r2, [pc, #160]	; (800347c <HAL_ADC_MspInit+0xbc>)
 80033dc:	4293      	cmp	r3, r2
 80033de:	d122      	bne.n	8003426 <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80033e0:	4b27      	ldr	r3, [pc, #156]	; (8003480 <HAL_ADC_MspInit+0xc0>)
 80033e2:	699b      	ldr	r3, [r3, #24]
 80033e4:	4a26      	ldr	r2, [pc, #152]	; (8003480 <HAL_ADC_MspInit+0xc0>)
 80033e6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80033ea:	6193      	str	r3, [r2, #24]
 80033ec:	4b24      	ldr	r3, [pc, #144]	; (8003480 <HAL_ADC_MspInit+0xc0>)
 80033ee:	699b      	ldr	r3, [r3, #24]
 80033f0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80033f4:	617b      	str	r3, [r7, #20]
 80033f6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80033f8:	4b21      	ldr	r3, [pc, #132]	; (8003480 <HAL_ADC_MspInit+0xc0>)
 80033fa:	699b      	ldr	r3, [r3, #24]
 80033fc:	4a20      	ldr	r2, [pc, #128]	; (8003480 <HAL_ADC_MspInit+0xc0>)
 80033fe:	f043 0304 	orr.w	r3, r3, #4
 8003402:	6193      	str	r3, [r2, #24]
 8003404:	4b1e      	ldr	r3, [pc, #120]	; (8003480 <HAL_ADC_MspInit+0xc0>)
 8003406:	699b      	ldr	r3, [r3, #24]
 8003408:	f003 0304 	and.w	r3, r3, #4
 800340c:	613b      	str	r3, [r7, #16]
 800340e:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = Water_Level_Sensor_Pin;
 8003410:	2320      	movs	r3, #32
 8003412:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003414:	2303      	movs	r3, #3
 8003416:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Water_Level_Sensor_GPIO_Port, &GPIO_InitStruct);
 8003418:	f107 0318 	add.w	r3, r7, #24
 800341c:	4619      	mov	r1, r3
 800341e:	4819      	ldr	r0, [pc, #100]	; (8003484 <HAL_ADC_MspInit+0xc4>)
 8003420:	f001 faa4 	bl	800496c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8003424:	e026      	b.n	8003474 <HAL_ADC_MspInit+0xb4>
  else if(hadc->Instance==ADC2)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	4a17      	ldr	r2, [pc, #92]	; (8003488 <HAL_ADC_MspInit+0xc8>)
 800342c:	4293      	cmp	r3, r2
 800342e:	d121      	bne.n	8003474 <HAL_ADC_MspInit+0xb4>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8003430:	4b13      	ldr	r3, [pc, #76]	; (8003480 <HAL_ADC_MspInit+0xc0>)
 8003432:	699b      	ldr	r3, [r3, #24]
 8003434:	4a12      	ldr	r2, [pc, #72]	; (8003480 <HAL_ADC_MspInit+0xc0>)
 8003436:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800343a:	6193      	str	r3, [r2, #24]
 800343c:	4b10      	ldr	r3, [pc, #64]	; (8003480 <HAL_ADC_MspInit+0xc0>)
 800343e:	699b      	ldr	r3, [r3, #24]
 8003440:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003444:	60fb      	str	r3, [r7, #12]
 8003446:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003448:	4b0d      	ldr	r3, [pc, #52]	; (8003480 <HAL_ADC_MspInit+0xc0>)
 800344a:	699b      	ldr	r3, [r3, #24]
 800344c:	4a0c      	ldr	r2, [pc, #48]	; (8003480 <HAL_ADC_MspInit+0xc0>)
 800344e:	f043 0304 	orr.w	r3, r3, #4
 8003452:	6193      	str	r3, [r2, #24]
 8003454:	4b0a      	ldr	r3, [pc, #40]	; (8003480 <HAL_ADC_MspInit+0xc0>)
 8003456:	699b      	ldr	r3, [r3, #24]
 8003458:	f003 0304 	and.w	r3, r3, #4
 800345c:	60bb      	str	r3, [r7, #8]
 800345e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = LDR_Pin;
 8003460:	2340      	movs	r3, #64	; 0x40
 8003462:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003464:	2303      	movs	r3, #3
 8003466:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(LDR_GPIO_Port, &GPIO_InitStruct);
 8003468:	f107 0318 	add.w	r3, r7, #24
 800346c:	4619      	mov	r1, r3
 800346e:	4805      	ldr	r0, [pc, #20]	; (8003484 <HAL_ADC_MspInit+0xc4>)
 8003470:	f001 fa7c 	bl	800496c <HAL_GPIO_Init>
}
 8003474:	bf00      	nop
 8003476:	3728      	adds	r7, #40	; 0x28
 8003478:	46bd      	mov	sp, r7
 800347a:	bd80      	pop	{r7, pc}
 800347c:	40012400 	.word	0x40012400
 8003480:	40021000 	.word	0x40021000
 8003484:	40010800 	.word	0x40010800
 8003488:	40012800 	.word	0x40012800

0800348c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b084      	sub	sp, #16
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4a0b      	ldr	r2, [pc, #44]	; (80034c8 <HAL_RTC_MspInit+0x3c>)
 800349a:	4293      	cmp	r3, r2
 800349c:	d110      	bne.n	80034c0 <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 800349e:	f001 fc4b 	bl	8004d38 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 80034a2:	4b0a      	ldr	r3, [pc, #40]	; (80034cc <HAL_RTC_MspInit+0x40>)
 80034a4:	69db      	ldr	r3, [r3, #28]
 80034a6:	4a09      	ldr	r2, [pc, #36]	; (80034cc <HAL_RTC_MspInit+0x40>)
 80034a8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80034ac:	61d3      	str	r3, [r2, #28]
 80034ae:	4b07      	ldr	r3, [pc, #28]	; (80034cc <HAL_RTC_MspInit+0x40>)
 80034b0:	69db      	ldr	r3, [r3, #28]
 80034b2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80034b6:	60fb      	str	r3, [r7, #12]
 80034b8:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80034ba:	4b05      	ldr	r3, [pc, #20]	; (80034d0 <HAL_RTC_MspInit+0x44>)
 80034bc:	2201      	movs	r2, #1
 80034be:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80034c0:	bf00      	nop
 80034c2:	3710      	adds	r7, #16
 80034c4:	46bd      	mov	sp, r7
 80034c6:	bd80      	pop	{r7, pc}
 80034c8:	40002800 	.word	0x40002800
 80034cc:	40021000 	.word	0x40021000
 80034d0:	4242043c 	.word	0x4242043c

080034d4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80034d4:	b480      	push	{r7}
 80034d6:	b085      	sub	sp, #20
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4a09      	ldr	r2, [pc, #36]	; (8003508 <HAL_TIM_Base_MspInit+0x34>)
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d10b      	bne.n	80034fe <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80034e6:	4b09      	ldr	r3, [pc, #36]	; (800350c <HAL_TIM_Base_MspInit+0x38>)
 80034e8:	69db      	ldr	r3, [r3, #28]
 80034ea:	4a08      	ldr	r2, [pc, #32]	; (800350c <HAL_TIM_Base_MspInit+0x38>)
 80034ec:	f043 0310 	orr.w	r3, r3, #16
 80034f0:	61d3      	str	r3, [r2, #28]
 80034f2:	4b06      	ldr	r3, [pc, #24]	; (800350c <HAL_TIM_Base_MspInit+0x38>)
 80034f4:	69db      	ldr	r3, [r3, #28]
 80034f6:	f003 0310 	and.w	r3, r3, #16
 80034fa:	60fb      	str	r3, [r7, #12]
 80034fc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 80034fe:	bf00      	nop
 8003500:	3714      	adds	r7, #20
 8003502:	46bd      	mov	sp, r7
 8003504:	bc80      	pop	{r7}
 8003506:	4770      	bx	lr
 8003508:	40001000 	.word	0x40001000
 800350c:	40021000 	.word	0x40021000

08003510 <HAL_FSMC_MspInit>:

}

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8003510:	b580      	push	{r7, lr}
 8003512:	b086      	sub	sp, #24
 8003514:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8003516:	f107 0308 	add.w	r3, r7, #8
 800351a:	2200      	movs	r2, #0
 800351c:	601a      	str	r2, [r3, #0]
 800351e:	605a      	str	r2, [r3, #4]
 8003520:	609a      	str	r2, [r3, #8]
 8003522:	60da      	str	r2, [r3, #12]
  if (FSMC_Initialized) {
 8003524:	4b18      	ldr	r3, [pc, #96]	; (8003588 <HAL_FSMC_MspInit+0x78>)
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d129      	bne.n	8003580 <HAL_FSMC_MspInit+0x70>
    return;
  }
  FSMC_Initialized = 1;
 800352c:	4b16      	ldr	r3, [pc, #88]	; (8003588 <HAL_FSMC_MspInit+0x78>)
 800352e:	2201      	movs	r2, #1
 8003530:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8003532:	4b16      	ldr	r3, [pc, #88]	; (800358c <HAL_FSMC_MspInit+0x7c>)
 8003534:	695b      	ldr	r3, [r3, #20]
 8003536:	4a15      	ldr	r2, [pc, #84]	; (800358c <HAL_FSMC_MspInit+0x7c>)
 8003538:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800353c:	6153      	str	r3, [r2, #20]
 800353e:	4b13      	ldr	r3, [pc, #76]	; (800358c <HAL_FSMC_MspInit+0x7c>)
 8003540:	695b      	ldr	r3, [r3, #20]
 8003542:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003546:	607b      	str	r3, [r7, #4]
 8003548:	687b      	ldr	r3, [r7, #4]
  PD1   ------> FSMC_D3
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 800354a:	f64f 7380 	movw	r3, #65408	; 0xff80
 800354e:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003550:	2302      	movs	r3, #2
 8003552:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003554:	2303      	movs	r3, #3
 8003556:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003558:	f107 0308 	add.w	r3, r7, #8
 800355c:	4619      	mov	r1, r3
 800355e:	480c      	ldr	r0, [pc, #48]	; (8003590 <HAL_FSMC_MspInit+0x80>)
 8003560:	f001 fa04 	bl	800496c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8003564:	f64c 73b3 	movw	r3, #53171	; 0xcfb3
 8003568:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800356a:	2302      	movs	r3, #2
 800356c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800356e:	2303      	movs	r3, #3
 8003570:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003572:	f107 0308 	add.w	r3, r7, #8
 8003576:	4619      	mov	r1, r3
 8003578:	4806      	ldr	r0, [pc, #24]	; (8003594 <HAL_FSMC_MspInit+0x84>)
 800357a:	f001 f9f7 	bl	800496c <HAL_GPIO_Init>
 800357e:	e000      	b.n	8003582 <HAL_FSMC_MspInit+0x72>
    return;
 8003580:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8003582:	3718      	adds	r7, #24
 8003584:	46bd      	mov	sp, r7
 8003586:	bd80      	pop	{r7, pc}
 8003588:	20000270 	.word	0x20000270
 800358c:	40021000 	.word	0x40021000
 8003590:	40011800 	.word	0x40011800
 8003594:	40011400 	.word	0x40011400

08003598 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8003598:	b580      	push	{r7, lr}
 800359a:	b082      	sub	sp, #8
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 80035a0:	f7ff ffb6 	bl	8003510 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 80035a4:	bf00      	nop
 80035a6:	3708      	adds	r7, #8
 80035a8:	46bd      	mov	sp, r7
 80035aa:	bd80      	pop	{r7, pc}

080035ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80035ac:	b480      	push	{r7}
 80035ae:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80035b0:	bf00      	nop
 80035b2:	46bd      	mov	sp, r7
 80035b4:	bc80      	pop	{r7}
 80035b6:	4770      	bx	lr

080035b8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80035b8:	b480      	push	{r7}
 80035ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80035bc:	e7fe      	b.n	80035bc <HardFault_Handler+0x4>

080035be <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80035be:	b480      	push	{r7}
 80035c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80035c2:	e7fe      	b.n	80035c2 <MemManage_Handler+0x4>

080035c4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80035c4:	b480      	push	{r7}
 80035c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80035c8:	e7fe      	b.n	80035c8 <BusFault_Handler+0x4>

080035ca <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80035ca:	b480      	push	{r7}
 80035cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80035ce:	e7fe      	b.n	80035ce <UsageFault_Handler+0x4>

080035d0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80035d0:	b480      	push	{r7}
 80035d2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80035d4:	bf00      	nop
 80035d6:	46bd      	mov	sp, r7
 80035d8:	bc80      	pop	{r7}
 80035da:	4770      	bx	lr

080035dc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80035dc:	b480      	push	{r7}
 80035de:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80035e0:	bf00      	nop
 80035e2:	46bd      	mov	sp, r7
 80035e4:	bc80      	pop	{r7}
 80035e6:	4770      	bx	lr

080035e8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80035e8:	b480      	push	{r7}
 80035ea:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80035ec:	bf00      	nop
 80035ee:	46bd      	mov	sp, r7
 80035f0:	bc80      	pop	{r7}
 80035f2:	4770      	bx	lr

080035f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80035f8:	f000 fb80 	bl	8003cfc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80035fc:	bf00      	nop
 80035fe:	bd80      	pop	{r7, pc}

08003600 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_3) != RESET)
 8003604:	4b17      	ldr	r3, [pc, #92]	; (8003664 <EXTI3_IRQHandler+0x64>)
 8003606:	695b      	ldr	r3, [r3, #20]
 8003608:	f003 0308 	and.w	r3, r3, #8
 800360c:	2b00      	cmp	r3, #0
 800360e:	d023      	beq.n	8003658 <EXTI3_IRQHandler+0x58>
  {
		if( Ov7725_vsync == 0 )
 8003610:	4b15      	ldr	r3, [pc, #84]	; (8003668 <EXTI3_IRQHandler+0x68>)
 8003612:	781b      	ldrb	r3, [r3, #0]
 8003614:	2b00      	cmp	r3, #0
 8003616:	d10f      	bne.n	8003638 <EXTI3_IRQHandler+0x38>
    {
				FIFO_WRST_L(); 	                      
 8003618:	4b14      	ldr	r3, [pc, #80]	; (800366c <EXTI3_IRQHandler+0x6c>)
 800361a:	2210      	movs	r2, #16
 800361c:	615a      	str	r2, [r3, #20]
        FIFO_WE_H();	                      
 800361e:	4b14      	ldr	r3, [pc, #80]	; (8003670 <EXTI3_IRQHandler+0x70>)
 8003620:	2208      	movs	r2, #8
 8003622:	611a      	str	r2, [r3, #16]
            
        Ov7725_vsync = 1;	   	
 8003624:	4b10      	ldr	r3, [pc, #64]	; (8003668 <EXTI3_IRQHandler+0x68>)
 8003626:	2201      	movs	r2, #1
 8003628:	701a      	strb	r2, [r3, #0]
        FIFO_WE_H();                         
 800362a:	4b11      	ldr	r3, [pc, #68]	; (8003670 <EXTI3_IRQHandler+0x70>)
 800362c:	2208      	movs	r2, #8
 800362e:	611a      	str	r2, [r3, #16]
        FIFO_WRST_H();                     
 8003630:	4b0e      	ldr	r3, [pc, #56]	; (800366c <EXTI3_IRQHandler+0x6c>)
 8003632:	2210      	movs	r2, #16
 8003634:	611a      	str	r2, [r3, #16]
 8003636:	e009      	b.n	800364c <EXTI3_IRQHandler+0x4c>
    }
    else if( Ov7725_vsync == 1 )
 8003638:	4b0b      	ldr	r3, [pc, #44]	; (8003668 <EXTI3_IRQHandler+0x68>)
 800363a:	781b      	ldrb	r3, [r3, #0]
 800363c:	2b01      	cmp	r3, #1
 800363e:	d105      	bne.n	800364c <EXTI3_IRQHandler+0x4c>
    {
        FIFO_WE_L();                       
 8003640:	4b0b      	ldr	r3, [pc, #44]	; (8003670 <EXTI3_IRQHandler+0x70>)
 8003642:	2208      	movs	r2, #8
 8003644:	615a      	str	r2, [r3, #20]
        Ov7725_vsync = 2;
 8003646:	4b08      	ldr	r3, [pc, #32]	; (8003668 <EXTI3_IRQHandler+0x68>)
 8003648:	2202      	movs	r2, #2
 800364a:	701a      	strb	r2, [r3, #0]
    }        
				
		
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_3);
 800364c:	4b05      	ldr	r3, [pc, #20]	; (8003664 <EXTI3_IRQHandler+0x64>)
 800364e:	2208      	movs	r2, #8
 8003650:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_PIN_3);
 8003652:	2008      	movs	r0, #8
 8003654:	f001 fb66 	bl	8004d24 <HAL_GPIO_EXTI_Callback>
  }

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8003658:	2008      	movs	r0, #8
 800365a:	f001 fb4b 	bl	8004cf4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 800365e:	bf00      	nop
 8003660:	bd80      	pop	{r7, pc}
 8003662:	bf00      	nop
 8003664:	40010400 	.word	0x40010400
 8003668:	2000025c 	.word	0x2000025c
 800366c:	40011000 	.word	0x40011000
 8003670:	40011400 	.word	0x40011400

08003674 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8003678:	2010      	movs	r0, #16
 800367a:	f001 fb3b 	bl	8004cf4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 800367e:	bf00      	nop
 8003680:	bd80      	pop	{r7, pc}
	...

08003684 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b086      	sub	sp, #24
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800368c:	4a14      	ldr	r2, [pc, #80]	; (80036e0 <_sbrk+0x5c>)
 800368e:	4b15      	ldr	r3, [pc, #84]	; (80036e4 <_sbrk+0x60>)
 8003690:	1ad3      	subs	r3, r2, r3
 8003692:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003694:	697b      	ldr	r3, [r7, #20]
 8003696:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003698:	4b13      	ldr	r3, [pc, #76]	; (80036e8 <_sbrk+0x64>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d102      	bne.n	80036a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80036a0:	4b11      	ldr	r3, [pc, #68]	; (80036e8 <_sbrk+0x64>)
 80036a2:	4a12      	ldr	r2, [pc, #72]	; (80036ec <_sbrk+0x68>)
 80036a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80036a6:	4b10      	ldr	r3, [pc, #64]	; (80036e8 <_sbrk+0x64>)
 80036a8:	681a      	ldr	r2, [r3, #0]
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	4413      	add	r3, r2
 80036ae:	693a      	ldr	r2, [r7, #16]
 80036b0:	429a      	cmp	r2, r3
 80036b2:	d207      	bcs.n	80036c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80036b4:	f003 f930 	bl	8006918 <__errno>
 80036b8:	4603      	mov	r3, r0
 80036ba:	220c      	movs	r2, #12
 80036bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80036be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80036c2:	e009      	b.n	80036d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80036c4:	4b08      	ldr	r3, [pc, #32]	; (80036e8 <_sbrk+0x64>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80036ca:	4b07      	ldr	r3, [pc, #28]	; (80036e8 <_sbrk+0x64>)
 80036cc:	681a      	ldr	r2, [r3, #0]
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	4413      	add	r3, r2
 80036d2:	4a05      	ldr	r2, [pc, #20]	; (80036e8 <_sbrk+0x64>)
 80036d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80036d6:	68fb      	ldr	r3, [r7, #12]
}
 80036d8:	4618      	mov	r0, r3
 80036da:	3718      	adds	r7, #24
 80036dc:	46bd      	mov	sp, r7
 80036de:	bd80      	pop	{r7, pc}
 80036e0:	20010000 	.word	0x20010000
 80036e4:	00000400 	.word	0x00000400
 80036e8:	20000274 	.word	0x20000274
 80036ec:	20000290 	.word	0x20000290

080036f0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80036f0:	b480      	push	{r7}
 80036f2:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80036f4:	4b15      	ldr	r3, [pc, #84]	; (800374c <SystemInit+0x5c>)
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4a14      	ldr	r2, [pc, #80]	; (800374c <SystemInit+0x5c>)
 80036fa:	f043 0301 	orr.w	r3, r3, #1
 80036fe:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8003700:	4b12      	ldr	r3, [pc, #72]	; (800374c <SystemInit+0x5c>)
 8003702:	685a      	ldr	r2, [r3, #4]
 8003704:	4911      	ldr	r1, [pc, #68]	; (800374c <SystemInit+0x5c>)
 8003706:	4b12      	ldr	r3, [pc, #72]	; (8003750 <SystemInit+0x60>)
 8003708:	4013      	ands	r3, r2
 800370a:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 800370c:	4b0f      	ldr	r3, [pc, #60]	; (800374c <SystemInit+0x5c>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4a0e      	ldr	r2, [pc, #56]	; (800374c <SystemInit+0x5c>)
 8003712:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8003716:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800371a:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800371c:	4b0b      	ldr	r3, [pc, #44]	; (800374c <SystemInit+0x5c>)
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	4a0a      	ldr	r2, [pc, #40]	; (800374c <SystemInit+0x5c>)
 8003722:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003726:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8003728:	4b08      	ldr	r3, [pc, #32]	; (800374c <SystemInit+0x5c>)
 800372a:	685b      	ldr	r3, [r3, #4]
 800372c:	4a07      	ldr	r2, [pc, #28]	; (800374c <SystemInit+0x5c>)
 800372e:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8003732:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8003734:	4b05      	ldr	r3, [pc, #20]	; (800374c <SystemInit+0x5c>)
 8003736:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800373a:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 800373c:	4b05      	ldr	r3, [pc, #20]	; (8003754 <SystemInit+0x64>)
 800373e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003742:	609a      	str	r2, [r3, #8]
#endif 
}
 8003744:	bf00      	nop
 8003746:	46bd      	mov	sp, r7
 8003748:	bc80      	pop	{r7}
 800374a:	4770      	bx	lr
 800374c:	40021000 	.word	0x40021000
 8003750:	f8ff0000 	.word	0xf8ff0000
 8003754:	e000ed00 	.word	0xe000ed00

08003758 <XPT2046_DelayUS>:



	
static void XPT2046_DelayUS ( __IO uint32_t ulCount )
{
 8003758:	b480      	push	{r7}
 800375a:	b085      	sub	sp, #20
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
	uint32_t i;


	for ( i = 0; i < ulCount; i ++ )
 8003760:	2300      	movs	r3, #0
 8003762:	60fb      	str	r3, [r7, #12]
 8003764:	e00a      	b.n	800377c <XPT2046_DelayUS+0x24>
	{
		uint8_t uc = 12;     
 8003766:	230c      	movs	r3, #12
 8003768:	72fb      	strb	r3, [r7, #11]
	      
		while ( uc -- );     
 800376a:	bf00      	nop
 800376c:	7afb      	ldrb	r3, [r7, #11]
 800376e:	1e5a      	subs	r2, r3, #1
 8003770:	72fa      	strb	r2, [r7, #11]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d1fa      	bne.n	800376c <XPT2046_DelayUS+0x14>
	for ( i = 0; i < ulCount; i ++ )
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	3301      	adds	r3, #1
 800377a:	60fb      	str	r3, [r7, #12]
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	68fa      	ldr	r2, [r7, #12]
 8003780:	429a      	cmp	r2, r3
 8003782:	d3f0      	bcc.n	8003766 <XPT2046_DelayUS+0xe>

	}
	
}
 8003784:	bf00      	nop
 8003786:	bf00      	nop
 8003788:	3714      	adds	r7, #20
 800378a:	46bd      	mov	sp, r7
 800378c:	bc80      	pop	{r7}
 800378e:	4770      	bx	lr

08003790 <XPT2046_WriteCMD>:


static void XPT2046_WriteCMD ( uint8_t ucCmd ) 
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b084      	sub	sp, #16
 8003794:	af00      	add	r7, sp, #0
 8003796:	4603      	mov	r3, r0
 8003798:	71fb      	strb	r3, [r7, #7]
	uint8_t i;


	macXPT2046_MOSI_0();
 800379a:	2200      	movs	r2, #0
 800379c:	2104      	movs	r1, #4
 800379e:	481d      	ldr	r0, [pc, #116]	; (8003814 <XPT2046_WriteCMD+0x84>)
 80037a0:	f001 fa8f 	bl	8004cc2 <HAL_GPIO_WritePin>
	
	macXPT2046_CLK_LOW();
 80037a4:	2200      	movs	r2, #0
 80037a6:	2101      	movs	r1, #1
 80037a8:	481a      	ldr	r0, [pc, #104]	; (8003814 <XPT2046_WriteCMD+0x84>)
 80037aa:	f001 fa8a 	bl	8004cc2 <HAL_GPIO_WritePin>

	for ( i = 0; i < 8; i ++ ) 
 80037ae:	2300      	movs	r3, #0
 80037b0:	73fb      	strb	r3, [r7, #15]
 80037b2:	e027      	b.n	8003804 <XPT2046_WriteCMD+0x74>
	{
		( ( ucCmd >> ( 7 - i ) ) & 0x01 ) ? macXPT2046_MOSI_1() : macXPT2046_MOSI_0();
 80037b4:	79fa      	ldrb	r2, [r7, #7]
 80037b6:	7bfb      	ldrb	r3, [r7, #15]
 80037b8:	f1c3 0307 	rsb	r3, r3, #7
 80037bc:	fa42 f303 	asr.w	r3, r2, r3
 80037c0:	f003 0301 	and.w	r3, r3, #1
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d005      	beq.n	80037d4 <XPT2046_WriteCMD+0x44>
 80037c8:	2201      	movs	r2, #1
 80037ca:	2104      	movs	r1, #4
 80037cc:	4811      	ldr	r0, [pc, #68]	; (8003814 <XPT2046_WriteCMD+0x84>)
 80037ce:	f001 fa78 	bl	8004cc2 <HAL_GPIO_WritePin>
 80037d2:	e004      	b.n	80037de <XPT2046_WriteCMD+0x4e>
 80037d4:	2200      	movs	r2, #0
 80037d6:	2104      	movs	r1, #4
 80037d8:	480e      	ldr	r0, [pc, #56]	; (8003814 <XPT2046_WriteCMD+0x84>)
 80037da:	f001 fa72 	bl	8004cc2 <HAL_GPIO_WritePin>
		
	  XPT2046_DelayUS ( 5 );
 80037de:	2005      	movs	r0, #5
 80037e0:	f7ff ffba 	bl	8003758 <XPT2046_DelayUS>
		
		macXPT2046_CLK_HIGH();
 80037e4:	2201      	movs	r2, #1
 80037e6:	2101      	movs	r1, #1
 80037e8:	480a      	ldr	r0, [pc, #40]	; (8003814 <XPT2046_WriteCMD+0x84>)
 80037ea:	f001 fa6a 	bl	8004cc2 <HAL_GPIO_WritePin>

	  XPT2046_DelayUS ( 5 );
 80037ee:	2005      	movs	r0, #5
 80037f0:	f7ff ffb2 	bl	8003758 <XPT2046_DelayUS>

		macXPT2046_CLK_LOW();
 80037f4:	2200      	movs	r2, #0
 80037f6:	2101      	movs	r1, #1
 80037f8:	4806      	ldr	r0, [pc, #24]	; (8003814 <XPT2046_WriteCMD+0x84>)
 80037fa:	f001 fa62 	bl	8004cc2 <HAL_GPIO_WritePin>
	for ( i = 0; i < 8; i ++ ) 
 80037fe:	7bfb      	ldrb	r3, [r7, #15]
 8003800:	3301      	adds	r3, #1
 8003802:	73fb      	strb	r3, [r7, #15]
 8003804:	7bfb      	ldrb	r3, [r7, #15]
 8003806:	2b07      	cmp	r3, #7
 8003808:	d9d4      	bls.n	80037b4 <XPT2046_WriteCMD+0x24>
	}
	
}
 800380a:	bf00      	nop
 800380c:	bf00      	nop
 800380e:	3710      	adds	r7, #16
 8003810:	46bd      	mov	sp, r7
 8003812:	bd80      	pop	{r7, pc}
 8003814:	40011800 	.word	0x40011800

08003818 <XPT2046_ReadCMD>:


static uint16_t XPT2046_ReadCMD ( void ) 
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b082      	sub	sp, #8
 800381c:	af00      	add	r7, sp, #0
	uint8_t i;
	uint16_t usBuf=0, usTemp;
 800381e:	2300      	movs	r3, #0
 8003820:	80bb      	strh	r3, [r7, #4]
	


	macXPT2046_MOSI_0();
 8003822:	2200      	movs	r2, #0
 8003824:	2104      	movs	r1, #4
 8003826:	4819      	ldr	r0, [pc, #100]	; (800388c <XPT2046_ReadCMD+0x74>)
 8003828:	f001 fa4b 	bl	8004cc2 <HAL_GPIO_WritePin>

	macXPT2046_CLK_HIGH();
 800382c:	2201      	movs	r2, #1
 800382e:	2101      	movs	r1, #1
 8003830:	4816      	ldr	r0, [pc, #88]	; (800388c <XPT2046_ReadCMD+0x74>)
 8003832:	f001 fa46 	bl	8004cc2 <HAL_GPIO_WritePin>

	for ( i=0;i<12;i++ ) 
 8003836:	2300      	movs	r3, #0
 8003838:	71fb      	strb	r3, [r7, #7]
 800383a:	e01e      	b.n	800387a <XPT2046_ReadCMD+0x62>
	{
		macXPT2046_CLK_LOW();    
 800383c:	2200      	movs	r2, #0
 800383e:	2101      	movs	r1, #1
 8003840:	4812      	ldr	r0, [pc, #72]	; (800388c <XPT2046_ReadCMD+0x74>)
 8003842:	f001 fa3e 	bl	8004cc2 <HAL_GPIO_WritePin>
	
		usTemp = macXPT2046_MISO();
 8003846:	2108      	movs	r1, #8
 8003848:	4810      	ldr	r0, [pc, #64]	; (800388c <XPT2046_ReadCMD+0x74>)
 800384a:	f001 fa23 	bl	8004c94 <HAL_GPIO_ReadPin>
 800384e:	4603      	mov	r3, r0
 8003850:	807b      	strh	r3, [r7, #2]
		
		usBuf |= usTemp << ( 11 - i );
 8003852:	887a      	ldrh	r2, [r7, #2]
 8003854:	79fb      	ldrb	r3, [r7, #7]
 8003856:	f1c3 030b 	rsb	r3, r3, #11
 800385a:	fa02 f303 	lsl.w	r3, r2, r3
 800385e:	b21a      	sxth	r2, r3
 8003860:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003864:	4313      	orrs	r3, r2
 8003866:	b21b      	sxth	r3, r3
 8003868:	80bb      	strh	r3, [r7, #4]
	
		macXPT2046_CLK_HIGH();
 800386a:	2201      	movs	r2, #1
 800386c:	2101      	movs	r1, #1
 800386e:	4807      	ldr	r0, [pc, #28]	; (800388c <XPT2046_ReadCMD+0x74>)
 8003870:	f001 fa27 	bl	8004cc2 <HAL_GPIO_WritePin>
	for ( i=0;i<12;i++ ) 
 8003874:	79fb      	ldrb	r3, [r7, #7]
 8003876:	3301      	adds	r3, #1
 8003878:	71fb      	strb	r3, [r7, #7]
 800387a:	79fb      	ldrb	r3, [r7, #7]
 800387c:	2b0b      	cmp	r3, #11
 800387e:	d9dd      	bls.n	800383c <XPT2046_ReadCMD+0x24>
		
	}
	
	return usBuf;
 8003880:	88bb      	ldrh	r3, [r7, #4]

}
 8003882:	4618      	mov	r0, r3
 8003884:	3708      	adds	r7, #8
 8003886:	46bd      	mov	sp, r7
 8003888:	bd80      	pop	{r7, pc}
 800388a:	bf00      	nop
 800388c:	40011800 	.word	0x40011800

08003890 <XPT2046_ReadAdc>:


static uint16_t XPT2046_ReadAdc ( uint8_t ucChannel )
{
 8003890:	b580      	push	{r7, lr}
 8003892:	b082      	sub	sp, #8
 8003894:	af00      	add	r7, sp, #0
 8003896:	4603      	mov	r3, r0
 8003898:	71fb      	strb	r3, [r7, #7]
	XPT2046_WriteCMD ( ucChannel );
 800389a:	79fb      	ldrb	r3, [r7, #7]
 800389c:	4618      	mov	r0, r3
 800389e:	f7ff ff77 	bl	8003790 <XPT2046_WriteCMD>

  return 	XPT2046_ReadCMD ();
 80038a2:	f7ff ffb9 	bl	8003818 <XPT2046_ReadCMD>
 80038a6:	4603      	mov	r3, r0
	
}
 80038a8:	4618      	mov	r0, r3
 80038aa:	3708      	adds	r7, #8
 80038ac:	46bd      	mov	sp, r7
 80038ae:	bd80      	pop	{r7, pc}

080038b0 <XPT2046_ReadAdc_XY>:


static void XPT2046_ReadAdc_XY ( int16_t * sX_Ad, int16_t * sY_Ad )  
{ 
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b084      	sub	sp, #16
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
 80038b8:	6039      	str	r1, [r7, #0]
	int16_t sX_Ad_Temp, sY_Ad_Temp; 

	
	
	sX_Ad_Temp = XPT2046_ReadAdc ( macXPT2046_CHANNEL_X );
 80038ba:	2090      	movs	r0, #144	; 0x90
 80038bc:	f7ff ffe8 	bl	8003890 <XPT2046_ReadAdc>
 80038c0:	4603      	mov	r3, r0
 80038c2:	81fb      	strh	r3, [r7, #14]

	XPT2046_DelayUS ( 1 ); 
 80038c4:	2001      	movs	r0, #1
 80038c6:	f7ff ff47 	bl	8003758 <XPT2046_DelayUS>

	sY_Ad_Temp = XPT2046_ReadAdc ( macXPT2046_CHANNEL_Y ); 
 80038ca:	20d0      	movs	r0, #208	; 0xd0
 80038cc:	f7ff ffe0 	bl	8003890 <XPT2046_ReadAdc>
 80038d0:	4603      	mov	r3, r0
 80038d2:	81bb      	strh	r3, [r7, #12]
	
	
	* sX_Ad = sX_Ad_Temp; 
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	89fa      	ldrh	r2, [r7, #14]
 80038d8:	801a      	strh	r2, [r3, #0]
	* sY_Ad = sY_Ad_Temp; 
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	89ba      	ldrh	r2, [r7, #12]
 80038de:	801a      	strh	r2, [r3, #0]
	
	
}
 80038e0:	bf00      	nop
 80038e2:	3710      	adds	r7, #16
 80038e4:	46bd      	mov	sp, r7
 80038e6:	bd80      	pop	{r7, pc}

080038e8 <XPT2046_ReadAdc_Smooth_XY>:
}


#else     
static uint8_t XPT2046_ReadAdc_Smooth_XY ( strType_XPT2046_Coordinate * pScreenCoordinate )
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b092      	sub	sp, #72	; 0x48
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
	uint8_t ucCount = 0, i;
 80038f0:	2300      	movs	r3, #0
 80038f2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	
	int16_t sAD_X, sAD_Y;
	int16_t sBufferArray [ 2 ] [ 10 ] = { { 0 },{ 0 } };  
 80038f6:	f107 0308 	add.w	r3, r7, #8
 80038fa:	2228      	movs	r2, #40	; 0x28
 80038fc:	2100      	movs	r1, #0
 80038fe:	4618      	mov	r0, r3
 8003900:	f003 f834 	bl	800696c <memset>
	int32_t lX_Min, lX_Max, lY_Min, lY_Max;


	do					       				
	{		  
		XPT2046_ReadAdc_XY ( & sAD_X, & sAD_Y );  
 8003904:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8003908:	f107 0332 	add.w	r3, r7, #50	; 0x32
 800390c:	4611      	mov	r1, r2
 800390e:	4618      	mov	r0, r3
 8003910:	f7ff ffce 	bl	80038b0 <XPT2046_ReadAdc_XY>
		
		sBufferArray [ 0 ] [ ucCount ] = sAD_X;  
 8003914:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003918:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
 800391c:	005b      	lsls	r3, r3, #1
 800391e:	3348      	adds	r3, #72	; 0x48
 8003920:	443b      	add	r3, r7
 8003922:	f823 2c40 	strh.w	r2, [r3, #-64]
		sBufferArray [ 1 ] [ ucCount ] = sAD_Y;
 8003926:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800392a:	f9b7 2030 	ldrsh.w	r2, [r7, #48]	; 0x30
 800392e:	330a      	adds	r3, #10
 8003930:	005b      	lsls	r3, r3, #1
 8003932:	3348      	adds	r3, #72	; 0x48
 8003934:	443b      	add	r3, r7
 8003936:	f823 2c40 	strh.w	r2, [r3, #-64]
		
		ucCount ++;  
 800393a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800393e:	3301      	adds	r3, #1
 8003940:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		
	}	while ( ( macXPT2046_EXTI_Read() == macXPT2046_EXTI_ActiveLevel ) && ( ucCount < 10 ) );
 8003944:	2110      	movs	r1, #16
 8003946:	4871      	ldr	r0, [pc, #452]	; (8003b0c <XPT2046_ReadAdc_Smooth_XY+0x224>)
 8003948:	f001 f9a4 	bl	8004c94 <HAL_GPIO_ReadPin>
 800394c:	4603      	mov	r3, r0
 800394e:	2b00      	cmp	r3, #0
 8003950:	d103      	bne.n	800395a <XPT2046_ReadAdc_Smooth_XY+0x72>
 8003952:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003956:	2b09      	cmp	r3, #9
 8003958:	d9d4      	bls.n	8003904 <XPT2046_ReadAdc_Smooth_XY+0x1c>
	

	if ( macXPT2046_EXTI_Read() != macXPT2046_EXTI_ActiveLevel )
 800395a:	2110      	movs	r1, #16
 800395c:	486b      	ldr	r0, [pc, #428]	; (8003b0c <XPT2046_ReadAdc_Smooth_XY+0x224>)
 800395e:	f001 f999 	bl	8004c94 <HAL_GPIO_ReadPin>
 8003962:	4603      	mov	r3, r0
 8003964:	2b00      	cmp	r3, #0
 8003966:	d002      	beq.n	800396e <XPT2046_ReadAdc_Smooth_XY+0x86>
		ucXPT2046_TouchFlag = 0;			
 8003968:	4b69      	ldr	r3, [pc, #420]	; (8003b10 <XPT2046_ReadAdc_Smooth_XY+0x228>)
 800396a:	2200      	movs	r2, #0
 800396c:	701a      	strb	r2, [r3, #0]


	if ( ucCount ==10 )		 					
 800396e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003972:	2b0a      	cmp	r3, #10
 8003974:	f040 80c4 	bne.w	8003b00 <XPT2046_ReadAdc_Smooth_XY+0x218>
	{
		lX_Max = lX_Min = sBufferArray [ 0 ] [ 0 ];
 8003978:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800397c:	643b      	str	r3, [r7, #64]	; 0x40
 800397e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003980:	63fb      	str	r3, [r7, #60]	; 0x3c
		lY_Max = lY_Min = sBufferArray [ 1 ] [ 0 ];       
 8003982:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8003986:	63bb      	str	r3, [r7, #56]	; 0x38
 8003988:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800398a:	637b      	str	r3, [r7, #52]	; 0x34
		
		for ( i = 1; i < 10; i ++ )
 800398c:	2301      	movs	r3, #1
 800398e:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8003992:	e02b      	b.n	80039ec <XPT2046_ReadAdc_Smooth_XY+0x104>
		{
			if ( sBufferArray [ 0 ] [ i ] < lX_Min )
 8003994:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8003998:	005b      	lsls	r3, r3, #1
 800399a:	3348      	adds	r3, #72	; 0x48
 800399c:	443b      	add	r3, r7
 800399e:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 80039a2:	461a      	mov	r2, r3
 80039a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80039a6:	4293      	cmp	r3, r2
 80039a8:	dd08      	ble.n	80039bc <XPT2046_ReadAdc_Smooth_XY+0xd4>
				lX_Min = sBufferArray [ 0 ] [ i ];
 80039aa:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80039ae:	005b      	lsls	r3, r3, #1
 80039b0:	3348      	adds	r3, #72	; 0x48
 80039b2:	443b      	add	r3, r7
 80039b4:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 80039b8:	643b      	str	r3, [r7, #64]	; 0x40
 80039ba:	e012      	b.n	80039e2 <XPT2046_ReadAdc_Smooth_XY+0xfa>
			
			else if ( sBufferArray [ 0 ] [ i ] > lX_Max )
 80039bc:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80039c0:	005b      	lsls	r3, r3, #1
 80039c2:	3348      	adds	r3, #72	; 0x48
 80039c4:	443b      	add	r3, r7
 80039c6:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 80039ca:	461a      	mov	r2, r3
 80039cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039ce:	4293      	cmp	r3, r2
 80039d0:	da07      	bge.n	80039e2 <XPT2046_ReadAdc_Smooth_XY+0xfa>
				lX_Max = sBufferArray [ 0 ] [ i ];
 80039d2:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80039d6:	005b      	lsls	r3, r3, #1
 80039d8:	3348      	adds	r3, #72	; 0x48
 80039da:	443b      	add	r3, r7
 80039dc:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 80039e0:	63fb      	str	r3, [r7, #60]	; 0x3c
		for ( i = 1; i < 10; i ++ )
 80039e2:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80039e6:	3301      	adds	r3, #1
 80039e8:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 80039ec:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80039f0:	2b09      	cmp	r3, #9
 80039f2:	d9cf      	bls.n	8003994 <XPT2046_ReadAdc_Smooth_XY+0xac>

		}
		
		for ( i = 1; i < 10; i ++ )
 80039f4:	2301      	movs	r3, #1
 80039f6:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 80039fa:	e02f      	b.n	8003a5c <XPT2046_ReadAdc_Smooth_XY+0x174>
		{
			if ( sBufferArray [ 1 ] [ i ] < lY_Min )
 80039fc:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8003a00:	330a      	adds	r3, #10
 8003a02:	005b      	lsls	r3, r3, #1
 8003a04:	3348      	adds	r3, #72	; 0x48
 8003a06:	443b      	add	r3, r7
 8003a08:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 8003a0c:	461a      	mov	r2, r3
 8003a0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a10:	4293      	cmp	r3, r2
 8003a12:	dd09      	ble.n	8003a28 <XPT2046_ReadAdc_Smooth_XY+0x140>
				lY_Min = sBufferArray [ 1 ] [ i ];
 8003a14:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8003a18:	330a      	adds	r3, #10
 8003a1a:	005b      	lsls	r3, r3, #1
 8003a1c:	3348      	adds	r3, #72	; 0x48
 8003a1e:	443b      	add	r3, r7
 8003a20:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 8003a24:	63bb      	str	r3, [r7, #56]	; 0x38
 8003a26:	e014      	b.n	8003a52 <XPT2046_ReadAdc_Smooth_XY+0x16a>
			
			else if ( sBufferArray [ 1 ] [ i ] > lY_Max )
 8003a28:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8003a2c:	330a      	adds	r3, #10
 8003a2e:	005b      	lsls	r3, r3, #1
 8003a30:	3348      	adds	r3, #72	; 0x48
 8003a32:	443b      	add	r3, r7
 8003a34:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 8003a38:	461a      	mov	r2, r3
 8003a3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	da08      	bge.n	8003a52 <XPT2046_ReadAdc_Smooth_XY+0x16a>
				lY_Max = sBufferArray [ 1 ] [ i ];
 8003a40:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8003a44:	330a      	adds	r3, #10
 8003a46:	005b      	lsls	r3, r3, #1
 8003a48:	3348      	adds	r3, #72	; 0x48
 8003a4a:	443b      	add	r3, r7
 8003a4c:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 8003a50:	637b      	str	r3, [r7, #52]	; 0x34
		for ( i = 1; i < 10; i ++ )
 8003a52:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8003a56:	3301      	adds	r3, #1
 8003a58:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8003a5c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8003a60:	2b09      	cmp	r3, #9
 8003a62:	d9cb      	bls.n	80039fc <XPT2046_ReadAdc_Smooth_XY+0x114>

		}
		

		pScreenCoordinate ->x =  ( sBufferArray [ 0 ] [ 0 ] + sBufferArray [ 0 ] [ 1 ] + sBufferArray [ 0 ] [ 2 ] + sBufferArray [ 0 ] [ 3 ] + sBufferArray [ 0 ] [ 4 ] + 
 8003a64:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8003a68:	461a      	mov	r2, r3
 8003a6a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8003a6e:	4413      	add	r3, r2
 8003a70:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8003a74:	4413      	add	r3, r2
 8003a76:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8003a7a:	4413      	add	r3, r2
 8003a7c:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8003a80:	4413      	add	r3, r2
		                           sBufferArray [ 0 ] [ 5 ] + sBufferArray [ 0 ] [ 6 ] + sBufferArray [ 0 ] [ 7 ] + sBufferArray [ 0 ] [ 8 ] + sBufferArray [ 0 ] [ 9 ] - lX_Min-lX_Max ) >> 3;
 8003a82:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
		pScreenCoordinate ->x =  ( sBufferArray [ 0 ] [ 0 ] + sBufferArray [ 0 ] [ 1 ] + sBufferArray [ 0 ] [ 2 ] + sBufferArray [ 0 ] [ 3 ] + sBufferArray [ 0 ] [ 4 ] + 
 8003a86:	4413      	add	r3, r2
		                           sBufferArray [ 0 ] [ 5 ] + sBufferArray [ 0 ] [ 6 ] + sBufferArray [ 0 ] [ 7 ] + sBufferArray [ 0 ] [ 8 ] + sBufferArray [ 0 ] [ 9 ] - lX_Min-lX_Max ) >> 3;
 8003a88:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8003a8c:	4413      	add	r3, r2
 8003a8e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8003a92:	4413      	add	r3, r2
 8003a94:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8003a98:	4413      	add	r3, r2
 8003a9a:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 8003a9e:	441a      	add	r2, r3
 8003aa0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003aa2:	1ad2      	subs	r2, r2, r3
 8003aa4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003aa6:	1ad3      	subs	r3, r2, r3
 8003aa8:	10db      	asrs	r3, r3, #3
		pScreenCoordinate ->x =  ( sBufferArray [ 0 ] [ 0 ] + sBufferArray [ 0 ] [ 1 ] + sBufferArray [ 0 ] [ 2 ] + sBufferArray [ 0 ] [ 3 ] + sBufferArray [ 0 ] [ 4 ] + 
 8003aaa:	b29a      	uxth	r2, r3
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	801a      	strh	r2, [r3, #0]
		
		pScreenCoordinate ->y =  ( sBufferArray [ 1 ] [ 0 ] + sBufferArray [ 1 ] [ 1 ] + sBufferArray [ 1 ] [ 2 ] + sBufferArray [ 1 ] [ 3 ] + sBufferArray [ 1 ] [ 4 ] + 
 8003ab0:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8003ab4:	461a      	mov	r2, r3
 8003ab6:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8003aba:	4413      	add	r3, r2
 8003abc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8003ac0:	4413      	add	r3, r2
 8003ac2:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 8003ac6:	4413      	add	r3, r2
 8003ac8:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 8003acc:	4413      	add	r3, r2
		                           sBufferArray [ 1 ] [ 5 ] + sBufferArray [ 1 ] [ 6 ] + sBufferArray [ 1 ] [ 7 ] + sBufferArray [ 1 ] [ 8 ] + sBufferArray [ 1 ] [ 9 ] - lY_Min-lY_Max ) >> 3; 
 8003ace:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
		pScreenCoordinate ->y =  ( sBufferArray [ 1 ] [ 0 ] + sBufferArray [ 1 ] [ 1 ] + sBufferArray [ 1 ] [ 2 ] + sBufferArray [ 1 ] [ 3 ] + sBufferArray [ 1 ] [ 4 ] + 
 8003ad2:	4413      	add	r3, r2
		                           sBufferArray [ 1 ] [ 5 ] + sBufferArray [ 1 ] [ 6 ] + sBufferArray [ 1 ] [ 7 ] + sBufferArray [ 1 ] [ 8 ] + sBufferArray [ 1 ] [ 9 ] - lY_Min-lY_Max ) >> 3; 
 8003ad4:	f9b7 2028 	ldrsh.w	r2, [r7, #40]	; 0x28
 8003ad8:	4413      	add	r3, r2
 8003ada:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 8003ade:	4413      	add	r3, r2
 8003ae0:	f9b7 202c 	ldrsh.w	r2, [r7, #44]	; 0x2c
 8003ae4:	4413      	add	r3, r2
 8003ae6:	f9b7 202e 	ldrsh.w	r2, [r7, #46]	; 0x2e
 8003aea:	441a      	add	r2, r3
 8003aec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003aee:	1ad2      	subs	r2, r2, r3
 8003af0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003af2:	1ad3      	subs	r3, r2, r3
 8003af4:	10db      	asrs	r3, r3, #3
		pScreenCoordinate ->y =  ( sBufferArray [ 1 ] [ 0 ] + sBufferArray [ 1 ] [ 1 ] + sBufferArray [ 1 ] [ 2 ] + sBufferArray [ 1 ] [ 3 ] + sBufferArray [ 1 ] [ 4 ] + 
 8003af6:	b29a      	uxth	r2, r3
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	805a      	strh	r2, [r3, #2]
		
		
		return 1;
 8003afc:	2301      	movs	r3, #1
 8003afe:	e000      	b.n	8003b02 <XPT2046_ReadAdc_Smooth_XY+0x21a>
		

	}   
	
	
	return 0;    
 8003b00:	2300      	movs	r3, #0
	
	
}
 8003b02:	4618      	mov	r0, r3
 8003b04:	3748      	adds	r7, #72	; 0x48
 8003b06:	46bd      	mov	sp, r7
 8003b08:	bd80      	pop	{r7, pc}
 8003b0a:	bf00      	nop
 8003b0c:	40011800 	.word	0x40011800
 8003b10:	20000278 	.word	0x20000278

08003b14 <XPT2046_Get_TouchedPoint>:
}

   

uint8_t XPT2046_Get_TouchedPoint ( strType_XPT2046_Coordinate * pDisplayCoordinate, strType_XPT2046_TouchPara * pTouchPara )
{
 8003b14:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003b18:	b084      	sub	sp, #16
 8003b1a:	af00      	add	r7, sp, #0
 8003b1c:	6078      	str	r0, [r7, #4]
 8003b1e:	6039      	str	r1, [r7, #0]
	uint8_t ucRet = 1;           
 8003b20:	2301      	movs	r3, #1
 8003b22:	73fb      	strb	r3, [r7, #15]
	
	strType_XPT2046_Coordinate strScreenCoordinate; 
	

  if ( XPT2046_ReadAdc_Smooth_XY ( & strScreenCoordinate ) )
 8003b24:	f107 0308 	add.w	r3, r7, #8
 8003b28:	4618      	mov	r0, r3
 8003b2a:	f7ff fedd 	bl	80038e8 <XPT2046_ReadAdc_Smooth_XY>
 8003b2e:	4603      	mov	r3, r0
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d06e      	beq.n	8003c12 <XPT2046_Get_TouchedPoint+0xfe>
  {    
		pDisplayCoordinate ->x = ( ( pTouchPara ->dX_X * strScreenCoordinate .x ) + ( pTouchPara ->dX_Y * strScreenCoordinate .y ) + pTouchPara ->dX );        
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	e9d3 4500 	ldrd	r4, r5, [r3]
 8003b3a:	893b      	ldrh	r3, [r7, #8]
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	f7fc fccf 	bl	80004e0 <__aeabi_i2d>
 8003b42:	4602      	mov	r2, r0
 8003b44:	460b      	mov	r3, r1
 8003b46:	4620      	mov	r0, r4
 8003b48:	4629      	mov	r1, r5
 8003b4a:	f7fc fd33 	bl	80005b4 <__aeabi_dmul>
 8003b4e:	4602      	mov	r2, r0
 8003b50:	460b      	mov	r3, r1
 8003b52:	4690      	mov	r8, r2
 8003b54:	4699      	mov	r9, r3
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8003b5c:	897b      	ldrh	r3, [r7, #10]
 8003b5e:	4618      	mov	r0, r3
 8003b60:	f7fc fcbe 	bl	80004e0 <__aeabi_i2d>
 8003b64:	4602      	mov	r2, r0
 8003b66:	460b      	mov	r3, r1
 8003b68:	4620      	mov	r0, r4
 8003b6a:	4629      	mov	r1, r5
 8003b6c:	f7fc fd22 	bl	80005b4 <__aeabi_dmul>
 8003b70:	4602      	mov	r2, r0
 8003b72:	460b      	mov	r3, r1
 8003b74:	4640      	mov	r0, r8
 8003b76:	4649      	mov	r1, r9
 8003b78:	f7fc fb66 	bl	8000248 <__adddf3>
 8003b7c:	4602      	mov	r2, r0
 8003b7e:	460b      	mov	r3, r1
 8003b80:	4610      	mov	r0, r2
 8003b82:	4619      	mov	r1, r3
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8003b8a:	f7fc fb5d 	bl	8000248 <__adddf3>
 8003b8e:	4602      	mov	r2, r0
 8003b90:	460b      	mov	r3, r1
 8003b92:	4610      	mov	r0, r2
 8003b94:	4619      	mov	r1, r3
 8003b96:	f7fc ff47 	bl	8000a28 <__aeabi_d2uiz>
 8003b9a:	4603      	mov	r3, r0
 8003b9c:	b29a      	uxth	r2, r3
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	801a      	strh	r2, [r3, #0]
		pDisplayCoordinate ->y = ( ( pTouchPara ->dY_X * strScreenCoordinate .x ) + ( pTouchPara ->dY_Y * strScreenCoordinate .y ) + pTouchPara ->dY );
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8003ba8:	893b      	ldrh	r3, [r7, #8]
 8003baa:	4618      	mov	r0, r3
 8003bac:	f7fc fc98 	bl	80004e0 <__aeabi_i2d>
 8003bb0:	4602      	mov	r2, r0
 8003bb2:	460b      	mov	r3, r1
 8003bb4:	4620      	mov	r0, r4
 8003bb6:	4629      	mov	r1, r5
 8003bb8:	f7fc fcfc 	bl	80005b4 <__aeabi_dmul>
 8003bbc:	4602      	mov	r2, r0
 8003bbe:	460b      	mov	r3, r1
 8003bc0:	4690      	mov	r8, r2
 8003bc2:	4699      	mov	r9, r3
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 8003bca:	897b      	ldrh	r3, [r7, #10]
 8003bcc:	4618      	mov	r0, r3
 8003bce:	f7fc fc87 	bl	80004e0 <__aeabi_i2d>
 8003bd2:	4602      	mov	r2, r0
 8003bd4:	460b      	mov	r3, r1
 8003bd6:	4620      	mov	r0, r4
 8003bd8:	4629      	mov	r1, r5
 8003bda:	f7fc fceb 	bl	80005b4 <__aeabi_dmul>
 8003bde:	4602      	mov	r2, r0
 8003be0:	460b      	mov	r3, r1
 8003be2:	4640      	mov	r0, r8
 8003be4:	4649      	mov	r1, r9
 8003be6:	f7fc fb2f 	bl	8000248 <__adddf3>
 8003bea:	4602      	mov	r2, r0
 8003bec:	460b      	mov	r3, r1
 8003bee:	4610      	mov	r0, r2
 8003bf0:	4619      	mov	r1, r3
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8003bf8:	f7fc fb26 	bl	8000248 <__adddf3>
 8003bfc:	4602      	mov	r2, r0
 8003bfe:	460b      	mov	r3, r1
 8003c00:	4610      	mov	r0, r2
 8003c02:	4619      	mov	r1, r3
 8003c04:	f7fc ff10 	bl	8000a28 <__aeabi_d2uiz>
 8003c08:	4603      	mov	r3, r0
 8003c0a:	b29a      	uxth	r2, r3
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	805a      	strh	r2, [r3, #2]
 8003c10:	e001      	b.n	8003c16 <XPT2046_Get_TouchedPoint+0x102>

  }
	 
	else ucRet = 0;            
 8003c12:	2300      	movs	r3, #0
 8003c14:	73fb      	strb	r3, [r7, #15]
	
	return ucRet;
 8003c16:	7bfb      	ldrb	r3, [r7, #15]
	
	
} 
 8003c18:	4618      	mov	r0, r3
 8003c1a:	3710      	adds	r7, #16
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
	...

08003c24 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8003c24:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8003c26:	e003      	b.n	8003c30 <LoopCopyDataInit>

08003c28 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8003c28:	4b0b      	ldr	r3, [pc, #44]	; (8003c58 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8003c2a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8003c2c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8003c2e:	3104      	adds	r1, #4

08003c30 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8003c30:	480a      	ldr	r0, [pc, #40]	; (8003c5c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8003c32:	4b0b      	ldr	r3, [pc, #44]	; (8003c60 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8003c34:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8003c36:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8003c38:	d3f6      	bcc.n	8003c28 <CopyDataInit>
  ldr r2, =_sbss
 8003c3a:	4a0a      	ldr	r2, [pc, #40]	; (8003c64 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8003c3c:	e002      	b.n	8003c44 <LoopFillZerobss>

08003c3e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8003c3e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8003c40:	f842 3b04 	str.w	r3, [r2], #4

08003c44 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8003c44:	4b08      	ldr	r3, [pc, #32]	; (8003c68 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8003c46:	429a      	cmp	r2, r3
  bcc FillZerobss
 8003c48:	d3f9      	bcc.n	8003c3e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003c4a:	f7ff fd51 	bl	80036f0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003c4e:	f002 fe69 	bl	8006924 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003c52:	f7fd fe05 	bl	8001860 <main>
  bx lr
 8003c56:	4770      	bx	lr
  ldr r3, =_sidata
 8003c58:	08008008 	.word	0x08008008
  ldr r0, =_sdata
 8003c5c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8003c60:	2000013c 	.word	0x2000013c
  ldr r2, =_sbss
 8003c64:	2000013c 	.word	0x2000013c
  ldr r3, = _ebss
 8003c68:	20000290 	.word	0x20000290

08003c6c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003c6c:	e7fe      	b.n	8003c6c <ADC1_2_IRQHandler>
	...

08003c70 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003c74:	4b08      	ldr	r3, [pc, #32]	; (8003c98 <HAL_Init+0x28>)
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4a07      	ldr	r2, [pc, #28]	; (8003c98 <HAL_Init+0x28>)
 8003c7a:	f043 0310 	orr.w	r3, r3, #16
 8003c7e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003c80:	2003      	movs	r0, #3
 8003c82:	f000 fe31 	bl	80048e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003c86:	2000      	movs	r0, #0
 8003c88:	f000 f808 	bl	8003c9c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003c8c:	f7ff fb66 	bl	800335c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003c90:	2300      	movs	r3, #0
}
 8003c92:	4618      	mov	r0, r3
 8003c94:	bd80      	pop	{r7, pc}
 8003c96:	bf00      	nop
 8003c98:	40022000 	.word	0x40022000

08003c9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b082      	sub	sp, #8
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003ca4:	4b12      	ldr	r3, [pc, #72]	; (8003cf0 <HAL_InitTick+0x54>)
 8003ca6:	681a      	ldr	r2, [r3, #0]
 8003ca8:	4b12      	ldr	r3, [pc, #72]	; (8003cf4 <HAL_InitTick+0x58>)
 8003caa:	781b      	ldrb	r3, [r3, #0]
 8003cac:	4619      	mov	r1, r3
 8003cae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003cb2:	fbb3 f3f1 	udiv	r3, r3, r1
 8003cb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cba:	4618      	mov	r0, r3
 8003cbc:	f000 fe49 	bl	8004952 <HAL_SYSTICK_Config>
 8003cc0:	4603      	mov	r3, r0
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d001      	beq.n	8003cca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	e00e      	b.n	8003ce8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2b0f      	cmp	r3, #15
 8003cce:	d80a      	bhi.n	8003ce6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	6879      	ldr	r1, [r7, #4]
 8003cd4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003cd8:	f000 fe11 	bl	80048fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003cdc:	4a06      	ldr	r2, [pc, #24]	; (8003cf8 <HAL_InitTick+0x5c>)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	e000      	b.n	8003ce8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003ce6:	2301      	movs	r3, #1
}
 8003ce8:	4618      	mov	r0, r3
 8003cea:	3708      	adds	r7, #8
 8003cec:	46bd      	mov	sp, r7
 8003cee:	bd80      	pop	{r7, pc}
 8003cf0:	2000009c 	.word	0x2000009c
 8003cf4:	200000d4 	.word	0x200000d4
 8003cf8:	200000d0 	.word	0x200000d0

08003cfc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003cfc:	b480      	push	{r7}
 8003cfe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003d00:	4b05      	ldr	r3, [pc, #20]	; (8003d18 <HAL_IncTick+0x1c>)
 8003d02:	781b      	ldrb	r3, [r3, #0]
 8003d04:	461a      	mov	r2, r3
 8003d06:	4b05      	ldr	r3, [pc, #20]	; (8003d1c <HAL_IncTick+0x20>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	4413      	add	r3, r2
 8003d0c:	4a03      	ldr	r2, [pc, #12]	; (8003d1c <HAL_IncTick+0x20>)
 8003d0e:	6013      	str	r3, [r2, #0]
}
 8003d10:	bf00      	nop
 8003d12:	46bd      	mov	sp, r7
 8003d14:	bc80      	pop	{r7}
 8003d16:	4770      	bx	lr
 8003d18:	200000d4 	.word	0x200000d4
 8003d1c:	2000027c 	.word	0x2000027c

08003d20 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003d20:	b480      	push	{r7}
 8003d22:	af00      	add	r7, sp, #0
  return uwTick;
 8003d24:	4b02      	ldr	r3, [pc, #8]	; (8003d30 <HAL_GetTick+0x10>)
 8003d26:	681b      	ldr	r3, [r3, #0]
}
 8003d28:	4618      	mov	r0, r3
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	bc80      	pop	{r7}
 8003d2e:	4770      	bx	lr
 8003d30:	2000027c 	.word	0x2000027c

08003d34 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b084      	sub	sp, #16
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003d3c:	f7ff fff0 	bl	8003d20 <HAL_GetTick>
 8003d40:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003d4c:	d005      	beq.n	8003d5a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003d4e:	4b0a      	ldr	r3, [pc, #40]	; (8003d78 <HAL_Delay+0x44>)
 8003d50:	781b      	ldrb	r3, [r3, #0]
 8003d52:	461a      	mov	r2, r3
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	4413      	add	r3, r2
 8003d58:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003d5a:	bf00      	nop
 8003d5c:	f7ff ffe0 	bl	8003d20 <HAL_GetTick>
 8003d60:	4602      	mov	r2, r0
 8003d62:	68bb      	ldr	r3, [r7, #8]
 8003d64:	1ad3      	subs	r3, r2, r3
 8003d66:	68fa      	ldr	r2, [r7, #12]
 8003d68:	429a      	cmp	r2, r3
 8003d6a:	d8f7      	bhi.n	8003d5c <HAL_Delay+0x28>
  {
  }
}
 8003d6c:	bf00      	nop
 8003d6e:	bf00      	nop
 8003d70:	3710      	adds	r7, #16
 8003d72:	46bd      	mov	sp, r7
 8003d74:	bd80      	pop	{r7, pc}
 8003d76:	bf00      	nop
 8003d78:	200000d4 	.word	0x200000d4

08003d7c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b086      	sub	sp, #24
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003d84:	2300      	movs	r3, #0
 8003d86:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8003d88:	2300      	movs	r3, #0
 8003d8a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8003d90:	2300      	movs	r3, #0
 8003d92:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d101      	bne.n	8003d9e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	e0ce      	b.n	8003f3c <HAL_ADC_Init+0x1c0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	689b      	ldr	r3, [r3, #8]
 8003da2:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d109      	bne.n	8003dc0 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2200      	movs	r2, #0
 8003db0:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	2200      	movs	r2, #0
 8003db6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003dba:	6878      	ldr	r0, [r7, #4]
 8003dbc:	f7ff fb00 	bl	80033c0 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8003dc0:	6878      	ldr	r0, [r7, #4]
 8003dc2:	f000 fbd7 	bl	8004574 <ADC_ConversionStop_Disable>
 8003dc6:	4603      	mov	r3, r0
 8003dc8:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dce:	f003 0310 	and.w	r3, r3, #16
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	f040 80a9 	bne.w	8003f2a <HAL_ADC_Init+0x1ae>
 8003dd8:	7dfb      	ldrb	r3, [r7, #23]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	f040 80a5 	bne.w	8003f2a <HAL_ADC_Init+0x1ae>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003de4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003de8:	f023 0302 	bic.w	r3, r3, #2
 8003dec:	f043 0202 	orr.w	r2, r3, #2
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	4951      	ldr	r1, [pc, #324]	; (8003f44 <HAL_ADC_Init+0x1c8>)
 8003dfe:	428b      	cmp	r3, r1
 8003e00:	d10a      	bne.n	8003e18 <HAL_ADC_Init+0x9c>
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	69db      	ldr	r3, [r3, #28]
 8003e06:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003e0a:	d002      	beq.n	8003e12 <HAL_ADC_Init+0x96>
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	69db      	ldr	r3, [r3, #28]
 8003e10:	e004      	b.n	8003e1c <HAL_ADC_Init+0xa0>
 8003e12:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003e16:	e001      	b.n	8003e1c <HAL_ADC_Init+0xa0>
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003e1c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	7b1b      	ldrb	r3, [r3, #12]
 8003e22:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8003e24:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003e26:	68ba      	ldr	r2, [r7, #8]
 8003e28:	4313      	orrs	r3, r2
 8003e2a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	689b      	ldr	r3, [r3, #8]
 8003e30:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e34:	d003      	beq.n	8003e3e <HAL_ADC_Init+0xc2>
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	689b      	ldr	r3, [r3, #8]
 8003e3a:	2b01      	cmp	r3, #1
 8003e3c:	d102      	bne.n	8003e44 <HAL_ADC_Init+0xc8>
 8003e3e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003e42:	e000      	b.n	8003e46 <HAL_ADC_Init+0xca>
 8003e44:	2300      	movs	r3, #0
 8003e46:	693a      	ldr	r2, [r7, #16]
 8003e48:	4313      	orrs	r3, r2
 8003e4a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	7d1b      	ldrb	r3, [r3, #20]
 8003e50:	2b01      	cmp	r3, #1
 8003e52:	d119      	bne.n	8003e88 <HAL_ADC_Init+0x10c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	7b1b      	ldrb	r3, [r3, #12]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d109      	bne.n	8003e70 <HAL_ADC_Init+0xf4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	699b      	ldr	r3, [r3, #24]
 8003e60:	3b01      	subs	r3, #1
 8003e62:	035a      	lsls	r2, r3, #13
 8003e64:	693b      	ldr	r3, [r7, #16]
 8003e66:	4313      	orrs	r3, r2
 8003e68:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003e6c:	613b      	str	r3, [r7, #16]
 8003e6e:	e00b      	b.n	8003e88 <HAL_ADC_Init+0x10c>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e74:	f043 0220 	orr.w	r2, r3, #32
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e80:	f043 0201 	orr.w	r2, r3, #1
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	685b      	ldr	r3, [r3, #4]
 8003e8e:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	693a      	ldr	r2, [r7, #16]
 8003e98:	430a      	orrs	r2, r1
 8003e9a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	689a      	ldr	r2, [r3, #8]
 8003ea2:	4b29      	ldr	r3, [pc, #164]	; (8003f48 <HAL_ADC_Init+0x1cc>)
 8003ea4:	4013      	ands	r3, r2
 8003ea6:	687a      	ldr	r2, [r7, #4]
 8003ea8:	6812      	ldr	r2, [r2, #0]
 8003eaa:	68b9      	ldr	r1, [r7, #8]
 8003eac:	430b      	orrs	r3, r1
 8003eae:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	689b      	ldr	r3, [r3, #8]
 8003eb4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003eb8:	d003      	beq.n	8003ec2 <HAL_ADC_Init+0x146>
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	689b      	ldr	r3, [r3, #8]
 8003ebe:	2b01      	cmp	r3, #1
 8003ec0:	d104      	bne.n	8003ecc <HAL_ADC_Init+0x150>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	691b      	ldr	r3, [r3, #16]
 8003ec6:	3b01      	subs	r3, #1
 8003ec8:	051b      	lsls	r3, r3, #20
 8003eca:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ed2:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	68fa      	ldr	r2, [r7, #12]
 8003edc:	430a      	orrs	r2, r1
 8003ede:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	689a      	ldr	r2, [r3, #8]
 8003ee6:	4b19      	ldr	r3, [pc, #100]	; (8003f4c <HAL_ADC_Init+0x1d0>)
 8003ee8:	4013      	ands	r3, r2
 8003eea:	68ba      	ldr	r2, [r7, #8]
 8003eec:	429a      	cmp	r2, r3
 8003eee:	d10b      	bne.n	8003f08 <HAL_ADC_Init+0x18c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003efa:	f023 0303 	bic.w	r3, r3, #3
 8003efe:	f043 0201 	orr.w	r2, r3, #1
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003f06:	e018      	b.n	8003f3a <HAL_ADC_Init+0x1be>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f0c:	f023 0312 	bic.w	r3, r3, #18
 8003f10:	f043 0210 	orr.w	r2, r3, #16
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f1c:	f043 0201 	orr.w	r2, r3, #1
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8003f24:	2301      	movs	r3, #1
 8003f26:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003f28:	e007      	b.n	8003f3a <HAL_ADC_Init+0x1be>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f2e:	f043 0210 	orr.w	r2, r3, #16
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8003f36:	2301      	movs	r3, #1
 8003f38:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003f3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	3718      	adds	r7, #24
 8003f40:	46bd      	mov	sp, r7
 8003f42:	bd80      	pop	{r7, pc}
 8003f44:	40013c00 	.word	0x40013c00
 8003f48:	ffe1f7fd 	.word	0xffe1f7fd
 8003f4c:	ff1f0efe 	.word	0xff1f0efe

08003f50 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b084      	sub	sp, #16
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003f58:	2300      	movs	r3, #0
 8003f5a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003f62:	2b01      	cmp	r3, #1
 8003f64:	d101      	bne.n	8003f6a <HAL_ADC_Start+0x1a>
 8003f66:	2302      	movs	r3, #2
 8003f68:	e098      	b.n	800409c <HAL_ADC_Start+0x14c>
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2201      	movs	r2, #1
 8003f6e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8003f72:	6878      	ldr	r0, [r7, #4]
 8003f74:	f000 faa4 	bl	80044c0 <ADC_Enable>
 8003f78:	4603      	mov	r3, r0
 8003f7a:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8003f7c:	7bfb      	ldrb	r3, [r7, #15]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	f040 8087 	bne.w	8004092 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f88:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f8c:	f023 0301 	bic.w	r3, r3, #1
 8003f90:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	4a41      	ldr	r2, [pc, #260]	; (80040a4 <HAL_ADC_Start+0x154>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d105      	bne.n	8003fae <HAL_ADC_Start+0x5e>
 8003fa2:	4b41      	ldr	r3, [pc, #260]	; (80040a8 <HAL_ADC_Start+0x158>)
 8003fa4:	685b      	ldr	r3, [r3, #4]
 8003fa6:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d115      	bne.n	8003fda <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fb2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	685b      	ldr	r3, [r3, #4]
 8003fc0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d026      	beq.n	8004016 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fcc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003fd0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003fd8:	e01d      	b.n	8004016 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fde:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4a2f      	ldr	r2, [pc, #188]	; (80040a8 <HAL_ADC_Start+0x158>)
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d004      	beq.n	8003ffa <HAL_ADC_Start+0xaa>
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	4a2b      	ldr	r2, [pc, #172]	; (80040a4 <HAL_ADC_Start+0x154>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d10d      	bne.n	8004016 <HAL_ADC_Start+0xc6>
 8003ffa:	4b2b      	ldr	r3, [pc, #172]	; (80040a8 <HAL_ADC_Start+0x158>)
 8003ffc:	685b      	ldr	r3, [r3, #4]
 8003ffe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004002:	2b00      	cmp	r3, #0
 8004004:	d007      	beq.n	8004016 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800400a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800400e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800401a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800401e:	2b00      	cmp	r3, #0
 8004020:	d006      	beq.n	8004030 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004026:	f023 0206 	bic.w	r2, r3, #6
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	62da      	str	r2, [r3, #44]	; 0x2c
 800402e:	e002      	b.n	8004036 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2200      	movs	r2, #0
 8004034:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2200      	movs	r2, #0
 800403a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f06f 0202 	mvn.w	r2, #2
 8004046:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	689b      	ldr	r3, [r3, #8]
 800404e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8004052:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8004056:	d113      	bne.n	8004080 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800405c:	4a11      	ldr	r2, [pc, #68]	; (80040a4 <HAL_ADC_Start+0x154>)
 800405e:	4293      	cmp	r3, r2
 8004060:	d105      	bne.n	800406e <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8004062:	4b11      	ldr	r3, [pc, #68]	; (80040a8 <HAL_ADC_Start+0x158>)
 8004064:	685b      	ldr	r3, [r3, #4]
 8004066:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800406a:	2b00      	cmp	r3, #0
 800406c:	d108      	bne.n	8004080 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	689a      	ldr	r2, [r3, #8]
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 800407c:	609a      	str	r2, [r3, #8]
 800407e:	e00c      	b.n	800409a <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	689a      	ldr	r2, [r3, #8]
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800408e:	609a      	str	r2, [r3, #8]
 8004090:	e003      	b.n	800409a <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	2200      	movs	r2, #0
 8004096:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 800409a:	7bfb      	ldrb	r3, [r7, #15]
}
 800409c:	4618      	mov	r0, r3
 800409e:	3710      	adds	r7, #16
 80040a0:	46bd      	mov	sp, r7
 80040a2:	bd80      	pop	{r7, pc}
 80040a4:	40012800 	.word	0x40012800
 80040a8:	40012400 	.word	0x40012400

080040ac <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80040ac:	b590      	push	{r4, r7, lr}
 80040ae:	b087      	sub	sp, #28
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
 80040b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80040b6:	2300      	movs	r3, #0
 80040b8:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 80040ba:	2300      	movs	r3, #0
 80040bc:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 80040be:	2300      	movs	r3, #0
 80040c0:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 80040c2:	f7ff fe2d 	bl	8003d20 <HAL_GetTick>
 80040c6:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	689b      	ldr	r3, [r3, #8]
 80040ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d00b      	beq.n	80040ee <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040da:	f043 0220 	orr.w	r2, r3, #32
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2200      	movs	r2, #0
 80040e6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 80040ea:	2301      	movs	r3, #1
 80040ec:	e0d3      	b.n	8004296 <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	685b      	ldr	r3, [r3, #4]
 80040f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d131      	bne.n	8004160 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004102:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8004106:	2b00      	cmp	r3, #0
 8004108:	d12a      	bne.n	8004160 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800410a:	e021      	b.n	8004150 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004112:	d01d      	beq.n	8004150 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	2b00      	cmp	r3, #0
 8004118:	d007      	beq.n	800412a <HAL_ADC_PollForConversion+0x7e>
 800411a:	f7ff fe01 	bl	8003d20 <HAL_GetTick>
 800411e:	4602      	mov	r2, r0
 8004120:	697b      	ldr	r3, [r7, #20]
 8004122:	1ad3      	subs	r3, r2, r3
 8004124:	683a      	ldr	r2, [r7, #0]
 8004126:	429a      	cmp	r2, r3
 8004128:	d212      	bcs.n	8004150 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f003 0302 	and.w	r3, r3, #2
 8004134:	2b00      	cmp	r3, #0
 8004136:	d10b      	bne.n	8004150 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800413c:	f043 0204 	orr.w	r2, r3, #4
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2200      	movs	r2, #0
 8004148:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 800414c:	2303      	movs	r3, #3
 800414e:	e0a2      	b.n	8004296 <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f003 0302 	and.w	r3, r3, #2
 800415a:	2b00      	cmp	r3, #0
 800415c:	d0d6      	beq.n	800410c <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800415e:	e070      	b.n	8004242 <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8004160:	4b4f      	ldr	r3, [pc, #316]	; (80042a0 <HAL_ADC_PollForConversion+0x1f4>)
 8004162:	681c      	ldr	r4, [r3, #0]
 8004164:	2002      	movs	r0, #2
 8004166:	f001 faaf 	bl	80056c8 <HAL_RCCEx_GetPeriphCLKFreq>
 800416a:	4603      	mov	r3, r0
 800416c:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	6919      	ldr	r1, [r3, #16]
 8004176:	4b4b      	ldr	r3, [pc, #300]	; (80042a4 <HAL_ADC_PollForConversion+0x1f8>)
 8004178:	400b      	ands	r3, r1
 800417a:	2b00      	cmp	r3, #0
 800417c:	d118      	bne.n	80041b0 <HAL_ADC_PollForConversion+0x104>
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	68d9      	ldr	r1, [r3, #12]
 8004184:	4b48      	ldr	r3, [pc, #288]	; (80042a8 <HAL_ADC_PollForConversion+0x1fc>)
 8004186:	400b      	ands	r3, r1
 8004188:	2b00      	cmp	r3, #0
 800418a:	d111      	bne.n	80041b0 <HAL_ADC_PollForConversion+0x104>
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	6919      	ldr	r1, [r3, #16]
 8004192:	4b46      	ldr	r3, [pc, #280]	; (80042ac <HAL_ADC_PollForConversion+0x200>)
 8004194:	400b      	ands	r3, r1
 8004196:	2b00      	cmp	r3, #0
 8004198:	d108      	bne.n	80041ac <HAL_ADC_PollForConversion+0x100>
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	68d9      	ldr	r1, [r3, #12]
 80041a0:	4b43      	ldr	r3, [pc, #268]	; (80042b0 <HAL_ADC_PollForConversion+0x204>)
 80041a2:	400b      	ands	r3, r1
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d101      	bne.n	80041ac <HAL_ADC_PollForConversion+0x100>
 80041a8:	2314      	movs	r3, #20
 80041aa:	e020      	b.n	80041ee <HAL_ADC_PollForConversion+0x142>
 80041ac:	2329      	movs	r3, #41	; 0x29
 80041ae:	e01e      	b.n	80041ee <HAL_ADC_PollForConversion+0x142>
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	6919      	ldr	r1, [r3, #16]
 80041b6:	4b3d      	ldr	r3, [pc, #244]	; (80042ac <HAL_ADC_PollForConversion+0x200>)
 80041b8:	400b      	ands	r3, r1
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d106      	bne.n	80041cc <HAL_ADC_PollForConversion+0x120>
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	68d9      	ldr	r1, [r3, #12]
 80041c4:	4b3a      	ldr	r3, [pc, #232]	; (80042b0 <HAL_ADC_PollForConversion+0x204>)
 80041c6:	400b      	ands	r3, r1
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d00d      	beq.n	80041e8 <HAL_ADC_PollForConversion+0x13c>
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	6919      	ldr	r1, [r3, #16]
 80041d2:	4b38      	ldr	r3, [pc, #224]	; (80042b4 <HAL_ADC_PollForConversion+0x208>)
 80041d4:	400b      	ands	r3, r1
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d108      	bne.n	80041ec <HAL_ADC_PollForConversion+0x140>
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	68d9      	ldr	r1, [r3, #12]
 80041e0:	4b34      	ldr	r3, [pc, #208]	; (80042b4 <HAL_ADC_PollForConversion+0x208>)
 80041e2:	400b      	ands	r3, r1
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d101      	bne.n	80041ec <HAL_ADC_PollForConversion+0x140>
 80041e8:	2354      	movs	r3, #84	; 0x54
 80041ea:	e000      	b.n	80041ee <HAL_ADC_PollForConversion+0x142>
 80041ec:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 80041ee:	fb02 f303 	mul.w	r3, r2, r3
 80041f2:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80041f4:	e021      	b.n	800423a <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80041fc:	d01a      	beq.n	8004234 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d007      	beq.n	8004214 <HAL_ADC_PollForConversion+0x168>
 8004204:	f7ff fd8c 	bl	8003d20 <HAL_GetTick>
 8004208:	4602      	mov	r2, r0
 800420a:	697b      	ldr	r3, [r7, #20]
 800420c:	1ad3      	subs	r3, r2, r3
 800420e:	683a      	ldr	r2, [r7, #0]
 8004210:	429a      	cmp	r2, r3
 8004212:	d20f      	bcs.n	8004234 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	693a      	ldr	r2, [r7, #16]
 8004218:	429a      	cmp	r2, r3
 800421a:	d90b      	bls.n	8004234 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004220:	f043 0204 	orr.w	r2, r3, #4
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2200      	movs	r2, #0
 800422c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 8004230:	2303      	movs	r3, #3
 8004232:	e030      	b.n	8004296 <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	3301      	adds	r3, #1
 8004238:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	693a      	ldr	r2, [r7, #16]
 800423e:	429a      	cmp	r2, r3
 8004240:	d8d9      	bhi.n	80041f6 <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f06f 0212 	mvn.w	r2, #18
 800424a:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004250:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	689b      	ldr	r3, [r3, #8]
 800425e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8004262:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8004266:	d115      	bne.n	8004294 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800426c:	2b00      	cmp	r3, #0
 800426e:	d111      	bne.n	8004294 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004274:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004280:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004284:	2b00      	cmp	r3, #0
 8004286:	d105      	bne.n	8004294 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800428c:	f043 0201 	orr.w	r2, r3, #1
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8004294:	2300      	movs	r3, #0
}
 8004296:	4618      	mov	r0, r3
 8004298:	371c      	adds	r7, #28
 800429a:	46bd      	mov	sp, r7
 800429c:	bd90      	pop	{r4, r7, pc}
 800429e:	bf00      	nop
 80042a0:	2000009c 	.word	0x2000009c
 80042a4:	24924924 	.word	0x24924924
 80042a8:	00924924 	.word	0x00924924
 80042ac:	12492492 	.word	0x12492492
 80042b0:	00492492 	.word	0x00492492
 80042b4:	00249249 	.word	0x00249249

080042b8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80042b8:	b480      	push	{r7}
 80042ba:	b083      	sub	sp, #12
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80042c6:	4618      	mov	r0, r3
 80042c8:	370c      	adds	r7, #12
 80042ca:	46bd      	mov	sp, r7
 80042cc:	bc80      	pop	{r7}
 80042ce:	4770      	bx	lr

080042d0 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80042d0:	b480      	push	{r7}
 80042d2:	b085      	sub	sp, #20
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
 80042d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80042da:	2300      	movs	r3, #0
 80042dc:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80042de:	2300      	movs	r3, #0
 80042e0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80042e8:	2b01      	cmp	r3, #1
 80042ea:	d101      	bne.n	80042f0 <HAL_ADC_ConfigChannel+0x20>
 80042ec:	2302      	movs	r3, #2
 80042ee:	e0dc      	b.n	80044aa <HAL_ADC_ConfigChannel+0x1da>
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2201      	movs	r2, #1
 80042f4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	685b      	ldr	r3, [r3, #4]
 80042fc:	2b06      	cmp	r3, #6
 80042fe:	d81c      	bhi.n	800433a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004306:	683b      	ldr	r3, [r7, #0]
 8004308:	685a      	ldr	r2, [r3, #4]
 800430a:	4613      	mov	r3, r2
 800430c:	009b      	lsls	r3, r3, #2
 800430e:	4413      	add	r3, r2
 8004310:	3b05      	subs	r3, #5
 8004312:	221f      	movs	r2, #31
 8004314:	fa02 f303 	lsl.w	r3, r2, r3
 8004318:	43db      	mvns	r3, r3
 800431a:	4019      	ands	r1, r3
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	6818      	ldr	r0, [r3, #0]
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	685a      	ldr	r2, [r3, #4]
 8004324:	4613      	mov	r3, r2
 8004326:	009b      	lsls	r3, r3, #2
 8004328:	4413      	add	r3, r2
 800432a:	3b05      	subs	r3, #5
 800432c:	fa00 f203 	lsl.w	r2, r0, r3
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	430a      	orrs	r2, r1
 8004336:	635a      	str	r2, [r3, #52]	; 0x34
 8004338:	e03c      	b.n	80043b4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	685b      	ldr	r3, [r3, #4]
 800433e:	2b0c      	cmp	r3, #12
 8004340:	d81c      	bhi.n	800437c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	685a      	ldr	r2, [r3, #4]
 800434c:	4613      	mov	r3, r2
 800434e:	009b      	lsls	r3, r3, #2
 8004350:	4413      	add	r3, r2
 8004352:	3b23      	subs	r3, #35	; 0x23
 8004354:	221f      	movs	r2, #31
 8004356:	fa02 f303 	lsl.w	r3, r2, r3
 800435a:	43db      	mvns	r3, r3
 800435c:	4019      	ands	r1, r3
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	6818      	ldr	r0, [r3, #0]
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	685a      	ldr	r2, [r3, #4]
 8004366:	4613      	mov	r3, r2
 8004368:	009b      	lsls	r3, r3, #2
 800436a:	4413      	add	r3, r2
 800436c:	3b23      	subs	r3, #35	; 0x23
 800436e:	fa00 f203 	lsl.w	r2, r0, r3
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	430a      	orrs	r2, r1
 8004378:	631a      	str	r2, [r3, #48]	; 0x30
 800437a:	e01b      	b.n	80043b4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	685a      	ldr	r2, [r3, #4]
 8004386:	4613      	mov	r3, r2
 8004388:	009b      	lsls	r3, r3, #2
 800438a:	4413      	add	r3, r2
 800438c:	3b41      	subs	r3, #65	; 0x41
 800438e:	221f      	movs	r2, #31
 8004390:	fa02 f303 	lsl.w	r3, r2, r3
 8004394:	43db      	mvns	r3, r3
 8004396:	4019      	ands	r1, r3
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	6818      	ldr	r0, [r3, #0]
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	685a      	ldr	r2, [r3, #4]
 80043a0:	4613      	mov	r3, r2
 80043a2:	009b      	lsls	r3, r3, #2
 80043a4:	4413      	add	r3, r2
 80043a6:	3b41      	subs	r3, #65	; 0x41
 80043a8:	fa00 f203 	lsl.w	r2, r0, r3
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	430a      	orrs	r2, r1
 80043b2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	2b09      	cmp	r3, #9
 80043ba:	d91c      	bls.n	80043f6 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	68d9      	ldr	r1, [r3, #12]
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	681a      	ldr	r2, [r3, #0]
 80043c6:	4613      	mov	r3, r2
 80043c8:	005b      	lsls	r3, r3, #1
 80043ca:	4413      	add	r3, r2
 80043cc:	3b1e      	subs	r3, #30
 80043ce:	2207      	movs	r2, #7
 80043d0:	fa02 f303 	lsl.w	r3, r2, r3
 80043d4:	43db      	mvns	r3, r3
 80043d6:	4019      	ands	r1, r3
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	6898      	ldr	r0, [r3, #8]
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	681a      	ldr	r2, [r3, #0]
 80043e0:	4613      	mov	r3, r2
 80043e2:	005b      	lsls	r3, r3, #1
 80043e4:	4413      	add	r3, r2
 80043e6:	3b1e      	subs	r3, #30
 80043e8:	fa00 f203 	lsl.w	r2, r0, r3
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	430a      	orrs	r2, r1
 80043f2:	60da      	str	r2, [r3, #12]
 80043f4:	e019      	b.n	800442a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	6919      	ldr	r1, [r3, #16]
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	681a      	ldr	r2, [r3, #0]
 8004400:	4613      	mov	r3, r2
 8004402:	005b      	lsls	r3, r3, #1
 8004404:	4413      	add	r3, r2
 8004406:	2207      	movs	r2, #7
 8004408:	fa02 f303 	lsl.w	r3, r2, r3
 800440c:	43db      	mvns	r3, r3
 800440e:	4019      	ands	r1, r3
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	6898      	ldr	r0, [r3, #8]
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	681a      	ldr	r2, [r3, #0]
 8004418:	4613      	mov	r3, r2
 800441a:	005b      	lsls	r3, r3, #1
 800441c:	4413      	add	r3, r2
 800441e:	fa00 f203 	lsl.w	r2, r0, r3
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	430a      	orrs	r2, r1
 8004428:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800442a:	683b      	ldr	r3, [r7, #0]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	2b10      	cmp	r3, #16
 8004430:	d003      	beq.n	800443a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8004436:	2b11      	cmp	r3, #17
 8004438:	d132      	bne.n	80044a0 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	4a1d      	ldr	r2, [pc, #116]	; (80044b4 <HAL_ADC_ConfigChannel+0x1e4>)
 8004440:	4293      	cmp	r3, r2
 8004442:	d125      	bne.n	8004490 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	689b      	ldr	r3, [r3, #8]
 800444a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800444e:	2b00      	cmp	r3, #0
 8004450:	d126      	bne.n	80044a0 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	689a      	ldr	r2, [r3, #8]
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8004460:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	2b10      	cmp	r3, #16
 8004468:	d11a      	bne.n	80044a0 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800446a:	4b13      	ldr	r3, [pc, #76]	; (80044b8 <HAL_ADC_ConfigChannel+0x1e8>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	4a13      	ldr	r2, [pc, #76]	; (80044bc <HAL_ADC_ConfigChannel+0x1ec>)
 8004470:	fba2 2303 	umull	r2, r3, r2, r3
 8004474:	0c9a      	lsrs	r2, r3, #18
 8004476:	4613      	mov	r3, r2
 8004478:	009b      	lsls	r3, r3, #2
 800447a:	4413      	add	r3, r2
 800447c:	005b      	lsls	r3, r3, #1
 800447e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004480:	e002      	b.n	8004488 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8004482:	68bb      	ldr	r3, [r7, #8]
 8004484:	3b01      	subs	r3, #1
 8004486:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004488:	68bb      	ldr	r3, [r7, #8]
 800448a:	2b00      	cmp	r3, #0
 800448c:	d1f9      	bne.n	8004482 <HAL_ADC_ConfigChannel+0x1b2>
 800448e:	e007      	b.n	80044a0 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004494:	f043 0220 	orr.w	r2, r3, #32
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 800449c:	2301      	movs	r3, #1
 800449e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2200      	movs	r2, #0
 80044a4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80044a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80044aa:	4618      	mov	r0, r3
 80044ac:	3714      	adds	r7, #20
 80044ae:	46bd      	mov	sp, r7
 80044b0:	bc80      	pop	{r7}
 80044b2:	4770      	bx	lr
 80044b4:	40012400 	.word	0x40012400
 80044b8:	2000009c 	.word	0x2000009c
 80044bc:	431bde83 	.word	0x431bde83

080044c0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b084      	sub	sp, #16
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80044c8:	2300      	movs	r3, #0
 80044ca:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80044cc:	2300      	movs	r3, #0
 80044ce:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	689b      	ldr	r3, [r3, #8]
 80044d6:	f003 0301 	and.w	r3, r3, #1
 80044da:	2b01      	cmp	r3, #1
 80044dc:	d040      	beq.n	8004560 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	689a      	ldr	r2, [r3, #8]
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f042 0201 	orr.w	r2, r2, #1
 80044ec:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80044ee:	4b1f      	ldr	r3, [pc, #124]	; (800456c <ADC_Enable+0xac>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	4a1f      	ldr	r2, [pc, #124]	; (8004570 <ADC_Enable+0xb0>)
 80044f4:	fba2 2303 	umull	r2, r3, r2, r3
 80044f8:	0c9b      	lsrs	r3, r3, #18
 80044fa:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80044fc:	e002      	b.n	8004504 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80044fe:	68bb      	ldr	r3, [r7, #8]
 8004500:	3b01      	subs	r3, #1
 8004502:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8004504:	68bb      	ldr	r3, [r7, #8]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d1f9      	bne.n	80044fe <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800450a:	f7ff fc09 	bl	8003d20 <HAL_GetTick>
 800450e:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8004510:	e01f      	b.n	8004552 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004512:	f7ff fc05 	bl	8003d20 <HAL_GetTick>
 8004516:	4602      	mov	r2, r0
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	1ad3      	subs	r3, r2, r3
 800451c:	2b02      	cmp	r3, #2
 800451e:	d918      	bls.n	8004552 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	689b      	ldr	r3, [r3, #8]
 8004526:	f003 0301 	and.w	r3, r3, #1
 800452a:	2b01      	cmp	r3, #1
 800452c:	d011      	beq.n	8004552 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004532:	f043 0210 	orr.w	r2, r3, #16
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800453e:	f043 0201 	orr.w	r2, r3, #1
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2200      	movs	r2, #0
 800454a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 800454e:	2301      	movs	r3, #1
 8004550:	e007      	b.n	8004562 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	689b      	ldr	r3, [r3, #8]
 8004558:	f003 0301 	and.w	r3, r3, #1
 800455c:	2b01      	cmp	r3, #1
 800455e:	d1d8      	bne.n	8004512 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8004560:	2300      	movs	r3, #0
}
 8004562:	4618      	mov	r0, r3
 8004564:	3710      	adds	r7, #16
 8004566:	46bd      	mov	sp, r7
 8004568:	bd80      	pop	{r7, pc}
 800456a:	bf00      	nop
 800456c:	2000009c 	.word	0x2000009c
 8004570:	431bde83 	.word	0x431bde83

08004574 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8004574:	b580      	push	{r7, lr}
 8004576:	b084      	sub	sp, #16
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800457c:	2300      	movs	r3, #0
 800457e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	689b      	ldr	r3, [r3, #8]
 8004586:	f003 0301 	and.w	r3, r3, #1
 800458a:	2b01      	cmp	r3, #1
 800458c:	d12e      	bne.n	80045ec <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	689a      	ldr	r2, [r3, #8]
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f022 0201 	bic.w	r2, r2, #1
 800459c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800459e:	f7ff fbbf 	bl	8003d20 <HAL_GetTick>
 80045a2:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80045a4:	e01b      	b.n	80045de <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80045a6:	f7ff fbbb 	bl	8003d20 <HAL_GetTick>
 80045aa:	4602      	mov	r2, r0
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	1ad3      	subs	r3, r2, r3
 80045b0:	2b02      	cmp	r3, #2
 80045b2:	d914      	bls.n	80045de <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	689b      	ldr	r3, [r3, #8]
 80045ba:	f003 0301 	and.w	r3, r3, #1
 80045be:	2b01      	cmp	r3, #1
 80045c0:	d10d      	bne.n	80045de <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045c6:	f043 0210 	orr.w	r2, r3, #16
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045d2:	f043 0201 	orr.w	r2, r3, #1
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 80045da:	2301      	movs	r3, #1
 80045dc:	e007      	b.n	80045ee <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	689b      	ldr	r3, [r3, #8]
 80045e4:	f003 0301 	and.w	r3, r3, #1
 80045e8:	2b01      	cmp	r3, #1
 80045ea:	d0dc      	beq.n	80045a6 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80045ec:	2300      	movs	r3, #0
}
 80045ee:	4618      	mov	r0, r3
 80045f0:	3710      	adds	r7, #16
 80045f2:	46bd      	mov	sp, r7
 80045f4:	bd80      	pop	{r7, pc}
	...

080045f8 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 80045f8:	b590      	push	{r4, r7, lr}
 80045fa:	b087      	sub	sp, #28
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004600:	2300      	movs	r3, #0
 8004602:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8004604:	2300      	movs	r3, #0
 8004606:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800460e:	2b01      	cmp	r3, #1
 8004610:	d101      	bne.n	8004616 <HAL_ADCEx_Calibration_Start+0x1e>
 8004612:	2302      	movs	r3, #2
 8004614:	e095      	b.n	8004742 <HAL_ADCEx_Calibration_Start+0x14a>
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	2201      	movs	r2, #1
 800461a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  /* 1. Calibration prerequisite:                                             */
  /*    - ADC must be disabled for at least two ADC clock cycles in disable   */
  /*      mode before ADC enable                                              */
  /* Stop potential conversion on going, on regular and injected groups       */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800461e:	6878      	ldr	r0, [r7, #4]
 8004620:	f7ff ffa8 	bl	8004574 <ADC_ConversionStop_Disable>
 8004624:	4603      	mov	r3, r0
 8004626:	75fb      	strb	r3, [r7, #23]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8004628:	7dfb      	ldrb	r3, [r7, #23]
 800462a:	2b00      	cmp	r3, #0
 800462c:	f040 8084 	bne.w	8004738 <HAL_ADCEx_Calibration_Start+0x140>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004634:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004638:	f023 0302 	bic.w	r3, r3, #2
 800463c:	f043 0202 	orr.w	r2, r3, #2
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8004644:	4b41      	ldr	r3, [pc, #260]	; (800474c <HAL_ADCEx_Calibration_Start+0x154>)
 8004646:	681c      	ldr	r4, [r3, #0]
 8004648:	2002      	movs	r0, #2
 800464a:	f001 f83d 	bl	80056c8 <HAL_RCCEx_GetPeriphCLKFreq>
 800464e:	4603      	mov	r3, r0
 8004650:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8004654:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8004656:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 8004658:	e002      	b.n	8004660 <HAL_ADCEx_Calibration_Start+0x68>
    {
      wait_loop_index--;
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	3b01      	subs	r3, #1
 800465e:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	2b00      	cmp	r3, #0
 8004664:	d1f9      	bne.n	800465a <HAL_ADCEx_Calibration_Start+0x62>
    }
    
    /* 2. Enable the ADC peripheral */
    ADC_Enable(hadc);
 8004666:	6878      	ldr	r0, [r7, #4]
 8004668:	f7ff ff2a 	bl	80044c0 <ADC_Enable>
    
    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	689a      	ldr	r2, [r3, #8]
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f042 0208 	orr.w	r2, r2, #8
 800467a:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 800467c:	f7ff fb50 	bl	8003d20 <HAL_GetTick>
 8004680:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8004682:	e01b      	b.n	80046bc <HAL_ADCEx_Calibration_Start+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8004684:	f7ff fb4c 	bl	8003d20 <HAL_GetTick>
 8004688:	4602      	mov	r2, r0
 800468a:	693b      	ldr	r3, [r7, #16]
 800468c:	1ad3      	subs	r3, r2, r3
 800468e:	2b0a      	cmp	r3, #10
 8004690:	d914      	bls.n	80046bc <HAL_ADCEx_Calibration_Start+0xc4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	689b      	ldr	r3, [r3, #8]
 8004698:	f003 0308 	and.w	r3, r3, #8
 800469c:	2b00      	cmp	r3, #0
 800469e:	d00d      	beq.n	80046bc <HAL_ADCEx_Calibration_Start+0xc4>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046a4:	f023 0312 	bic.w	r3, r3, #18
 80046a8:	f043 0210 	orr.w	r2, r3, #16
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2200      	movs	r2, #0
 80046b4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80046b8:	2301      	movs	r3, #1
 80046ba:	e042      	b.n	8004742 <HAL_ADCEx_Calibration_Start+0x14a>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	689b      	ldr	r3, [r3, #8]
 80046c2:	f003 0308 	and.w	r3, r3, #8
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d1dc      	bne.n	8004684 <HAL_ADCEx_Calibration_Start+0x8c>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	689a      	ldr	r2, [r3, #8]
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f042 0204 	orr.w	r2, r2, #4
 80046d8:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 80046da:	f7ff fb21 	bl	8003d20 <HAL_GetTick>
 80046de:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80046e0:	e01b      	b.n	800471a <HAL_ADCEx_Calibration_Start+0x122>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80046e2:	f7ff fb1d 	bl	8003d20 <HAL_GetTick>
 80046e6:	4602      	mov	r2, r0
 80046e8:	693b      	ldr	r3, [r7, #16]
 80046ea:	1ad3      	subs	r3, r2, r3
 80046ec:	2b0a      	cmp	r3, #10
 80046ee:	d914      	bls.n	800471a <HAL_ADCEx_Calibration_Start+0x122>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	689b      	ldr	r3, [r3, #8]
 80046f6:	f003 0304 	and.w	r3, r3, #4
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d00d      	beq.n	800471a <HAL_ADCEx_Calibration_Start+0x122>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004702:	f023 0312 	bic.w	r3, r3, #18
 8004706:	f043 0210 	orr.w	r2, r3, #16
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2200      	movs	r2, #0
 8004712:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8004716:	2301      	movs	r3, #1
 8004718:	e013      	b.n	8004742 <HAL_ADCEx_Calibration_Start+0x14a>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	689b      	ldr	r3, [r3, #8]
 8004720:	f003 0304 	and.w	r3, r3, #4
 8004724:	2b00      	cmp	r3, #0
 8004726:	d1dc      	bne.n	80046e2 <HAL_ADCEx_Calibration_Start+0xea>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800472c:	f023 0303 	bic.w	r3, r3, #3
 8004730:	f043 0201 	orr.w	r2, r3, #1
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2200      	movs	r2, #0
 800473c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8004740:	7dfb      	ldrb	r3, [r7, #23]
}
 8004742:	4618      	mov	r0, r3
 8004744:	371c      	adds	r7, #28
 8004746:	46bd      	mov	sp, r7
 8004748:	bd90      	pop	{r4, r7, pc}
 800474a:	bf00      	nop
 800474c:	2000009c 	.word	0x2000009c

08004750 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004750:	b480      	push	{r7}
 8004752:	b085      	sub	sp, #20
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	f003 0307 	and.w	r3, r3, #7
 800475e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004760:	4b0c      	ldr	r3, [pc, #48]	; (8004794 <__NVIC_SetPriorityGrouping+0x44>)
 8004762:	68db      	ldr	r3, [r3, #12]
 8004764:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004766:	68ba      	ldr	r2, [r7, #8]
 8004768:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800476c:	4013      	ands	r3, r2
 800476e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004774:	68bb      	ldr	r3, [r7, #8]
 8004776:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004778:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800477c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004780:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004782:	4a04      	ldr	r2, [pc, #16]	; (8004794 <__NVIC_SetPriorityGrouping+0x44>)
 8004784:	68bb      	ldr	r3, [r7, #8]
 8004786:	60d3      	str	r3, [r2, #12]
}
 8004788:	bf00      	nop
 800478a:	3714      	adds	r7, #20
 800478c:	46bd      	mov	sp, r7
 800478e:	bc80      	pop	{r7}
 8004790:	4770      	bx	lr
 8004792:	bf00      	nop
 8004794:	e000ed00 	.word	0xe000ed00

08004798 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004798:	b480      	push	{r7}
 800479a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800479c:	4b04      	ldr	r3, [pc, #16]	; (80047b0 <__NVIC_GetPriorityGrouping+0x18>)
 800479e:	68db      	ldr	r3, [r3, #12]
 80047a0:	0a1b      	lsrs	r3, r3, #8
 80047a2:	f003 0307 	and.w	r3, r3, #7
}
 80047a6:	4618      	mov	r0, r3
 80047a8:	46bd      	mov	sp, r7
 80047aa:	bc80      	pop	{r7}
 80047ac:	4770      	bx	lr
 80047ae:	bf00      	nop
 80047b0:	e000ed00 	.word	0xe000ed00

080047b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80047b4:	b480      	push	{r7}
 80047b6:	b083      	sub	sp, #12
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	4603      	mov	r3, r0
 80047bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80047be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	db0b      	blt.n	80047de <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80047c6:	79fb      	ldrb	r3, [r7, #7]
 80047c8:	f003 021f 	and.w	r2, r3, #31
 80047cc:	4906      	ldr	r1, [pc, #24]	; (80047e8 <__NVIC_EnableIRQ+0x34>)
 80047ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047d2:	095b      	lsrs	r3, r3, #5
 80047d4:	2001      	movs	r0, #1
 80047d6:	fa00 f202 	lsl.w	r2, r0, r2
 80047da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80047de:	bf00      	nop
 80047e0:	370c      	adds	r7, #12
 80047e2:	46bd      	mov	sp, r7
 80047e4:	bc80      	pop	{r7}
 80047e6:	4770      	bx	lr
 80047e8:	e000e100 	.word	0xe000e100

080047ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80047ec:	b480      	push	{r7}
 80047ee:	b083      	sub	sp, #12
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	4603      	mov	r3, r0
 80047f4:	6039      	str	r1, [r7, #0]
 80047f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80047f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	db0a      	blt.n	8004816 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	b2da      	uxtb	r2, r3
 8004804:	490c      	ldr	r1, [pc, #48]	; (8004838 <__NVIC_SetPriority+0x4c>)
 8004806:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800480a:	0112      	lsls	r2, r2, #4
 800480c:	b2d2      	uxtb	r2, r2
 800480e:	440b      	add	r3, r1
 8004810:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004814:	e00a      	b.n	800482c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	b2da      	uxtb	r2, r3
 800481a:	4908      	ldr	r1, [pc, #32]	; (800483c <__NVIC_SetPriority+0x50>)
 800481c:	79fb      	ldrb	r3, [r7, #7]
 800481e:	f003 030f 	and.w	r3, r3, #15
 8004822:	3b04      	subs	r3, #4
 8004824:	0112      	lsls	r2, r2, #4
 8004826:	b2d2      	uxtb	r2, r2
 8004828:	440b      	add	r3, r1
 800482a:	761a      	strb	r2, [r3, #24]
}
 800482c:	bf00      	nop
 800482e:	370c      	adds	r7, #12
 8004830:	46bd      	mov	sp, r7
 8004832:	bc80      	pop	{r7}
 8004834:	4770      	bx	lr
 8004836:	bf00      	nop
 8004838:	e000e100 	.word	0xe000e100
 800483c:	e000ed00 	.word	0xe000ed00

08004840 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004840:	b480      	push	{r7}
 8004842:	b089      	sub	sp, #36	; 0x24
 8004844:	af00      	add	r7, sp, #0
 8004846:	60f8      	str	r0, [r7, #12]
 8004848:	60b9      	str	r1, [r7, #8]
 800484a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	f003 0307 	and.w	r3, r3, #7
 8004852:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004854:	69fb      	ldr	r3, [r7, #28]
 8004856:	f1c3 0307 	rsb	r3, r3, #7
 800485a:	2b04      	cmp	r3, #4
 800485c:	bf28      	it	cs
 800485e:	2304      	movcs	r3, #4
 8004860:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004862:	69fb      	ldr	r3, [r7, #28]
 8004864:	3304      	adds	r3, #4
 8004866:	2b06      	cmp	r3, #6
 8004868:	d902      	bls.n	8004870 <NVIC_EncodePriority+0x30>
 800486a:	69fb      	ldr	r3, [r7, #28]
 800486c:	3b03      	subs	r3, #3
 800486e:	e000      	b.n	8004872 <NVIC_EncodePriority+0x32>
 8004870:	2300      	movs	r3, #0
 8004872:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004874:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004878:	69bb      	ldr	r3, [r7, #24]
 800487a:	fa02 f303 	lsl.w	r3, r2, r3
 800487e:	43da      	mvns	r2, r3
 8004880:	68bb      	ldr	r3, [r7, #8]
 8004882:	401a      	ands	r2, r3
 8004884:	697b      	ldr	r3, [r7, #20]
 8004886:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004888:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800488c:	697b      	ldr	r3, [r7, #20]
 800488e:	fa01 f303 	lsl.w	r3, r1, r3
 8004892:	43d9      	mvns	r1, r3
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004898:	4313      	orrs	r3, r2
         );
}
 800489a:	4618      	mov	r0, r3
 800489c:	3724      	adds	r7, #36	; 0x24
 800489e:	46bd      	mov	sp, r7
 80048a0:	bc80      	pop	{r7}
 80048a2:	4770      	bx	lr

080048a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80048a4:	b580      	push	{r7, lr}
 80048a6:	b082      	sub	sp, #8
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	3b01      	subs	r3, #1
 80048b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80048b4:	d301      	bcc.n	80048ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80048b6:	2301      	movs	r3, #1
 80048b8:	e00f      	b.n	80048da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80048ba:	4a0a      	ldr	r2, [pc, #40]	; (80048e4 <SysTick_Config+0x40>)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	3b01      	subs	r3, #1
 80048c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80048c2:	210f      	movs	r1, #15
 80048c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80048c8:	f7ff ff90 	bl	80047ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80048cc:	4b05      	ldr	r3, [pc, #20]	; (80048e4 <SysTick_Config+0x40>)
 80048ce:	2200      	movs	r2, #0
 80048d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80048d2:	4b04      	ldr	r3, [pc, #16]	; (80048e4 <SysTick_Config+0x40>)
 80048d4:	2207      	movs	r2, #7
 80048d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80048d8:	2300      	movs	r3, #0
}
 80048da:	4618      	mov	r0, r3
 80048dc:	3708      	adds	r7, #8
 80048de:	46bd      	mov	sp, r7
 80048e0:	bd80      	pop	{r7, pc}
 80048e2:	bf00      	nop
 80048e4:	e000e010 	.word	0xe000e010

080048e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b082      	sub	sp, #8
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80048f0:	6878      	ldr	r0, [r7, #4]
 80048f2:	f7ff ff2d 	bl	8004750 <__NVIC_SetPriorityGrouping>
}
 80048f6:	bf00      	nop
 80048f8:	3708      	adds	r7, #8
 80048fa:	46bd      	mov	sp, r7
 80048fc:	bd80      	pop	{r7, pc}

080048fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80048fe:	b580      	push	{r7, lr}
 8004900:	b086      	sub	sp, #24
 8004902:	af00      	add	r7, sp, #0
 8004904:	4603      	mov	r3, r0
 8004906:	60b9      	str	r1, [r7, #8]
 8004908:	607a      	str	r2, [r7, #4]
 800490a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800490c:	2300      	movs	r3, #0
 800490e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004910:	f7ff ff42 	bl	8004798 <__NVIC_GetPriorityGrouping>
 8004914:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004916:	687a      	ldr	r2, [r7, #4]
 8004918:	68b9      	ldr	r1, [r7, #8]
 800491a:	6978      	ldr	r0, [r7, #20]
 800491c:	f7ff ff90 	bl	8004840 <NVIC_EncodePriority>
 8004920:	4602      	mov	r2, r0
 8004922:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004926:	4611      	mov	r1, r2
 8004928:	4618      	mov	r0, r3
 800492a:	f7ff ff5f 	bl	80047ec <__NVIC_SetPriority>
}
 800492e:	bf00      	nop
 8004930:	3718      	adds	r7, #24
 8004932:	46bd      	mov	sp, r7
 8004934:	bd80      	pop	{r7, pc}

08004936 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004936:	b580      	push	{r7, lr}
 8004938:	b082      	sub	sp, #8
 800493a:	af00      	add	r7, sp, #0
 800493c:	4603      	mov	r3, r0
 800493e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004940:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004944:	4618      	mov	r0, r3
 8004946:	f7ff ff35 	bl	80047b4 <__NVIC_EnableIRQ>
}
 800494a:	bf00      	nop
 800494c:	3708      	adds	r7, #8
 800494e:	46bd      	mov	sp, r7
 8004950:	bd80      	pop	{r7, pc}

08004952 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004952:	b580      	push	{r7, lr}
 8004954:	b082      	sub	sp, #8
 8004956:	af00      	add	r7, sp, #0
 8004958:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800495a:	6878      	ldr	r0, [r7, #4]
 800495c:	f7ff ffa2 	bl	80048a4 <SysTick_Config>
 8004960:	4603      	mov	r3, r0
}
 8004962:	4618      	mov	r0, r3
 8004964:	3708      	adds	r7, #8
 8004966:	46bd      	mov	sp, r7
 8004968:	bd80      	pop	{r7, pc}
	...

0800496c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800496c:	b480      	push	{r7}
 800496e:	b08b      	sub	sp, #44	; 0x2c
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
 8004974:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004976:	2300      	movs	r3, #0
 8004978:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800497a:	2300      	movs	r3, #0
 800497c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800497e:	e179      	b.n	8004c74 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8004980:	2201      	movs	r2, #1
 8004982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004984:	fa02 f303 	lsl.w	r3, r2, r3
 8004988:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	69fa      	ldr	r2, [r7, #28]
 8004990:	4013      	ands	r3, r2
 8004992:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8004994:	69ba      	ldr	r2, [r7, #24]
 8004996:	69fb      	ldr	r3, [r7, #28]
 8004998:	429a      	cmp	r2, r3
 800499a:	f040 8168 	bne.w	8004c6e <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	685b      	ldr	r3, [r3, #4]
 80049a2:	4a96      	ldr	r2, [pc, #600]	; (8004bfc <HAL_GPIO_Init+0x290>)
 80049a4:	4293      	cmp	r3, r2
 80049a6:	d05e      	beq.n	8004a66 <HAL_GPIO_Init+0xfa>
 80049a8:	4a94      	ldr	r2, [pc, #592]	; (8004bfc <HAL_GPIO_Init+0x290>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d875      	bhi.n	8004a9a <HAL_GPIO_Init+0x12e>
 80049ae:	4a94      	ldr	r2, [pc, #592]	; (8004c00 <HAL_GPIO_Init+0x294>)
 80049b0:	4293      	cmp	r3, r2
 80049b2:	d058      	beq.n	8004a66 <HAL_GPIO_Init+0xfa>
 80049b4:	4a92      	ldr	r2, [pc, #584]	; (8004c00 <HAL_GPIO_Init+0x294>)
 80049b6:	4293      	cmp	r3, r2
 80049b8:	d86f      	bhi.n	8004a9a <HAL_GPIO_Init+0x12e>
 80049ba:	4a92      	ldr	r2, [pc, #584]	; (8004c04 <HAL_GPIO_Init+0x298>)
 80049bc:	4293      	cmp	r3, r2
 80049be:	d052      	beq.n	8004a66 <HAL_GPIO_Init+0xfa>
 80049c0:	4a90      	ldr	r2, [pc, #576]	; (8004c04 <HAL_GPIO_Init+0x298>)
 80049c2:	4293      	cmp	r3, r2
 80049c4:	d869      	bhi.n	8004a9a <HAL_GPIO_Init+0x12e>
 80049c6:	4a90      	ldr	r2, [pc, #576]	; (8004c08 <HAL_GPIO_Init+0x29c>)
 80049c8:	4293      	cmp	r3, r2
 80049ca:	d04c      	beq.n	8004a66 <HAL_GPIO_Init+0xfa>
 80049cc:	4a8e      	ldr	r2, [pc, #568]	; (8004c08 <HAL_GPIO_Init+0x29c>)
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d863      	bhi.n	8004a9a <HAL_GPIO_Init+0x12e>
 80049d2:	4a8e      	ldr	r2, [pc, #568]	; (8004c0c <HAL_GPIO_Init+0x2a0>)
 80049d4:	4293      	cmp	r3, r2
 80049d6:	d046      	beq.n	8004a66 <HAL_GPIO_Init+0xfa>
 80049d8:	4a8c      	ldr	r2, [pc, #560]	; (8004c0c <HAL_GPIO_Init+0x2a0>)
 80049da:	4293      	cmp	r3, r2
 80049dc:	d85d      	bhi.n	8004a9a <HAL_GPIO_Init+0x12e>
 80049de:	2b12      	cmp	r3, #18
 80049e0:	d82a      	bhi.n	8004a38 <HAL_GPIO_Init+0xcc>
 80049e2:	2b12      	cmp	r3, #18
 80049e4:	d859      	bhi.n	8004a9a <HAL_GPIO_Init+0x12e>
 80049e6:	a201      	add	r2, pc, #4	; (adr r2, 80049ec <HAL_GPIO_Init+0x80>)
 80049e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049ec:	08004a67 	.word	0x08004a67
 80049f0:	08004a41 	.word	0x08004a41
 80049f4:	08004a53 	.word	0x08004a53
 80049f8:	08004a95 	.word	0x08004a95
 80049fc:	08004a9b 	.word	0x08004a9b
 8004a00:	08004a9b 	.word	0x08004a9b
 8004a04:	08004a9b 	.word	0x08004a9b
 8004a08:	08004a9b 	.word	0x08004a9b
 8004a0c:	08004a9b 	.word	0x08004a9b
 8004a10:	08004a9b 	.word	0x08004a9b
 8004a14:	08004a9b 	.word	0x08004a9b
 8004a18:	08004a9b 	.word	0x08004a9b
 8004a1c:	08004a9b 	.word	0x08004a9b
 8004a20:	08004a9b 	.word	0x08004a9b
 8004a24:	08004a9b 	.word	0x08004a9b
 8004a28:	08004a9b 	.word	0x08004a9b
 8004a2c:	08004a9b 	.word	0x08004a9b
 8004a30:	08004a49 	.word	0x08004a49
 8004a34:	08004a5d 	.word	0x08004a5d
 8004a38:	4a75      	ldr	r2, [pc, #468]	; (8004c10 <HAL_GPIO_Init+0x2a4>)
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	d013      	beq.n	8004a66 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8004a3e:	e02c      	b.n	8004a9a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	68db      	ldr	r3, [r3, #12]
 8004a44:	623b      	str	r3, [r7, #32]
          break;
 8004a46:	e029      	b.n	8004a9c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	68db      	ldr	r3, [r3, #12]
 8004a4c:	3304      	adds	r3, #4
 8004a4e:	623b      	str	r3, [r7, #32]
          break;
 8004a50:	e024      	b.n	8004a9c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8004a52:	683b      	ldr	r3, [r7, #0]
 8004a54:	68db      	ldr	r3, [r3, #12]
 8004a56:	3308      	adds	r3, #8
 8004a58:	623b      	str	r3, [r7, #32]
          break;
 8004a5a:	e01f      	b.n	8004a9c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	68db      	ldr	r3, [r3, #12]
 8004a60:	330c      	adds	r3, #12
 8004a62:	623b      	str	r3, [r7, #32]
          break;
 8004a64:	e01a      	b.n	8004a9c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	689b      	ldr	r3, [r3, #8]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d102      	bne.n	8004a74 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8004a6e:	2304      	movs	r3, #4
 8004a70:	623b      	str	r3, [r7, #32]
          break;
 8004a72:	e013      	b.n	8004a9c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8004a74:	683b      	ldr	r3, [r7, #0]
 8004a76:	689b      	ldr	r3, [r3, #8]
 8004a78:	2b01      	cmp	r3, #1
 8004a7a:	d105      	bne.n	8004a88 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004a7c:	2308      	movs	r3, #8
 8004a7e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	69fa      	ldr	r2, [r7, #28]
 8004a84:	611a      	str	r2, [r3, #16]
          break;
 8004a86:	e009      	b.n	8004a9c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004a88:	2308      	movs	r3, #8
 8004a8a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	69fa      	ldr	r2, [r7, #28]
 8004a90:	615a      	str	r2, [r3, #20]
          break;
 8004a92:	e003      	b.n	8004a9c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8004a94:	2300      	movs	r3, #0
 8004a96:	623b      	str	r3, [r7, #32]
          break;
 8004a98:	e000      	b.n	8004a9c <HAL_GPIO_Init+0x130>
          break;
 8004a9a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004a9c:	69bb      	ldr	r3, [r7, #24]
 8004a9e:	2bff      	cmp	r3, #255	; 0xff
 8004aa0:	d801      	bhi.n	8004aa6 <HAL_GPIO_Init+0x13a>
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	e001      	b.n	8004aaa <HAL_GPIO_Init+0x13e>
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	3304      	adds	r3, #4
 8004aaa:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004aac:	69bb      	ldr	r3, [r7, #24]
 8004aae:	2bff      	cmp	r3, #255	; 0xff
 8004ab0:	d802      	bhi.n	8004ab8 <HAL_GPIO_Init+0x14c>
 8004ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ab4:	009b      	lsls	r3, r3, #2
 8004ab6:	e002      	b.n	8004abe <HAL_GPIO_Init+0x152>
 8004ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aba:	3b08      	subs	r3, #8
 8004abc:	009b      	lsls	r3, r3, #2
 8004abe:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8004ac0:	697b      	ldr	r3, [r7, #20]
 8004ac2:	681a      	ldr	r2, [r3, #0]
 8004ac4:	210f      	movs	r1, #15
 8004ac6:	693b      	ldr	r3, [r7, #16]
 8004ac8:	fa01 f303 	lsl.w	r3, r1, r3
 8004acc:	43db      	mvns	r3, r3
 8004ace:	401a      	ands	r2, r3
 8004ad0:	6a39      	ldr	r1, [r7, #32]
 8004ad2:	693b      	ldr	r3, [r7, #16]
 8004ad4:	fa01 f303 	lsl.w	r3, r1, r3
 8004ad8:	431a      	orrs	r2, r3
 8004ada:	697b      	ldr	r3, [r7, #20]
 8004adc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004ade:	683b      	ldr	r3, [r7, #0]
 8004ae0:	685b      	ldr	r3, [r3, #4]
 8004ae2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	f000 80c1 	beq.w	8004c6e <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004aec:	4b49      	ldr	r3, [pc, #292]	; (8004c14 <HAL_GPIO_Init+0x2a8>)
 8004aee:	699b      	ldr	r3, [r3, #24]
 8004af0:	4a48      	ldr	r2, [pc, #288]	; (8004c14 <HAL_GPIO_Init+0x2a8>)
 8004af2:	f043 0301 	orr.w	r3, r3, #1
 8004af6:	6193      	str	r3, [r2, #24]
 8004af8:	4b46      	ldr	r3, [pc, #280]	; (8004c14 <HAL_GPIO_Init+0x2a8>)
 8004afa:	699b      	ldr	r3, [r3, #24]
 8004afc:	f003 0301 	and.w	r3, r3, #1
 8004b00:	60bb      	str	r3, [r7, #8]
 8004b02:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8004b04:	4a44      	ldr	r2, [pc, #272]	; (8004c18 <HAL_GPIO_Init+0x2ac>)
 8004b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b08:	089b      	lsrs	r3, r3, #2
 8004b0a:	3302      	adds	r3, #2
 8004b0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b10:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8004b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b14:	f003 0303 	and.w	r3, r3, #3
 8004b18:	009b      	lsls	r3, r3, #2
 8004b1a:	220f      	movs	r2, #15
 8004b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8004b20:	43db      	mvns	r3, r3
 8004b22:	68fa      	ldr	r2, [r7, #12]
 8004b24:	4013      	ands	r3, r2
 8004b26:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	4a3c      	ldr	r2, [pc, #240]	; (8004c1c <HAL_GPIO_Init+0x2b0>)
 8004b2c:	4293      	cmp	r3, r2
 8004b2e:	d01f      	beq.n	8004b70 <HAL_GPIO_Init+0x204>
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	4a3b      	ldr	r2, [pc, #236]	; (8004c20 <HAL_GPIO_Init+0x2b4>)
 8004b34:	4293      	cmp	r3, r2
 8004b36:	d019      	beq.n	8004b6c <HAL_GPIO_Init+0x200>
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	4a3a      	ldr	r2, [pc, #232]	; (8004c24 <HAL_GPIO_Init+0x2b8>)
 8004b3c:	4293      	cmp	r3, r2
 8004b3e:	d013      	beq.n	8004b68 <HAL_GPIO_Init+0x1fc>
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	4a39      	ldr	r2, [pc, #228]	; (8004c28 <HAL_GPIO_Init+0x2bc>)
 8004b44:	4293      	cmp	r3, r2
 8004b46:	d00d      	beq.n	8004b64 <HAL_GPIO_Init+0x1f8>
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	4a38      	ldr	r2, [pc, #224]	; (8004c2c <HAL_GPIO_Init+0x2c0>)
 8004b4c:	4293      	cmp	r3, r2
 8004b4e:	d007      	beq.n	8004b60 <HAL_GPIO_Init+0x1f4>
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	4a37      	ldr	r2, [pc, #220]	; (8004c30 <HAL_GPIO_Init+0x2c4>)
 8004b54:	4293      	cmp	r3, r2
 8004b56:	d101      	bne.n	8004b5c <HAL_GPIO_Init+0x1f0>
 8004b58:	2305      	movs	r3, #5
 8004b5a:	e00a      	b.n	8004b72 <HAL_GPIO_Init+0x206>
 8004b5c:	2306      	movs	r3, #6
 8004b5e:	e008      	b.n	8004b72 <HAL_GPIO_Init+0x206>
 8004b60:	2304      	movs	r3, #4
 8004b62:	e006      	b.n	8004b72 <HAL_GPIO_Init+0x206>
 8004b64:	2303      	movs	r3, #3
 8004b66:	e004      	b.n	8004b72 <HAL_GPIO_Init+0x206>
 8004b68:	2302      	movs	r3, #2
 8004b6a:	e002      	b.n	8004b72 <HAL_GPIO_Init+0x206>
 8004b6c:	2301      	movs	r3, #1
 8004b6e:	e000      	b.n	8004b72 <HAL_GPIO_Init+0x206>
 8004b70:	2300      	movs	r3, #0
 8004b72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b74:	f002 0203 	and.w	r2, r2, #3
 8004b78:	0092      	lsls	r2, r2, #2
 8004b7a:	4093      	lsls	r3, r2
 8004b7c:	68fa      	ldr	r2, [r7, #12]
 8004b7e:	4313      	orrs	r3, r2
 8004b80:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8004b82:	4925      	ldr	r1, [pc, #148]	; (8004c18 <HAL_GPIO_Init+0x2ac>)
 8004b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b86:	089b      	lsrs	r3, r3, #2
 8004b88:	3302      	adds	r3, #2
 8004b8a:	68fa      	ldr	r2, [r7, #12]
 8004b8c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	685b      	ldr	r3, [r3, #4]
 8004b94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d006      	beq.n	8004baa <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8004b9c:	4b25      	ldr	r3, [pc, #148]	; (8004c34 <HAL_GPIO_Init+0x2c8>)
 8004b9e:	681a      	ldr	r2, [r3, #0]
 8004ba0:	4924      	ldr	r1, [pc, #144]	; (8004c34 <HAL_GPIO_Init+0x2c8>)
 8004ba2:	69bb      	ldr	r3, [r7, #24]
 8004ba4:	4313      	orrs	r3, r2
 8004ba6:	600b      	str	r3, [r1, #0]
 8004ba8:	e006      	b.n	8004bb8 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8004baa:	4b22      	ldr	r3, [pc, #136]	; (8004c34 <HAL_GPIO_Init+0x2c8>)
 8004bac:	681a      	ldr	r2, [r3, #0]
 8004bae:	69bb      	ldr	r3, [r7, #24]
 8004bb0:	43db      	mvns	r3, r3
 8004bb2:	4920      	ldr	r1, [pc, #128]	; (8004c34 <HAL_GPIO_Init+0x2c8>)
 8004bb4:	4013      	ands	r3, r2
 8004bb6:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	685b      	ldr	r3, [r3, #4]
 8004bbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d006      	beq.n	8004bd2 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8004bc4:	4b1b      	ldr	r3, [pc, #108]	; (8004c34 <HAL_GPIO_Init+0x2c8>)
 8004bc6:	685a      	ldr	r2, [r3, #4]
 8004bc8:	491a      	ldr	r1, [pc, #104]	; (8004c34 <HAL_GPIO_Init+0x2c8>)
 8004bca:	69bb      	ldr	r3, [r7, #24]
 8004bcc:	4313      	orrs	r3, r2
 8004bce:	604b      	str	r3, [r1, #4]
 8004bd0:	e006      	b.n	8004be0 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8004bd2:	4b18      	ldr	r3, [pc, #96]	; (8004c34 <HAL_GPIO_Init+0x2c8>)
 8004bd4:	685a      	ldr	r2, [r3, #4]
 8004bd6:	69bb      	ldr	r3, [r7, #24]
 8004bd8:	43db      	mvns	r3, r3
 8004bda:	4916      	ldr	r1, [pc, #88]	; (8004c34 <HAL_GPIO_Init+0x2c8>)
 8004bdc:	4013      	ands	r3, r2
 8004bde:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	685b      	ldr	r3, [r3, #4]
 8004be4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d025      	beq.n	8004c38 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8004bec:	4b11      	ldr	r3, [pc, #68]	; (8004c34 <HAL_GPIO_Init+0x2c8>)
 8004bee:	689a      	ldr	r2, [r3, #8]
 8004bf0:	4910      	ldr	r1, [pc, #64]	; (8004c34 <HAL_GPIO_Init+0x2c8>)
 8004bf2:	69bb      	ldr	r3, [r7, #24]
 8004bf4:	4313      	orrs	r3, r2
 8004bf6:	608b      	str	r3, [r1, #8]
 8004bf8:	e025      	b.n	8004c46 <HAL_GPIO_Init+0x2da>
 8004bfa:	bf00      	nop
 8004bfc:	10320000 	.word	0x10320000
 8004c00:	10310000 	.word	0x10310000
 8004c04:	10220000 	.word	0x10220000
 8004c08:	10210000 	.word	0x10210000
 8004c0c:	10120000 	.word	0x10120000
 8004c10:	10110000 	.word	0x10110000
 8004c14:	40021000 	.word	0x40021000
 8004c18:	40010000 	.word	0x40010000
 8004c1c:	40010800 	.word	0x40010800
 8004c20:	40010c00 	.word	0x40010c00
 8004c24:	40011000 	.word	0x40011000
 8004c28:	40011400 	.word	0x40011400
 8004c2c:	40011800 	.word	0x40011800
 8004c30:	40011c00 	.word	0x40011c00
 8004c34:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8004c38:	4b15      	ldr	r3, [pc, #84]	; (8004c90 <HAL_GPIO_Init+0x324>)
 8004c3a:	689a      	ldr	r2, [r3, #8]
 8004c3c:	69bb      	ldr	r3, [r7, #24]
 8004c3e:	43db      	mvns	r3, r3
 8004c40:	4913      	ldr	r1, [pc, #76]	; (8004c90 <HAL_GPIO_Init+0x324>)
 8004c42:	4013      	ands	r3, r2
 8004c44:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004c46:	683b      	ldr	r3, [r7, #0]
 8004c48:	685b      	ldr	r3, [r3, #4]
 8004c4a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d006      	beq.n	8004c60 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8004c52:	4b0f      	ldr	r3, [pc, #60]	; (8004c90 <HAL_GPIO_Init+0x324>)
 8004c54:	68da      	ldr	r2, [r3, #12]
 8004c56:	490e      	ldr	r1, [pc, #56]	; (8004c90 <HAL_GPIO_Init+0x324>)
 8004c58:	69bb      	ldr	r3, [r7, #24]
 8004c5a:	4313      	orrs	r3, r2
 8004c5c:	60cb      	str	r3, [r1, #12]
 8004c5e:	e006      	b.n	8004c6e <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8004c60:	4b0b      	ldr	r3, [pc, #44]	; (8004c90 <HAL_GPIO_Init+0x324>)
 8004c62:	68da      	ldr	r2, [r3, #12]
 8004c64:	69bb      	ldr	r3, [r7, #24]
 8004c66:	43db      	mvns	r3, r3
 8004c68:	4909      	ldr	r1, [pc, #36]	; (8004c90 <HAL_GPIO_Init+0x324>)
 8004c6a:	4013      	ands	r3, r2
 8004c6c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8004c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c70:	3301      	adds	r3, #1
 8004c72:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004c74:	683b      	ldr	r3, [r7, #0]
 8004c76:	681a      	ldr	r2, [r3, #0]
 8004c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c7a:	fa22 f303 	lsr.w	r3, r2, r3
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	f47f ae7e 	bne.w	8004980 <HAL_GPIO_Init+0x14>
  }
}
 8004c84:	bf00      	nop
 8004c86:	bf00      	nop
 8004c88:	372c      	adds	r7, #44	; 0x2c
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	bc80      	pop	{r7}
 8004c8e:	4770      	bx	lr
 8004c90:	40010400 	.word	0x40010400

08004c94 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004c94:	b480      	push	{r7}
 8004c96:	b085      	sub	sp, #20
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
 8004c9c:	460b      	mov	r3, r1
 8004c9e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	689a      	ldr	r2, [r3, #8]
 8004ca4:	887b      	ldrh	r3, [r7, #2]
 8004ca6:	4013      	ands	r3, r2
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d002      	beq.n	8004cb2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004cac:	2301      	movs	r3, #1
 8004cae:	73fb      	strb	r3, [r7, #15]
 8004cb0:	e001      	b.n	8004cb6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004cb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cb8:	4618      	mov	r0, r3
 8004cba:	3714      	adds	r7, #20
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	bc80      	pop	{r7}
 8004cc0:	4770      	bx	lr

08004cc2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004cc2:	b480      	push	{r7}
 8004cc4:	b083      	sub	sp, #12
 8004cc6:	af00      	add	r7, sp, #0
 8004cc8:	6078      	str	r0, [r7, #4]
 8004cca:	460b      	mov	r3, r1
 8004ccc:	807b      	strh	r3, [r7, #2]
 8004cce:	4613      	mov	r3, r2
 8004cd0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004cd2:	787b      	ldrb	r3, [r7, #1]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d003      	beq.n	8004ce0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004cd8:	887a      	ldrh	r2, [r7, #2]
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8004cde:	e003      	b.n	8004ce8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004ce0:	887b      	ldrh	r3, [r7, #2]
 8004ce2:	041a      	lsls	r2, r3, #16
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	611a      	str	r2, [r3, #16]
}
 8004ce8:	bf00      	nop
 8004cea:	370c      	adds	r7, #12
 8004cec:	46bd      	mov	sp, r7
 8004cee:	bc80      	pop	{r7}
 8004cf0:	4770      	bx	lr
	...

08004cf4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	b082      	sub	sp, #8
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	4603      	mov	r3, r0
 8004cfc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004cfe:	4b08      	ldr	r3, [pc, #32]	; (8004d20 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004d00:	695a      	ldr	r2, [r3, #20]
 8004d02:	88fb      	ldrh	r3, [r7, #6]
 8004d04:	4013      	ands	r3, r2
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d006      	beq.n	8004d18 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004d0a:	4a05      	ldr	r2, [pc, #20]	; (8004d20 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004d0c:	88fb      	ldrh	r3, [r7, #6]
 8004d0e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004d10:	88fb      	ldrh	r3, [r7, #6]
 8004d12:	4618      	mov	r0, r3
 8004d14:	f000 f806 	bl	8004d24 <HAL_GPIO_EXTI_Callback>
  }
}
 8004d18:	bf00      	nop
 8004d1a:	3708      	adds	r7, #8
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	bd80      	pop	{r7, pc}
 8004d20:	40010400 	.word	0x40010400

08004d24 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004d24:	b480      	push	{r7}
 8004d26:	b083      	sub	sp, #12
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	4603      	mov	r3, r0
 8004d2c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8004d2e:	bf00      	nop
 8004d30:	370c      	adds	r7, #12
 8004d32:	46bd      	mov	sp, r7
 8004d34:	bc80      	pop	{r7}
 8004d36:	4770      	bx	lr

08004d38 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004d38:	b480      	push	{r7}
 8004d3a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8004d3c:	4b03      	ldr	r3, [pc, #12]	; (8004d4c <HAL_PWR_EnableBkUpAccess+0x14>)
 8004d3e:	2201      	movs	r2, #1
 8004d40:	601a      	str	r2, [r3, #0]
}
 8004d42:	bf00      	nop
 8004d44:	46bd      	mov	sp, r7
 8004d46:	bc80      	pop	{r7}
 8004d48:	4770      	bx	lr
 8004d4a:	bf00      	nop
 8004d4c:	420e0020 	.word	0x420e0020

08004d50 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004d50:	b580      	push	{r7, lr}
 8004d52:	b086      	sub	sp, #24
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d101      	bne.n	8004d62 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004d5e:	2301      	movs	r3, #1
 8004d60:	e272      	b.n	8005248 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f003 0301 	and.w	r3, r3, #1
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	f000 8087 	beq.w	8004e7e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004d70:	4b92      	ldr	r3, [pc, #584]	; (8004fbc <HAL_RCC_OscConfig+0x26c>)
 8004d72:	685b      	ldr	r3, [r3, #4]
 8004d74:	f003 030c 	and.w	r3, r3, #12
 8004d78:	2b04      	cmp	r3, #4
 8004d7a:	d00c      	beq.n	8004d96 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004d7c:	4b8f      	ldr	r3, [pc, #572]	; (8004fbc <HAL_RCC_OscConfig+0x26c>)
 8004d7e:	685b      	ldr	r3, [r3, #4]
 8004d80:	f003 030c 	and.w	r3, r3, #12
 8004d84:	2b08      	cmp	r3, #8
 8004d86:	d112      	bne.n	8004dae <HAL_RCC_OscConfig+0x5e>
 8004d88:	4b8c      	ldr	r3, [pc, #560]	; (8004fbc <HAL_RCC_OscConfig+0x26c>)
 8004d8a:	685b      	ldr	r3, [r3, #4]
 8004d8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d94:	d10b      	bne.n	8004dae <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d96:	4b89      	ldr	r3, [pc, #548]	; (8004fbc <HAL_RCC_OscConfig+0x26c>)
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d06c      	beq.n	8004e7c <HAL_RCC_OscConfig+0x12c>
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	685b      	ldr	r3, [r3, #4]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d168      	bne.n	8004e7c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004daa:	2301      	movs	r3, #1
 8004dac:	e24c      	b.n	8005248 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	685b      	ldr	r3, [r3, #4]
 8004db2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004db6:	d106      	bne.n	8004dc6 <HAL_RCC_OscConfig+0x76>
 8004db8:	4b80      	ldr	r3, [pc, #512]	; (8004fbc <HAL_RCC_OscConfig+0x26c>)
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	4a7f      	ldr	r2, [pc, #508]	; (8004fbc <HAL_RCC_OscConfig+0x26c>)
 8004dbe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004dc2:	6013      	str	r3, [r2, #0]
 8004dc4:	e02e      	b.n	8004e24 <HAL_RCC_OscConfig+0xd4>
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	685b      	ldr	r3, [r3, #4]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d10c      	bne.n	8004de8 <HAL_RCC_OscConfig+0x98>
 8004dce:	4b7b      	ldr	r3, [pc, #492]	; (8004fbc <HAL_RCC_OscConfig+0x26c>)
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	4a7a      	ldr	r2, [pc, #488]	; (8004fbc <HAL_RCC_OscConfig+0x26c>)
 8004dd4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004dd8:	6013      	str	r3, [r2, #0]
 8004dda:	4b78      	ldr	r3, [pc, #480]	; (8004fbc <HAL_RCC_OscConfig+0x26c>)
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	4a77      	ldr	r2, [pc, #476]	; (8004fbc <HAL_RCC_OscConfig+0x26c>)
 8004de0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004de4:	6013      	str	r3, [r2, #0]
 8004de6:	e01d      	b.n	8004e24 <HAL_RCC_OscConfig+0xd4>
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	685b      	ldr	r3, [r3, #4]
 8004dec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004df0:	d10c      	bne.n	8004e0c <HAL_RCC_OscConfig+0xbc>
 8004df2:	4b72      	ldr	r3, [pc, #456]	; (8004fbc <HAL_RCC_OscConfig+0x26c>)
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	4a71      	ldr	r2, [pc, #452]	; (8004fbc <HAL_RCC_OscConfig+0x26c>)
 8004df8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004dfc:	6013      	str	r3, [r2, #0]
 8004dfe:	4b6f      	ldr	r3, [pc, #444]	; (8004fbc <HAL_RCC_OscConfig+0x26c>)
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	4a6e      	ldr	r2, [pc, #440]	; (8004fbc <HAL_RCC_OscConfig+0x26c>)
 8004e04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e08:	6013      	str	r3, [r2, #0]
 8004e0a:	e00b      	b.n	8004e24 <HAL_RCC_OscConfig+0xd4>
 8004e0c:	4b6b      	ldr	r3, [pc, #428]	; (8004fbc <HAL_RCC_OscConfig+0x26c>)
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	4a6a      	ldr	r2, [pc, #424]	; (8004fbc <HAL_RCC_OscConfig+0x26c>)
 8004e12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e16:	6013      	str	r3, [r2, #0]
 8004e18:	4b68      	ldr	r3, [pc, #416]	; (8004fbc <HAL_RCC_OscConfig+0x26c>)
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	4a67      	ldr	r2, [pc, #412]	; (8004fbc <HAL_RCC_OscConfig+0x26c>)
 8004e1e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004e22:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	685b      	ldr	r3, [r3, #4]
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d013      	beq.n	8004e54 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e2c:	f7fe ff78 	bl	8003d20 <HAL_GetTick>
 8004e30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e32:	e008      	b.n	8004e46 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004e34:	f7fe ff74 	bl	8003d20 <HAL_GetTick>
 8004e38:	4602      	mov	r2, r0
 8004e3a:	693b      	ldr	r3, [r7, #16]
 8004e3c:	1ad3      	subs	r3, r2, r3
 8004e3e:	2b64      	cmp	r3, #100	; 0x64
 8004e40:	d901      	bls.n	8004e46 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004e42:	2303      	movs	r3, #3
 8004e44:	e200      	b.n	8005248 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e46:	4b5d      	ldr	r3, [pc, #372]	; (8004fbc <HAL_RCC_OscConfig+0x26c>)
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d0f0      	beq.n	8004e34 <HAL_RCC_OscConfig+0xe4>
 8004e52:	e014      	b.n	8004e7e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e54:	f7fe ff64 	bl	8003d20 <HAL_GetTick>
 8004e58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004e5a:	e008      	b.n	8004e6e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004e5c:	f7fe ff60 	bl	8003d20 <HAL_GetTick>
 8004e60:	4602      	mov	r2, r0
 8004e62:	693b      	ldr	r3, [r7, #16]
 8004e64:	1ad3      	subs	r3, r2, r3
 8004e66:	2b64      	cmp	r3, #100	; 0x64
 8004e68:	d901      	bls.n	8004e6e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004e6a:	2303      	movs	r3, #3
 8004e6c:	e1ec      	b.n	8005248 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004e6e:	4b53      	ldr	r3, [pc, #332]	; (8004fbc <HAL_RCC_OscConfig+0x26c>)
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d1f0      	bne.n	8004e5c <HAL_RCC_OscConfig+0x10c>
 8004e7a:	e000      	b.n	8004e7e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f003 0302 	and.w	r3, r3, #2
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d063      	beq.n	8004f52 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004e8a:	4b4c      	ldr	r3, [pc, #304]	; (8004fbc <HAL_RCC_OscConfig+0x26c>)
 8004e8c:	685b      	ldr	r3, [r3, #4]
 8004e8e:	f003 030c 	and.w	r3, r3, #12
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d00b      	beq.n	8004eae <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004e96:	4b49      	ldr	r3, [pc, #292]	; (8004fbc <HAL_RCC_OscConfig+0x26c>)
 8004e98:	685b      	ldr	r3, [r3, #4]
 8004e9a:	f003 030c 	and.w	r3, r3, #12
 8004e9e:	2b08      	cmp	r3, #8
 8004ea0:	d11c      	bne.n	8004edc <HAL_RCC_OscConfig+0x18c>
 8004ea2:	4b46      	ldr	r3, [pc, #280]	; (8004fbc <HAL_RCC_OscConfig+0x26c>)
 8004ea4:	685b      	ldr	r3, [r3, #4]
 8004ea6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d116      	bne.n	8004edc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004eae:	4b43      	ldr	r3, [pc, #268]	; (8004fbc <HAL_RCC_OscConfig+0x26c>)
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f003 0302 	and.w	r3, r3, #2
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d005      	beq.n	8004ec6 <HAL_RCC_OscConfig+0x176>
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	691b      	ldr	r3, [r3, #16]
 8004ebe:	2b01      	cmp	r3, #1
 8004ec0:	d001      	beq.n	8004ec6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004ec2:	2301      	movs	r3, #1
 8004ec4:	e1c0      	b.n	8005248 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ec6:	4b3d      	ldr	r3, [pc, #244]	; (8004fbc <HAL_RCC_OscConfig+0x26c>)
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	695b      	ldr	r3, [r3, #20]
 8004ed2:	00db      	lsls	r3, r3, #3
 8004ed4:	4939      	ldr	r1, [pc, #228]	; (8004fbc <HAL_RCC_OscConfig+0x26c>)
 8004ed6:	4313      	orrs	r3, r2
 8004ed8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004eda:	e03a      	b.n	8004f52 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	691b      	ldr	r3, [r3, #16]
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d020      	beq.n	8004f26 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004ee4:	4b36      	ldr	r3, [pc, #216]	; (8004fc0 <HAL_RCC_OscConfig+0x270>)
 8004ee6:	2201      	movs	r2, #1
 8004ee8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004eea:	f7fe ff19 	bl	8003d20 <HAL_GetTick>
 8004eee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ef0:	e008      	b.n	8004f04 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ef2:	f7fe ff15 	bl	8003d20 <HAL_GetTick>
 8004ef6:	4602      	mov	r2, r0
 8004ef8:	693b      	ldr	r3, [r7, #16]
 8004efa:	1ad3      	subs	r3, r2, r3
 8004efc:	2b02      	cmp	r3, #2
 8004efe:	d901      	bls.n	8004f04 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004f00:	2303      	movs	r3, #3
 8004f02:	e1a1      	b.n	8005248 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f04:	4b2d      	ldr	r3, [pc, #180]	; (8004fbc <HAL_RCC_OscConfig+0x26c>)
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f003 0302 	and.w	r3, r3, #2
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d0f0      	beq.n	8004ef2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f10:	4b2a      	ldr	r3, [pc, #168]	; (8004fbc <HAL_RCC_OscConfig+0x26c>)
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	695b      	ldr	r3, [r3, #20]
 8004f1c:	00db      	lsls	r3, r3, #3
 8004f1e:	4927      	ldr	r1, [pc, #156]	; (8004fbc <HAL_RCC_OscConfig+0x26c>)
 8004f20:	4313      	orrs	r3, r2
 8004f22:	600b      	str	r3, [r1, #0]
 8004f24:	e015      	b.n	8004f52 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004f26:	4b26      	ldr	r3, [pc, #152]	; (8004fc0 <HAL_RCC_OscConfig+0x270>)
 8004f28:	2200      	movs	r2, #0
 8004f2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f2c:	f7fe fef8 	bl	8003d20 <HAL_GetTick>
 8004f30:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004f32:	e008      	b.n	8004f46 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004f34:	f7fe fef4 	bl	8003d20 <HAL_GetTick>
 8004f38:	4602      	mov	r2, r0
 8004f3a:	693b      	ldr	r3, [r7, #16]
 8004f3c:	1ad3      	subs	r3, r2, r3
 8004f3e:	2b02      	cmp	r3, #2
 8004f40:	d901      	bls.n	8004f46 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004f42:	2303      	movs	r3, #3
 8004f44:	e180      	b.n	8005248 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004f46:	4b1d      	ldr	r3, [pc, #116]	; (8004fbc <HAL_RCC_OscConfig+0x26c>)
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f003 0302 	and.w	r3, r3, #2
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d1f0      	bne.n	8004f34 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f003 0308 	and.w	r3, r3, #8
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d03a      	beq.n	8004fd4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	699b      	ldr	r3, [r3, #24]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d019      	beq.n	8004f9a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004f66:	4b17      	ldr	r3, [pc, #92]	; (8004fc4 <HAL_RCC_OscConfig+0x274>)
 8004f68:	2201      	movs	r2, #1
 8004f6a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f6c:	f7fe fed8 	bl	8003d20 <HAL_GetTick>
 8004f70:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004f72:	e008      	b.n	8004f86 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f74:	f7fe fed4 	bl	8003d20 <HAL_GetTick>
 8004f78:	4602      	mov	r2, r0
 8004f7a:	693b      	ldr	r3, [r7, #16]
 8004f7c:	1ad3      	subs	r3, r2, r3
 8004f7e:	2b02      	cmp	r3, #2
 8004f80:	d901      	bls.n	8004f86 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004f82:	2303      	movs	r3, #3
 8004f84:	e160      	b.n	8005248 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004f86:	4b0d      	ldr	r3, [pc, #52]	; (8004fbc <HAL_RCC_OscConfig+0x26c>)
 8004f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f8a:	f003 0302 	and.w	r3, r3, #2
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d0f0      	beq.n	8004f74 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004f92:	2001      	movs	r0, #1
 8004f94:	f000 fac4 	bl	8005520 <RCC_Delay>
 8004f98:	e01c      	b.n	8004fd4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004f9a:	4b0a      	ldr	r3, [pc, #40]	; (8004fc4 <HAL_RCC_OscConfig+0x274>)
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004fa0:	f7fe febe 	bl	8003d20 <HAL_GetTick>
 8004fa4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004fa6:	e00f      	b.n	8004fc8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004fa8:	f7fe feba 	bl	8003d20 <HAL_GetTick>
 8004fac:	4602      	mov	r2, r0
 8004fae:	693b      	ldr	r3, [r7, #16]
 8004fb0:	1ad3      	subs	r3, r2, r3
 8004fb2:	2b02      	cmp	r3, #2
 8004fb4:	d908      	bls.n	8004fc8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004fb6:	2303      	movs	r3, #3
 8004fb8:	e146      	b.n	8005248 <HAL_RCC_OscConfig+0x4f8>
 8004fba:	bf00      	nop
 8004fbc:	40021000 	.word	0x40021000
 8004fc0:	42420000 	.word	0x42420000
 8004fc4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004fc8:	4b92      	ldr	r3, [pc, #584]	; (8005214 <HAL_RCC_OscConfig+0x4c4>)
 8004fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fcc:	f003 0302 	and.w	r3, r3, #2
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d1e9      	bne.n	8004fa8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f003 0304 	and.w	r3, r3, #4
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	f000 80a6 	beq.w	800512e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004fe6:	4b8b      	ldr	r3, [pc, #556]	; (8005214 <HAL_RCC_OscConfig+0x4c4>)
 8004fe8:	69db      	ldr	r3, [r3, #28]
 8004fea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d10d      	bne.n	800500e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ff2:	4b88      	ldr	r3, [pc, #544]	; (8005214 <HAL_RCC_OscConfig+0x4c4>)
 8004ff4:	69db      	ldr	r3, [r3, #28]
 8004ff6:	4a87      	ldr	r2, [pc, #540]	; (8005214 <HAL_RCC_OscConfig+0x4c4>)
 8004ff8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ffc:	61d3      	str	r3, [r2, #28]
 8004ffe:	4b85      	ldr	r3, [pc, #532]	; (8005214 <HAL_RCC_OscConfig+0x4c4>)
 8005000:	69db      	ldr	r3, [r3, #28]
 8005002:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005006:	60bb      	str	r3, [r7, #8]
 8005008:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800500a:	2301      	movs	r3, #1
 800500c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800500e:	4b82      	ldr	r3, [pc, #520]	; (8005218 <HAL_RCC_OscConfig+0x4c8>)
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005016:	2b00      	cmp	r3, #0
 8005018:	d118      	bne.n	800504c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800501a:	4b7f      	ldr	r3, [pc, #508]	; (8005218 <HAL_RCC_OscConfig+0x4c8>)
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	4a7e      	ldr	r2, [pc, #504]	; (8005218 <HAL_RCC_OscConfig+0x4c8>)
 8005020:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005024:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005026:	f7fe fe7b 	bl	8003d20 <HAL_GetTick>
 800502a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800502c:	e008      	b.n	8005040 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800502e:	f7fe fe77 	bl	8003d20 <HAL_GetTick>
 8005032:	4602      	mov	r2, r0
 8005034:	693b      	ldr	r3, [r7, #16]
 8005036:	1ad3      	subs	r3, r2, r3
 8005038:	2b64      	cmp	r3, #100	; 0x64
 800503a:	d901      	bls.n	8005040 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800503c:	2303      	movs	r3, #3
 800503e:	e103      	b.n	8005248 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005040:	4b75      	ldr	r3, [pc, #468]	; (8005218 <HAL_RCC_OscConfig+0x4c8>)
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005048:	2b00      	cmp	r3, #0
 800504a:	d0f0      	beq.n	800502e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	68db      	ldr	r3, [r3, #12]
 8005050:	2b01      	cmp	r3, #1
 8005052:	d106      	bne.n	8005062 <HAL_RCC_OscConfig+0x312>
 8005054:	4b6f      	ldr	r3, [pc, #444]	; (8005214 <HAL_RCC_OscConfig+0x4c4>)
 8005056:	6a1b      	ldr	r3, [r3, #32]
 8005058:	4a6e      	ldr	r2, [pc, #440]	; (8005214 <HAL_RCC_OscConfig+0x4c4>)
 800505a:	f043 0301 	orr.w	r3, r3, #1
 800505e:	6213      	str	r3, [r2, #32]
 8005060:	e02d      	b.n	80050be <HAL_RCC_OscConfig+0x36e>
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	68db      	ldr	r3, [r3, #12]
 8005066:	2b00      	cmp	r3, #0
 8005068:	d10c      	bne.n	8005084 <HAL_RCC_OscConfig+0x334>
 800506a:	4b6a      	ldr	r3, [pc, #424]	; (8005214 <HAL_RCC_OscConfig+0x4c4>)
 800506c:	6a1b      	ldr	r3, [r3, #32]
 800506e:	4a69      	ldr	r2, [pc, #420]	; (8005214 <HAL_RCC_OscConfig+0x4c4>)
 8005070:	f023 0301 	bic.w	r3, r3, #1
 8005074:	6213      	str	r3, [r2, #32]
 8005076:	4b67      	ldr	r3, [pc, #412]	; (8005214 <HAL_RCC_OscConfig+0x4c4>)
 8005078:	6a1b      	ldr	r3, [r3, #32]
 800507a:	4a66      	ldr	r2, [pc, #408]	; (8005214 <HAL_RCC_OscConfig+0x4c4>)
 800507c:	f023 0304 	bic.w	r3, r3, #4
 8005080:	6213      	str	r3, [r2, #32]
 8005082:	e01c      	b.n	80050be <HAL_RCC_OscConfig+0x36e>
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	68db      	ldr	r3, [r3, #12]
 8005088:	2b05      	cmp	r3, #5
 800508a:	d10c      	bne.n	80050a6 <HAL_RCC_OscConfig+0x356>
 800508c:	4b61      	ldr	r3, [pc, #388]	; (8005214 <HAL_RCC_OscConfig+0x4c4>)
 800508e:	6a1b      	ldr	r3, [r3, #32]
 8005090:	4a60      	ldr	r2, [pc, #384]	; (8005214 <HAL_RCC_OscConfig+0x4c4>)
 8005092:	f043 0304 	orr.w	r3, r3, #4
 8005096:	6213      	str	r3, [r2, #32]
 8005098:	4b5e      	ldr	r3, [pc, #376]	; (8005214 <HAL_RCC_OscConfig+0x4c4>)
 800509a:	6a1b      	ldr	r3, [r3, #32]
 800509c:	4a5d      	ldr	r2, [pc, #372]	; (8005214 <HAL_RCC_OscConfig+0x4c4>)
 800509e:	f043 0301 	orr.w	r3, r3, #1
 80050a2:	6213      	str	r3, [r2, #32]
 80050a4:	e00b      	b.n	80050be <HAL_RCC_OscConfig+0x36e>
 80050a6:	4b5b      	ldr	r3, [pc, #364]	; (8005214 <HAL_RCC_OscConfig+0x4c4>)
 80050a8:	6a1b      	ldr	r3, [r3, #32]
 80050aa:	4a5a      	ldr	r2, [pc, #360]	; (8005214 <HAL_RCC_OscConfig+0x4c4>)
 80050ac:	f023 0301 	bic.w	r3, r3, #1
 80050b0:	6213      	str	r3, [r2, #32]
 80050b2:	4b58      	ldr	r3, [pc, #352]	; (8005214 <HAL_RCC_OscConfig+0x4c4>)
 80050b4:	6a1b      	ldr	r3, [r3, #32]
 80050b6:	4a57      	ldr	r2, [pc, #348]	; (8005214 <HAL_RCC_OscConfig+0x4c4>)
 80050b8:	f023 0304 	bic.w	r3, r3, #4
 80050bc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	68db      	ldr	r3, [r3, #12]
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d015      	beq.n	80050f2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80050c6:	f7fe fe2b 	bl	8003d20 <HAL_GetTick>
 80050ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80050cc:	e00a      	b.n	80050e4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050ce:	f7fe fe27 	bl	8003d20 <HAL_GetTick>
 80050d2:	4602      	mov	r2, r0
 80050d4:	693b      	ldr	r3, [r7, #16]
 80050d6:	1ad3      	subs	r3, r2, r3
 80050d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80050dc:	4293      	cmp	r3, r2
 80050de:	d901      	bls.n	80050e4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80050e0:	2303      	movs	r3, #3
 80050e2:	e0b1      	b.n	8005248 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80050e4:	4b4b      	ldr	r3, [pc, #300]	; (8005214 <HAL_RCC_OscConfig+0x4c4>)
 80050e6:	6a1b      	ldr	r3, [r3, #32]
 80050e8:	f003 0302 	and.w	r3, r3, #2
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d0ee      	beq.n	80050ce <HAL_RCC_OscConfig+0x37e>
 80050f0:	e014      	b.n	800511c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80050f2:	f7fe fe15 	bl	8003d20 <HAL_GetTick>
 80050f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80050f8:	e00a      	b.n	8005110 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050fa:	f7fe fe11 	bl	8003d20 <HAL_GetTick>
 80050fe:	4602      	mov	r2, r0
 8005100:	693b      	ldr	r3, [r7, #16]
 8005102:	1ad3      	subs	r3, r2, r3
 8005104:	f241 3288 	movw	r2, #5000	; 0x1388
 8005108:	4293      	cmp	r3, r2
 800510a:	d901      	bls.n	8005110 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800510c:	2303      	movs	r3, #3
 800510e:	e09b      	b.n	8005248 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005110:	4b40      	ldr	r3, [pc, #256]	; (8005214 <HAL_RCC_OscConfig+0x4c4>)
 8005112:	6a1b      	ldr	r3, [r3, #32]
 8005114:	f003 0302 	and.w	r3, r3, #2
 8005118:	2b00      	cmp	r3, #0
 800511a:	d1ee      	bne.n	80050fa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800511c:	7dfb      	ldrb	r3, [r7, #23]
 800511e:	2b01      	cmp	r3, #1
 8005120:	d105      	bne.n	800512e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005122:	4b3c      	ldr	r3, [pc, #240]	; (8005214 <HAL_RCC_OscConfig+0x4c4>)
 8005124:	69db      	ldr	r3, [r3, #28]
 8005126:	4a3b      	ldr	r2, [pc, #236]	; (8005214 <HAL_RCC_OscConfig+0x4c4>)
 8005128:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800512c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	69db      	ldr	r3, [r3, #28]
 8005132:	2b00      	cmp	r3, #0
 8005134:	f000 8087 	beq.w	8005246 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005138:	4b36      	ldr	r3, [pc, #216]	; (8005214 <HAL_RCC_OscConfig+0x4c4>)
 800513a:	685b      	ldr	r3, [r3, #4]
 800513c:	f003 030c 	and.w	r3, r3, #12
 8005140:	2b08      	cmp	r3, #8
 8005142:	d061      	beq.n	8005208 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	69db      	ldr	r3, [r3, #28]
 8005148:	2b02      	cmp	r3, #2
 800514a:	d146      	bne.n	80051da <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800514c:	4b33      	ldr	r3, [pc, #204]	; (800521c <HAL_RCC_OscConfig+0x4cc>)
 800514e:	2200      	movs	r2, #0
 8005150:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005152:	f7fe fde5 	bl	8003d20 <HAL_GetTick>
 8005156:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005158:	e008      	b.n	800516c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800515a:	f7fe fde1 	bl	8003d20 <HAL_GetTick>
 800515e:	4602      	mov	r2, r0
 8005160:	693b      	ldr	r3, [r7, #16]
 8005162:	1ad3      	subs	r3, r2, r3
 8005164:	2b02      	cmp	r3, #2
 8005166:	d901      	bls.n	800516c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005168:	2303      	movs	r3, #3
 800516a:	e06d      	b.n	8005248 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800516c:	4b29      	ldr	r3, [pc, #164]	; (8005214 <HAL_RCC_OscConfig+0x4c4>)
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005174:	2b00      	cmp	r3, #0
 8005176:	d1f0      	bne.n	800515a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	6a1b      	ldr	r3, [r3, #32]
 800517c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005180:	d108      	bne.n	8005194 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005182:	4b24      	ldr	r3, [pc, #144]	; (8005214 <HAL_RCC_OscConfig+0x4c4>)
 8005184:	685b      	ldr	r3, [r3, #4]
 8005186:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	689b      	ldr	r3, [r3, #8]
 800518e:	4921      	ldr	r1, [pc, #132]	; (8005214 <HAL_RCC_OscConfig+0x4c4>)
 8005190:	4313      	orrs	r3, r2
 8005192:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005194:	4b1f      	ldr	r3, [pc, #124]	; (8005214 <HAL_RCC_OscConfig+0x4c4>)
 8005196:	685b      	ldr	r3, [r3, #4]
 8005198:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	6a19      	ldr	r1, [r3, #32]
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051a4:	430b      	orrs	r3, r1
 80051a6:	491b      	ldr	r1, [pc, #108]	; (8005214 <HAL_RCC_OscConfig+0x4c4>)
 80051a8:	4313      	orrs	r3, r2
 80051aa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80051ac:	4b1b      	ldr	r3, [pc, #108]	; (800521c <HAL_RCC_OscConfig+0x4cc>)
 80051ae:	2201      	movs	r2, #1
 80051b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051b2:	f7fe fdb5 	bl	8003d20 <HAL_GetTick>
 80051b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80051b8:	e008      	b.n	80051cc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80051ba:	f7fe fdb1 	bl	8003d20 <HAL_GetTick>
 80051be:	4602      	mov	r2, r0
 80051c0:	693b      	ldr	r3, [r7, #16]
 80051c2:	1ad3      	subs	r3, r2, r3
 80051c4:	2b02      	cmp	r3, #2
 80051c6:	d901      	bls.n	80051cc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80051c8:	2303      	movs	r3, #3
 80051ca:	e03d      	b.n	8005248 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80051cc:	4b11      	ldr	r3, [pc, #68]	; (8005214 <HAL_RCC_OscConfig+0x4c4>)
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d0f0      	beq.n	80051ba <HAL_RCC_OscConfig+0x46a>
 80051d8:	e035      	b.n	8005246 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80051da:	4b10      	ldr	r3, [pc, #64]	; (800521c <HAL_RCC_OscConfig+0x4cc>)
 80051dc:	2200      	movs	r2, #0
 80051de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051e0:	f7fe fd9e 	bl	8003d20 <HAL_GetTick>
 80051e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80051e6:	e008      	b.n	80051fa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80051e8:	f7fe fd9a 	bl	8003d20 <HAL_GetTick>
 80051ec:	4602      	mov	r2, r0
 80051ee:	693b      	ldr	r3, [r7, #16]
 80051f0:	1ad3      	subs	r3, r2, r3
 80051f2:	2b02      	cmp	r3, #2
 80051f4:	d901      	bls.n	80051fa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80051f6:	2303      	movs	r3, #3
 80051f8:	e026      	b.n	8005248 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80051fa:	4b06      	ldr	r3, [pc, #24]	; (8005214 <HAL_RCC_OscConfig+0x4c4>)
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005202:	2b00      	cmp	r3, #0
 8005204:	d1f0      	bne.n	80051e8 <HAL_RCC_OscConfig+0x498>
 8005206:	e01e      	b.n	8005246 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	69db      	ldr	r3, [r3, #28]
 800520c:	2b01      	cmp	r3, #1
 800520e:	d107      	bne.n	8005220 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8005210:	2301      	movs	r3, #1
 8005212:	e019      	b.n	8005248 <HAL_RCC_OscConfig+0x4f8>
 8005214:	40021000 	.word	0x40021000
 8005218:	40007000 	.word	0x40007000
 800521c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005220:	4b0b      	ldr	r3, [pc, #44]	; (8005250 <HAL_RCC_OscConfig+0x500>)
 8005222:	685b      	ldr	r3, [r3, #4]
 8005224:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	6a1b      	ldr	r3, [r3, #32]
 8005230:	429a      	cmp	r2, r3
 8005232:	d106      	bne.n	8005242 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800523e:	429a      	cmp	r2, r3
 8005240:	d001      	beq.n	8005246 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8005242:	2301      	movs	r3, #1
 8005244:	e000      	b.n	8005248 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8005246:	2300      	movs	r3, #0
}
 8005248:	4618      	mov	r0, r3
 800524a:	3718      	adds	r7, #24
 800524c:	46bd      	mov	sp, r7
 800524e:	bd80      	pop	{r7, pc}
 8005250:	40021000 	.word	0x40021000

08005254 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005254:	b580      	push	{r7, lr}
 8005256:	b084      	sub	sp, #16
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]
 800525c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	2b00      	cmp	r3, #0
 8005262:	d101      	bne.n	8005268 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005264:	2301      	movs	r3, #1
 8005266:	e0d0      	b.n	800540a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005268:	4b6a      	ldr	r3, [pc, #424]	; (8005414 <HAL_RCC_ClockConfig+0x1c0>)
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f003 0307 	and.w	r3, r3, #7
 8005270:	683a      	ldr	r2, [r7, #0]
 8005272:	429a      	cmp	r2, r3
 8005274:	d910      	bls.n	8005298 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005276:	4b67      	ldr	r3, [pc, #412]	; (8005414 <HAL_RCC_ClockConfig+0x1c0>)
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f023 0207 	bic.w	r2, r3, #7
 800527e:	4965      	ldr	r1, [pc, #404]	; (8005414 <HAL_RCC_ClockConfig+0x1c0>)
 8005280:	683b      	ldr	r3, [r7, #0]
 8005282:	4313      	orrs	r3, r2
 8005284:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005286:	4b63      	ldr	r3, [pc, #396]	; (8005414 <HAL_RCC_ClockConfig+0x1c0>)
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f003 0307 	and.w	r3, r3, #7
 800528e:	683a      	ldr	r2, [r7, #0]
 8005290:	429a      	cmp	r2, r3
 8005292:	d001      	beq.n	8005298 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005294:	2301      	movs	r3, #1
 8005296:	e0b8      	b.n	800540a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f003 0302 	and.w	r3, r3, #2
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d020      	beq.n	80052e6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f003 0304 	and.w	r3, r3, #4
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d005      	beq.n	80052bc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80052b0:	4b59      	ldr	r3, [pc, #356]	; (8005418 <HAL_RCC_ClockConfig+0x1c4>)
 80052b2:	685b      	ldr	r3, [r3, #4]
 80052b4:	4a58      	ldr	r2, [pc, #352]	; (8005418 <HAL_RCC_ClockConfig+0x1c4>)
 80052b6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80052ba:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f003 0308 	and.w	r3, r3, #8
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d005      	beq.n	80052d4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80052c8:	4b53      	ldr	r3, [pc, #332]	; (8005418 <HAL_RCC_ClockConfig+0x1c4>)
 80052ca:	685b      	ldr	r3, [r3, #4]
 80052cc:	4a52      	ldr	r2, [pc, #328]	; (8005418 <HAL_RCC_ClockConfig+0x1c4>)
 80052ce:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80052d2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80052d4:	4b50      	ldr	r3, [pc, #320]	; (8005418 <HAL_RCC_ClockConfig+0x1c4>)
 80052d6:	685b      	ldr	r3, [r3, #4]
 80052d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	689b      	ldr	r3, [r3, #8]
 80052e0:	494d      	ldr	r1, [pc, #308]	; (8005418 <HAL_RCC_ClockConfig+0x1c4>)
 80052e2:	4313      	orrs	r3, r2
 80052e4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f003 0301 	and.w	r3, r3, #1
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d040      	beq.n	8005374 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	685b      	ldr	r3, [r3, #4]
 80052f6:	2b01      	cmp	r3, #1
 80052f8:	d107      	bne.n	800530a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80052fa:	4b47      	ldr	r3, [pc, #284]	; (8005418 <HAL_RCC_ClockConfig+0x1c4>)
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005302:	2b00      	cmp	r3, #0
 8005304:	d115      	bne.n	8005332 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005306:	2301      	movs	r3, #1
 8005308:	e07f      	b.n	800540a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	685b      	ldr	r3, [r3, #4]
 800530e:	2b02      	cmp	r3, #2
 8005310:	d107      	bne.n	8005322 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005312:	4b41      	ldr	r3, [pc, #260]	; (8005418 <HAL_RCC_ClockConfig+0x1c4>)
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800531a:	2b00      	cmp	r3, #0
 800531c:	d109      	bne.n	8005332 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800531e:	2301      	movs	r3, #1
 8005320:	e073      	b.n	800540a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005322:	4b3d      	ldr	r3, [pc, #244]	; (8005418 <HAL_RCC_ClockConfig+0x1c4>)
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f003 0302 	and.w	r3, r3, #2
 800532a:	2b00      	cmp	r3, #0
 800532c:	d101      	bne.n	8005332 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800532e:	2301      	movs	r3, #1
 8005330:	e06b      	b.n	800540a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005332:	4b39      	ldr	r3, [pc, #228]	; (8005418 <HAL_RCC_ClockConfig+0x1c4>)
 8005334:	685b      	ldr	r3, [r3, #4]
 8005336:	f023 0203 	bic.w	r2, r3, #3
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	685b      	ldr	r3, [r3, #4]
 800533e:	4936      	ldr	r1, [pc, #216]	; (8005418 <HAL_RCC_ClockConfig+0x1c4>)
 8005340:	4313      	orrs	r3, r2
 8005342:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005344:	f7fe fcec 	bl	8003d20 <HAL_GetTick>
 8005348:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800534a:	e00a      	b.n	8005362 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800534c:	f7fe fce8 	bl	8003d20 <HAL_GetTick>
 8005350:	4602      	mov	r2, r0
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	1ad3      	subs	r3, r2, r3
 8005356:	f241 3288 	movw	r2, #5000	; 0x1388
 800535a:	4293      	cmp	r3, r2
 800535c:	d901      	bls.n	8005362 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800535e:	2303      	movs	r3, #3
 8005360:	e053      	b.n	800540a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005362:	4b2d      	ldr	r3, [pc, #180]	; (8005418 <HAL_RCC_ClockConfig+0x1c4>)
 8005364:	685b      	ldr	r3, [r3, #4]
 8005366:	f003 020c 	and.w	r2, r3, #12
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	685b      	ldr	r3, [r3, #4]
 800536e:	009b      	lsls	r3, r3, #2
 8005370:	429a      	cmp	r2, r3
 8005372:	d1eb      	bne.n	800534c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005374:	4b27      	ldr	r3, [pc, #156]	; (8005414 <HAL_RCC_ClockConfig+0x1c0>)
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f003 0307 	and.w	r3, r3, #7
 800537c:	683a      	ldr	r2, [r7, #0]
 800537e:	429a      	cmp	r2, r3
 8005380:	d210      	bcs.n	80053a4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005382:	4b24      	ldr	r3, [pc, #144]	; (8005414 <HAL_RCC_ClockConfig+0x1c0>)
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f023 0207 	bic.w	r2, r3, #7
 800538a:	4922      	ldr	r1, [pc, #136]	; (8005414 <HAL_RCC_ClockConfig+0x1c0>)
 800538c:	683b      	ldr	r3, [r7, #0]
 800538e:	4313      	orrs	r3, r2
 8005390:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005392:	4b20      	ldr	r3, [pc, #128]	; (8005414 <HAL_RCC_ClockConfig+0x1c0>)
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f003 0307 	and.w	r3, r3, #7
 800539a:	683a      	ldr	r2, [r7, #0]
 800539c:	429a      	cmp	r2, r3
 800539e:	d001      	beq.n	80053a4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80053a0:	2301      	movs	r3, #1
 80053a2:	e032      	b.n	800540a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f003 0304 	and.w	r3, r3, #4
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d008      	beq.n	80053c2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80053b0:	4b19      	ldr	r3, [pc, #100]	; (8005418 <HAL_RCC_ClockConfig+0x1c4>)
 80053b2:	685b      	ldr	r3, [r3, #4]
 80053b4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	68db      	ldr	r3, [r3, #12]
 80053bc:	4916      	ldr	r1, [pc, #88]	; (8005418 <HAL_RCC_ClockConfig+0x1c4>)
 80053be:	4313      	orrs	r3, r2
 80053c0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f003 0308 	and.w	r3, r3, #8
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d009      	beq.n	80053e2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80053ce:	4b12      	ldr	r3, [pc, #72]	; (8005418 <HAL_RCC_ClockConfig+0x1c4>)
 80053d0:	685b      	ldr	r3, [r3, #4]
 80053d2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	691b      	ldr	r3, [r3, #16]
 80053da:	00db      	lsls	r3, r3, #3
 80053dc:	490e      	ldr	r1, [pc, #56]	; (8005418 <HAL_RCC_ClockConfig+0x1c4>)
 80053de:	4313      	orrs	r3, r2
 80053e0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80053e2:	f000 f821 	bl	8005428 <HAL_RCC_GetSysClockFreq>
 80053e6:	4602      	mov	r2, r0
 80053e8:	4b0b      	ldr	r3, [pc, #44]	; (8005418 <HAL_RCC_ClockConfig+0x1c4>)
 80053ea:	685b      	ldr	r3, [r3, #4]
 80053ec:	091b      	lsrs	r3, r3, #4
 80053ee:	f003 030f 	and.w	r3, r3, #15
 80053f2:	490a      	ldr	r1, [pc, #40]	; (800541c <HAL_RCC_ClockConfig+0x1c8>)
 80053f4:	5ccb      	ldrb	r3, [r1, r3]
 80053f6:	fa22 f303 	lsr.w	r3, r2, r3
 80053fa:	4a09      	ldr	r2, [pc, #36]	; (8005420 <HAL_RCC_ClockConfig+0x1cc>)
 80053fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80053fe:	4b09      	ldr	r3, [pc, #36]	; (8005424 <HAL_RCC_ClockConfig+0x1d0>)
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	4618      	mov	r0, r3
 8005404:	f7fe fc4a 	bl	8003c9c <HAL_InitTick>

  return HAL_OK;
 8005408:	2300      	movs	r3, #0
}
 800540a:	4618      	mov	r0, r3
 800540c:	3710      	adds	r7, #16
 800540e:	46bd      	mov	sp, r7
 8005410:	bd80      	pop	{r7, pc}
 8005412:	bf00      	nop
 8005414:	40022000 	.word	0x40022000
 8005418:	40021000 	.word	0x40021000
 800541c:	08007fb4 	.word	0x08007fb4
 8005420:	2000009c 	.word	0x2000009c
 8005424:	200000d0 	.word	0x200000d0

08005428 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005428:	b490      	push	{r4, r7}
 800542a:	b08a      	sub	sp, #40	; 0x28
 800542c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800542e:	4b29      	ldr	r3, [pc, #164]	; (80054d4 <HAL_RCC_GetSysClockFreq+0xac>)
 8005430:	1d3c      	adds	r4, r7, #4
 8005432:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005434:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8005438:	f240 2301 	movw	r3, #513	; 0x201
 800543c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800543e:	2300      	movs	r3, #0
 8005440:	61fb      	str	r3, [r7, #28]
 8005442:	2300      	movs	r3, #0
 8005444:	61bb      	str	r3, [r7, #24]
 8005446:	2300      	movs	r3, #0
 8005448:	627b      	str	r3, [r7, #36]	; 0x24
 800544a:	2300      	movs	r3, #0
 800544c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800544e:	2300      	movs	r3, #0
 8005450:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005452:	4b21      	ldr	r3, [pc, #132]	; (80054d8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8005454:	685b      	ldr	r3, [r3, #4]
 8005456:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005458:	69fb      	ldr	r3, [r7, #28]
 800545a:	f003 030c 	and.w	r3, r3, #12
 800545e:	2b04      	cmp	r3, #4
 8005460:	d002      	beq.n	8005468 <HAL_RCC_GetSysClockFreq+0x40>
 8005462:	2b08      	cmp	r3, #8
 8005464:	d003      	beq.n	800546e <HAL_RCC_GetSysClockFreq+0x46>
 8005466:	e02b      	b.n	80054c0 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005468:	4b1c      	ldr	r3, [pc, #112]	; (80054dc <HAL_RCC_GetSysClockFreq+0xb4>)
 800546a:	623b      	str	r3, [r7, #32]
      break;
 800546c:	e02b      	b.n	80054c6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800546e:	69fb      	ldr	r3, [r7, #28]
 8005470:	0c9b      	lsrs	r3, r3, #18
 8005472:	f003 030f 	and.w	r3, r3, #15
 8005476:	3328      	adds	r3, #40	; 0x28
 8005478:	443b      	add	r3, r7
 800547a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800547e:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005480:	69fb      	ldr	r3, [r7, #28]
 8005482:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005486:	2b00      	cmp	r3, #0
 8005488:	d012      	beq.n	80054b0 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800548a:	4b13      	ldr	r3, [pc, #76]	; (80054d8 <HAL_RCC_GetSysClockFreq+0xb0>)
 800548c:	685b      	ldr	r3, [r3, #4]
 800548e:	0c5b      	lsrs	r3, r3, #17
 8005490:	f003 0301 	and.w	r3, r3, #1
 8005494:	3328      	adds	r3, #40	; 0x28
 8005496:	443b      	add	r3, r7
 8005498:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800549c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800549e:	697b      	ldr	r3, [r7, #20]
 80054a0:	4a0e      	ldr	r2, [pc, #56]	; (80054dc <HAL_RCC_GetSysClockFreq+0xb4>)
 80054a2:	fb03 f202 	mul.w	r2, r3, r2
 80054a6:	69bb      	ldr	r3, [r7, #24]
 80054a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80054ac:	627b      	str	r3, [r7, #36]	; 0x24
 80054ae:	e004      	b.n	80054ba <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80054b0:	697b      	ldr	r3, [r7, #20]
 80054b2:	4a0b      	ldr	r2, [pc, #44]	; (80054e0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80054b4:	fb02 f303 	mul.w	r3, r2, r3
 80054b8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80054ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054bc:	623b      	str	r3, [r7, #32]
      break;
 80054be:	e002      	b.n	80054c6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80054c0:	4b06      	ldr	r3, [pc, #24]	; (80054dc <HAL_RCC_GetSysClockFreq+0xb4>)
 80054c2:	623b      	str	r3, [r7, #32]
      break;
 80054c4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80054c6:	6a3b      	ldr	r3, [r7, #32]
}
 80054c8:	4618      	mov	r0, r3
 80054ca:	3728      	adds	r7, #40	; 0x28
 80054cc:	46bd      	mov	sp, r7
 80054ce:	bc90      	pop	{r4, r7}
 80054d0:	4770      	bx	lr
 80054d2:	bf00      	nop
 80054d4:	080073d4 	.word	0x080073d4
 80054d8:	40021000 	.word	0x40021000
 80054dc:	007a1200 	.word	0x007a1200
 80054e0:	003d0900 	.word	0x003d0900

080054e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80054e4:	b480      	push	{r7}
 80054e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80054e8:	4b02      	ldr	r3, [pc, #8]	; (80054f4 <HAL_RCC_GetHCLKFreq+0x10>)
 80054ea:	681b      	ldr	r3, [r3, #0]
}
 80054ec:	4618      	mov	r0, r3
 80054ee:	46bd      	mov	sp, r7
 80054f0:	bc80      	pop	{r7}
 80054f2:	4770      	bx	lr
 80054f4:	2000009c 	.word	0x2000009c

080054f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80054f8:	b580      	push	{r7, lr}
 80054fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80054fc:	f7ff fff2 	bl	80054e4 <HAL_RCC_GetHCLKFreq>
 8005500:	4602      	mov	r2, r0
 8005502:	4b05      	ldr	r3, [pc, #20]	; (8005518 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005504:	685b      	ldr	r3, [r3, #4]
 8005506:	0adb      	lsrs	r3, r3, #11
 8005508:	f003 0307 	and.w	r3, r3, #7
 800550c:	4903      	ldr	r1, [pc, #12]	; (800551c <HAL_RCC_GetPCLK2Freq+0x24>)
 800550e:	5ccb      	ldrb	r3, [r1, r3]
 8005510:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005514:	4618      	mov	r0, r3
 8005516:	bd80      	pop	{r7, pc}
 8005518:	40021000 	.word	0x40021000
 800551c:	08007fc4 	.word	0x08007fc4

08005520 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005520:	b480      	push	{r7}
 8005522:	b085      	sub	sp, #20
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005528:	4b0a      	ldr	r3, [pc, #40]	; (8005554 <RCC_Delay+0x34>)
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	4a0a      	ldr	r2, [pc, #40]	; (8005558 <RCC_Delay+0x38>)
 800552e:	fba2 2303 	umull	r2, r3, r2, r3
 8005532:	0a5b      	lsrs	r3, r3, #9
 8005534:	687a      	ldr	r2, [r7, #4]
 8005536:	fb02 f303 	mul.w	r3, r2, r3
 800553a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800553c:	bf00      	nop
  }
  while (Delay --);
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	1e5a      	subs	r2, r3, #1
 8005542:	60fa      	str	r2, [r7, #12]
 8005544:	2b00      	cmp	r3, #0
 8005546:	d1f9      	bne.n	800553c <RCC_Delay+0x1c>
}
 8005548:	bf00      	nop
 800554a:	bf00      	nop
 800554c:	3714      	adds	r7, #20
 800554e:	46bd      	mov	sp, r7
 8005550:	bc80      	pop	{r7}
 8005552:	4770      	bx	lr
 8005554:	2000009c 	.word	0x2000009c
 8005558:	10624dd3 	.word	0x10624dd3

0800555c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800555c:	b580      	push	{r7, lr}
 800555e:	b086      	sub	sp, #24
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8005564:	2300      	movs	r3, #0
 8005566:	613b      	str	r3, [r7, #16]
 8005568:	2300      	movs	r3, #0
 800556a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f003 0301 	and.w	r3, r3, #1
 8005574:	2b00      	cmp	r3, #0
 8005576:	d07d      	beq.n	8005674 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8005578:	2300      	movs	r3, #0
 800557a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800557c:	4b4f      	ldr	r3, [pc, #316]	; (80056bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800557e:	69db      	ldr	r3, [r3, #28]
 8005580:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005584:	2b00      	cmp	r3, #0
 8005586:	d10d      	bne.n	80055a4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005588:	4b4c      	ldr	r3, [pc, #304]	; (80056bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800558a:	69db      	ldr	r3, [r3, #28]
 800558c:	4a4b      	ldr	r2, [pc, #300]	; (80056bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800558e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005592:	61d3      	str	r3, [r2, #28]
 8005594:	4b49      	ldr	r3, [pc, #292]	; (80056bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005596:	69db      	ldr	r3, [r3, #28]
 8005598:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800559c:	60bb      	str	r3, [r7, #8]
 800559e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80055a0:	2301      	movs	r3, #1
 80055a2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80055a4:	4b46      	ldr	r3, [pc, #280]	; (80056c0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d118      	bne.n	80055e2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80055b0:	4b43      	ldr	r3, [pc, #268]	; (80056c0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	4a42      	ldr	r2, [pc, #264]	; (80056c0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80055b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80055ba:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80055bc:	f7fe fbb0 	bl	8003d20 <HAL_GetTick>
 80055c0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80055c2:	e008      	b.n	80055d6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80055c4:	f7fe fbac 	bl	8003d20 <HAL_GetTick>
 80055c8:	4602      	mov	r2, r0
 80055ca:	693b      	ldr	r3, [r7, #16]
 80055cc:	1ad3      	subs	r3, r2, r3
 80055ce:	2b64      	cmp	r3, #100	; 0x64
 80055d0:	d901      	bls.n	80055d6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80055d2:	2303      	movs	r3, #3
 80055d4:	e06d      	b.n	80056b2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80055d6:	4b3a      	ldr	r3, [pc, #232]	; (80056c0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d0f0      	beq.n	80055c4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80055e2:	4b36      	ldr	r3, [pc, #216]	; (80056bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80055e4:	6a1b      	ldr	r3, [r3, #32]
 80055e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80055ea:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d02e      	beq.n	8005650 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	685b      	ldr	r3, [r3, #4]
 80055f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80055fa:	68fa      	ldr	r2, [r7, #12]
 80055fc:	429a      	cmp	r2, r3
 80055fe:	d027      	beq.n	8005650 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005600:	4b2e      	ldr	r3, [pc, #184]	; (80056bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005602:	6a1b      	ldr	r3, [r3, #32]
 8005604:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005608:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800560a:	4b2e      	ldr	r3, [pc, #184]	; (80056c4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800560c:	2201      	movs	r2, #1
 800560e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005610:	4b2c      	ldr	r3, [pc, #176]	; (80056c4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005612:	2200      	movs	r2, #0
 8005614:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005616:	4a29      	ldr	r2, [pc, #164]	; (80056bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	f003 0301 	and.w	r3, r3, #1
 8005622:	2b00      	cmp	r3, #0
 8005624:	d014      	beq.n	8005650 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005626:	f7fe fb7b 	bl	8003d20 <HAL_GetTick>
 800562a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800562c:	e00a      	b.n	8005644 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800562e:	f7fe fb77 	bl	8003d20 <HAL_GetTick>
 8005632:	4602      	mov	r2, r0
 8005634:	693b      	ldr	r3, [r7, #16]
 8005636:	1ad3      	subs	r3, r2, r3
 8005638:	f241 3288 	movw	r2, #5000	; 0x1388
 800563c:	4293      	cmp	r3, r2
 800563e:	d901      	bls.n	8005644 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8005640:	2303      	movs	r3, #3
 8005642:	e036      	b.n	80056b2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005644:	4b1d      	ldr	r3, [pc, #116]	; (80056bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005646:	6a1b      	ldr	r3, [r3, #32]
 8005648:	f003 0302 	and.w	r3, r3, #2
 800564c:	2b00      	cmp	r3, #0
 800564e:	d0ee      	beq.n	800562e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005650:	4b1a      	ldr	r3, [pc, #104]	; (80056bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005652:	6a1b      	ldr	r3, [r3, #32]
 8005654:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	685b      	ldr	r3, [r3, #4]
 800565c:	4917      	ldr	r1, [pc, #92]	; (80056bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800565e:	4313      	orrs	r3, r2
 8005660:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005662:	7dfb      	ldrb	r3, [r7, #23]
 8005664:	2b01      	cmp	r3, #1
 8005666:	d105      	bne.n	8005674 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005668:	4b14      	ldr	r3, [pc, #80]	; (80056bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800566a:	69db      	ldr	r3, [r3, #28]
 800566c:	4a13      	ldr	r2, [pc, #76]	; (80056bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800566e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005672:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f003 0302 	and.w	r3, r3, #2
 800567c:	2b00      	cmp	r3, #0
 800567e:	d008      	beq.n	8005692 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005680:	4b0e      	ldr	r3, [pc, #56]	; (80056bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005682:	685b      	ldr	r3, [r3, #4]
 8005684:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	689b      	ldr	r3, [r3, #8]
 800568c:	490b      	ldr	r1, [pc, #44]	; (80056bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800568e:	4313      	orrs	r3, r2
 8005690:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f003 0310 	and.w	r3, r3, #16
 800569a:	2b00      	cmp	r3, #0
 800569c:	d008      	beq.n	80056b0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800569e:	4b07      	ldr	r3, [pc, #28]	; (80056bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80056a0:	685b      	ldr	r3, [r3, #4]
 80056a2:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	695b      	ldr	r3, [r3, #20]
 80056aa:	4904      	ldr	r1, [pc, #16]	; (80056bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80056ac:	4313      	orrs	r3, r2
 80056ae:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80056b0:	2300      	movs	r3, #0
}
 80056b2:	4618      	mov	r0, r3
 80056b4:	3718      	adds	r7, #24
 80056b6:	46bd      	mov	sp, r7
 80056b8:	bd80      	pop	{r7, pc}
 80056ba:	bf00      	nop
 80056bc:	40021000 	.word	0x40021000
 80056c0:	40007000 	.word	0x40007000
 80056c4:	42420440 	.word	0x42420440

080056c8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80056c8:	b590      	push	{r4, r7, lr}
 80056ca:	b08d      	sub	sp, #52	; 0x34
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80056d0:	4b6a      	ldr	r3, [pc, #424]	; (800587c <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>)
 80056d2:	f107 040c 	add.w	r4, r7, #12
 80056d6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80056d8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80056dc:	f240 2301 	movw	r3, #513	; 0x201
 80056e0:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80056e2:	2300      	movs	r3, #0
 80056e4:	627b      	str	r3, [r7, #36]	; 0x24
 80056e6:	2300      	movs	r3, #0
 80056e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80056ea:	2300      	movs	r3, #0
 80056ec:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80056ee:	2300      	movs	r3, #0
 80056f0:	61fb      	str	r3, [r7, #28]
 80056f2:	2300      	movs	r3, #0
 80056f4:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	3b01      	subs	r3, #1
 80056fa:	2b0f      	cmp	r3, #15
 80056fc:	f200 80b4 	bhi.w	8005868 <HAL_RCCEx_GetPeriphCLKFreq+0x1a0>
 8005700:	a201      	add	r2, pc, #4	; (adr r2, 8005708 <HAL_RCCEx_GetPeriphCLKFreq+0x40>)
 8005702:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005706:	bf00      	nop
 8005708:	080057e7 	.word	0x080057e7
 800570c:	0800584d 	.word	0x0800584d
 8005710:	08005869 	.word	0x08005869
 8005714:	080057d7 	.word	0x080057d7
 8005718:	08005869 	.word	0x08005869
 800571c:	08005869 	.word	0x08005869
 8005720:	08005869 	.word	0x08005869
 8005724:	080057df 	.word	0x080057df
 8005728:	08005869 	.word	0x08005869
 800572c:	08005869 	.word	0x08005869
 8005730:	08005869 	.word	0x08005869
 8005734:	08005869 	.word	0x08005869
 8005738:	08005869 	.word	0x08005869
 800573c:	08005869 	.word	0x08005869
 8005740:	08005869 	.word	0x08005869
 8005744:	08005749 	.word	0x08005749
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_USB:
    {
      /* Get RCC configuration ------------------------------------------------------*/
      temp_reg = RCC->CFGR;
 8005748:	4b4d      	ldr	r3, [pc, #308]	; (8005880 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 800574a:	685b      	ldr	r3, [r3, #4]
 800574c:	61fb      	str	r3, [r7, #28]

      /* Check if PLL is enabled */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 800574e:	4b4c      	ldr	r3, [pc, #304]	; (8005880 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005756:	2b00      	cmp	r3, #0
 8005758:	f000 8088 	beq.w	800586c <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
      {
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800575c:	69fb      	ldr	r3, [r7, #28]
 800575e:	0c9b      	lsrs	r3, r3, #18
 8005760:	f003 030f 	and.w	r3, r3, #15
 8005764:	3330      	adds	r3, #48	; 0x30
 8005766:	443b      	add	r3, r7
 8005768:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800576c:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800576e:	69fb      	ldr	r3, [r7, #28]
 8005770:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005774:	2b00      	cmp	r3, #0
 8005776:	d017      	beq.n	80057a8 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        {
#if defined(STM32F105xC) || defined(STM32F107xC) || defined(STM32F100xB)\
 || defined(STM32F100xE)
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005778:	4b41      	ldr	r3, [pc, #260]	; (8005880 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 800577a:	685b      	ldr	r3, [r3, #4]
 800577c:	0c5b      	lsrs	r3, r3, #17
 800577e:	f003 0301 	and.w	r3, r3, #1
 8005782:	3330      	adds	r3, #48	; 0x30
 8005784:	443b      	add	r3, r7
 8005786:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800578a:	627b      	str	r3, [r7, #36]	; 0x24
          if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
          {
            pllclk = pllclk / 2;
          }
#else
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800578c:	69fb      	ldr	r3, [r7, #28]
 800578e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005792:	2b00      	cmp	r3, #0
 8005794:	d00d      	beq.n	80057b2 <HAL_RCCEx_GetPeriphCLKFreq+0xea>
          {
            /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8005796:	4a3b      	ldr	r2, [pc, #236]	; (8005884 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>)
 8005798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800579a:	fbb2 f2f3 	udiv	r2, r2, r3
 800579e:	6a3b      	ldr	r3, [r7, #32]
 80057a0:	fb02 f303 	mul.w	r3, r2, r3
 80057a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80057a6:	e004      	b.n	80057b2 <HAL_RCCEx_GetPeriphCLKFreq+0xea>
#endif /* STM32F105xC || STM32F107xC */
        }
        else
        {
          /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80057a8:	6a3b      	ldr	r3, [r7, #32]
 80057aa:	4a37      	ldr	r2, [pc, #220]	; (8005888 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>)
 80057ac:	fb02 f303 	mul.w	r3, r2, r3
 80057b0:	62fb      	str	r3, [r7, #44]	; 0x2c
          /* Prescaler of 3 selected for USB */
          frequency = (2 * pllclk) / 3;
        }
#else
        /* USBCLK = PLLCLK / USB prescaler */
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80057b2:	4b33      	ldr	r3, [pc, #204]	; (8005880 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 80057b4:	685b      	ldr	r3, [r3, #4]
 80057b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80057ba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80057be:	d102      	bne.n	80057c6 <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
        {
          /* No prescaler selected for USB */
          frequency = pllclk;
 80057c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057c2:	62bb      	str	r3, [r7, #40]	; 0x28
          /* Prescaler of 1.5 selected for USB */
          frequency = (pllclk * 2) / 3;
        }
#endif
      }
      break;
 80057c4:	e052      	b.n	800586c <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
          frequency = (pllclk * 2) / 3;
 80057c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057c8:	005b      	lsls	r3, r3, #1
 80057ca:	4a30      	ldr	r2, [pc, #192]	; (800588c <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>)
 80057cc:	fba2 2303 	umull	r2, r3, r2, r3
 80057d0:	085b      	lsrs	r3, r3, #1
 80057d2:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80057d4:	e04a      	b.n	800586c <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
#if defined(STM32F103xE) || defined(STM32F103xG) || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_I2S2:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S2 */
      frequency = HAL_RCC_GetSysClockFreq();
 80057d6:	f7ff fe27 	bl	8005428 <HAL_RCC_GetSysClockFreq>
 80057da:	62b8      	str	r0, [r7, #40]	; 0x28
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 80057dc:	e049      	b.n	8005872 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
    }
    case RCC_PERIPHCLK_I2S3:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S3 */
      frequency = HAL_RCC_GetSysClockFreq();
 80057de:	f7ff fe23 	bl	8005428 <HAL_RCC_GetSysClockFreq>
 80057e2:	62b8      	str	r0, [r7, #40]	; 0x28
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 80057e4:	e045      	b.n	8005872 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
    }
#endif /* STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */
    case RCC_PERIPHCLK_RTC:
    {
      /* Get RCC BDCR configuration ------------------------------------------------------*/
      temp_reg = RCC->BDCR;
 80057e6:	4b26      	ldr	r3, [pc, #152]	; (8005880 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 80057e8:	6a1b      	ldr	r3, [r3, #32]
 80057ea:	61fb      	str	r3, [r7, #28]

      /* Check if LSE is ready if RTC clock selection is LSE */
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80057ec:	69fb      	ldr	r3, [r7, #28]
 80057ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80057f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80057f6:	d108      	bne.n	800580a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
 80057f8:	69fb      	ldr	r3, [r7, #28]
 80057fa:	f003 0302 	and.w	r3, r3, #2
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d003      	beq.n	800580a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      {
        frequency = LSE_VALUE;
 8005802:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005806:	62bb      	str	r3, [r7, #40]	; 0x28
 8005808:	e01f      	b.n	800584a <HAL_RCCEx_GetPeriphCLKFreq+0x182>
      }
      /* Check if LSI is ready if RTC clock selection is LSI */
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800580a:	69fb      	ldr	r3, [r7, #28]
 800580c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005810:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005814:	d109      	bne.n	800582a <HAL_RCCEx_GetPeriphCLKFreq+0x162>
 8005816:	4b1a      	ldr	r3, [pc, #104]	; (8005880 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 8005818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800581a:	f003 0302 	and.w	r3, r3, #2
 800581e:	2b00      	cmp	r3, #0
 8005820:	d003      	beq.n	800582a <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      {
        frequency = LSI_VALUE;
 8005822:	f649 4340 	movw	r3, #40000	; 0x9c40
 8005826:	62bb      	str	r3, [r7, #40]	; 0x28
 8005828:	e00f      	b.n	800584a <HAL_RCCEx_GetPeriphCLKFreq+0x182>
      }
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 800582a:	69fb      	ldr	r3, [r7, #28]
 800582c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005830:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005834:	d11c      	bne.n	8005870 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
 8005836:	4b12      	ldr	r3, [pc, #72]	; (8005880 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800583e:	2b00      	cmp	r3, #0
 8005840:	d016      	beq.n	8005870 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
      {
        frequency = HSE_VALUE / 128U;
 8005842:	f24f 4324 	movw	r3, #62500	; 0xf424
 8005846:	62bb      	str	r3, [r7, #40]	; 0x28
      /* Clock not enabled for RTC*/
      else
      {
        /* nothing to do: frequency already initialized to 0U */
      }
      break;
 8005848:	e012      	b.n	8005870 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
 800584a:	e011      	b.n	8005870 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
    }
    case RCC_PERIPHCLK_ADC:
    {
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800584c:	f7ff fe54 	bl	80054f8 <HAL_RCC_GetPCLK2Freq>
 8005850:	4602      	mov	r2, r0
 8005852:	4b0b      	ldr	r3, [pc, #44]	; (8005880 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 8005854:	685b      	ldr	r3, [r3, #4]
 8005856:	0b9b      	lsrs	r3, r3, #14
 8005858:	f003 0303 	and.w	r3, r3, #3
 800585c:	3301      	adds	r3, #1
 800585e:	005b      	lsls	r3, r3, #1
 8005860:	fbb2 f3f3 	udiv	r3, r2, r3
 8005864:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8005866:	e004      	b.n	8005872 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
    }
    default:
    {
      break;
 8005868:	bf00      	nop
 800586a:	e002      	b.n	8005872 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
      break;
 800586c:	bf00      	nop
 800586e:	e000      	b.n	8005872 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
      break;
 8005870:	bf00      	nop
    }
  }
  return (frequency);
 8005872:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8005874:	4618      	mov	r0, r3
 8005876:	3734      	adds	r7, #52	; 0x34
 8005878:	46bd      	mov	sp, r7
 800587a:	bd90      	pop	{r4, r7, pc}
 800587c:	080073e4 	.word	0x080073e4
 8005880:	40021000 	.word	0x40021000
 8005884:	007a1200 	.word	0x007a1200
 8005888:	003d0900 	.word	0x003d0900
 800588c:	aaaaaaab 	.word	0xaaaaaaab

08005890 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005890:	b580      	push	{r7, lr}
 8005892:	b084      	sub	sp, #16
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 8005898:	2300      	movs	r3, #0
 800589a:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d101      	bne.n	80058a6 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80058a2:	2301      	movs	r3, #1
 80058a4:	e084      	b.n	80059b0 <HAL_RTC_Init+0x120>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	7c5b      	ldrb	r3, [r3, #17]
 80058aa:	b2db      	uxtb	r3, r3
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d105      	bne.n	80058bc <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	2200      	movs	r2, #0
 80058b4:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80058b6:	6878      	ldr	r0, [r7, #4]
 80058b8:	f7fd fde8 	bl	800348c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2202      	movs	r2, #2
 80058c0:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80058c2:	6878      	ldr	r0, [r7, #4]
 80058c4:	f000 faa0 	bl	8005e08 <HAL_RTC_WaitForSynchro>
 80058c8:	4603      	mov	r3, r0
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d004      	beq.n	80058d8 <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	2204      	movs	r2, #4
 80058d2:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 80058d4:	2301      	movs	r3, #1
 80058d6:	e06b      	b.n	80059b0 <HAL_RTC_Init+0x120>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80058d8:	6878      	ldr	r0, [r7, #4]
 80058da:	f000 fb59 	bl	8005f90 <RTC_EnterInitMode>
 80058de:	4603      	mov	r3, r0
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d004      	beq.n	80058ee <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2204      	movs	r2, #4
 80058e8:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 80058ea:	2301      	movs	r3, #1
 80058ec:	e060      	b.n	80059b0 <HAL_RTC_Init+0x120>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	685a      	ldr	r2, [r3, #4]
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f022 0207 	bic.w	r2, r2, #7
 80058fc:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	689b      	ldr	r3, [r3, #8]
 8005902:	2b00      	cmp	r3, #0
 8005904:	d005      	beq.n	8005912 <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 8005906:	4b2c      	ldr	r3, [pc, #176]	; (80059b8 <HAL_RTC_Init+0x128>)
 8005908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800590a:	4a2b      	ldr	r2, [pc, #172]	; (80059b8 <HAL_RTC_Init+0x128>)
 800590c:	f023 0301 	bic.w	r3, r3, #1
 8005910:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8005912:	4b29      	ldr	r3, [pc, #164]	; (80059b8 <HAL_RTC_Init+0x128>)
 8005914:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005916:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	689b      	ldr	r3, [r3, #8]
 800591e:	4926      	ldr	r1, [pc, #152]	; (80059b8 <HAL_RTC_Init+0x128>)
 8005920:	4313      	orrs	r3, r2
 8005922:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	685b      	ldr	r3, [r3, #4]
 8005928:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800592c:	d003      	beq.n	8005936 <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	685b      	ldr	r3, [r3, #4]
 8005932:	60fb      	str	r3, [r7, #12]
 8005934:	e00e      	b.n	8005954 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 8005936:	2001      	movs	r0, #1
 8005938:	f7ff fec6 	bl	80056c8 <HAL_RCCEx_GetPeriphCLKFreq>
 800593c:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	2b00      	cmp	r3, #0
 8005942:	d104      	bne.n	800594e <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2204      	movs	r2, #4
 8005948:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 800594a:	2301      	movs	r3, #1
 800594c:	e030      	b.n	80059b0 <HAL_RTC_Init+0x120>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	3b01      	subs	r3, #1
 8005952:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	689b      	ldr	r3, [r3, #8]
 800595a:	f023 010f 	bic.w	r1, r3, #15
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	0c1a      	lsrs	r2, r3, #16
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	430a      	orrs	r2, r1
 8005968:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	68db      	ldr	r3, [r3, #12]
 8005970:	0c1b      	lsrs	r3, r3, #16
 8005972:	041b      	lsls	r3, r3, #16
 8005974:	68fa      	ldr	r2, [r7, #12]
 8005976:	b291      	uxth	r1, r2
 8005978:	687a      	ldr	r2, [r7, #4]
 800597a:	6812      	ldr	r2, [r2, #0]
 800597c:	430b      	orrs	r3, r1
 800597e:	60d3      	str	r3, [r2, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8005980:	6878      	ldr	r0, [r7, #4]
 8005982:	f000 fb2d 	bl	8005fe0 <RTC_ExitInitMode>
 8005986:	4603      	mov	r3, r0
 8005988:	2b00      	cmp	r3, #0
 800598a:	d004      	beq.n	8005996 <HAL_RTC_Init+0x106>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2204      	movs	r2, #4
 8005990:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 8005992:	2301      	movs	r3, #1
 8005994:	e00c      	b.n	80059b0 <HAL_RTC_Init+0x120>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	2200      	movs	r2, #0
 800599a:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2201      	movs	r2, #1
 80059a0:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	2201      	movs	r2, #1
 80059a6:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2201      	movs	r2, #1
 80059ac:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 80059ae:	2300      	movs	r3, #0
  }
}
 80059b0:	4618      	mov	r0, r3
 80059b2:	3710      	adds	r7, #16
 80059b4:	46bd      	mov	sp, r7
 80059b6:	bd80      	pop	{r7, pc}
 80059b8:	40006c00 	.word	0x40006c00

080059bc <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80059bc:	b590      	push	{r4, r7, lr}
 80059be:	b087      	sub	sp, #28
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	60f8      	str	r0, [r7, #12]
 80059c4:	60b9      	str	r1, [r7, #8]
 80059c6:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 80059c8:	2300      	movs	r3, #0
 80059ca:	617b      	str	r3, [r7, #20]
 80059cc:	2300      	movs	r3, #0
 80059ce:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d002      	beq.n	80059dc <HAL_RTC_SetTime+0x20>
 80059d6:	68bb      	ldr	r3, [r7, #8]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d101      	bne.n	80059e0 <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 80059dc:	2301      	movs	r3, #1
 80059de:	e080      	b.n	8005ae2 <HAL_RTC_SetTime+0x126>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	7c1b      	ldrb	r3, [r3, #16]
 80059e4:	2b01      	cmp	r3, #1
 80059e6:	d101      	bne.n	80059ec <HAL_RTC_SetTime+0x30>
 80059e8:	2302      	movs	r3, #2
 80059ea:	e07a      	b.n	8005ae2 <HAL_RTC_SetTime+0x126>
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	2201      	movs	r2, #1
 80059f0:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	2202      	movs	r2, #2
 80059f6:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d113      	bne.n	8005a26 <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 80059fe:	68bb      	ldr	r3, [r7, #8]
 8005a00:	781b      	ldrb	r3, [r3, #0]
 8005a02:	461a      	mov	r2, r3
 8005a04:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8005a08:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 8005a0c:	68bb      	ldr	r3, [r7, #8]
 8005a0e:	785b      	ldrb	r3, [r3, #1]
 8005a10:	4619      	mov	r1, r3
 8005a12:	460b      	mov	r3, r1
 8005a14:	011b      	lsls	r3, r3, #4
 8005a16:	1a5b      	subs	r3, r3, r1
 8005a18:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8005a1a:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 8005a1c:	68ba      	ldr	r2, [r7, #8]
 8005a1e:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8005a20:	4413      	add	r3, r2
 8005a22:	617b      	str	r3, [r7, #20]
 8005a24:	e01e      	b.n	8005a64 <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8005a26:	68bb      	ldr	r3, [r7, #8]
 8005a28:	781b      	ldrb	r3, [r3, #0]
 8005a2a:	4618      	mov	r0, r3
 8005a2c:	f000 fb1d 	bl	800606a <RTC_Bcd2ToByte>
 8005a30:	4603      	mov	r3, r0
 8005a32:	461a      	mov	r2, r3
 8005a34:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8005a38:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 8005a3c:	68bb      	ldr	r3, [r7, #8]
 8005a3e:	785b      	ldrb	r3, [r3, #1]
 8005a40:	4618      	mov	r0, r3
 8005a42:	f000 fb12 	bl	800606a <RTC_Bcd2ToByte>
 8005a46:	4603      	mov	r3, r0
 8005a48:	461a      	mov	r2, r3
 8005a4a:	4613      	mov	r3, r2
 8005a4c:	011b      	lsls	r3, r3, #4
 8005a4e:	1a9b      	subs	r3, r3, r2
 8005a50:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8005a52:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 8005a54:	68bb      	ldr	r3, [r7, #8]
 8005a56:	789b      	ldrb	r3, [r3, #2]
 8005a58:	4618      	mov	r0, r3
 8005a5a:	f000 fb06 	bl	800606a <RTC_Bcd2ToByte>
 8005a5e:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8005a60:	4423      	add	r3, r4
 8005a62:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8005a64:	6979      	ldr	r1, [r7, #20]
 8005a66:	68f8      	ldr	r0, [r7, #12]
 8005a68:	f000 fa2b 	bl	8005ec2 <RTC_WriteTimeCounter>
 8005a6c:	4603      	mov	r3, r0
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d007      	beq.n	8005a82 <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	2204      	movs	r2, #4
 8005a76:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 8005a7e:	2301      	movs	r3, #1
 8005a80:	e02f      	b.n	8005ae2 <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	685a      	ldr	r2, [r3, #4]
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f022 0205 	bic.w	r2, r2, #5
 8005a90:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8005a92:	68f8      	ldr	r0, [r7, #12]
 8005a94:	f000 fa3c 	bl	8005f10 <RTC_ReadAlarmCounter>
 8005a98:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8005a9a:	693b      	ldr	r3, [r7, #16]
 8005a9c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005aa0:	d018      	beq.n	8005ad4 <HAL_RTC_SetTime+0x118>
    {
      if (counter_alarm < counter_time)
 8005aa2:	693a      	ldr	r2, [r7, #16]
 8005aa4:	697b      	ldr	r3, [r7, #20]
 8005aa6:	429a      	cmp	r2, r3
 8005aa8:	d214      	bcs.n	8005ad4 <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8005aaa:	693b      	ldr	r3, [r7, #16]
 8005aac:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8005ab0:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8005ab4:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8005ab6:	6939      	ldr	r1, [r7, #16]
 8005ab8:	68f8      	ldr	r0, [r7, #12]
 8005aba:	f000 fa42 	bl	8005f42 <RTC_WriteAlarmCounter>
 8005abe:	4603      	mov	r3, r0
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d007      	beq.n	8005ad4 <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	2204      	movs	r2, #4
 8005ac8:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	2200      	movs	r2, #0
 8005ace:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8005ad0:	2301      	movs	r3, #1
 8005ad2:	e006      	b.n	8005ae2 <HAL_RTC_SetTime+0x126>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	2201      	movs	r2, #1
 8005ad8:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	2200      	movs	r2, #0
 8005ade:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 8005ae0:	2300      	movs	r3, #0
  }
}
 8005ae2:	4618      	mov	r0, r3
 8005ae4:	371c      	adds	r7, #28
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	bd90      	pop	{r4, r7, pc}
	...

08005aec <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005aec:	b580      	push	{r7, lr}
 8005aee:	b088      	sub	sp, #32
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	60f8      	str	r0, [r7, #12]
 8005af4:	60b9      	str	r1, [r7, #8]
 8005af6:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, days_elapsed = 0U, hours = 0U;
 8005af8:	2300      	movs	r3, #0
 8005afa:	61bb      	str	r3, [r7, #24]
 8005afc:	2300      	movs	r3, #0
 8005afe:	61fb      	str	r3, [r7, #28]
 8005b00:	2300      	movs	r3, #0
 8005b02:	617b      	str	r3, [r7, #20]
 8005b04:	2300      	movs	r3, #0
 8005b06:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d002      	beq.n	8005b14 <HAL_RTC_GetTime+0x28>
 8005b0e:	68bb      	ldr	r3, [r7, #8]
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d101      	bne.n	8005b18 <HAL_RTC_GetTime+0x2c>
  {
    return HAL_ERROR;
 8005b14:	2301      	movs	r3, #1
 8005b16:	e0b5      	b.n	8005c84 <HAL_RTC_GetTime+0x198>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Check if counter overflow occurred */
  if (__HAL_RTC_OVERFLOW_GET_FLAG(hrtc, RTC_FLAG_OW))
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	685b      	ldr	r3, [r3, #4]
 8005b1e:	f003 0304 	and.w	r3, r3, #4
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d001      	beq.n	8005b2a <HAL_RTC_GetTime+0x3e>
  {
    return HAL_ERROR;
 8005b26:	2301      	movs	r3, #1
 8005b28:	e0ac      	b.n	8005c84 <HAL_RTC_GetTime+0x198>
  }

  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8005b2a:	68f8      	ldr	r0, [r7, #12]
 8005b2c:	f000 f999 	bl	8005e62 <RTC_ReadTimeCounter>
 8005b30:	61b8      	str	r0, [r7, #24]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8005b32:	69bb      	ldr	r3, [r7, #24]
 8005b34:	4a55      	ldr	r2, [pc, #340]	; (8005c8c <HAL_RTC_GetTime+0x1a0>)
 8005b36:	fba2 2303 	umull	r2, r3, r2, r3
 8005b3a:	0adb      	lsrs	r3, r3, #11
 8005b3c:	613b      	str	r3, [r7, #16]
  sTime->Minutes  = (uint8_t)((counter_time % 3600U) / 60U);
 8005b3e:	69ba      	ldr	r2, [r7, #24]
 8005b40:	4b52      	ldr	r3, [pc, #328]	; (8005c8c <HAL_RTC_GetTime+0x1a0>)
 8005b42:	fba3 1302 	umull	r1, r3, r3, r2
 8005b46:	0adb      	lsrs	r3, r3, #11
 8005b48:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8005b4c:	fb01 f303 	mul.w	r3, r1, r3
 8005b50:	1ad3      	subs	r3, r2, r3
 8005b52:	4a4f      	ldr	r2, [pc, #316]	; (8005c90 <HAL_RTC_GetTime+0x1a4>)
 8005b54:	fba2 2303 	umull	r2, r3, r2, r3
 8005b58:	095b      	lsrs	r3, r3, #5
 8005b5a:	b2da      	uxtb	r2, r3
 8005b5c:	68bb      	ldr	r3, [r7, #8]
 8005b5e:	705a      	strb	r2, [r3, #1]
  sTime->Seconds  = (uint8_t)((counter_time % 3600U) % 60U);
 8005b60:	69bb      	ldr	r3, [r7, #24]
 8005b62:	4a4a      	ldr	r2, [pc, #296]	; (8005c8c <HAL_RTC_GetTime+0x1a0>)
 8005b64:	fba2 1203 	umull	r1, r2, r2, r3
 8005b68:	0ad2      	lsrs	r2, r2, #11
 8005b6a:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8005b6e:	fb01 f202 	mul.w	r2, r1, r2
 8005b72:	1a9a      	subs	r2, r3, r2
 8005b74:	4b46      	ldr	r3, [pc, #280]	; (8005c90 <HAL_RTC_GetTime+0x1a4>)
 8005b76:	fba3 1302 	umull	r1, r3, r3, r2
 8005b7a:	0959      	lsrs	r1, r3, #5
 8005b7c:	460b      	mov	r3, r1
 8005b7e:	011b      	lsls	r3, r3, #4
 8005b80:	1a5b      	subs	r3, r3, r1
 8005b82:	009b      	lsls	r3, r3, #2
 8005b84:	1ad1      	subs	r1, r2, r3
 8005b86:	b2ca      	uxtb	r2, r1
 8005b88:	68bb      	ldr	r3, [r7, #8]
 8005b8a:	709a      	strb	r2, [r3, #2]

  if (hours >= 24U)
 8005b8c:	693b      	ldr	r3, [r7, #16]
 8005b8e:	2b17      	cmp	r3, #23
 8005b90:	d955      	bls.n	8005c3e <HAL_RTC_GetTime+0x152>
  {
    /* Get number of days elapsed from last calculation */
    days_elapsed = (hours / 24U);
 8005b92:	693b      	ldr	r3, [r7, #16]
 8005b94:	4a3f      	ldr	r2, [pc, #252]	; (8005c94 <HAL_RTC_GetTime+0x1a8>)
 8005b96:	fba2 2303 	umull	r2, r3, r2, r3
 8005b9a:	091b      	lsrs	r3, r3, #4
 8005b9c:	617b      	str	r3, [r7, #20]

    /* Set Hours in RTC_TimeTypeDef structure*/
    sTime->Hours = (hours % 24U);
 8005b9e:	6939      	ldr	r1, [r7, #16]
 8005ba0:	4b3c      	ldr	r3, [pc, #240]	; (8005c94 <HAL_RTC_GetTime+0x1a8>)
 8005ba2:	fba3 2301 	umull	r2, r3, r3, r1
 8005ba6:	091a      	lsrs	r2, r3, #4
 8005ba8:	4613      	mov	r3, r2
 8005baa:	005b      	lsls	r3, r3, #1
 8005bac:	4413      	add	r3, r2
 8005bae:	00db      	lsls	r3, r3, #3
 8005bb0:	1aca      	subs	r2, r1, r3
 8005bb2:	b2d2      	uxtb	r2, r2
 8005bb4:	68bb      	ldr	r3, [r7, #8]
 8005bb6:	701a      	strb	r2, [r3, #0]

    /* Read Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8005bb8:	68f8      	ldr	r0, [r7, #12]
 8005bba:	f000 f9a9 	bl	8005f10 <RTC_ReadAlarmCounter>
 8005bbe:	61f8      	str	r0, [r7, #28]

    /* Calculate remaining time to reach alarm (only if set and not yet expired)*/
    if ((counter_alarm != RTC_ALARM_RESETVALUE) && (counter_alarm > counter_time))
 8005bc0:	69fb      	ldr	r3, [r7, #28]
 8005bc2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005bc6:	d008      	beq.n	8005bda <HAL_RTC_GetTime+0xee>
 8005bc8:	69fa      	ldr	r2, [r7, #28]
 8005bca:	69bb      	ldr	r3, [r7, #24]
 8005bcc:	429a      	cmp	r2, r3
 8005bce:	d904      	bls.n	8005bda <HAL_RTC_GetTime+0xee>
    {
      counter_alarm -= counter_time;
 8005bd0:	69fa      	ldr	r2, [r7, #28]
 8005bd2:	69bb      	ldr	r3, [r7, #24]
 8005bd4:	1ad3      	subs	r3, r2, r3
 8005bd6:	61fb      	str	r3, [r7, #28]
 8005bd8:	e002      	b.n	8005be0 <HAL_RTC_GetTime+0xf4>
    }
    else
    {
      /* In case of counter_alarm < counter_time */
      /* Alarm expiration already occurred but alarm not deactivated */
      counter_alarm = RTC_ALARM_RESETVALUE;
 8005bda:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005bde:	61fb      	str	r3, [r7, #28]
    }

    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= (days_elapsed * 24U * 3600U);
 8005be0:	697b      	ldr	r3, [r7, #20]
 8005be2:	4a2d      	ldr	r2, [pc, #180]	; (8005c98 <HAL_RTC_GetTime+0x1ac>)
 8005be4:	fb02 f303 	mul.w	r3, r2, r3
 8005be8:	69ba      	ldr	r2, [r7, #24]
 8005bea:	1ad3      	subs	r3, r2, r3
 8005bec:	61bb      	str	r3, [r7, #24]

    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8005bee:	69b9      	ldr	r1, [r7, #24]
 8005bf0:	68f8      	ldr	r0, [r7, #12]
 8005bf2:	f000 f966 	bl	8005ec2 <RTC_WriteTimeCounter>
 8005bf6:	4603      	mov	r3, r0
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d001      	beq.n	8005c00 <HAL_RTC_GetTime+0x114>
    {
      return HAL_ERROR;
 8005bfc:	2301      	movs	r3, #1
 8005bfe:	e041      	b.n	8005c84 <HAL_RTC_GetTime+0x198>
    }

    /* Set updated alarm to be set */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8005c00:	69fb      	ldr	r3, [r7, #28]
 8005c02:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005c06:	d00c      	beq.n	8005c22 <HAL_RTC_GetTime+0x136>
    {
      counter_alarm += counter_time;
 8005c08:	69fa      	ldr	r2, [r7, #28]
 8005c0a:	69bb      	ldr	r3, [r7, #24]
 8005c0c:	4413      	add	r3, r2
 8005c0e:	61fb      	str	r3, [r7, #28]

      /* Write time counter in RTC registers */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8005c10:	69f9      	ldr	r1, [r7, #28]
 8005c12:	68f8      	ldr	r0, [r7, #12]
 8005c14:	f000 f995 	bl	8005f42 <RTC_WriteAlarmCounter>
 8005c18:	4603      	mov	r3, r0
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d00a      	beq.n	8005c34 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 8005c1e:	2301      	movs	r3, #1
 8005c20:	e030      	b.n	8005c84 <HAL_RTC_GetTime+0x198>
      }
    }
    else
    {
      /* Alarm already occurred. Set it to reset values to avoid unexpected expiration */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8005c22:	69f9      	ldr	r1, [r7, #28]
 8005c24:	68f8      	ldr	r0, [r7, #12]
 8005c26:	f000 f98c 	bl	8005f42 <RTC_WriteAlarmCounter>
 8005c2a:	4603      	mov	r3, r0
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d001      	beq.n	8005c34 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 8005c30:	2301      	movs	r3, #1
 8005c32:	e027      	b.n	8005c84 <HAL_RTC_GetTime+0x198>
      }
    }

    /* Update date */
    RTC_DateUpdate(hrtc, days_elapsed);
 8005c34:	6979      	ldr	r1, [r7, #20]
 8005c36:	68f8      	ldr	r0, [r7, #12]
 8005c38:	f000 fa34 	bl	80060a4 <RTC_DateUpdate>
 8005c3c:	e003      	b.n	8005c46 <HAL_RTC_GetTime+0x15a>
  }
  else
  {
    sTime->Hours = hours;
 8005c3e:	693b      	ldr	r3, [r7, #16]
 8005c40:	b2da      	uxtb	r2, r3
 8005c42:	68bb      	ldr	r3, [r7, #8]
 8005c44:	701a      	strb	r2, [r3, #0]
  }

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d01a      	beq.n	8005c82 <HAL_RTC_GetTime+0x196>
  {
    /* Convert the time structure parameters to BCD format */
    sTime->Hours    = (uint8_t)RTC_ByteToBcd2(sTime->Hours);
 8005c4c:	68bb      	ldr	r3, [r7, #8]
 8005c4e:	781b      	ldrb	r3, [r3, #0]
 8005c50:	4618      	mov	r0, r3
 8005c52:	f000 f9ed 	bl	8006030 <RTC_ByteToBcd2>
 8005c56:	4603      	mov	r3, r0
 8005c58:	461a      	mov	r2, r3
 8005c5a:	68bb      	ldr	r3, [r7, #8]
 8005c5c:	701a      	strb	r2, [r3, #0]
    sTime->Minutes  = (uint8_t)RTC_ByteToBcd2(sTime->Minutes);
 8005c5e:	68bb      	ldr	r3, [r7, #8]
 8005c60:	785b      	ldrb	r3, [r3, #1]
 8005c62:	4618      	mov	r0, r3
 8005c64:	f000 f9e4 	bl	8006030 <RTC_ByteToBcd2>
 8005c68:	4603      	mov	r3, r0
 8005c6a:	461a      	mov	r2, r3
 8005c6c:	68bb      	ldr	r3, [r7, #8]
 8005c6e:	705a      	strb	r2, [r3, #1]
    sTime->Seconds  = (uint8_t)RTC_ByteToBcd2(sTime->Seconds);
 8005c70:	68bb      	ldr	r3, [r7, #8]
 8005c72:	789b      	ldrb	r3, [r3, #2]
 8005c74:	4618      	mov	r0, r3
 8005c76:	f000 f9db 	bl	8006030 <RTC_ByteToBcd2>
 8005c7a:	4603      	mov	r3, r0
 8005c7c:	461a      	mov	r2, r3
 8005c7e:	68bb      	ldr	r3, [r7, #8]
 8005c80:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8005c82:	2300      	movs	r3, #0
}
 8005c84:	4618      	mov	r0, r3
 8005c86:	3720      	adds	r7, #32
 8005c88:	46bd      	mov	sp, r7
 8005c8a:	bd80      	pop	{r7, pc}
 8005c8c:	91a2b3c5 	.word	0x91a2b3c5
 8005c90:	88888889 	.word	0x88888889
 8005c94:	aaaaaaab 	.word	0xaaaaaaab
 8005c98:	00015180 	.word	0x00015180

08005c9c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005c9c:	b580      	push	{r7, lr}
 8005c9e:	b088      	sub	sp, #32
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	60f8      	str	r0, [r7, #12]
 8005ca4:	60b9      	str	r1, [r7, #8]
 8005ca6:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 8005ca8:	2300      	movs	r3, #0
 8005caa:	61fb      	str	r3, [r7, #28]
 8005cac:	2300      	movs	r3, #0
 8005cae:	61bb      	str	r3, [r7, #24]
 8005cb0:	2300      	movs	r3, #0
 8005cb2:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d002      	beq.n	8005cc0 <HAL_RTC_SetDate+0x24>
 8005cba:	68bb      	ldr	r3, [r7, #8]
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d101      	bne.n	8005cc4 <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 8005cc0:	2301      	movs	r3, #1
 8005cc2:	e097      	b.n	8005df4 <HAL_RTC_SetDate+0x158>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	7c1b      	ldrb	r3, [r3, #16]
 8005cc8:	2b01      	cmp	r3, #1
 8005cca:	d101      	bne.n	8005cd0 <HAL_RTC_SetDate+0x34>
 8005ccc:	2302      	movs	r3, #2
 8005cce:	e091      	b.n	8005df4 <HAL_RTC_SetDate+0x158>
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	2201      	movs	r2, #1
 8005cd4:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	2202      	movs	r2, #2
 8005cda:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d10c      	bne.n	8005cfc <HAL_RTC_SetDate+0x60>
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 8005ce2:	68bb      	ldr	r3, [r7, #8]
 8005ce4:	78da      	ldrb	r2, [r3, #3]
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 8005cea:	68bb      	ldr	r3, [r7, #8]
 8005cec:	785a      	ldrb	r2, [r3, #1]
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 8005cf2:	68bb      	ldr	r3, [r7, #8]
 8005cf4:	789a      	ldrb	r2, [r3, #2]
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	739a      	strb	r2, [r3, #14]
 8005cfa:	e01a      	b.n	8005d32 <HAL_RTC_SetDate+0x96>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 8005cfc:	68bb      	ldr	r3, [r7, #8]
 8005cfe:	78db      	ldrb	r3, [r3, #3]
 8005d00:	4618      	mov	r0, r3
 8005d02:	f000 f9b2 	bl	800606a <RTC_Bcd2ToByte>
 8005d06:	4603      	mov	r3, r0
 8005d08:	461a      	mov	r2, r3
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 8005d0e:	68bb      	ldr	r3, [r7, #8]
 8005d10:	785b      	ldrb	r3, [r3, #1]
 8005d12:	4618      	mov	r0, r3
 8005d14:	f000 f9a9 	bl	800606a <RTC_Bcd2ToByte>
 8005d18:	4603      	mov	r3, r0
 8005d1a:	461a      	mov	r2, r3
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 8005d20:	68bb      	ldr	r3, [r7, #8]
 8005d22:	789b      	ldrb	r3, [r3, #2]
 8005d24:	4618      	mov	r0, r3
 8005d26:	f000 f9a0 	bl	800606a <RTC_Bcd2ToByte>
 8005d2a:	4603      	mov	r3, r0
 8005d2c:	461a      	mov	r2, r3
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	7bdb      	ldrb	r3, [r3, #15]
 8005d36:	4618      	mov	r0, r3
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	7b59      	ldrb	r1, [r3, #13]
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	7b9b      	ldrb	r3, [r3, #14]
 8005d40:	461a      	mov	r2, r3
 8005d42:	f000 fa8b 	bl	800625c <RTC_WeekDayNum>
 8005d46:	4603      	mov	r3, r0
 8005d48:	461a      	mov	r2, r3
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	7b1a      	ldrb	r2, [r3, #12]
 8005d52:	68bb      	ldr	r3, [r7, #8]
 8005d54:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8005d56:	68f8      	ldr	r0, [r7, #12]
 8005d58:	f000 f883 	bl	8005e62 <RTC_ReadTimeCounter>
 8005d5c:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8005d5e:	69fb      	ldr	r3, [r7, #28]
 8005d60:	4a26      	ldr	r2, [pc, #152]	; (8005dfc <HAL_RTC_SetDate+0x160>)
 8005d62:	fba2 2303 	umull	r2, r3, r2, r3
 8005d66:	0adb      	lsrs	r3, r3, #11
 8005d68:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 8005d6a:	697b      	ldr	r3, [r7, #20]
 8005d6c:	2b18      	cmp	r3, #24
 8005d6e:	d93a      	bls.n	8005de6 <HAL_RTC_SetDate+0x14a>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 8005d70:	697b      	ldr	r3, [r7, #20]
 8005d72:	4a23      	ldr	r2, [pc, #140]	; (8005e00 <HAL_RTC_SetDate+0x164>)
 8005d74:	fba2 2303 	umull	r2, r3, r2, r3
 8005d78:	091b      	lsrs	r3, r3, #4
 8005d7a:	4a22      	ldr	r2, [pc, #136]	; (8005e04 <HAL_RTC_SetDate+0x168>)
 8005d7c:	fb02 f303 	mul.w	r3, r2, r3
 8005d80:	69fa      	ldr	r2, [r7, #28]
 8005d82:	1ad3      	subs	r3, r2, r3
 8005d84:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8005d86:	69f9      	ldr	r1, [r7, #28]
 8005d88:	68f8      	ldr	r0, [r7, #12]
 8005d8a:	f000 f89a 	bl	8005ec2 <RTC_WriteTimeCounter>
 8005d8e:	4603      	mov	r3, r0
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d007      	beq.n	8005da4 <HAL_RTC_SetDate+0x108>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	2204      	movs	r2, #4
 8005d98:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	2200      	movs	r2, #0
 8005d9e:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 8005da0:	2301      	movs	r3, #1
 8005da2:	e027      	b.n	8005df4 <HAL_RTC_SetDate+0x158>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8005da4:	68f8      	ldr	r0, [r7, #12]
 8005da6:	f000 f8b3 	bl	8005f10 <RTC_ReadAlarmCounter>
 8005daa:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8005dac:	69bb      	ldr	r3, [r7, #24]
 8005dae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005db2:	d018      	beq.n	8005de6 <HAL_RTC_SetDate+0x14a>
    {
      if (counter_alarm < counter_time)
 8005db4:	69ba      	ldr	r2, [r7, #24]
 8005db6:	69fb      	ldr	r3, [r7, #28]
 8005db8:	429a      	cmp	r2, r3
 8005dba:	d214      	bcs.n	8005de6 <HAL_RTC_SetDate+0x14a>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8005dbc:	69bb      	ldr	r3, [r7, #24]
 8005dbe:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8005dc2:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8005dc6:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8005dc8:	69b9      	ldr	r1, [r7, #24]
 8005dca:	68f8      	ldr	r0, [r7, #12]
 8005dcc:	f000 f8b9 	bl	8005f42 <RTC_WriteAlarmCounter>
 8005dd0:	4603      	mov	r3, r0
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d007      	beq.n	8005de6 <HAL_RTC_SetDate+0x14a>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	2204      	movs	r2, #4
 8005dda:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	2200      	movs	r2, #0
 8005de0:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8005de2:	2301      	movs	r3, #1
 8005de4:	e006      	b.n	8005df4 <HAL_RTC_SetDate+0x158>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	2201      	movs	r2, #1
 8005dea:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	2200      	movs	r2, #0
 8005df0:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8005df2:	2300      	movs	r3, #0
}
 8005df4:	4618      	mov	r0, r3
 8005df6:	3720      	adds	r7, #32
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	bd80      	pop	{r7, pc}
 8005dfc:	91a2b3c5 	.word	0x91a2b3c5
 8005e00:	aaaaaaab 	.word	0xaaaaaaab
 8005e04:	00015180 	.word	0x00015180

08005e08 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005e08:	b580      	push	{r7, lr}
 8005e0a:	b084      	sub	sp, #16
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005e10:	2300      	movs	r3, #0
 8005e12:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d101      	bne.n	8005e1e <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 8005e1a:	2301      	movs	r3, #1
 8005e1c:	e01d      	b.n	8005e5a <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	685a      	ldr	r2, [r3, #4]
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f022 0208 	bic.w	r2, r2, #8
 8005e2c:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8005e2e:	f7fd ff77 	bl	8003d20 <HAL_GetTick>
 8005e32:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8005e34:	e009      	b.n	8005e4a <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8005e36:	f7fd ff73 	bl	8003d20 <HAL_GetTick>
 8005e3a:	4602      	mov	r2, r0
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	1ad3      	subs	r3, r2, r3
 8005e40:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005e44:	d901      	bls.n	8005e4a <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 8005e46:	2303      	movs	r3, #3
 8005e48:	e007      	b.n	8005e5a <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	685b      	ldr	r3, [r3, #4]
 8005e50:	f003 0308 	and.w	r3, r3, #8
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d0ee      	beq.n	8005e36 <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8005e58:	2300      	movs	r3, #0
}
 8005e5a:	4618      	mov	r0, r3
 8005e5c:	3710      	adds	r7, #16
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	bd80      	pop	{r7, pc}

08005e62 <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 8005e62:	b480      	push	{r7}
 8005e64:	b087      	sub	sp, #28
 8005e66:	af00      	add	r7, sp, #0
 8005e68:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 8005e6a:	2300      	movs	r3, #0
 8005e6c:	827b      	strh	r3, [r7, #18]
 8005e6e:	2300      	movs	r3, #0
 8005e70:	823b      	strh	r3, [r7, #16]
 8005e72:	2300      	movs	r3, #0
 8005e74:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 8005e76:	2300      	movs	r3, #0
 8005e78:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	699b      	ldr	r3, [r3, #24]
 8005e80:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	69db      	ldr	r3, [r3, #28]
 8005e88:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	699b      	ldr	r3, [r3, #24]
 8005e90:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 8005e92:	8a7a      	ldrh	r2, [r7, #18]
 8005e94:	8a3b      	ldrh	r3, [r7, #16]
 8005e96:	429a      	cmp	r2, r3
 8005e98:	d008      	beq.n	8005eac <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 8005e9a:	8a3b      	ldrh	r3, [r7, #16]
 8005e9c:	041a      	lsls	r2, r3, #16
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	69db      	ldr	r3, [r3, #28]
 8005ea4:	b29b      	uxth	r3, r3
 8005ea6:	4313      	orrs	r3, r2
 8005ea8:	617b      	str	r3, [r7, #20]
 8005eaa:	e004      	b.n	8005eb6 <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 8005eac:	8a7b      	ldrh	r3, [r7, #18]
 8005eae:	041a      	lsls	r2, r3, #16
 8005eb0:	89fb      	ldrh	r3, [r7, #14]
 8005eb2:	4313      	orrs	r3, r2
 8005eb4:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 8005eb6:	697b      	ldr	r3, [r7, #20]
}
 8005eb8:	4618      	mov	r0, r3
 8005eba:	371c      	adds	r7, #28
 8005ebc:	46bd      	mov	sp, r7
 8005ebe:	bc80      	pop	{r7}
 8005ec0:	4770      	bx	lr

08005ec2 <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 8005ec2:	b580      	push	{r7, lr}
 8005ec4:	b084      	sub	sp, #16
 8005ec6:	af00      	add	r7, sp, #0
 8005ec8:	6078      	str	r0, [r7, #4]
 8005eca:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005ecc:	2300      	movs	r3, #0
 8005ece:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8005ed0:	6878      	ldr	r0, [r7, #4]
 8005ed2:	f000 f85d 	bl	8005f90 <RTC_EnterInitMode>
 8005ed6:	4603      	mov	r3, r0
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d002      	beq.n	8005ee2 <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 8005edc:	2301      	movs	r3, #1
 8005ede:	73fb      	strb	r3, [r7, #15]
 8005ee0:	e011      	b.n	8005f06 <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	683a      	ldr	r2, [r7, #0]
 8005ee8:	0c12      	lsrs	r2, r2, #16
 8005eea:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	683a      	ldr	r2, [r7, #0]
 8005ef2:	b292      	uxth	r2, r2
 8005ef4:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8005ef6:	6878      	ldr	r0, [r7, #4]
 8005ef8:	f000 f872 	bl	8005fe0 <RTC_ExitInitMode>
 8005efc:	4603      	mov	r3, r0
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d001      	beq.n	8005f06 <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 8005f02:	2301      	movs	r3, #1
 8005f04:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8005f06:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f08:	4618      	mov	r0, r3
 8005f0a:	3710      	adds	r7, #16
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	bd80      	pop	{r7, pc}

08005f10 <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 8005f10:	b480      	push	{r7}
 8005f12:	b085      	sub	sp, #20
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 8005f18:	2300      	movs	r3, #0
 8005f1a:	81fb      	strh	r3, [r7, #14]
 8005f1c:	2300      	movs	r3, #0
 8005f1e:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	6a1b      	ldr	r3, [r3, #32]
 8005f26:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f2e:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 8005f30:	89fb      	ldrh	r3, [r7, #14]
 8005f32:	041a      	lsls	r2, r3, #16
 8005f34:	89bb      	ldrh	r3, [r7, #12]
 8005f36:	4313      	orrs	r3, r2
}
 8005f38:	4618      	mov	r0, r3
 8005f3a:	3714      	adds	r7, #20
 8005f3c:	46bd      	mov	sp, r7
 8005f3e:	bc80      	pop	{r7}
 8005f40:	4770      	bx	lr

08005f42 <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 8005f42:	b580      	push	{r7, lr}
 8005f44:	b084      	sub	sp, #16
 8005f46:	af00      	add	r7, sp, #0
 8005f48:	6078      	str	r0, [r7, #4]
 8005f4a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005f4c:	2300      	movs	r3, #0
 8005f4e:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8005f50:	6878      	ldr	r0, [r7, #4]
 8005f52:	f000 f81d 	bl	8005f90 <RTC_EnterInitMode>
 8005f56:	4603      	mov	r3, r0
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d002      	beq.n	8005f62 <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 8005f5c:	2301      	movs	r3, #1
 8005f5e:	73fb      	strb	r3, [r7, #15]
 8005f60:	e011      	b.n	8005f86 <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	683a      	ldr	r2, [r7, #0]
 8005f68:	0c12      	lsrs	r2, r2, #16
 8005f6a:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	683a      	ldr	r2, [r7, #0]
 8005f72:	b292      	uxth	r2, r2
 8005f74:	625a      	str	r2, [r3, #36]	; 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8005f76:	6878      	ldr	r0, [r7, #4]
 8005f78:	f000 f832 	bl	8005fe0 <RTC_ExitInitMode>
 8005f7c:	4603      	mov	r3, r0
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d001      	beq.n	8005f86 <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 8005f82:	2301      	movs	r3, #1
 8005f84:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8005f86:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f88:	4618      	mov	r0, r3
 8005f8a:	3710      	adds	r7, #16
 8005f8c:	46bd      	mov	sp, r7
 8005f8e:	bd80      	pop	{r7, pc}

08005f90 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005f90:	b580      	push	{r7, lr}
 8005f92:	b084      	sub	sp, #16
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005f98:	2300      	movs	r3, #0
 8005f9a:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 8005f9c:	f7fd fec0 	bl	8003d20 <HAL_GetTick>
 8005fa0:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8005fa2:	e009      	b.n	8005fb8 <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8005fa4:	f7fd febc 	bl	8003d20 <HAL_GetTick>
 8005fa8:	4602      	mov	r2, r0
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	1ad3      	subs	r3, r2, r3
 8005fae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005fb2:	d901      	bls.n	8005fb8 <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 8005fb4:	2303      	movs	r3, #3
 8005fb6:	e00f      	b.n	8005fd8 <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	685b      	ldr	r3, [r3, #4]
 8005fbe:	f003 0320 	and.w	r3, r3, #32
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d0ee      	beq.n	8005fa4 <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	685a      	ldr	r2, [r3, #4]
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	f042 0210 	orr.w	r2, r2, #16
 8005fd4:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 8005fd6:	2300      	movs	r3, #0
}
 8005fd8:	4618      	mov	r0, r3
 8005fda:	3710      	adds	r7, #16
 8005fdc:	46bd      	mov	sp, r7
 8005fde:	bd80      	pop	{r7, pc}

08005fe0 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005fe0:	b580      	push	{r7, lr}
 8005fe2:	b084      	sub	sp, #16
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005fe8:	2300      	movs	r3, #0
 8005fea:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	685a      	ldr	r2, [r3, #4]
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	f022 0210 	bic.w	r2, r2, #16
 8005ffa:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8005ffc:	f7fd fe90 	bl	8003d20 <HAL_GetTick>
 8006000:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8006002:	e009      	b.n	8006018 <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8006004:	f7fd fe8c 	bl	8003d20 <HAL_GetTick>
 8006008:	4602      	mov	r2, r0
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	1ad3      	subs	r3, r2, r3
 800600e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006012:	d901      	bls.n	8006018 <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 8006014:	2303      	movs	r3, #3
 8006016:	e007      	b.n	8006028 <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	685b      	ldr	r3, [r3, #4]
 800601e:	f003 0320 	and.w	r3, r3, #32
 8006022:	2b00      	cmp	r3, #0
 8006024:	d0ee      	beq.n	8006004 <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 8006026:	2300      	movs	r3, #0
}
 8006028:	4618      	mov	r0, r3
 800602a:	3710      	adds	r7, #16
 800602c:	46bd      	mov	sp, r7
 800602e:	bd80      	pop	{r7, pc}

08006030 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8006030:	b480      	push	{r7}
 8006032:	b085      	sub	sp, #20
 8006034:	af00      	add	r7, sp, #0
 8006036:	4603      	mov	r3, r0
 8006038:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800603a:	2300      	movs	r3, #0
 800603c:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 800603e:	e005      	b.n	800604c <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	3301      	adds	r3, #1
 8006044:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8006046:	79fb      	ldrb	r3, [r7, #7]
 8006048:	3b0a      	subs	r3, #10
 800604a:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 800604c:	79fb      	ldrb	r3, [r7, #7]
 800604e:	2b09      	cmp	r3, #9
 8006050:	d8f6      	bhi.n	8006040 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	b2db      	uxtb	r3, r3
 8006056:	011b      	lsls	r3, r3, #4
 8006058:	b2da      	uxtb	r2, r3
 800605a:	79fb      	ldrb	r3, [r7, #7]
 800605c:	4313      	orrs	r3, r2
 800605e:	b2db      	uxtb	r3, r3
}
 8006060:	4618      	mov	r0, r3
 8006062:	3714      	adds	r7, #20
 8006064:	46bd      	mov	sp, r7
 8006066:	bc80      	pop	{r7}
 8006068:	4770      	bx	lr

0800606a <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800606a:	b480      	push	{r7}
 800606c:	b085      	sub	sp, #20
 800606e:	af00      	add	r7, sp, #0
 8006070:	4603      	mov	r3, r0
 8006072:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8006074:	2300      	movs	r3, #0
 8006076:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 8006078:	79fb      	ldrb	r3, [r7, #7]
 800607a:	091b      	lsrs	r3, r3, #4
 800607c:	b2db      	uxtb	r3, r3
 800607e:	461a      	mov	r2, r3
 8006080:	4613      	mov	r3, r2
 8006082:	009b      	lsls	r3, r3, #2
 8006084:	4413      	add	r3, r2
 8006086:	005b      	lsls	r3, r3, #1
 8006088:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 800608a:	79fb      	ldrb	r3, [r7, #7]
 800608c:	f003 030f 	and.w	r3, r3, #15
 8006090:	b2da      	uxtb	r2, r3
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	b2db      	uxtb	r3, r3
 8006096:	4413      	add	r3, r2
 8006098:	b2db      	uxtb	r3, r3
}
 800609a:	4618      	mov	r0, r3
 800609c:	3714      	adds	r7, #20
 800609e:	46bd      	mov	sp, r7
 80060a0:	bc80      	pop	{r7}
 80060a2:	4770      	bx	lr

080060a4 <RTC_DateUpdate>:
  *                the configuration information for RTC.
  * @param  DayElapsed: Number of days elapsed from last date update
  * @retval None
  */
static void RTC_DateUpdate(RTC_HandleTypeDef *hrtc, uint32_t DayElapsed)
{
 80060a4:	b580      	push	{r7, lr}
 80060a6:	b086      	sub	sp, #24
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	6078      	str	r0, [r7, #4]
 80060ac:	6039      	str	r1, [r7, #0]
  uint32_t year = 0U, month = 0U, day = 0U;
 80060ae:	2300      	movs	r3, #0
 80060b0:	617b      	str	r3, [r7, #20]
 80060b2:	2300      	movs	r3, #0
 80060b4:	613b      	str	r3, [r7, #16]
 80060b6:	2300      	movs	r3, #0
 80060b8:	60fb      	str	r3, [r7, #12]
  uint32_t loop = 0U;
 80060ba:	2300      	movs	r3, #0
 80060bc:	60bb      	str	r3, [r7, #8]

  /* Get the current year*/
  year = hrtc->DateToUpdate.Year;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	7bdb      	ldrb	r3, [r3, #15]
 80060c2:	617b      	str	r3, [r7, #20]

  /* Get the current month and day */
  month = hrtc->DateToUpdate.Month;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	7b5b      	ldrb	r3, [r3, #13]
 80060c8:	613b      	str	r3, [r7, #16]
  day = hrtc->DateToUpdate.Date;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	7b9b      	ldrb	r3, [r3, #14]
 80060ce:	60fb      	str	r3, [r7, #12]

  for (loop = 0U; loop < DayElapsed; loop++)
 80060d0:	2300      	movs	r3, #0
 80060d2:	60bb      	str	r3, [r7, #8]
 80060d4:	e06f      	b.n	80061b6 <RTC_DateUpdate+0x112>
  {
    if ((month == 1U) || (month == 3U) || (month == 5U) || (month == 7U) || \
 80060d6:	693b      	ldr	r3, [r7, #16]
 80060d8:	2b01      	cmp	r3, #1
 80060da:	d011      	beq.n	8006100 <RTC_DateUpdate+0x5c>
 80060dc:	693b      	ldr	r3, [r7, #16]
 80060de:	2b03      	cmp	r3, #3
 80060e0:	d00e      	beq.n	8006100 <RTC_DateUpdate+0x5c>
 80060e2:	693b      	ldr	r3, [r7, #16]
 80060e4:	2b05      	cmp	r3, #5
 80060e6:	d00b      	beq.n	8006100 <RTC_DateUpdate+0x5c>
 80060e8:	693b      	ldr	r3, [r7, #16]
 80060ea:	2b07      	cmp	r3, #7
 80060ec:	d008      	beq.n	8006100 <RTC_DateUpdate+0x5c>
 80060ee:	693b      	ldr	r3, [r7, #16]
 80060f0:	2b08      	cmp	r3, #8
 80060f2:	d005      	beq.n	8006100 <RTC_DateUpdate+0x5c>
        (month == 8U) || (month == 10U) || (month == 12U))
 80060f4:	693b      	ldr	r3, [r7, #16]
 80060f6:	2b0a      	cmp	r3, #10
 80060f8:	d002      	beq.n	8006100 <RTC_DateUpdate+0x5c>
 80060fa:	693b      	ldr	r3, [r7, #16]
 80060fc:	2b0c      	cmp	r3, #12
 80060fe:	d117      	bne.n	8006130 <RTC_DateUpdate+0x8c>
    {
      if (day < 31U)
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	2b1e      	cmp	r3, #30
 8006104:	d803      	bhi.n	800610e <RTC_DateUpdate+0x6a>
      {
        day++;
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	3301      	adds	r3, #1
 800610a:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 800610c:	e050      	b.n	80061b0 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 31 */
      else
      {
        if (month != 12U)
 800610e:	693b      	ldr	r3, [r7, #16]
 8006110:	2b0c      	cmp	r3, #12
 8006112:	d005      	beq.n	8006120 <RTC_DateUpdate+0x7c>
        {
          month++;
 8006114:	693b      	ldr	r3, [r7, #16]
 8006116:	3301      	adds	r3, #1
 8006118:	613b      	str	r3, [r7, #16]
          day = 1U;
 800611a:	2301      	movs	r3, #1
 800611c:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 800611e:	e047      	b.n	80061b0 <RTC_DateUpdate+0x10c>
        }
        /* Date structure member: day = 31 & month =12 */
        else
        {
          month = 1U;
 8006120:	2301      	movs	r3, #1
 8006122:	613b      	str	r3, [r7, #16]
          day = 1U;
 8006124:	2301      	movs	r3, #1
 8006126:	60fb      	str	r3, [r7, #12]
          year++;
 8006128:	697b      	ldr	r3, [r7, #20]
 800612a:	3301      	adds	r3, #1
 800612c:	617b      	str	r3, [r7, #20]
      if (day < 31U)
 800612e:	e03f      	b.n	80061b0 <RTC_DateUpdate+0x10c>
        }
      }
    }
    else if ((month == 4U) || (month == 6U) || (month == 9U) || (month == 11U))
 8006130:	693b      	ldr	r3, [r7, #16]
 8006132:	2b04      	cmp	r3, #4
 8006134:	d008      	beq.n	8006148 <RTC_DateUpdate+0xa4>
 8006136:	693b      	ldr	r3, [r7, #16]
 8006138:	2b06      	cmp	r3, #6
 800613a:	d005      	beq.n	8006148 <RTC_DateUpdate+0xa4>
 800613c:	693b      	ldr	r3, [r7, #16]
 800613e:	2b09      	cmp	r3, #9
 8006140:	d002      	beq.n	8006148 <RTC_DateUpdate+0xa4>
 8006142:	693b      	ldr	r3, [r7, #16]
 8006144:	2b0b      	cmp	r3, #11
 8006146:	d10c      	bne.n	8006162 <RTC_DateUpdate+0xbe>
    {
      if (day < 30U)
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	2b1d      	cmp	r3, #29
 800614c:	d803      	bhi.n	8006156 <RTC_DateUpdate+0xb2>
      {
        day++;
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	3301      	adds	r3, #1
 8006152:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8006154:	e02c      	b.n	80061b0 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 30 */
      else
      {
        month++;
 8006156:	693b      	ldr	r3, [r7, #16]
 8006158:	3301      	adds	r3, #1
 800615a:	613b      	str	r3, [r7, #16]
        day = 1U;
 800615c:	2301      	movs	r3, #1
 800615e:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8006160:	e026      	b.n	80061b0 <RTC_DateUpdate+0x10c>
      }
    }
    else if (month == 2U)
 8006162:	693b      	ldr	r3, [r7, #16]
 8006164:	2b02      	cmp	r3, #2
 8006166:	d123      	bne.n	80061b0 <RTC_DateUpdate+0x10c>
    {
      if (day < 28U)
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	2b1b      	cmp	r3, #27
 800616c:	d803      	bhi.n	8006176 <RTC_DateUpdate+0xd2>
      {
        day++;
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	3301      	adds	r3, #1
 8006172:	60fb      	str	r3, [r7, #12]
 8006174:	e01c      	b.n	80061b0 <RTC_DateUpdate+0x10c>
      }
      else if (day == 28U)
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	2b1c      	cmp	r3, #28
 800617a:	d111      	bne.n	80061a0 <RTC_DateUpdate+0xfc>
      {
        /* Leap year */
        if (RTC_IsLeapYear(year))
 800617c:	697b      	ldr	r3, [r7, #20]
 800617e:	b29b      	uxth	r3, r3
 8006180:	4618      	mov	r0, r3
 8006182:	f000 f839 	bl	80061f8 <RTC_IsLeapYear>
 8006186:	4603      	mov	r3, r0
 8006188:	2b00      	cmp	r3, #0
 800618a:	d003      	beq.n	8006194 <RTC_DateUpdate+0xf0>
        {
          day++;
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	3301      	adds	r3, #1
 8006190:	60fb      	str	r3, [r7, #12]
 8006192:	e00d      	b.n	80061b0 <RTC_DateUpdate+0x10c>
        }
        else
        {
          month++;
 8006194:	693b      	ldr	r3, [r7, #16]
 8006196:	3301      	adds	r3, #1
 8006198:	613b      	str	r3, [r7, #16]
          day = 1U;
 800619a:	2301      	movs	r3, #1
 800619c:	60fb      	str	r3, [r7, #12]
 800619e:	e007      	b.n	80061b0 <RTC_DateUpdate+0x10c>
        }
      }
      else if (day == 29U)
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	2b1d      	cmp	r3, #29
 80061a4:	d104      	bne.n	80061b0 <RTC_DateUpdate+0x10c>
      {
        month++;
 80061a6:	693b      	ldr	r3, [r7, #16]
 80061a8:	3301      	adds	r3, #1
 80061aa:	613b      	str	r3, [r7, #16]
        day = 1U;
 80061ac:	2301      	movs	r3, #1
 80061ae:	60fb      	str	r3, [r7, #12]
  for (loop = 0U; loop < DayElapsed; loop++)
 80061b0:	68bb      	ldr	r3, [r7, #8]
 80061b2:	3301      	adds	r3, #1
 80061b4:	60bb      	str	r3, [r7, #8]
 80061b6:	68ba      	ldr	r2, [r7, #8]
 80061b8:	683b      	ldr	r3, [r7, #0]
 80061ba:	429a      	cmp	r2, r3
 80061bc:	d38b      	bcc.n	80060d6 <RTC_DateUpdate+0x32>
      }
    }
  }

  /* Update year */
  hrtc->DateToUpdate.Year = year;
 80061be:	697b      	ldr	r3, [r7, #20]
 80061c0:	b2da      	uxtb	r2, r3
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	73da      	strb	r2, [r3, #15]

  /* Update day and month */
  hrtc->DateToUpdate.Month = month;
 80061c6:	693b      	ldr	r3, [r7, #16]
 80061c8:	b2da      	uxtb	r2, r3
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	735a      	strb	r2, [r3, #13]
  hrtc->DateToUpdate.Date = day;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	b2da      	uxtb	r2, r3
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	739a      	strb	r2, [r3, #14]

  /* Update day of the week */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(year, month, day);
 80061d6:	693b      	ldr	r3, [r7, #16]
 80061d8:	b2db      	uxtb	r3, r3
 80061da:	68fa      	ldr	r2, [r7, #12]
 80061dc:	b2d2      	uxtb	r2, r2
 80061de:	4619      	mov	r1, r3
 80061e0:	6978      	ldr	r0, [r7, #20]
 80061e2:	f000 f83b 	bl	800625c <RTC_WeekDayNum>
 80061e6:	4603      	mov	r3, r0
 80061e8:	461a      	mov	r2, r3
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	731a      	strb	r2, [r3, #12]
}
 80061ee:	bf00      	nop
 80061f0:	3718      	adds	r7, #24
 80061f2:	46bd      	mov	sp, r7
 80061f4:	bd80      	pop	{r7, pc}
	...

080061f8 <RTC_IsLeapYear>:
  * @param  nYear  year to check
  * @retval 1: leap year
  *         0: not leap year
  */
static uint8_t RTC_IsLeapYear(uint16_t nYear)
{
 80061f8:	b480      	push	{r7}
 80061fa:	b083      	sub	sp, #12
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	4603      	mov	r3, r0
 8006200:	80fb      	strh	r3, [r7, #6]
  if ((nYear % 4U) != 0U)
 8006202:	88fb      	ldrh	r3, [r7, #6]
 8006204:	f003 0303 	and.w	r3, r3, #3
 8006208:	b29b      	uxth	r3, r3
 800620a:	2b00      	cmp	r3, #0
 800620c:	d001      	beq.n	8006212 <RTC_IsLeapYear+0x1a>
  {
    return 0U;
 800620e:	2300      	movs	r3, #0
 8006210:	e01d      	b.n	800624e <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 100U) != 0U)
 8006212:	88fb      	ldrh	r3, [r7, #6]
 8006214:	4a10      	ldr	r2, [pc, #64]	; (8006258 <RTC_IsLeapYear+0x60>)
 8006216:	fba2 1203 	umull	r1, r2, r2, r3
 800621a:	0952      	lsrs	r2, r2, #5
 800621c:	2164      	movs	r1, #100	; 0x64
 800621e:	fb01 f202 	mul.w	r2, r1, r2
 8006222:	1a9b      	subs	r3, r3, r2
 8006224:	b29b      	uxth	r3, r3
 8006226:	2b00      	cmp	r3, #0
 8006228:	d001      	beq.n	800622e <RTC_IsLeapYear+0x36>
  {
    return 1U;
 800622a:	2301      	movs	r3, #1
 800622c:	e00f      	b.n	800624e <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 400U) == 0U)
 800622e:	88fb      	ldrh	r3, [r7, #6]
 8006230:	4a09      	ldr	r2, [pc, #36]	; (8006258 <RTC_IsLeapYear+0x60>)
 8006232:	fba2 1203 	umull	r1, r2, r2, r3
 8006236:	09d2      	lsrs	r2, r2, #7
 8006238:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800623c:	fb01 f202 	mul.w	r2, r1, r2
 8006240:	1a9b      	subs	r3, r3, r2
 8006242:	b29b      	uxth	r3, r3
 8006244:	2b00      	cmp	r3, #0
 8006246:	d101      	bne.n	800624c <RTC_IsLeapYear+0x54>
  {
    return 1U;
 8006248:	2301      	movs	r3, #1
 800624a:	e000      	b.n	800624e <RTC_IsLeapYear+0x56>
  }
  else
  {
    return 0U;
 800624c:	2300      	movs	r3, #0
  }
}
 800624e:	4618      	mov	r0, r3
 8006250:	370c      	adds	r7, #12
 8006252:	46bd      	mov	sp, r7
 8006254:	bc80      	pop	{r7}
 8006256:	4770      	bx	lr
 8006258:	51eb851f 	.word	0x51eb851f

0800625c <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 800625c:	b480      	push	{r7}
 800625e:	b085      	sub	sp, #20
 8006260:	af00      	add	r7, sp, #0
 8006262:	6078      	str	r0, [r7, #4]
 8006264:	460b      	mov	r3, r1
 8006266:	70fb      	strb	r3, [r7, #3]
 8006268:	4613      	mov	r3, r2
 800626a:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 800626c:	2300      	movs	r3, #0
 800626e:	60bb      	str	r3, [r7, #8]
 8006270:	2300      	movs	r3, #0
 8006272:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 800627a:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 800627c:	78fb      	ldrb	r3, [r7, #3]
 800627e:	2b02      	cmp	r3, #2
 8006280:	d82d      	bhi.n	80062de <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 8006282:	78fa      	ldrb	r2, [r7, #3]
 8006284:	4613      	mov	r3, r2
 8006286:	005b      	lsls	r3, r3, #1
 8006288:	4413      	add	r3, r2
 800628a:	00db      	lsls	r3, r3, #3
 800628c:	1a9b      	subs	r3, r3, r2
 800628e:	4a2c      	ldr	r2, [pc, #176]	; (8006340 <RTC_WeekDayNum+0xe4>)
 8006290:	fba2 2303 	umull	r2, r3, r2, r3
 8006294:	085a      	lsrs	r2, r3, #1
 8006296:	78bb      	ldrb	r3, [r7, #2]
 8006298:	441a      	add	r2, r3
 800629a:	68bb      	ldr	r3, [r7, #8]
 800629c:	441a      	add	r2, r3
 800629e:	68bb      	ldr	r3, [r7, #8]
 80062a0:	3b01      	subs	r3, #1
 80062a2:	089b      	lsrs	r3, r3, #2
 80062a4:	441a      	add	r2, r3
 80062a6:	68bb      	ldr	r3, [r7, #8]
 80062a8:	3b01      	subs	r3, #1
 80062aa:	4926      	ldr	r1, [pc, #152]	; (8006344 <RTC_WeekDayNum+0xe8>)
 80062ac:	fba1 1303 	umull	r1, r3, r1, r3
 80062b0:	095b      	lsrs	r3, r3, #5
 80062b2:	1ad2      	subs	r2, r2, r3
 80062b4:	68bb      	ldr	r3, [r7, #8]
 80062b6:	3b01      	subs	r3, #1
 80062b8:	4922      	ldr	r1, [pc, #136]	; (8006344 <RTC_WeekDayNum+0xe8>)
 80062ba:	fba1 1303 	umull	r1, r3, r1, r3
 80062be:	09db      	lsrs	r3, r3, #7
 80062c0:	4413      	add	r3, r2
 80062c2:	1d1a      	adds	r2, r3, #4
 80062c4:	4b20      	ldr	r3, [pc, #128]	; (8006348 <RTC_WeekDayNum+0xec>)
 80062c6:	fba3 1302 	umull	r1, r3, r3, r2
 80062ca:	1ad1      	subs	r1, r2, r3
 80062cc:	0849      	lsrs	r1, r1, #1
 80062ce:	440b      	add	r3, r1
 80062d0:	0899      	lsrs	r1, r3, #2
 80062d2:	460b      	mov	r3, r1
 80062d4:	00db      	lsls	r3, r3, #3
 80062d6:	1a5b      	subs	r3, r3, r1
 80062d8:	1ad3      	subs	r3, r2, r3
 80062da:	60fb      	str	r3, [r7, #12]
 80062dc:	e029      	b.n	8006332 <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 80062de:	78fa      	ldrb	r2, [r7, #3]
 80062e0:	4613      	mov	r3, r2
 80062e2:	005b      	lsls	r3, r3, #1
 80062e4:	4413      	add	r3, r2
 80062e6:	00db      	lsls	r3, r3, #3
 80062e8:	1a9b      	subs	r3, r3, r2
 80062ea:	4a15      	ldr	r2, [pc, #84]	; (8006340 <RTC_WeekDayNum+0xe4>)
 80062ec:	fba2 2303 	umull	r2, r3, r2, r3
 80062f0:	085a      	lsrs	r2, r3, #1
 80062f2:	78bb      	ldrb	r3, [r7, #2]
 80062f4:	441a      	add	r2, r3
 80062f6:	68bb      	ldr	r3, [r7, #8]
 80062f8:	441a      	add	r2, r3
 80062fa:	68bb      	ldr	r3, [r7, #8]
 80062fc:	089b      	lsrs	r3, r3, #2
 80062fe:	441a      	add	r2, r3
 8006300:	68bb      	ldr	r3, [r7, #8]
 8006302:	4910      	ldr	r1, [pc, #64]	; (8006344 <RTC_WeekDayNum+0xe8>)
 8006304:	fba1 1303 	umull	r1, r3, r1, r3
 8006308:	095b      	lsrs	r3, r3, #5
 800630a:	1ad2      	subs	r2, r2, r3
 800630c:	68bb      	ldr	r3, [r7, #8]
 800630e:	490d      	ldr	r1, [pc, #52]	; (8006344 <RTC_WeekDayNum+0xe8>)
 8006310:	fba1 1303 	umull	r1, r3, r1, r3
 8006314:	09db      	lsrs	r3, r3, #7
 8006316:	4413      	add	r3, r2
 8006318:	1c9a      	adds	r2, r3, #2
 800631a:	4b0b      	ldr	r3, [pc, #44]	; (8006348 <RTC_WeekDayNum+0xec>)
 800631c:	fba3 1302 	umull	r1, r3, r3, r2
 8006320:	1ad1      	subs	r1, r2, r3
 8006322:	0849      	lsrs	r1, r1, #1
 8006324:	440b      	add	r3, r1
 8006326:	0899      	lsrs	r1, r3, #2
 8006328:	460b      	mov	r3, r1
 800632a:	00db      	lsls	r3, r3, #3
 800632c:	1a5b      	subs	r3, r3, r1
 800632e:	1ad3      	subs	r3, r2, r3
 8006330:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	b2db      	uxtb	r3, r3
}
 8006336:	4618      	mov	r0, r3
 8006338:	3714      	adds	r7, #20
 800633a:	46bd      	mov	sp, r7
 800633c:	bc80      	pop	{r7}
 800633e:	4770      	bx	lr
 8006340:	38e38e39 	.word	0x38e38e39
 8006344:	51eb851f 	.word	0x51eb851f
 8006348:	24924925 	.word	0x24924925

0800634c <HAL_RTCEx_BKUPWrite>:
  *                                 specify the register (depending devices).
  * @param  Data: Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 800634c:	b480      	push	{r7}
 800634e:	b087      	sub	sp, #28
 8006350:	af00      	add	r7, sp, #0
 8006352:	60f8      	str	r0, [r7, #12]
 8006354:	60b9      	str	r1, [r7, #8]
 8006356:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 8006358:	2300      	movs	r3, #0
 800635a:	617b      	str	r3, [r7, #20]
  UNUSED(hrtc);

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)BKP_BASE;
 800635c:	4b07      	ldr	r3, [pc, #28]	; (800637c <HAL_RTCEx_BKUPWrite+0x30>)
 800635e:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8006360:	68bb      	ldr	r3, [r7, #8]
 8006362:	009b      	lsls	r3, r3, #2
 8006364:	697a      	ldr	r2, [r7, #20]
 8006366:	4413      	add	r3, r2
 8006368:	617b      	str	r3, [r7, #20]

  *(__IO uint32_t *) tmp = (Data & BKP_DR1_D);
 800636a:	697b      	ldr	r3, [r7, #20]
 800636c:	687a      	ldr	r2, [r7, #4]
 800636e:	b292      	uxth	r2, r2
 8006370:	601a      	str	r2, [r3, #0]
}
 8006372:	bf00      	nop
 8006374:	371c      	adds	r7, #28
 8006376:	46bd      	mov	sp, r7
 8006378:	bc80      	pop	{r7}
 800637a:	4770      	bx	lr
 800637c:	40006c00 	.word	0x40006c00

08006380 <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx where x can be from 1 to 10 (or 42) to
  *                                 specify the register (depending devices).
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 8006380:	b480      	push	{r7}
 8006382:	b085      	sub	sp, #20
 8006384:	af00      	add	r7, sp, #0
 8006386:	6078      	str	r0, [r7, #4]
 8006388:	6039      	str	r1, [r7, #0]
  uint32_t backupregister = 0U;
 800638a:	2300      	movs	r3, #0
 800638c:	60fb      	str	r3, [r7, #12]
  uint32_t pvalue = 0U;
 800638e:	2300      	movs	r3, #0
 8006390:	60bb      	str	r3, [r7, #8]
  UNUSED(hrtc);

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  backupregister = (uint32_t)BKP_BASE;
 8006392:	4b08      	ldr	r3, [pc, #32]	; (80063b4 <HAL_RTCEx_BKUPRead+0x34>)
 8006394:	60fb      	str	r3, [r7, #12]
  backupregister += (BackupRegister * 4U);
 8006396:	683b      	ldr	r3, [r7, #0]
 8006398:	009b      	lsls	r3, r3, #2
 800639a:	68fa      	ldr	r2, [r7, #12]
 800639c:	4413      	add	r3, r2
 800639e:	60fb      	str	r3, [r7, #12]

  pvalue = (*(__IO uint32_t *)(backupregister)) & BKP_DR1_D;
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	b29b      	uxth	r3, r3
 80063a6:	60bb      	str	r3, [r7, #8]

  /* Read the specified register */
  return pvalue;
 80063a8:	68bb      	ldr	r3, [r7, #8]
}
 80063aa:	4618      	mov	r0, r3
 80063ac:	3714      	adds	r7, #20
 80063ae:	46bd      	mov	sp, r7
 80063b0:	bc80      	pop	{r7}
 80063b2:	4770      	bx	lr
 80063b4:	40006c00 	.word	0x40006c00

080063b8 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FSMC_NORSRAM_TimingTypeDef *Timing,
                                FSMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 80063b8:	b580      	push	{r7, lr}
 80063ba:	b084      	sub	sp, #16
 80063bc:	af00      	add	r7, sp, #0
 80063be:	60f8      	str	r0, [r7, #12]
 80063c0:	60b9      	str	r1, [r7, #8]
 80063c2:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if ((hsram == NULL) || (hsram->Init.BurstAccessMode == FSMC_BURST_ACCESS_MODE_ENABLE))
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d004      	beq.n	80063d4 <HAL_SRAM_Init+0x1c>
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	699b      	ldr	r3, [r3, #24]
 80063ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80063d2:	d101      	bne.n	80063d8 <HAL_SRAM_Init+0x20>
  {
    return HAL_ERROR;
 80063d4:	2301      	movs	r3, #1
 80063d6:	e038      	b.n	800644a <HAL_SRAM_Init+0x92>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80063de:	b2db      	uxtb	r3, r3
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d106      	bne.n	80063f2 <HAL_SRAM_Init+0x3a>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	2200      	movs	r2, #0
 80063e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 80063ec:	68f8      	ldr	r0, [r7, #12]
 80063ee:	f7fd f8d3 	bl	8003598 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FSMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	681a      	ldr	r2, [r3, #0]
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	3308      	adds	r3, #8
 80063fa:	4619      	mov	r1, r3
 80063fc:	4610      	mov	r0, r2
 80063fe:	f000 f9b5 	bl	800676c <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FSMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	6818      	ldr	r0, [r3, #0]
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	689b      	ldr	r3, [r3, #8]
 800640a:	461a      	mov	r2, r3
 800640c:	68b9      	ldr	r1, [r7, #8]
 800640e:	f000 fa17 	bl	8006840 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FSMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	6858      	ldr	r0, [r3, #4]
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	689a      	ldr	r2, [r3, #8]
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800641e:	6879      	ldr	r1, [r7, #4]
 8006420:	f000 fa42 	bl	80068a8 <FSMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FSMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	68fa      	ldr	r2, [r7, #12]
 800642a:	6892      	ldr	r2, [r2, #8]
 800642c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	68fa      	ldr	r2, [r7, #12]
 8006436:	6892      	ldr	r2, [r2, #8]
 8006438:	f041 0101 	orr.w	r1, r1, #1
 800643c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	2201      	movs	r2, #1
 8006444:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8006448:	2300      	movs	r3, #0
}
 800644a:	4618      	mov	r0, r3
 800644c:	3710      	adds	r7, #16
 800644e:	46bd      	mov	sp, r7
 8006450:	bd80      	pop	{r7, pc}

08006452 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006452:	b580      	push	{r7, lr}
 8006454:	b082      	sub	sp, #8
 8006456:	af00      	add	r7, sp, #0
 8006458:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	2b00      	cmp	r3, #0
 800645e:	d101      	bne.n	8006464 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006460:	2301      	movs	r3, #1
 8006462:	e041      	b.n	80064e8 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800646a:	b2db      	uxtb	r3, r3
 800646c:	2b00      	cmp	r3, #0
 800646e:	d106      	bne.n	800647e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	2200      	movs	r2, #0
 8006474:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006478:	6878      	ldr	r0, [r7, #4]
 800647a:	f7fd f82b 	bl	80034d4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	2202      	movs	r2, #2
 8006482:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681a      	ldr	r2, [r3, #0]
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	3304      	adds	r3, #4
 800648e:	4619      	mov	r1, r3
 8006490:	4610      	mov	r0, r2
 8006492:	f000 f885 	bl	80065a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	2201      	movs	r2, #1
 800649a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	2201      	movs	r2, #1
 80064a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	2201      	movs	r2, #1
 80064aa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	2201      	movs	r2, #1
 80064b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	2201      	movs	r2, #1
 80064ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	2201      	movs	r2, #1
 80064c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	2201      	movs	r2, #1
 80064ca:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	2201      	movs	r2, #1
 80064d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	2201      	movs	r2, #1
 80064da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	2201      	movs	r2, #1
 80064e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80064e6:	2300      	movs	r3, #0
}
 80064e8:	4618      	mov	r0, r3
 80064ea:	3708      	adds	r7, #8
 80064ec:	46bd      	mov	sp, r7
 80064ee:	bd80      	pop	{r7, pc}

080064f0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80064f0:	b480      	push	{r7}
 80064f2:	b085      	sub	sp, #20
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80064fe:	b2db      	uxtb	r3, r3
 8006500:	2b01      	cmp	r3, #1
 8006502:	d001      	beq.n	8006508 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006504:	2301      	movs	r3, #1
 8006506:	e03c      	b.n	8006582 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	2202      	movs	r2, #2
 800650c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	4a1d      	ldr	r2, [pc, #116]	; (800658c <HAL_TIM_Base_Start+0x9c>)
 8006516:	4293      	cmp	r3, r2
 8006518:	d018      	beq.n	800654c <HAL_TIM_Base_Start+0x5c>
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	4a1c      	ldr	r2, [pc, #112]	; (8006590 <HAL_TIM_Base_Start+0xa0>)
 8006520:	4293      	cmp	r3, r2
 8006522:	d013      	beq.n	800654c <HAL_TIM_Base_Start+0x5c>
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800652c:	d00e      	beq.n	800654c <HAL_TIM_Base_Start+0x5c>
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	4a18      	ldr	r2, [pc, #96]	; (8006594 <HAL_TIM_Base_Start+0xa4>)
 8006534:	4293      	cmp	r3, r2
 8006536:	d009      	beq.n	800654c <HAL_TIM_Base_Start+0x5c>
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	4a16      	ldr	r2, [pc, #88]	; (8006598 <HAL_TIM_Base_Start+0xa8>)
 800653e:	4293      	cmp	r3, r2
 8006540:	d004      	beq.n	800654c <HAL_TIM_Base_Start+0x5c>
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	4a15      	ldr	r2, [pc, #84]	; (800659c <HAL_TIM_Base_Start+0xac>)
 8006548:	4293      	cmp	r3, r2
 800654a:	d111      	bne.n	8006570 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	689b      	ldr	r3, [r3, #8]
 8006552:	f003 0307 	and.w	r3, r3, #7
 8006556:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	2b06      	cmp	r3, #6
 800655c:	d010      	beq.n	8006580 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	681a      	ldr	r2, [r3, #0]
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	f042 0201 	orr.w	r2, r2, #1
 800656c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800656e:	e007      	b.n	8006580 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	681a      	ldr	r2, [r3, #0]
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	f042 0201 	orr.w	r2, r2, #1
 800657e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006580:	2300      	movs	r3, #0
}
 8006582:	4618      	mov	r0, r3
 8006584:	3714      	adds	r7, #20
 8006586:	46bd      	mov	sp, r7
 8006588:	bc80      	pop	{r7}
 800658a:	4770      	bx	lr
 800658c:	40012c00 	.word	0x40012c00
 8006590:	40013400 	.word	0x40013400
 8006594:	40000400 	.word	0x40000400
 8006598:	40000800 	.word	0x40000800
 800659c:	40000c00 	.word	0x40000c00

080065a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80065a0:	b480      	push	{r7}
 80065a2:	b085      	sub	sp, #20
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	6078      	str	r0, [r7, #4]
 80065a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	4a33      	ldr	r2, [pc, #204]	; (8006680 <TIM_Base_SetConfig+0xe0>)
 80065b4:	4293      	cmp	r3, r2
 80065b6:	d013      	beq.n	80065e0 <TIM_Base_SetConfig+0x40>
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	4a32      	ldr	r2, [pc, #200]	; (8006684 <TIM_Base_SetConfig+0xe4>)
 80065bc:	4293      	cmp	r3, r2
 80065be:	d00f      	beq.n	80065e0 <TIM_Base_SetConfig+0x40>
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065c6:	d00b      	beq.n	80065e0 <TIM_Base_SetConfig+0x40>
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	4a2f      	ldr	r2, [pc, #188]	; (8006688 <TIM_Base_SetConfig+0xe8>)
 80065cc:	4293      	cmp	r3, r2
 80065ce:	d007      	beq.n	80065e0 <TIM_Base_SetConfig+0x40>
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	4a2e      	ldr	r2, [pc, #184]	; (800668c <TIM_Base_SetConfig+0xec>)
 80065d4:	4293      	cmp	r3, r2
 80065d6:	d003      	beq.n	80065e0 <TIM_Base_SetConfig+0x40>
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	4a2d      	ldr	r2, [pc, #180]	; (8006690 <TIM_Base_SetConfig+0xf0>)
 80065dc:	4293      	cmp	r3, r2
 80065de:	d108      	bne.n	80065f2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80065e8:	683b      	ldr	r3, [r7, #0]
 80065ea:	685b      	ldr	r3, [r3, #4]
 80065ec:	68fa      	ldr	r2, [r7, #12]
 80065ee:	4313      	orrs	r3, r2
 80065f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	4a22      	ldr	r2, [pc, #136]	; (8006680 <TIM_Base_SetConfig+0xe0>)
 80065f6:	4293      	cmp	r3, r2
 80065f8:	d013      	beq.n	8006622 <TIM_Base_SetConfig+0x82>
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	4a21      	ldr	r2, [pc, #132]	; (8006684 <TIM_Base_SetConfig+0xe4>)
 80065fe:	4293      	cmp	r3, r2
 8006600:	d00f      	beq.n	8006622 <TIM_Base_SetConfig+0x82>
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006608:	d00b      	beq.n	8006622 <TIM_Base_SetConfig+0x82>
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	4a1e      	ldr	r2, [pc, #120]	; (8006688 <TIM_Base_SetConfig+0xe8>)
 800660e:	4293      	cmp	r3, r2
 8006610:	d007      	beq.n	8006622 <TIM_Base_SetConfig+0x82>
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	4a1d      	ldr	r2, [pc, #116]	; (800668c <TIM_Base_SetConfig+0xec>)
 8006616:	4293      	cmp	r3, r2
 8006618:	d003      	beq.n	8006622 <TIM_Base_SetConfig+0x82>
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	4a1c      	ldr	r2, [pc, #112]	; (8006690 <TIM_Base_SetConfig+0xf0>)
 800661e:	4293      	cmp	r3, r2
 8006620:	d108      	bne.n	8006634 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006628:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800662a:	683b      	ldr	r3, [r7, #0]
 800662c:	68db      	ldr	r3, [r3, #12]
 800662e:	68fa      	ldr	r2, [r7, #12]
 8006630:	4313      	orrs	r3, r2
 8006632:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800663a:	683b      	ldr	r3, [r7, #0]
 800663c:	695b      	ldr	r3, [r3, #20]
 800663e:	4313      	orrs	r3, r2
 8006640:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	68fa      	ldr	r2, [r7, #12]
 8006646:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006648:	683b      	ldr	r3, [r7, #0]
 800664a:	689a      	ldr	r2, [r3, #8]
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006650:	683b      	ldr	r3, [r7, #0]
 8006652:	681a      	ldr	r2, [r3, #0]
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	4a09      	ldr	r2, [pc, #36]	; (8006680 <TIM_Base_SetConfig+0xe0>)
 800665c:	4293      	cmp	r3, r2
 800665e:	d003      	beq.n	8006668 <TIM_Base_SetConfig+0xc8>
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	4a08      	ldr	r2, [pc, #32]	; (8006684 <TIM_Base_SetConfig+0xe4>)
 8006664:	4293      	cmp	r3, r2
 8006666:	d103      	bne.n	8006670 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006668:	683b      	ldr	r3, [r7, #0]
 800666a:	691a      	ldr	r2, [r3, #16]
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	2201      	movs	r2, #1
 8006674:	615a      	str	r2, [r3, #20]
}
 8006676:	bf00      	nop
 8006678:	3714      	adds	r7, #20
 800667a:	46bd      	mov	sp, r7
 800667c:	bc80      	pop	{r7}
 800667e:	4770      	bx	lr
 8006680:	40012c00 	.word	0x40012c00
 8006684:	40013400 	.word	0x40013400
 8006688:	40000400 	.word	0x40000400
 800668c:	40000800 	.word	0x40000800
 8006690:	40000c00 	.word	0x40000c00

08006694 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006694:	b480      	push	{r7}
 8006696:	b085      	sub	sp, #20
 8006698:	af00      	add	r7, sp, #0
 800669a:	6078      	str	r0, [r7, #4]
 800669c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80066a4:	2b01      	cmp	r3, #1
 80066a6:	d101      	bne.n	80066ac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80066a8:	2302      	movs	r3, #2
 80066aa:	e050      	b.n	800674e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	2201      	movs	r2, #1
 80066b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	2202      	movs	r2, #2
 80066b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	685b      	ldr	r3, [r3, #4]
 80066c2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	689b      	ldr	r3, [r3, #8]
 80066ca:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066d2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80066d4:	683b      	ldr	r3, [r7, #0]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	68fa      	ldr	r2, [r7, #12]
 80066da:	4313      	orrs	r3, r2
 80066dc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	68fa      	ldr	r2, [r7, #12]
 80066e4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	4a1b      	ldr	r2, [pc, #108]	; (8006758 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80066ec:	4293      	cmp	r3, r2
 80066ee:	d018      	beq.n	8006722 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	4a19      	ldr	r2, [pc, #100]	; (800675c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80066f6:	4293      	cmp	r3, r2
 80066f8:	d013      	beq.n	8006722 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006702:	d00e      	beq.n	8006722 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	4a15      	ldr	r2, [pc, #84]	; (8006760 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800670a:	4293      	cmp	r3, r2
 800670c:	d009      	beq.n	8006722 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	4a14      	ldr	r2, [pc, #80]	; (8006764 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006714:	4293      	cmp	r3, r2
 8006716:	d004      	beq.n	8006722 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	4a12      	ldr	r2, [pc, #72]	; (8006768 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800671e:	4293      	cmp	r3, r2
 8006720:	d10c      	bne.n	800673c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006722:	68bb      	ldr	r3, [r7, #8]
 8006724:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006728:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800672a:	683b      	ldr	r3, [r7, #0]
 800672c:	685b      	ldr	r3, [r3, #4]
 800672e:	68ba      	ldr	r2, [r7, #8]
 8006730:	4313      	orrs	r3, r2
 8006732:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	68ba      	ldr	r2, [r7, #8]
 800673a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	2201      	movs	r2, #1
 8006740:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	2200      	movs	r2, #0
 8006748:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800674c:	2300      	movs	r3, #0
}
 800674e:	4618      	mov	r0, r3
 8006750:	3714      	adds	r7, #20
 8006752:	46bd      	mov	sp, r7
 8006754:	bc80      	pop	{r7}
 8006756:	4770      	bx	lr
 8006758:	40012c00 	.word	0x40012c00
 800675c:	40013400 	.word	0x40013400
 8006760:	40000400 	.word	0x40000400
 8006764:	40000800 	.word	0x40000800
 8006768:	40000c00 	.word	0x40000c00

0800676c <FSMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device,
                                    FSMC_NORSRAM_InitTypeDef *Init)
{
 800676c:	b480      	push	{r7}
 800676e:	b087      	sub	sp, #28
 8006770:	af00      	add	r7, sp, #0
 8006772:	6078      	str	r0, [r7, #4]
 8006774:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_ASYNWAIT(Init->AsynchronousWait));
  assert_param(IS_FSMC_WRITE_BURST(Init->WriteBurst));
  assert_param(IS_FSMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 8006776:	683b      	ldr	r3, [r7, #0]
 8006778:	681a      	ldr	r2, [r3, #0]
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006780:	683a      	ldr	r2, [r7, #0]
 8006782:	6812      	ldr	r2, [r2, #0]
 8006784:	f023 0101 	bic.w	r1, r3, #1
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 800678e:	683b      	ldr	r3, [r7, #0]
 8006790:	689b      	ldr	r3, [r3, #8]
 8006792:	2b08      	cmp	r3, #8
 8006794:	d102      	bne.n	800679c <FSMC_NORSRAM_Init+0x30>
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8006796:	2340      	movs	r3, #64	; 0x40
 8006798:	617b      	str	r3, [r7, #20]
 800679a:	e001      	b.n	80067a0 <FSMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_DISABLE;
 800679c:	2300      	movs	r3, #0
 800679e:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 80067a0:	683b      	ldr	r3, [r7, #0]
 80067a2:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 80067a4:	697b      	ldr	r3, [r7, #20]
 80067a6:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 80067a8:	683b      	ldr	r3, [r7, #0]
 80067aa:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 80067ac:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 80067ae:	683b      	ldr	r3, [r7, #0]
 80067b0:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 80067b2:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 80067b4:	683b      	ldr	r3, [r7, #0]
 80067b6:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 80067b8:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 80067ba:	683b      	ldr	r3, [r7, #0]
 80067bc:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 80067be:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 80067c0:	683b      	ldr	r3, [r7, #0]
 80067c2:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalPolarity      | \
 80067c4:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 80067c6:	683b      	ldr	r3, [r7, #0]
 80067c8:	6a1b      	ldr	r3, [r3, #32]
              Init->WaitSignalActive        | \
 80067ca:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 80067cc:	683b      	ldr	r3, [r7, #0]
 80067ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WriteOperation          | \
 80067d0:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 80067d2:	683b      	ldr	r3, [r7, #0]
 80067d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->WaitSignal              | \
 80067d6:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 80067d8:	683b      	ldr	r3, [r7, #0]
 80067da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
              Init->ExtendedMode            | \
 80067dc:	431a      	orrs	r2, r3
              Init->WriteBurst);
 80067de:	683b      	ldr	r3, [r7, #0]
 80067e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  btcr_reg = (flashaccess                   | \
 80067e2:	4313      	orrs	r3, r2
 80067e4:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->WrapMode;
 80067e6:	683b      	ldr	r3, [r7, #0]
 80067e8:	699b      	ldr	r3, [r3, #24]
 80067ea:	693a      	ldr	r2, [r7, #16]
 80067ec:	4313      	orrs	r3, r2
 80067ee:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->PageSize;
 80067f0:	683b      	ldr	r3, [r7, #0]
 80067f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067f4:	693a      	ldr	r2, [r7, #16]
 80067f6:	4313      	orrs	r3, r2
 80067f8:	613b      	str	r3, [r7, #16]

  mask = (FSMC_BCRx_MBKEN                |
 80067fa:	4b10      	ldr	r3, [pc, #64]	; (800683c <FSMC_NORSRAM_Init+0xd0>)
 80067fc:	60fb      	str	r3, [r7, #12]
          FSMC_BCRx_WAITEN               |
          FSMC_BCRx_EXTMOD               |
          FSMC_BCRx_ASYNCWAIT            |
          FSMC_BCRx_CBURSTRW);

  mask |= FSMC_BCRx_WRAPMOD;
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006804:	60fb      	str	r3, [r7, #12]
  mask |= 0x00070000U; /* CPSIZE to be defined in CMSIS file */
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 800680c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 800680e:	683b      	ldr	r3, [r7, #0]
 8006810:	681a      	ldr	r2, [r3, #0]
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	43db      	mvns	r3, r3
 800681c:	ea02 0103 	and.w	r1, r2, r3
 8006820:	683b      	ldr	r3, [r7, #0]
 8006822:	681a      	ldr	r2, [r3, #0]
 8006824:	693b      	ldr	r3, [r7, #16]
 8006826:	4319      	orrs	r1, r3
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]


  return HAL_OK;
 800682e:	2300      	movs	r3, #0
}
 8006830:	4618      	mov	r0, r3
 8006832:	371c      	adds	r7, #28
 8006834:	46bd      	mov	sp, r7
 8006836:	bc80      	pop	{r7}
 8006838:	4770      	bx	lr
 800683a:	bf00      	nop
 800683c:	0008fb7f 	.word	0x0008fb7f

08006840 <FSMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device,
                                          FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8006840:	b480      	push	{r7}
 8006842:	b085      	sub	sp, #20
 8006844:	af00      	add	r7, sp, #0
 8006846:	60f8      	str	r0, [r7, #12]
 8006848:	60b9      	str	r1, [r7, #8]
 800684a:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	1c5a      	adds	r2, r3, #1
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006856:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 800685a:	68bb      	ldr	r3, [r7, #8]
 800685c:	681a      	ldr	r2, [r3, #0]
 800685e:	68bb      	ldr	r3, [r7, #8]
 8006860:	685b      	ldr	r3, [r3, #4]
 8006862:	011b      	lsls	r3, r3, #4
 8006864:	431a      	orrs	r2, r3
 8006866:	68bb      	ldr	r3, [r7, #8]
 8006868:	689b      	ldr	r3, [r3, #8]
 800686a:	021b      	lsls	r3, r3, #8
 800686c:	431a      	orrs	r2, r3
 800686e:	68bb      	ldr	r3, [r7, #8]
 8006870:	68db      	ldr	r3, [r3, #12]
 8006872:	041b      	lsls	r3, r3, #16
 8006874:	431a      	orrs	r2, r3
 8006876:	68bb      	ldr	r3, [r7, #8]
 8006878:	691b      	ldr	r3, [r3, #16]
 800687a:	3b01      	subs	r3, #1
 800687c:	051b      	lsls	r3, r3, #20
 800687e:	431a      	orrs	r2, r3
 8006880:	68bb      	ldr	r3, [r7, #8]
 8006882:	695b      	ldr	r3, [r3, #20]
 8006884:	3b02      	subs	r3, #2
 8006886:	061b      	lsls	r3, r3, #24
 8006888:	431a      	orrs	r2, r3
 800688a:	68bb      	ldr	r3, [r7, #8]
 800688c:	699b      	ldr	r3, [r3, #24]
 800688e:	4313      	orrs	r3, r2
 8006890:	687a      	ldr	r2, [r7, #4]
 8006892:	3201      	adds	r2, #1
 8006894:	4319      	orrs	r1, r3
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                       ((Timing->BusTurnAroundDuration)  << FSMC_BTRx_BUSTURN_Pos) |
                                                       (((Timing->CLKDivision) - 1U)     << FSMC_BTRx_CLKDIV_Pos)  |
                                                       (((Timing->DataLatency) - 2U)     << FSMC_BTRx_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));

  return HAL_OK;
 800689c:	2300      	movs	r3, #0
}
 800689e:	4618      	mov	r0, r3
 80068a0:	3714      	adds	r7, #20
 80068a2:	46bd      	mov	sp, r7
 80068a4:	bc80      	pop	{r7}
 80068a6:	4770      	bx	lr

080068a8 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 80068a8:	b480      	push	{r7}
 80068aa:	b085      	sub	sp, #20
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	60f8      	str	r0, [r7, #12]
 80068b0:	60b9      	str	r1, [r7, #8]
 80068b2:	607a      	str	r2, [r7, #4]
 80068b4:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 80068b6:	683b      	ldr	r3, [r7, #0]
 80068b8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80068bc:	d11d      	bne.n	80068fa <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
#if defined(FSMC_BWTRx_BUSTURN)
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	687a      	ldr	r2, [r7, #4]
 80068c2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80068c6:	4b13      	ldr	r3, [pc, #76]	; (8006914 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 80068c8:	4013      	ands	r3, r2
 80068ca:	68ba      	ldr	r2, [r7, #8]
 80068cc:	6811      	ldr	r1, [r2, #0]
 80068ce:	68ba      	ldr	r2, [r7, #8]
 80068d0:	6852      	ldr	r2, [r2, #4]
 80068d2:	0112      	lsls	r2, r2, #4
 80068d4:	4311      	orrs	r1, r2
 80068d6:	68ba      	ldr	r2, [r7, #8]
 80068d8:	6892      	ldr	r2, [r2, #8]
 80068da:	0212      	lsls	r2, r2, #8
 80068dc:	4311      	orrs	r1, r2
 80068de:	68ba      	ldr	r2, [r7, #8]
 80068e0:	6992      	ldr	r2, [r2, #24]
 80068e2:	4311      	orrs	r1, r2
 80068e4:	68ba      	ldr	r2, [r7, #8]
 80068e6:	68d2      	ldr	r2, [r2, #12]
 80068e8:	0412      	lsls	r2, r2, #16
 80068ea:	430a      	orrs	r2, r1
 80068ec:	ea43 0102 	orr.w	r1, r3, r2
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	687a      	ldr	r2, [r7, #4]
 80068f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80068f8:	e005      	b.n	8006906 <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     (((Timing->DataLatency) - 2U)     << FSMC_BWTRx_DATLAT_Pos)));
#endif /* FSMC_BWTRx_BUSTURN */
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	687a      	ldr	r2, [r7, #4]
 80068fe:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8006902:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 8006906:	2300      	movs	r3, #0
}
 8006908:	4618      	mov	r0, r3
 800690a:	3714      	adds	r7, #20
 800690c:	46bd      	mov	sp, r7
 800690e:	bc80      	pop	{r7}
 8006910:	4770      	bx	lr
 8006912:	bf00      	nop
 8006914:	cff00000 	.word	0xcff00000

08006918 <__errno>:
 8006918:	4b01      	ldr	r3, [pc, #4]	; (8006920 <__errno+0x8>)
 800691a:	6818      	ldr	r0, [r3, #0]
 800691c:	4770      	bx	lr
 800691e:	bf00      	nop
 8006920:	200000d8 	.word	0x200000d8

08006924 <__libc_init_array>:
 8006924:	b570      	push	{r4, r5, r6, lr}
 8006926:	2600      	movs	r6, #0
 8006928:	4d0c      	ldr	r5, [pc, #48]	; (800695c <__libc_init_array+0x38>)
 800692a:	4c0d      	ldr	r4, [pc, #52]	; (8006960 <__libc_init_array+0x3c>)
 800692c:	1b64      	subs	r4, r4, r5
 800692e:	10a4      	asrs	r4, r4, #2
 8006930:	42a6      	cmp	r6, r4
 8006932:	d109      	bne.n	8006948 <__libc_init_array+0x24>
 8006934:	f000 fca4 	bl	8007280 <_init>
 8006938:	2600      	movs	r6, #0
 800693a:	4d0a      	ldr	r5, [pc, #40]	; (8006964 <__libc_init_array+0x40>)
 800693c:	4c0a      	ldr	r4, [pc, #40]	; (8006968 <__libc_init_array+0x44>)
 800693e:	1b64      	subs	r4, r4, r5
 8006940:	10a4      	asrs	r4, r4, #2
 8006942:	42a6      	cmp	r6, r4
 8006944:	d105      	bne.n	8006952 <__libc_init_array+0x2e>
 8006946:	bd70      	pop	{r4, r5, r6, pc}
 8006948:	f855 3b04 	ldr.w	r3, [r5], #4
 800694c:	4798      	blx	r3
 800694e:	3601      	adds	r6, #1
 8006950:	e7ee      	b.n	8006930 <__libc_init_array+0xc>
 8006952:	f855 3b04 	ldr.w	r3, [r5], #4
 8006956:	4798      	blx	r3
 8006958:	3601      	adds	r6, #1
 800695a:	e7f2      	b.n	8006942 <__libc_init_array+0x1e>
 800695c:	08008000 	.word	0x08008000
 8006960:	08008000 	.word	0x08008000
 8006964:	08008000 	.word	0x08008000
 8006968:	08008004 	.word	0x08008004

0800696c <memset>:
 800696c:	4603      	mov	r3, r0
 800696e:	4402      	add	r2, r0
 8006970:	4293      	cmp	r3, r2
 8006972:	d100      	bne.n	8006976 <memset+0xa>
 8006974:	4770      	bx	lr
 8006976:	f803 1b01 	strb.w	r1, [r3], #1
 800697a:	e7f9      	b.n	8006970 <memset+0x4>

0800697c <siprintf>:
 800697c:	b40e      	push	{r1, r2, r3}
 800697e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006982:	b500      	push	{lr}
 8006984:	b09c      	sub	sp, #112	; 0x70
 8006986:	ab1d      	add	r3, sp, #116	; 0x74
 8006988:	9002      	str	r0, [sp, #8]
 800698a:	9006      	str	r0, [sp, #24]
 800698c:	9107      	str	r1, [sp, #28]
 800698e:	9104      	str	r1, [sp, #16]
 8006990:	4808      	ldr	r0, [pc, #32]	; (80069b4 <siprintf+0x38>)
 8006992:	4909      	ldr	r1, [pc, #36]	; (80069b8 <siprintf+0x3c>)
 8006994:	f853 2b04 	ldr.w	r2, [r3], #4
 8006998:	9105      	str	r1, [sp, #20]
 800699a:	6800      	ldr	r0, [r0, #0]
 800699c:	a902      	add	r1, sp, #8
 800699e:	9301      	str	r3, [sp, #4]
 80069a0:	f000 f870 	bl	8006a84 <_svfiprintf_r>
 80069a4:	2200      	movs	r2, #0
 80069a6:	9b02      	ldr	r3, [sp, #8]
 80069a8:	701a      	strb	r2, [r3, #0]
 80069aa:	b01c      	add	sp, #112	; 0x70
 80069ac:	f85d eb04 	ldr.w	lr, [sp], #4
 80069b0:	b003      	add	sp, #12
 80069b2:	4770      	bx	lr
 80069b4:	200000d8 	.word	0x200000d8
 80069b8:	ffff0208 	.word	0xffff0208

080069bc <strcpy>:
 80069bc:	4603      	mov	r3, r0
 80069be:	f811 2b01 	ldrb.w	r2, [r1], #1
 80069c2:	f803 2b01 	strb.w	r2, [r3], #1
 80069c6:	2a00      	cmp	r2, #0
 80069c8:	d1f9      	bne.n	80069be <strcpy+0x2>
 80069ca:	4770      	bx	lr

080069cc <__ssputs_r>:
 80069cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80069d0:	688e      	ldr	r6, [r1, #8]
 80069d2:	4682      	mov	sl, r0
 80069d4:	429e      	cmp	r6, r3
 80069d6:	460c      	mov	r4, r1
 80069d8:	4690      	mov	r8, r2
 80069da:	461f      	mov	r7, r3
 80069dc:	d838      	bhi.n	8006a50 <__ssputs_r+0x84>
 80069de:	898a      	ldrh	r2, [r1, #12]
 80069e0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80069e4:	d032      	beq.n	8006a4c <__ssputs_r+0x80>
 80069e6:	6825      	ldr	r5, [r4, #0]
 80069e8:	6909      	ldr	r1, [r1, #16]
 80069ea:	3301      	adds	r3, #1
 80069ec:	eba5 0901 	sub.w	r9, r5, r1
 80069f0:	6965      	ldr	r5, [r4, #20]
 80069f2:	444b      	add	r3, r9
 80069f4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80069f8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80069fc:	106d      	asrs	r5, r5, #1
 80069fe:	429d      	cmp	r5, r3
 8006a00:	bf38      	it	cc
 8006a02:	461d      	movcc	r5, r3
 8006a04:	0553      	lsls	r3, r2, #21
 8006a06:	d531      	bpl.n	8006a6c <__ssputs_r+0xa0>
 8006a08:	4629      	mov	r1, r5
 8006a0a:	f000 fb6f 	bl	80070ec <_malloc_r>
 8006a0e:	4606      	mov	r6, r0
 8006a10:	b950      	cbnz	r0, 8006a28 <__ssputs_r+0x5c>
 8006a12:	230c      	movs	r3, #12
 8006a14:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006a18:	f8ca 3000 	str.w	r3, [sl]
 8006a1c:	89a3      	ldrh	r3, [r4, #12]
 8006a1e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006a22:	81a3      	strh	r3, [r4, #12]
 8006a24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a28:	464a      	mov	r2, r9
 8006a2a:	6921      	ldr	r1, [r4, #16]
 8006a2c:	f000 face 	bl	8006fcc <memcpy>
 8006a30:	89a3      	ldrh	r3, [r4, #12]
 8006a32:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006a36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a3a:	81a3      	strh	r3, [r4, #12]
 8006a3c:	6126      	str	r6, [r4, #16]
 8006a3e:	444e      	add	r6, r9
 8006a40:	6026      	str	r6, [r4, #0]
 8006a42:	463e      	mov	r6, r7
 8006a44:	6165      	str	r5, [r4, #20]
 8006a46:	eba5 0509 	sub.w	r5, r5, r9
 8006a4a:	60a5      	str	r5, [r4, #8]
 8006a4c:	42be      	cmp	r6, r7
 8006a4e:	d900      	bls.n	8006a52 <__ssputs_r+0x86>
 8006a50:	463e      	mov	r6, r7
 8006a52:	4632      	mov	r2, r6
 8006a54:	4641      	mov	r1, r8
 8006a56:	6820      	ldr	r0, [r4, #0]
 8006a58:	f000 fac6 	bl	8006fe8 <memmove>
 8006a5c:	68a3      	ldr	r3, [r4, #8]
 8006a5e:	2000      	movs	r0, #0
 8006a60:	1b9b      	subs	r3, r3, r6
 8006a62:	60a3      	str	r3, [r4, #8]
 8006a64:	6823      	ldr	r3, [r4, #0]
 8006a66:	4433      	add	r3, r6
 8006a68:	6023      	str	r3, [r4, #0]
 8006a6a:	e7db      	b.n	8006a24 <__ssputs_r+0x58>
 8006a6c:	462a      	mov	r2, r5
 8006a6e:	f000 fbb1 	bl	80071d4 <_realloc_r>
 8006a72:	4606      	mov	r6, r0
 8006a74:	2800      	cmp	r0, #0
 8006a76:	d1e1      	bne.n	8006a3c <__ssputs_r+0x70>
 8006a78:	4650      	mov	r0, sl
 8006a7a:	6921      	ldr	r1, [r4, #16]
 8006a7c:	f000 face 	bl	800701c <_free_r>
 8006a80:	e7c7      	b.n	8006a12 <__ssputs_r+0x46>
	...

08006a84 <_svfiprintf_r>:
 8006a84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a88:	4698      	mov	r8, r3
 8006a8a:	898b      	ldrh	r3, [r1, #12]
 8006a8c:	4607      	mov	r7, r0
 8006a8e:	061b      	lsls	r3, r3, #24
 8006a90:	460d      	mov	r5, r1
 8006a92:	4614      	mov	r4, r2
 8006a94:	b09d      	sub	sp, #116	; 0x74
 8006a96:	d50e      	bpl.n	8006ab6 <_svfiprintf_r+0x32>
 8006a98:	690b      	ldr	r3, [r1, #16]
 8006a9a:	b963      	cbnz	r3, 8006ab6 <_svfiprintf_r+0x32>
 8006a9c:	2140      	movs	r1, #64	; 0x40
 8006a9e:	f000 fb25 	bl	80070ec <_malloc_r>
 8006aa2:	6028      	str	r0, [r5, #0]
 8006aa4:	6128      	str	r0, [r5, #16]
 8006aa6:	b920      	cbnz	r0, 8006ab2 <_svfiprintf_r+0x2e>
 8006aa8:	230c      	movs	r3, #12
 8006aaa:	603b      	str	r3, [r7, #0]
 8006aac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006ab0:	e0d1      	b.n	8006c56 <_svfiprintf_r+0x1d2>
 8006ab2:	2340      	movs	r3, #64	; 0x40
 8006ab4:	616b      	str	r3, [r5, #20]
 8006ab6:	2300      	movs	r3, #0
 8006ab8:	9309      	str	r3, [sp, #36]	; 0x24
 8006aba:	2320      	movs	r3, #32
 8006abc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006ac0:	2330      	movs	r3, #48	; 0x30
 8006ac2:	f04f 0901 	mov.w	r9, #1
 8006ac6:	f8cd 800c 	str.w	r8, [sp, #12]
 8006aca:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8006c70 <_svfiprintf_r+0x1ec>
 8006ace:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006ad2:	4623      	mov	r3, r4
 8006ad4:	469a      	mov	sl, r3
 8006ad6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006ada:	b10a      	cbz	r2, 8006ae0 <_svfiprintf_r+0x5c>
 8006adc:	2a25      	cmp	r2, #37	; 0x25
 8006ade:	d1f9      	bne.n	8006ad4 <_svfiprintf_r+0x50>
 8006ae0:	ebba 0b04 	subs.w	fp, sl, r4
 8006ae4:	d00b      	beq.n	8006afe <_svfiprintf_r+0x7a>
 8006ae6:	465b      	mov	r3, fp
 8006ae8:	4622      	mov	r2, r4
 8006aea:	4629      	mov	r1, r5
 8006aec:	4638      	mov	r0, r7
 8006aee:	f7ff ff6d 	bl	80069cc <__ssputs_r>
 8006af2:	3001      	adds	r0, #1
 8006af4:	f000 80aa 	beq.w	8006c4c <_svfiprintf_r+0x1c8>
 8006af8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006afa:	445a      	add	r2, fp
 8006afc:	9209      	str	r2, [sp, #36]	; 0x24
 8006afe:	f89a 3000 	ldrb.w	r3, [sl]
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	f000 80a2 	beq.w	8006c4c <_svfiprintf_r+0x1c8>
 8006b08:	2300      	movs	r3, #0
 8006b0a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006b0e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006b12:	f10a 0a01 	add.w	sl, sl, #1
 8006b16:	9304      	str	r3, [sp, #16]
 8006b18:	9307      	str	r3, [sp, #28]
 8006b1a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006b1e:	931a      	str	r3, [sp, #104]	; 0x68
 8006b20:	4654      	mov	r4, sl
 8006b22:	2205      	movs	r2, #5
 8006b24:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006b28:	4851      	ldr	r0, [pc, #324]	; (8006c70 <_svfiprintf_r+0x1ec>)
 8006b2a:	f000 fa41 	bl	8006fb0 <memchr>
 8006b2e:	9a04      	ldr	r2, [sp, #16]
 8006b30:	b9d8      	cbnz	r0, 8006b6a <_svfiprintf_r+0xe6>
 8006b32:	06d0      	lsls	r0, r2, #27
 8006b34:	bf44      	itt	mi
 8006b36:	2320      	movmi	r3, #32
 8006b38:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006b3c:	0711      	lsls	r1, r2, #28
 8006b3e:	bf44      	itt	mi
 8006b40:	232b      	movmi	r3, #43	; 0x2b
 8006b42:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006b46:	f89a 3000 	ldrb.w	r3, [sl]
 8006b4a:	2b2a      	cmp	r3, #42	; 0x2a
 8006b4c:	d015      	beq.n	8006b7a <_svfiprintf_r+0xf6>
 8006b4e:	4654      	mov	r4, sl
 8006b50:	2000      	movs	r0, #0
 8006b52:	f04f 0c0a 	mov.w	ip, #10
 8006b56:	9a07      	ldr	r2, [sp, #28]
 8006b58:	4621      	mov	r1, r4
 8006b5a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006b5e:	3b30      	subs	r3, #48	; 0x30
 8006b60:	2b09      	cmp	r3, #9
 8006b62:	d94e      	bls.n	8006c02 <_svfiprintf_r+0x17e>
 8006b64:	b1b0      	cbz	r0, 8006b94 <_svfiprintf_r+0x110>
 8006b66:	9207      	str	r2, [sp, #28]
 8006b68:	e014      	b.n	8006b94 <_svfiprintf_r+0x110>
 8006b6a:	eba0 0308 	sub.w	r3, r0, r8
 8006b6e:	fa09 f303 	lsl.w	r3, r9, r3
 8006b72:	4313      	orrs	r3, r2
 8006b74:	46a2      	mov	sl, r4
 8006b76:	9304      	str	r3, [sp, #16]
 8006b78:	e7d2      	b.n	8006b20 <_svfiprintf_r+0x9c>
 8006b7a:	9b03      	ldr	r3, [sp, #12]
 8006b7c:	1d19      	adds	r1, r3, #4
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	9103      	str	r1, [sp, #12]
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	bfbb      	ittet	lt
 8006b86:	425b      	neglt	r3, r3
 8006b88:	f042 0202 	orrlt.w	r2, r2, #2
 8006b8c:	9307      	strge	r3, [sp, #28]
 8006b8e:	9307      	strlt	r3, [sp, #28]
 8006b90:	bfb8      	it	lt
 8006b92:	9204      	strlt	r2, [sp, #16]
 8006b94:	7823      	ldrb	r3, [r4, #0]
 8006b96:	2b2e      	cmp	r3, #46	; 0x2e
 8006b98:	d10c      	bne.n	8006bb4 <_svfiprintf_r+0x130>
 8006b9a:	7863      	ldrb	r3, [r4, #1]
 8006b9c:	2b2a      	cmp	r3, #42	; 0x2a
 8006b9e:	d135      	bne.n	8006c0c <_svfiprintf_r+0x188>
 8006ba0:	9b03      	ldr	r3, [sp, #12]
 8006ba2:	3402      	adds	r4, #2
 8006ba4:	1d1a      	adds	r2, r3, #4
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	9203      	str	r2, [sp, #12]
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	bfb8      	it	lt
 8006bae:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8006bb2:	9305      	str	r3, [sp, #20]
 8006bb4:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8006c74 <_svfiprintf_r+0x1f0>
 8006bb8:	2203      	movs	r2, #3
 8006bba:	4650      	mov	r0, sl
 8006bbc:	7821      	ldrb	r1, [r4, #0]
 8006bbe:	f000 f9f7 	bl	8006fb0 <memchr>
 8006bc2:	b140      	cbz	r0, 8006bd6 <_svfiprintf_r+0x152>
 8006bc4:	2340      	movs	r3, #64	; 0x40
 8006bc6:	eba0 000a 	sub.w	r0, r0, sl
 8006bca:	fa03 f000 	lsl.w	r0, r3, r0
 8006bce:	9b04      	ldr	r3, [sp, #16]
 8006bd0:	3401      	adds	r4, #1
 8006bd2:	4303      	orrs	r3, r0
 8006bd4:	9304      	str	r3, [sp, #16]
 8006bd6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006bda:	2206      	movs	r2, #6
 8006bdc:	4826      	ldr	r0, [pc, #152]	; (8006c78 <_svfiprintf_r+0x1f4>)
 8006bde:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006be2:	f000 f9e5 	bl	8006fb0 <memchr>
 8006be6:	2800      	cmp	r0, #0
 8006be8:	d038      	beq.n	8006c5c <_svfiprintf_r+0x1d8>
 8006bea:	4b24      	ldr	r3, [pc, #144]	; (8006c7c <_svfiprintf_r+0x1f8>)
 8006bec:	bb1b      	cbnz	r3, 8006c36 <_svfiprintf_r+0x1b2>
 8006bee:	9b03      	ldr	r3, [sp, #12]
 8006bf0:	3307      	adds	r3, #7
 8006bf2:	f023 0307 	bic.w	r3, r3, #7
 8006bf6:	3308      	adds	r3, #8
 8006bf8:	9303      	str	r3, [sp, #12]
 8006bfa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006bfc:	4433      	add	r3, r6
 8006bfe:	9309      	str	r3, [sp, #36]	; 0x24
 8006c00:	e767      	b.n	8006ad2 <_svfiprintf_r+0x4e>
 8006c02:	460c      	mov	r4, r1
 8006c04:	2001      	movs	r0, #1
 8006c06:	fb0c 3202 	mla	r2, ip, r2, r3
 8006c0a:	e7a5      	b.n	8006b58 <_svfiprintf_r+0xd4>
 8006c0c:	2300      	movs	r3, #0
 8006c0e:	f04f 0c0a 	mov.w	ip, #10
 8006c12:	4619      	mov	r1, r3
 8006c14:	3401      	adds	r4, #1
 8006c16:	9305      	str	r3, [sp, #20]
 8006c18:	4620      	mov	r0, r4
 8006c1a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006c1e:	3a30      	subs	r2, #48	; 0x30
 8006c20:	2a09      	cmp	r2, #9
 8006c22:	d903      	bls.n	8006c2c <_svfiprintf_r+0x1a8>
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d0c5      	beq.n	8006bb4 <_svfiprintf_r+0x130>
 8006c28:	9105      	str	r1, [sp, #20]
 8006c2a:	e7c3      	b.n	8006bb4 <_svfiprintf_r+0x130>
 8006c2c:	4604      	mov	r4, r0
 8006c2e:	2301      	movs	r3, #1
 8006c30:	fb0c 2101 	mla	r1, ip, r1, r2
 8006c34:	e7f0      	b.n	8006c18 <_svfiprintf_r+0x194>
 8006c36:	ab03      	add	r3, sp, #12
 8006c38:	9300      	str	r3, [sp, #0]
 8006c3a:	462a      	mov	r2, r5
 8006c3c:	4638      	mov	r0, r7
 8006c3e:	4b10      	ldr	r3, [pc, #64]	; (8006c80 <_svfiprintf_r+0x1fc>)
 8006c40:	a904      	add	r1, sp, #16
 8006c42:	f3af 8000 	nop.w
 8006c46:	1c42      	adds	r2, r0, #1
 8006c48:	4606      	mov	r6, r0
 8006c4a:	d1d6      	bne.n	8006bfa <_svfiprintf_r+0x176>
 8006c4c:	89ab      	ldrh	r3, [r5, #12]
 8006c4e:	065b      	lsls	r3, r3, #25
 8006c50:	f53f af2c 	bmi.w	8006aac <_svfiprintf_r+0x28>
 8006c54:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006c56:	b01d      	add	sp, #116	; 0x74
 8006c58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c5c:	ab03      	add	r3, sp, #12
 8006c5e:	9300      	str	r3, [sp, #0]
 8006c60:	462a      	mov	r2, r5
 8006c62:	4638      	mov	r0, r7
 8006c64:	4b06      	ldr	r3, [pc, #24]	; (8006c80 <_svfiprintf_r+0x1fc>)
 8006c66:	a904      	add	r1, sp, #16
 8006c68:	f000 f87c 	bl	8006d64 <_printf_i>
 8006c6c:	e7eb      	b.n	8006c46 <_svfiprintf_r+0x1c2>
 8006c6e:	bf00      	nop
 8006c70:	08007fcc 	.word	0x08007fcc
 8006c74:	08007fd2 	.word	0x08007fd2
 8006c78:	08007fd6 	.word	0x08007fd6
 8006c7c:	00000000 	.word	0x00000000
 8006c80:	080069cd 	.word	0x080069cd

08006c84 <_printf_common>:
 8006c84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006c88:	4616      	mov	r6, r2
 8006c8a:	4699      	mov	r9, r3
 8006c8c:	688a      	ldr	r2, [r1, #8]
 8006c8e:	690b      	ldr	r3, [r1, #16]
 8006c90:	4607      	mov	r7, r0
 8006c92:	4293      	cmp	r3, r2
 8006c94:	bfb8      	it	lt
 8006c96:	4613      	movlt	r3, r2
 8006c98:	6033      	str	r3, [r6, #0]
 8006c9a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006c9e:	460c      	mov	r4, r1
 8006ca0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006ca4:	b10a      	cbz	r2, 8006caa <_printf_common+0x26>
 8006ca6:	3301      	adds	r3, #1
 8006ca8:	6033      	str	r3, [r6, #0]
 8006caa:	6823      	ldr	r3, [r4, #0]
 8006cac:	0699      	lsls	r1, r3, #26
 8006cae:	bf42      	ittt	mi
 8006cb0:	6833      	ldrmi	r3, [r6, #0]
 8006cb2:	3302      	addmi	r3, #2
 8006cb4:	6033      	strmi	r3, [r6, #0]
 8006cb6:	6825      	ldr	r5, [r4, #0]
 8006cb8:	f015 0506 	ands.w	r5, r5, #6
 8006cbc:	d106      	bne.n	8006ccc <_printf_common+0x48>
 8006cbe:	f104 0a19 	add.w	sl, r4, #25
 8006cc2:	68e3      	ldr	r3, [r4, #12]
 8006cc4:	6832      	ldr	r2, [r6, #0]
 8006cc6:	1a9b      	subs	r3, r3, r2
 8006cc8:	42ab      	cmp	r3, r5
 8006cca:	dc28      	bgt.n	8006d1e <_printf_common+0x9a>
 8006ccc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006cd0:	1e13      	subs	r3, r2, #0
 8006cd2:	6822      	ldr	r2, [r4, #0]
 8006cd4:	bf18      	it	ne
 8006cd6:	2301      	movne	r3, #1
 8006cd8:	0692      	lsls	r2, r2, #26
 8006cda:	d42d      	bmi.n	8006d38 <_printf_common+0xb4>
 8006cdc:	4649      	mov	r1, r9
 8006cde:	4638      	mov	r0, r7
 8006ce0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006ce4:	47c0      	blx	r8
 8006ce6:	3001      	adds	r0, #1
 8006ce8:	d020      	beq.n	8006d2c <_printf_common+0xa8>
 8006cea:	6823      	ldr	r3, [r4, #0]
 8006cec:	68e5      	ldr	r5, [r4, #12]
 8006cee:	f003 0306 	and.w	r3, r3, #6
 8006cf2:	2b04      	cmp	r3, #4
 8006cf4:	bf18      	it	ne
 8006cf6:	2500      	movne	r5, #0
 8006cf8:	6832      	ldr	r2, [r6, #0]
 8006cfa:	f04f 0600 	mov.w	r6, #0
 8006cfe:	68a3      	ldr	r3, [r4, #8]
 8006d00:	bf08      	it	eq
 8006d02:	1aad      	subeq	r5, r5, r2
 8006d04:	6922      	ldr	r2, [r4, #16]
 8006d06:	bf08      	it	eq
 8006d08:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006d0c:	4293      	cmp	r3, r2
 8006d0e:	bfc4      	itt	gt
 8006d10:	1a9b      	subgt	r3, r3, r2
 8006d12:	18ed      	addgt	r5, r5, r3
 8006d14:	341a      	adds	r4, #26
 8006d16:	42b5      	cmp	r5, r6
 8006d18:	d11a      	bne.n	8006d50 <_printf_common+0xcc>
 8006d1a:	2000      	movs	r0, #0
 8006d1c:	e008      	b.n	8006d30 <_printf_common+0xac>
 8006d1e:	2301      	movs	r3, #1
 8006d20:	4652      	mov	r2, sl
 8006d22:	4649      	mov	r1, r9
 8006d24:	4638      	mov	r0, r7
 8006d26:	47c0      	blx	r8
 8006d28:	3001      	adds	r0, #1
 8006d2a:	d103      	bne.n	8006d34 <_printf_common+0xb0>
 8006d2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006d30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d34:	3501      	adds	r5, #1
 8006d36:	e7c4      	b.n	8006cc2 <_printf_common+0x3e>
 8006d38:	2030      	movs	r0, #48	; 0x30
 8006d3a:	18e1      	adds	r1, r4, r3
 8006d3c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006d40:	1c5a      	adds	r2, r3, #1
 8006d42:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006d46:	4422      	add	r2, r4
 8006d48:	3302      	adds	r3, #2
 8006d4a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006d4e:	e7c5      	b.n	8006cdc <_printf_common+0x58>
 8006d50:	2301      	movs	r3, #1
 8006d52:	4622      	mov	r2, r4
 8006d54:	4649      	mov	r1, r9
 8006d56:	4638      	mov	r0, r7
 8006d58:	47c0      	blx	r8
 8006d5a:	3001      	adds	r0, #1
 8006d5c:	d0e6      	beq.n	8006d2c <_printf_common+0xa8>
 8006d5e:	3601      	adds	r6, #1
 8006d60:	e7d9      	b.n	8006d16 <_printf_common+0x92>
	...

08006d64 <_printf_i>:
 8006d64:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006d68:	7e0f      	ldrb	r7, [r1, #24]
 8006d6a:	4691      	mov	r9, r2
 8006d6c:	2f78      	cmp	r7, #120	; 0x78
 8006d6e:	4680      	mov	r8, r0
 8006d70:	460c      	mov	r4, r1
 8006d72:	469a      	mov	sl, r3
 8006d74:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006d76:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006d7a:	d807      	bhi.n	8006d8c <_printf_i+0x28>
 8006d7c:	2f62      	cmp	r7, #98	; 0x62
 8006d7e:	d80a      	bhi.n	8006d96 <_printf_i+0x32>
 8006d80:	2f00      	cmp	r7, #0
 8006d82:	f000 80d9 	beq.w	8006f38 <_printf_i+0x1d4>
 8006d86:	2f58      	cmp	r7, #88	; 0x58
 8006d88:	f000 80a4 	beq.w	8006ed4 <_printf_i+0x170>
 8006d8c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006d90:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006d94:	e03a      	b.n	8006e0c <_printf_i+0xa8>
 8006d96:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006d9a:	2b15      	cmp	r3, #21
 8006d9c:	d8f6      	bhi.n	8006d8c <_printf_i+0x28>
 8006d9e:	a101      	add	r1, pc, #4	; (adr r1, 8006da4 <_printf_i+0x40>)
 8006da0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006da4:	08006dfd 	.word	0x08006dfd
 8006da8:	08006e11 	.word	0x08006e11
 8006dac:	08006d8d 	.word	0x08006d8d
 8006db0:	08006d8d 	.word	0x08006d8d
 8006db4:	08006d8d 	.word	0x08006d8d
 8006db8:	08006d8d 	.word	0x08006d8d
 8006dbc:	08006e11 	.word	0x08006e11
 8006dc0:	08006d8d 	.word	0x08006d8d
 8006dc4:	08006d8d 	.word	0x08006d8d
 8006dc8:	08006d8d 	.word	0x08006d8d
 8006dcc:	08006d8d 	.word	0x08006d8d
 8006dd0:	08006f1f 	.word	0x08006f1f
 8006dd4:	08006e41 	.word	0x08006e41
 8006dd8:	08006f01 	.word	0x08006f01
 8006ddc:	08006d8d 	.word	0x08006d8d
 8006de0:	08006d8d 	.word	0x08006d8d
 8006de4:	08006f41 	.word	0x08006f41
 8006de8:	08006d8d 	.word	0x08006d8d
 8006dec:	08006e41 	.word	0x08006e41
 8006df0:	08006d8d 	.word	0x08006d8d
 8006df4:	08006d8d 	.word	0x08006d8d
 8006df8:	08006f09 	.word	0x08006f09
 8006dfc:	682b      	ldr	r3, [r5, #0]
 8006dfe:	1d1a      	adds	r2, r3, #4
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	602a      	str	r2, [r5, #0]
 8006e04:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006e08:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006e0c:	2301      	movs	r3, #1
 8006e0e:	e0a4      	b.n	8006f5a <_printf_i+0x1f6>
 8006e10:	6820      	ldr	r0, [r4, #0]
 8006e12:	6829      	ldr	r1, [r5, #0]
 8006e14:	0606      	lsls	r6, r0, #24
 8006e16:	f101 0304 	add.w	r3, r1, #4
 8006e1a:	d50a      	bpl.n	8006e32 <_printf_i+0xce>
 8006e1c:	680e      	ldr	r6, [r1, #0]
 8006e1e:	602b      	str	r3, [r5, #0]
 8006e20:	2e00      	cmp	r6, #0
 8006e22:	da03      	bge.n	8006e2c <_printf_i+0xc8>
 8006e24:	232d      	movs	r3, #45	; 0x2d
 8006e26:	4276      	negs	r6, r6
 8006e28:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006e2c:	230a      	movs	r3, #10
 8006e2e:	485e      	ldr	r0, [pc, #376]	; (8006fa8 <_printf_i+0x244>)
 8006e30:	e019      	b.n	8006e66 <_printf_i+0x102>
 8006e32:	680e      	ldr	r6, [r1, #0]
 8006e34:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006e38:	602b      	str	r3, [r5, #0]
 8006e3a:	bf18      	it	ne
 8006e3c:	b236      	sxthne	r6, r6
 8006e3e:	e7ef      	b.n	8006e20 <_printf_i+0xbc>
 8006e40:	682b      	ldr	r3, [r5, #0]
 8006e42:	6820      	ldr	r0, [r4, #0]
 8006e44:	1d19      	adds	r1, r3, #4
 8006e46:	6029      	str	r1, [r5, #0]
 8006e48:	0601      	lsls	r1, r0, #24
 8006e4a:	d501      	bpl.n	8006e50 <_printf_i+0xec>
 8006e4c:	681e      	ldr	r6, [r3, #0]
 8006e4e:	e002      	b.n	8006e56 <_printf_i+0xf2>
 8006e50:	0646      	lsls	r6, r0, #25
 8006e52:	d5fb      	bpl.n	8006e4c <_printf_i+0xe8>
 8006e54:	881e      	ldrh	r6, [r3, #0]
 8006e56:	2f6f      	cmp	r7, #111	; 0x6f
 8006e58:	bf0c      	ite	eq
 8006e5a:	2308      	moveq	r3, #8
 8006e5c:	230a      	movne	r3, #10
 8006e5e:	4852      	ldr	r0, [pc, #328]	; (8006fa8 <_printf_i+0x244>)
 8006e60:	2100      	movs	r1, #0
 8006e62:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006e66:	6865      	ldr	r5, [r4, #4]
 8006e68:	2d00      	cmp	r5, #0
 8006e6a:	bfa8      	it	ge
 8006e6c:	6821      	ldrge	r1, [r4, #0]
 8006e6e:	60a5      	str	r5, [r4, #8]
 8006e70:	bfa4      	itt	ge
 8006e72:	f021 0104 	bicge.w	r1, r1, #4
 8006e76:	6021      	strge	r1, [r4, #0]
 8006e78:	b90e      	cbnz	r6, 8006e7e <_printf_i+0x11a>
 8006e7a:	2d00      	cmp	r5, #0
 8006e7c:	d04d      	beq.n	8006f1a <_printf_i+0x1b6>
 8006e7e:	4615      	mov	r5, r2
 8006e80:	fbb6 f1f3 	udiv	r1, r6, r3
 8006e84:	fb03 6711 	mls	r7, r3, r1, r6
 8006e88:	5dc7      	ldrb	r7, [r0, r7]
 8006e8a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006e8e:	4637      	mov	r7, r6
 8006e90:	42bb      	cmp	r3, r7
 8006e92:	460e      	mov	r6, r1
 8006e94:	d9f4      	bls.n	8006e80 <_printf_i+0x11c>
 8006e96:	2b08      	cmp	r3, #8
 8006e98:	d10b      	bne.n	8006eb2 <_printf_i+0x14e>
 8006e9a:	6823      	ldr	r3, [r4, #0]
 8006e9c:	07de      	lsls	r6, r3, #31
 8006e9e:	d508      	bpl.n	8006eb2 <_printf_i+0x14e>
 8006ea0:	6923      	ldr	r3, [r4, #16]
 8006ea2:	6861      	ldr	r1, [r4, #4]
 8006ea4:	4299      	cmp	r1, r3
 8006ea6:	bfde      	ittt	le
 8006ea8:	2330      	movle	r3, #48	; 0x30
 8006eaa:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006eae:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8006eb2:	1b52      	subs	r2, r2, r5
 8006eb4:	6122      	str	r2, [r4, #16]
 8006eb6:	464b      	mov	r3, r9
 8006eb8:	4621      	mov	r1, r4
 8006eba:	4640      	mov	r0, r8
 8006ebc:	f8cd a000 	str.w	sl, [sp]
 8006ec0:	aa03      	add	r2, sp, #12
 8006ec2:	f7ff fedf 	bl	8006c84 <_printf_common>
 8006ec6:	3001      	adds	r0, #1
 8006ec8:	d14c      	bne.n	8006f64 <_printf_i+0x200>
 8006eca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006ece:	b004      	add	sp, #16
 8006ed0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ed4:	4834      	ldr	r0, [pc, #208]	; (8006fa8 <_printf_i+0x244>)
 8006ed6:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006eda:	6829      	ldr	r1, [r5, #0]
 8006edc:	6823      	ldr	r3, [r4, #0]
 8006ede:	f851 6b04 	ldr.w	r6, [r1], #4
 8006ee2:	6029      	str	r1, [r5, #0]
 8006ee4:	061d      	lsls	r5, r3, #24
 8006ee6:	d514      	bpl.n	8006f12 <_printf_i+0x1ae>
 8006ee8:	07df      	lsls	r7, r3, #31
 8006eea:	bf44      	itt	mi
 8006eec:	f043 0320 	orrmi.w	r3, r3, #32
 8006ef0:	6023      	strmi	r3, [r4, #0]
 8006ef2:	b91e      	cbnz	r6, 8006efc <_printf_i+0x198>
 8006ef4:	6823      	ldr	r3, [r4, #0]
 8006ef6:	f023 0320 	bic.w	r3, r3, #32
 8006efa:	6023      	str	r3, [r4, #0]
 8006efc:	2310      	movs	r3, #16
 8006efe:	e7af      	b.n	8006e60 <_printf_i+0xfc>
 8006f00:	6823      	ldr	r3, [r4, #0]
 8006f02:	f043 0320 	orr.w	r3, r3, #32
 8006f06:	6023      	str	r3, [r4, #0]
 8006f08:	2378      	movs	r3, #120	; 0x78
 8006f0a:	4828      	ldr	r0, [pc, #160]	; (8006fac <_printf_i+0x248>)
 8006f0c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006f10:	e7e3      	b.n	8006eda <_printf_i+0x176>
 8006f12:	0659      	lsls	r1, r3, #25
 8006f14:	bf48      	it	mi
 8006f16:	b2b6      	uxthmi	r6, r6
 8006f18:	e7e6      	b.n	8006ee8 <_printf_i+0x184>
 8006f1a:	4615      	mov	r5, r2
 8006f1c:	e7bb      	b.n	8006e96 <_printf_i+0x132>
 8006f1e:	682b      	ldr	r3, [r5, #0]
 8006f20:	6826      	ldr	r6, [r4, #0]
 8006f22:	1d18      	adds	r0, r3, #4
 8006f24:	6961      	ldr	r1, [r4, #20]
 8006f26:	6028      	str	r0, [r5, #0]
 8006f28:	0635      	lsls	r5, r6, #24
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	d501      	bpl.n	8006f32 <_printf_i+0x1ce>
 8006f2e:	6019      	str	r1, [r3, #0]
 8006f30:	e002      	b.n	8006f38 <_printf_i+0x1d4>
 8006f32:	0670      	lsls	r0, r6, #25
 8006f34:	d5fb      	bpl.n	8006f2e <_printf_i+0x1ca>
 8006f36:	8019      	strh	r1, [r3, #0]
 8006f38:	2300      	movs	r3, #0
 8006f3a:	4615      	mov	r5, r2
 8006f3c:	6123      	str	r3, [r4, #16]
 8006f3e:	e7ba      	b.n	8006eb6 <_printf_i+0x152>
 8006f40:	682b      	ldr	r3, [r5, #0]
 8006f42:	2100      	movs	r1, #0
 8006f44:	1d1a      	adds	r2, r3, #4
 8006f46:	602a      	str	r2, [r5, #0]
 8006f48:	681d      	ldr	r5, [r3, #0]
 8006f4a:	6862      	ldr	r2, [r4, #4]
 8006f4c:	4628      	mov	r0, r5
 8006f4e:	f000 f82f 	bl	8006fb0 <memchr>
 8006f52:	b108      	cbz	r0, 8006f58 <_printf_i+0x1f4>
 8006f54:	1b40      	subs	r0, r0, r5
 8006f56:	6060      	str	r0, [r4, #4]
 8006f58:	6863      	ldr	r3, [r4, #4]
 8006f5a:	6123      	str	r3, [r4, #16]
 8006f5c:	2300      	movs	r3, #0
 8006f5e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006f62:	e7a8      	b.n	8006eb6 <_printf_i+0x152>
 8006f64:	462a      	mov	r2, r5
 8006f66:	4649      	mov	r1, r9
 8006f68:	4640      	mov	r0, r8
 8006f6a:	6923      	ldr	r3, [r4, #16]
 8006f6c:	47d0      	blx	sl
 8006f6e:	3001      	adds	r0, #1
 8006f70:	d0ab      	beq.n	8006eca <_printf_i+0x166>
 8006f72:	6823      	ldr	r3, [r4, #0]
 8006f74:	079b      	lsls	r3, r3, #30
 8006f76:	d413      	bmi.n	8006fa0 <_printf_i+0x23c>
 8006f78:	68e0      	ldr	r0, [r4, #12]
 8006f7a:	9b03      	ldr	r3, [sp, #12]
 8006f7c:	4298      	cmp	r0, r3
 8006f7e:	bfb8      	it	lt
 8006f80:	4618      	movlt	r0, r3
 8006f82:	e7a4      	b.n	8006ece <_printf_i+0x16a>
 8006f84:	2301      	movs	r3, #1
 8006f86:	4632      	mov	r2, r6
 8006f88:	4649      	mov	r1, r9
 8006f8a:	4640      	mov	r0, r8
 8006f8c:	47d0      	blx	sl
 8006f8e:	3001      	adds	r0, #1
 8006f90:	d09b      	beq.n	8006eca <_printf_i+0x166>
 8006f92:	3501      	adds	r5, #1
 8006f94:	68e3      	ldr	r3, [r4, #12]
 8006f96:	9903      	ldr	r1, [sp, #12]
 8006f98:	1a5b      	subs	r3, r3, r1
 8006f9a:	42ab      	cmp	r3, r5
 8006f9c:	dcf2      	bgt.n	8006f84 <_printf_i+0x220>
 8006f9e:	e7eb      	b.n	8006f78 <_printf_i+0x214>
 8006fa0:	2500      	movs	r5, #0
 8006fa2:	f104 0619 	add.w	r6, r4, #25
 8006fa6:	e7f5      	b.n	8006f94 <_printf_i+0x230>
 8006fa8:	08007fdd 	.word	0x08007fdd
 8006fac:	08007fee 	.word	0x08007fee

08006fb0 <memchr>:
 8006fb0:	4603      	mov	r3, r0
 8006fb2:	b510      	push	{r4, lr}
 8006fb4:	b2c9      	uxtb	r1, r1
 8006fb6:	4402      	add	r2, r0
 8006fb8:	4293      	cmp	r3, r2
 8006fba:	4618      	mov	r0, r3
 8006fbc:	d101      	bne.n	8006fc2 <memchr+0x12>
 8006fbe:	2000      	movs	r0, #0
 8006fc0:	e003      	b.n	8006fca <memchr+0x1a>
 8006fc2:	7804      	ldrb	r4, [r0, #0]
 8006fc4:	3301      	adds	r3, #1
 8006fc6:	428c      	cmp	r4, r1
 8006fc8:	d1f6      	bne.n	8006fb8 <memchr+0x8>
 8006fca:	bd10      	pop	{r4, pc}

08006fcc <memcpy>:
 8006fcc:	440a      	add	r2, r1
 8006fce:	4291      	cmp	r1, r2
 8006fd0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8006fd4:	d100      	bne.n	8006fd8 <memcpy+0xc>
 8006fd6:	4770      	bx	lr
 8006fd8:	b510      	push	{r4, lr}
 8006fda:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006fde:	4291      	cmp	r1, r2
 8006fe0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006fe4:	d1f9      	bne.n	8006fda <memcpy+0xe>
 8006fe6:	bd10      	pop	{r4, pc}

08006fe8 <memmove>:
 8006fe8:	4288      	cmp	r0, r1
 8006fea:	b510      	push	{r4, lr}
 8006fec:	eb01 0402 	add.w	r4, r1, r2
 8006ff0:	d902      	bls.n	8006ff8 <memmove+0x10>
 8006ff2:	4284      	cmp	r4, r0
 8006ff4:	4623      	mov	r3, r4
 8006ff6:	d807      	bhi.n	8007008 <memmove+0x20>
 8006ff8:	1e43      	subs	r3, r0, #1
 8006ffa:	42a1      	cmp	r1, r4
 8006ffc:	d008      	beq.n	8007010 <memmove+0x28>
 8006ffe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007002:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007006:	e7f8      	b.n	8006ffa <memmove+0x12>
 8007008:	4601      	mov	r1, r0
 800700a:	4402      	add	r2, r0
 800700c:	428a      	cmp	r2, r1
 800700e:	d100      	bne.n	8007012 <memmove+0x2a>
 8007010:	bd10      	pop	{r4, pc}
 8007012:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007016:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800701a:	e7f7      	b.n	800700c <memmove+0x24>

0800701c <_free_r>:
 800701c:	b538      	push	{r3, r4, r5, lr}
 800701e:	4605      	mov	r5, r0
 8007020:	2900      	cmp	r1, #0
 8007022:	d040      	beq.n	80070a6 <_free_r+0x8a>
 8007024:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007028:	1f0c      	subs	r4, r1, #4
 800702a:	2b00      	cmp	r3, #0
 800702c:	bfb8      	it	lt
 800702e:	18e4      	addlt	r4, r4, r3
 8007030:	f000 f910 	bl	8007254 <__malloc_lock>
 8007034:	4a1c      	ldr	r2, [pc, #112]	; (80070a8 <_free_r+0x8c>)
 8007036:	6813      	ldr	r3, [r2, #0]
 8007038:	b933      	cbnz	r3, 8007048 <_free_r+0x2c>
 800703a:	6063      	str	r3, [r4, #4]
 800703c:	6014      	str	r4, [r2, #0]
 800703e:	4628      	mov	r0, r5
 8007040:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007044:	f000 b90c 	b.w	8007260 <__malloc_unlock>
 8007048:	42a3      	cmp	r3, r4
 800704a:	d908      	bls.n	800705e <_free_r+0x42>
 800704c:	6820      	ldr	r0, [r4, #0]
 800704e:	1821      	adds	r1, r4, r0
 8007050:	428b      	cmp	r3, r1
 8007052:	bf01      	itttt	eq
 8007054:	6819      	ldreq	r1, [r3, #0]
 8007056:	685b      	ldreq	r3, [r3, #4]
 8007058:	1809      	addeq	r1, r1, r0
 800705a:	6021      	streq	r1, [r4, #0]
 800705c:	e7ed      	b.n	800703a <_free_r+0x1e>
 800705e:	461a      	mov	r2, r3
 8007060:	685b      	ldr	r3, [r3, #4]
 8007062:	b10b      	cbz	r3, 8007068 <_free_r+0x4c>
 8007064:	42a3      	cmp	r3, r4
 8007066:	d9fa      	bls.n	800705e <_free_r+0x42>
 8007068:	6811      	ldr	r1, [r2, #0]
 800706a:	1850      	adds	r0, r2, r1
 800706c:	42a0      	cmp	r0, r4
 800706e:	d10b      	bne.n	8007088 <_free_r+0x6c>
 8007070:	6820      	ldr	r0, [r4, #0]
 8007072:	4401      	add	r1, r0
 8007074:	1850      	adds	r0, r2, r1
 8007076:	4283      	cmp	r3, r0
 8007078:	6011      	str	r1, [r2, #0]
 800707a:	d1e0      	bne.n	800703e <_free_r+0x22>
 800707c:	6818      	ldr	r0, [r3, #0]
 800707e:	685b      	ldr	r3, [r3, #4]
 8007080:	4401      	add	r1, r0
 8007082:	6011      	str	r1, [r2, #0]
 8007084:	6053      	str	r3, [r2, #4]
 8007086:	e7da      	b.n	800703e <_free_r+0x22>
 8007088:	d902      	bls.n	8007090 <_free_r+0x74>
 800708a:	230c      	movs	r3, #12
 800708c:	602b      	str	r3, [r5, #0]
 800708e:	e7d6      	b.n	800703e <_free_r+0x22>
 8007090:	6820      	ldr	r0, [r4, #0]
 8007092:	1821      	adds	r1, r4, r0
 8007094:	428b      	cmp	r3, r1
 8007096:	bf01      	itttt	eq
 8007098:	6819      	ldreq	r1, [r3, #0]
 800709a:	685b      	ldreq	r3, [r3, #4]
 800709c:	1809      	addeq	r1, r1, r0
 800709e:	6021      	streq	r1, [r4, #0]
 80070a0:	6063      	str	r3, [r4, #4]
 80070a2:	6054      	str	r4, [r2, #4]
 80070a4:	e7cb      	b.n	800703e <_free_r+0x22>
 80070a6:	bd38      	pop	{r3, r4, r5, pc}
 80070a8:	20000280 	.word	0x20000280

080070ac <sbrk_aligned>:
 80070ac:	b570      	push	{r4, r5, r6, lr}
 80070ae:	4e0e      	ldr	r6, [pc, #56]	; (80070e8 <sbrk_aligned+0x3c>)
 80070b0:	460c      	mov	r4, r1
 80070b2:	6831      	ldr	r1, [r6, #0]
 80070b4:	4605      	mov	r5, r0
 80070b6:	b911      	cbnz	r1, 80070be <sbrk_aligned+0x12>
 80070b8:	f000 f8bc 	bl	8007234 <_sbrk_r>
 80070bc:	6030      	str	r0, [r6, #0]
 80070be:	4621      	mov	r1, r4
 80070c0:	4628      	mov	r0, r5
 80070c2:	f000 f8b7 	bl	8007234 <_sbrk_r>
 80070c6:	1c43      	adds	r3, r0, #1
 80070c8:	d00a      	beq.n	80070e0 <sbrk_aligned+0x34>
 80070ca:	1cc4      	adds	r4, r0, #3
 80070cc:	f024 0403 	bic.w	r4, r4, #3
 80070d0:	42a0      	cmp	r0, r4
 80070d2:	d007      	beq.n	80070e4 <sbrk_aligned+0x38>
 80070d4:	1a21      	subs	r1, r4, r0
 80070d6:	4628      	mov	r0, r5
 80070d8:	f000 f8ac 	bl	8007234 <_sbrk_r>
 80070dc:	3001      	adds	r0, #1
 80070de:	d101      	bne.n	80070e4 <sbrk_aligned+0x38>
 80070e0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80070e4:	4620      	mov	r0, r4
 80070e6:	bd70      	pop	{r4, r5, r6, pc}
 80070e8:	20000284 	.word	0x20000284

080070ec <_malloc_r>:
 80070ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80070f0:	1ccd      	adds	r5, r1, #3
 80070f2:	f025 0503 	bic.w	r5, r5, #3
 80070f6:	3508      	adds	r5, #8
 80070f8:	2d0c      	cmp	r5, #12
 80070fa:	bf38      	it	cc
 80070fc:	250c      	movcc	r5, #12
 80070fe:	2d00      	cmp	r5, #0
 8007100:	4607      	mov	r7, r0
 8007102:	db01      	blt.n	8007108 <_malloc_r+0x1c>
 8007104:	42a9      	cmp	r1, r5
 8007106:	d905      	bls.n	8007114 <_malloc_r+0x28>
 8007108:	230c      	movs	r3, #12
 800710a:	2600      	movs	r6, #0
 800710c:	603b      	str	r3, [r7, #0]
 800710e:	4630      	mov	r0, r6
 8007110:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007114:	4e2e      	ldr	r6, [pc, #184]	; (80071d0 <_malloc_r+0xe4>)
 8007116:	f000 f89d 	bl	8007254 <__malloc_lock>
 800711a:	6833      	ldr	r3, [r6, #0]
 800711c:	461c      	mov	r4, r3
 800711e:	bb34      	cbnz	r4, 800716e <_malloc_r+0x82>
 8007120:	4629      	mov	r1, r5
 8007122:	4638      	mov	r0, r7
 8007124:	f7ff ffc2 	bl	80070ac <sbrk_aligned>
 8007128:	1c43      	adds	r3, r0, #1
 800712a:	4604      	mov	r4, r0
 800712c:	d14d      	bne.n	80071ca <_malloc_r+0xde>
 800712e:	6834      	ldr	r4, [r6, #0]
 8007130:	4626      	mov	r6, r4
 8007132:	2e00      	cmp	r6, #0
 8007134:	d140      	bne.n	80071b8 <_malloc_r+0xcc>
 8007136:	6823      	ldr	r3, [r4, #0]
 8007138:	4631      	mov	r1, r6
 800713a:	4638      	mov	r0, r7
 800713c:	eb04 0803 	add.w	r8, r4, r3
 8007140:	f000 f878 	bl	8007234 <_sbrk_r>
 8007144:	4580      	cmp	r8, r0
 8007146:	d13a      	bne.n	80071be <_malloc_r+0xd2>
 8007148:	6821      	ldr	r1, [r4, #0]
 800714a:	3503      	adds	r5, #3
 800714c:	1a6d      	subs	r5, r5, r1
 800714e:	f025 0503 	bic.w	r5, r5, #3
 8007152:	3508      	adds	r5, #8
 8007154:	2d0c      	cmp	r5, #12
 8007156:	bf38      	it	cc
 8007158:	250c      	movcc	r5, #12
 800715a:	4638      	mov	r0, r7
 800715c:	4629      	mov	r1, r5
 800715e:	f7ff ffa5 	bl	80070ac <sbrk_aligned>
 8007162:	3001      	adds	r0, #1
 8007164:	d02b      	beq.n	80071be <_malloc_r+0xd2>
 8007166:	6823      	ldr	r3, [r4, #0]
 8007168:	442b      	add	r3, r5
 800716a:	6023      	str	r3, [r4, #0]
 800716c:	e00e      	b.n	800718c <_malloc_r+0xa0>
 800716e:	6822      	ldr	r2, [r4, #0]
 8007170:	1b52      	subs	r2, r2, r5
 8007172:	d41e      	bmi.n	80071b2 <_malloc_r+0xc6>
 8007174:	2a0b      	cmp	r2, #11
 8007176:	d916      	bls.n	80071a6 <_malloc_r+0xba>
 8007178:	1961      	adds	r1, r4, r5
 800717a:	42a3      	cmp	r3, r4
 800717c:	6025      	str	r5, [r4, #0]
 800717e:	bf18      	it	ne
 8007180:	6059      	strne	r1, [r3, #4]
 8007182:	6863      	ldr	r3, [r4, #4]
 8007184:	bf08      	it	eq
 8007186:	6031      	streq	r1, [r6, #0]
 8007188:	5162      	str	r2, [r4, r5]
 800718a:	604b      	str	r3, [r1, #4]
 800718c:	4638      	mov	r0, r7
 800718e:	f104 060b 	add.w	r6, r4, #11
 8007192:	f000 f865 	bl	8007260 <__malloc_unlock>
 8007196:	f026 0607 	bic.w	r6, r6, #7
 800719a:	1d23      	adds	r3, r4, #4
 800719c:	1af2      	subs	r2, r6, r3
 800719e:	d0b6      	beq.n	800710e <_malloc_r+0x22>
 80071a0:	1b9b      	subs	r3, r3, r6
 80071a2:	50a3      	str	r3, [r4, r2]
 80071a4:	e7b3      	b.n	800710e <_malloc_r+0x22>
 80071a6:	6862      	ldr	r2, [r4, #4]
 80071a8:	42a3      	cmp	r3, r4
 80071aa:	bf0c      	ite	eq
 80071ac:	6032      	streq	r2, [r6, #0]
 80071ae:	605a      	strne	r2, [r3, #4]
 80071b0:	e7ec      	b.n	800718c <_malloc_r+0xa0>
 80071b2:	4623      	mov	r3, r4
 80071b4:	6864      	ldr	r4, [r4, #4]
 80071b6:	e7b2      	b.n	800711e <_malloc_r+0x32>
 80071b8:	4634      	mov	r4, r6
 80071ba:	6876      	ldr	r6, [r6, #4]
 80071bc:	e7b9      	b.n	8007132 <_malloc_r+0x46>
 80071be:	230c      	movs	r3, #12
 80071c0:	4638      	mov	r0, r7
 80071c2:	603b      	str	r3, [r7, #0]
 80071c4:	f000 f84c 	bl	8007260 <__malloc_unlock>
 80071c8:	e7a1      	b.n	800710e <_malloc_r+0x22>
 80071ca:	6025      	str	r5, [r4, #0]
 80071cc:	e7de      	b.n	800718c <_malloc_r+0xa0>
 80071ce:	bf00      	nop
 80071d0:	20000280 	.word	0x20000280

080071d4 <_realloc_r>:
 80071d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80071d8:	4680      	mov	r8, r0
 80071da:	4614      	mov	r4, r2
 80071dc:	460e      	mov	r6, r1
 80071de:	b921      	cbnz	r1, 80071ea <_realloc_r+0x16>
 80071e0:	4611      	mov	r1, r2
 80071e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80071e6:	f7ff bf81 	b.w	80070ec <_malloc_r>
 80071ea:	b92a      	cbnz	r2, 80071f8 <_realloc_r+0x24>
 80071ec:	f7ff ff16 	bl	800701c <_free_r>
 80071f0:	4625      	mov	r5, r4
 80071f2:	4628      	mov	r0, r5
 80071f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80071f8:	f000 f838 	bl	800726c <_malloc_usable_size_r>
 80071fc:	4284      	cmp	r4, r0
 80071fe:	4607      	mov	r7, r0
 8007200:	d802      	bhi.n	8007208 <_realloc_r+0x34>
 8007202:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007206:	d812      	bhi.n	800722e <_realloc_r+0x5a>
 8007208:	4621      	mov	r1, r4
 800720a:	4640      	mov	r0, r8
 800720c:	f7ff ff6e 	bl	80070ec <_malloc_r>
 8007210:	4605      	mov	r5, r0
 8007212:	2800      	cmp	r0, #0
 8007214:	d0ed      	beq.n	80071f2 <_realloc_r+0x1e>
 8007216:	42bc      	cmp	r4, r7
 8007218:	4622      	mov	r2, r4
 800721a:	4631      	mov	r1, r6
 800721c:	bf28      	it	cs
 800721e:	463a      	movcs	r2, r7
 8007220:	f7ff fed4 	bl	8006fcc <memcpy>
 8007224:	4631      	mov	r1, r6
 8007226:	4640      	mov	r0, r8
 8007228:	f7ff fef8 	bl	800701c <_free_r>
 800722c:	e7e1      	b.n	80071f2 <_realloc_r+0x1e>
 800722e:	4635      	mov	r5, r6
 8007230:	e7df      	b.n	80071f2 <_realloc_r+0x1e>
	...

08007234 <_sbrk_r>:
 8007234:	b538      	push	{r3, r4, r5, lr}
 8007236:	2300      	movs	r3, #0
 8007238:	4d05      	ldr	r5, [pc, #20]	; (8007250 <_sbrk_r+0x1c>)
 800723a:	4604      	mov	r4, r0
 800723c:	4608      	mov	r0, r1
 800723e:	602b      	str	r3, [r5, #0]
 8007240:	f7fc fa20 	bl	8003684 <_sbrk>
 8007244:	1c43      	adds	r3, r0, #1
 8007246:	d102      	bne.n	800724e <_sbrk_r+0x1a>
 8007248:	682b      	ldr	r3, [r5, #0]
 800724a:	b103      	cbz	r3, 800724e <_sbrk_r+0x1a>
 800724c:	6023      	str	r3, [r4, #0]
 800724e:	bd38      	pop	{r3, r4, r5, pc}
 8007250:	20000288 	.word	0x20000288

08007254 <__malloc_lock>:
 8007254:	4801      	ldr	r0, [pc, #4]	; (800725c <__malloc_lock+0x8>)
 8007256:	f000 b811 	b.w	800727c <__retarget_lock_acquire_recursive>
 800725a:	bf00      	nop
 800725c:	2000028c 	.word	0x2000028c

08007260 <__malloc_unlock>:
 8007260:	4801      	ldr	r0, [pc, #4]	; (8007268 <__malloc_unlock+0x8>)
 8007262:	f000 b80c 	b.w	800727e <__retarget_lock_release_recursive>
 8007266:	bf00      	nop
 8007268:	2000028c 	.word	0x2000028c

0800726c <_malloc_usable_size_r>:
 800726c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007270:	1f18      	subs	r0, r3, #4
 8007272:	2b00      	cmp	r3, #0
 8007274:	bfbc      	itt	lt
 8007276:	580b      	ldrlt	r3, [r1, r0]
 8007278:	18c0      	addlt	r0, r0, r3
 800727a:	4770      	bx	lr

0800727c <__retarget_lock_acquire_recursive>:
 800727c:	4770      	bx	lr

0800727e <__retarget_lock_release_recursive>:
 800727e:	4770      	bx	lr

08007280 <_init>:
 8007280:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007282:	bf00      	nop
 8007284:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007286:	bc08      	pop	{r3}
 8007288:	469e      	mov	lr, r3
 800728a:	4770      	bx	lr

0800728c <_fini>:
 800728c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800728e:	bf00      	nop
 8007290:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007292:	bc08      	pop	{r3}
 8007294:	469e      	mov	lr, r3
 8007296:	4770      	bx	lr
